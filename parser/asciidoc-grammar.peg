{
package parser 

import "github.com/bytesparadise/libasciidoc/types"

// *****************************************************************************************
// This file is generated after its sibling `asciidoc-grammar.peg` file. DO NOT MODIFY !
// *****************************************************************************************

}

Document <- frontmatter:(FrontMatter?) blocks:(DocumentBlock*) EOF {
    if frontmatter != nil {
	    return types.NewDocument(frontmatter.(*types.FrontMatter), blocks.([]interface{}))
    }
	return types.NewDocument(nil, blocks.([]interface{}))
}

DocumentBlock <- content:(Section / StandaloneBlock) {
    return content.(types.DocElement), nil
}

StandaloneBlock <- DocumentAttributeDeclaration / DocumentAttributeReset / List / BlockImage / DelimitedBlock / Paragraph / ElementAttribute / BlankLine //TODO: should Paragraph be the last type ?

// ------------------------------------------
// Front Matter
// ------------------------------------------
FrontMatter <- YamlFrontMatter 

FrontMatter <- YamlFrontMatterToken content:(!YamlFrontMatterToken .)* YamlFrontMatterToken {
    return types.NewYamlFrontMatter(content.([]interface{}))
}

YamlFrontMatterToken  <- "---" EOL

// ------------------------------------------
// Sections
// ------------------------------------------
Section <- Section1 / Section2 / Section3 / Section4 / Section5 / Section6

Section1 <- heading:(Heading1) elements:(Section1Block*) {
    return types.NewSection(heading.(*types.Heading), elements.([]interface{}))
}

Section1Block <- content:(Section2 / Section3 / Section4 / Section5 / Section6 / StandaloneBlock) {
    return content.(types.DocElement), nil
}

Section2 <- heading:(Heading2) elements:(Section2Block*) {
    return types.NewSection(heading.(*types.Heading), elements.([]interface{}))
}

Section2Block <- !Section1 !Section2 content:(Section3 / Section4 / Section5 / Section6 / StandaloneBlock) {
    return content.(types.DocElement), nil
}

Section3 <- heading:(Heading3) elements:(Section3Block*) &(Section3)* {
    return types.NewSection(heading.(*types.Heading), elements.([]interface{}))
}

Section3Block <- !Section1 !Section2 !Section3 content:(Section4 / Section5 / Section6 / StandaloneBlock) {
    return content.(types.DocElement), nil
}

Section4 <- heading:(Heading4) elements:(Section4Block*) {
    return types.NewSection(heading.(*types.Heading), elements.([]interface{}))
}

Section4Block <- !Section1 !Section2 !Section3 !Section4 content:(Section5 / Section6 / StandaloneBlock) {
    return content.(types.DocElement), nil
}

Section5 <- heading:(Heading5) elements:(Section5Block*) {
    return types.NewSection(heading.(*types.Heading), elements.([]interface{}))
}

Section5Block <- !Section1 !Section2 !Section3 !Section4 !Section5 content:(Section6 / StandaloneBlock) {
    return content.(types.DocElement), nil
}

Section6 <- heading:(Heading6) elements:(Section6Block*) {
    return types.NewSection(heading.(*types.Heading), elements.([]interface{}))
}

Section6Block <- !Section1 !Section2 !Section3 !Section4 !Section5 !Section6 content:(StandaloneBlock) {
    return content.(types.DocElement), nil
}

// ------------------------------------------
// Headings
// ------------------------------------------
Heading <- Heading1 / Heading2 / Heading3 / Heading4 / Heading5 / Heading6

Heading1 <- attributes:(ElementAttribute)* level:("=") WS+ content:InlineContent (BlankLine? / EOF) { //TODO: replace `(BlankLine? / EOF)` with `EOL` to allow for immediate attributes or any other content ?
     return types.NewHeading(1, content.(*types.InlineContent), attributes.([]interface{}))
}

Heading2 <- attributes:(ElementAttribute)* level:("==") WS+ content:InlineContent (BlankLine? / EOF) {
     return types.NewHeading(2, content.(*types.InlineContent), attributes.([]interface{}))
}

Heading3 <- attributes:(ElementAttribute)* level:("===") WS+ content:InlineContent (BlankLine? / EOF) {
     return types.NewHeading(3, content.(*types.InlineContent), attributes.([]interface{}))
}

Heading4 <- attributes:(ElementAttribute)* level:("====") WS+ content:InlineContent (BlankLine? / EOF) {
     return types.NewHeading(4, content.(*types.InlineContent), attributes.([]interface{}))
}

Heading5 <- attributes:(ElementAttribute)* level:("=====") WS+ content:InlineContent (BlankLine? / EOF) {
     return types.NewHeading(5, content.(*types.InlineContent), attributes.([]interface{}))
}

Heading6 <- attributes:(ElementAttribute)* level:("======") WS+ content:InlineContent (BlankLine? / EOF) {
     return types.NewHeading(6, content.(*types.InlineContent), attributes.([]interface{}))
}


// ------------------------------------------
// Document Attributes
// ------------------------------------------
DocumentAttributeDeclaration <- DocumentAttributeDeclarationWithNameOnly / DocumentAttributeDeclarationWithNameAndValue 

DocumentAttributeDeclarationWithNameOnly <- ":" name:(AttributeName) ":" WS* EOL {
    return types.NewDocumentAttributeDeclaration(name.([]interface{}), nil)
}

DocumentAttributeDeclarationWithNameAndValue <- ":" name:(AttributeName) ":" WS+ value:(!NEWLINE .)* EOL {
    return types.NewDocumentAttributeDeclaration(name.([]interface{}), value.([]interface{}))
}

DocumentAttributeReset <- DocumentAttributeResetWithHeadingBangSymbol / DocumentAttributeResetWithTrailingBangSymbol

DocumentAttributeResetWithHeadingBangSymbol <- ":!" name:(AttributeName) ":" WS* EOL {
    return types.NewDocumentAttributeReset(name.([]interface{}))
}

DocumentAttributeResetWithTrailingBangSymbol <- ":" name:(AttributeName) "!:" WS* EOL {
    return types.NewDocumentAttributeReset(name.([]interface{}))
}


DocumentAttributeSubstitution <- "{" name:(AttributeName) "}" {
    return types.NewDocumentAttributeSubstitution(name.([]interface{}))
}

// AttributeName must be at least one character long, 
// must begin with a word character (A-Z, a-z, 0-9 or _) and 
// must only contain word characters and hyphens ('-').
AttributeName <- ([A-Z] / [a-z] / [0-9] / "_") ([A-Z] / [a-z] / [0-9] / "-")*

// ------------------------------------------
// List Items
// ------------------------------------------
List <- attributes:(ElementAttribute)* 
    // list items can be followed by an optional, single blank line
    elements:(ListItem BlankLine?)+ {
    return types.NewList(elements.([]interface{}), attributes.([]interface{}))
}

ListItem <- WS* level:('*'+ / '-') WS+ content:(ListItemContent) {
    return types.NewListItem(level, content.(*types.ListItemContent), nil)
}

ListItemContent <- lines:(!(WS* ('*'+ / '-') WS+) InlineContent)+ {
    return types.NewListItemContent(c.text, lines.([]interface{}))
} 
// ------------------------------------------
// Paragraphs
// ------------------------------------------
// a paragraph is a group of line ending with a blank line (or end of file)
Paragraph <- attributes:(ElementAttribute)* lines:(InlineContent)+ {
    return types.NewParagraph(c.text, lines.([]interface{}), attributes.([]interface{}))
} 

// an inline content element may start with and end with spaces, 
// but it must contain at least an inline element (image, quoted text, external link, document attribute substitution, word, etc.)
InlineContent <- elements:(WS* InlineElement WS*)+ EOL {
    return types.NewInlineContent(c.text, elements.([]interface{}))
} 

InlineElement <- InlineImage / QuotedText / ExternalLink / DocumentAttributeSubstitution / Word

// ------------------------------------------
// Quoted Texts (bold, italic and monospace)
// ------------------------------------------
QuotedText <- BoldText / ItalicText / MonospaceText

BoldText <- '*' content:(QuotedTextContent) '*' {
    return types.NewQuotedText(types.Bold, content.([]interface{}))
}

ItalicText <- '_' content:(QuotedTextContent) '_' {
    return types.NewQuotedText(types.Italic, content.([]interface{}))
}

MonospaceText <- '`' content:(QuotedTextContent) '`' {
    return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

QuotedTextContent <- QuotedTextContentElement (WS+ QuotedTextContentElement)*

QuotedTextContentElement <- QuotedText / QuotedTextContentWord / InvalidQuotedTextContentWord

QuotedTextContentWord <- (!NEWLINE !WS !'*' !'_' !'`' .)+ // cannot have '*', '_' or '`' within
InvalidQuotedTextContentWord <- (!NEWLINE !WS  .)+ // can have '*', '_' or '`' within, maybe because the user made an error (extra or missing space, for example)

// ------------------------------------------
// Links
// ------------------------------------------
ExternalLink <- url:(URL_SCHEME URL) text:('[' (URL_TEXT)* ']')? {
    if text != nil {
        return types.NewExternalLink(url.([]interface{}), text.([]interface{}))
    }
    return types.NewExternalLink(url.([]interface{}), nil)
}

// ------------------------------------------
// Images
// ------------------------------------------
BlockImage <- attributes:(ElementAttribute)* image:BlockImageMacro  WS* EOL {
    // here we can ignore the blank line in the returned element
    return types.NewBlockImage(c.text, *image.(*types.ImageMacro), attributes.([]interface{}))
}

BlockImageMacro <- "image::" path:(URL) '[' attributes:(URL_TEXT?) ']' {
    return types.NewImageMacro(c.text, path.(string), attributes)
}

InlineImage <- image:InlineImageMacro {
    // here we can ignore the blank line in the returned element
    return types.NewInlineImage(c.text, *image.(*types.ImageMacro))
}

InlineImageMacro <- "image:" !":" path:(URL) '[' attributes:(URL_TEXT?) ']' {
    return types.NewImageMacro(c.text, path.(string), attributes)
}

// ------------------------------------------
// Delimited Blocks
// ------------------------------------------

DelimitedBlock <- SourceBlock

SourceBlock <- SourceBlockDelimiter NEWLINE content:(SourceBlockLine)*  SourceBlockDelimiter {
    return types.NewDelimitedBlock(types.SourceBlock, content.([]interface{}))
}

SourceBlockDelimiter <- "```"

SourceBlockLine <- (!EOL .)* NEWLINE

// ------------------------------------------
// Meta Elements
// ------------------------------------------
ElementAttribute <- meta:(ElementLink / ElementID / ElementTitle) 

// a link attached to an element, such as a BlockImage
ElementLink <- "[" WS* "link" WS* "=" WS* path:URL WS* "]" EOL {
    return types.NewElementLink(path.(string))
}

// an id attached to an element, such as a BlockImage
ElementID <- "[" WS* '#' id:(ID) WS* "]" EOL {
    return types.NewElementID(id.(string))
}

// a title attached to an element, such as a BlockImage
ElementTitle <- "." !WS title:(!NEWLINE .)+ EOL {
    return types.NewElementTitle(title.([]interface{}))
}

// ------------------------------------------
// Base Types
// ------------------------------------------
Word <- (!NEWLINE !WS .)+ {
    return string(c.text), nil
}

BlankLine <- !EOF WS* EOL {
    return types.NewBlankLine()
}

URL <- (!NEWLINE !WS !'[' !']' .)+ {
    return string(c.text), nil
}

ID <- (!NEWLINE !WS !'[' !']' .)+ {
    return string(c.text), nil
}

URL_TEXT <- (!NEWLINE !'[' !']' .)+ {
    return string(c.text), nil
}

URL_SCHEME <- "http://" / "https://" / "ftp://" / "irc://" / "mailto:"

DIGIT    <- [0-9]

NEWLINE  <- "\r\n" / '\r' / '\n'

WS       <- ' ' / '\t' {
        return string(c.text), nil
}

EOF      <- !.

EOL      <- NEWLINE / EOF