// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "PreflightDocument",
			pos:  position{line: 17, col: 1, offset: 290},
			expr: &actionExpr{
				pos: position{line: 17, col: 22, offset: 311},
				run: (*parser).callonPreflightDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 22, offset: 311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 22, offset: 311},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 35, offset: 324},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 35, offset: 324},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 49, offset: 338},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 57, offset: 346},
								name: "DocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 73, offset: 362},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 446},
			expr: &actionExpr{
				pos: position{line: 21, col: 42, offset: 487},
				run: (*parser).callonPreflightDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 42, offset: 487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 42, offset: 487},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 55, offset: 500},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 55, offset: 500},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 69, offset: 514},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 77, offset: 522},
								name: "DocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 113, offset: 558},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 28, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 28, col: 19, offset: 771},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 28, col: 19, offset: 771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 28, col: 19, offset: 771},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 27, offset: 779},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 27, offset: 779},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 44, offset: 796},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 28, col: 52, offset: 804},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 52, offset: 804},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 37, col: 1, offset: 1053},
			expr: &actionExpr{
				pos: position{line: 37, col: 18, offset: 1070},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 37, col: 18, offset: 1070},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 37, col: 18, offset: 1070},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 19, offset: 1071},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1080},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 38, col: 12, offset: 1087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 38, col: 12, offset: 1087},
										name: "FrontMatter",
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 1109},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 11, offset: 1128},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 11, offset: 1153},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 42, col: 11, offset: 1177},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1202},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1224},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1243},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1294},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1318},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1358},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1392},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1423},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1448},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 55, col: 1, offset: 1486},
			expr: &labeledExpr{
				pos:   position{line: 55, col: 39, offset: 1524},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 55, col: 46, offset: 1531},
					expr: &ruleRefExpr{
						pos:  position{line: 55, col: 47, offset: 1532},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 57, col: 1, offset: 1569},
			expr: &actionExpr{
				pos: position{line: 57, col: 38, offset: 1606},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 57, col: 38, offset: 1606},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 57, col: 38, offset: 1606},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 39, offset: 1607},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1616},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 58, col: 12, offset: 1623},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 58, col: 12, offset: 1623},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 59, col: 11, offset: 1648},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 60, col: 11, offset: 1672},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 61, col: 11, offset: 1697},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1719},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1738},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1789},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1813},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1853},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1887},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1918},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1943},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 76, col: 1, offset: 2089},
			expr: &ruleRefExpr{
				pos:  position{line: 76, col: 16, offset: 2104},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 78, col: 1, offset: 2122},
			expr: &actionExpr{
				pos: position{line: 78, col: 20, offset: 2141},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 78, col: 20, offset: 2141},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 78, col: 20, offset: 2141},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 41, offset: 2162},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 49, offset: 2170},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2171},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 75, offset: 2196},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 82, col: 1, offset: 2276},
			expr: &seqExpr{
				pos: position{line: 82, col: 26, offset: 2301},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 82, col: 26, offset: 2301},
						val:        "---",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 82, col: 32, offset: 2307},
						expr: &ruleRefExpr{
							pos:  position{line: 82, col: 32, offset: 2307},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 36, offset: 2311},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 84, col: 1, offset: 2316},
			expr: &actionExpr{
				pos: position{line: 84, col: 27, offset: 2342},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 27, offset: 2342},
					expr: &actionExpr{
						pos: position{line: 84, col: 28, offset: 2343},
						run: (*parser).callonYamlFrontMatterContent3,
						expr: &oneOrMoreExpr{
							pos: position{line: 84, col: 28, offset: 2343},
							expr: &seqExpr{
								pos: position{line: 84, col: 29, offset: 2344},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 84, col: 29, offset: 2344},
										expr: &ruleRefExpr{
											pos:  position{line: 84, col: 30, offset: 2345},
											name: "YamlFrontMatterToken",
										},
									},
									&anyMatcher{
										line: 84, col: 52, offset: 2367,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 93, col: 1, offset: 2567},
			expr: &actionExpr{
				pos: position{line: 93, col: 19, offset: 2585},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 93, col: 19, offset: 2585},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 93, col: 19, offset: 2585},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 93, col: 23, offset: 2589},
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 23, offset: 2589},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 27, offset: 2593},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 34, offset: 2600},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 49, offset: 2615},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 93, col: 53, offset: 2619},
								expr: &ruleRefExpr{
									pos:  position{line: 93, col: 53, offset: 2619},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 71, offset: 2637},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 9, offset: 2649},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 94, col: 18, offset: 2658},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 18, offset: 2658},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 95, col: 9, offset: 2685},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 19, offset: 2695},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 19, offset: 2695},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 100, col: 1, offset: 2804},
			expr: &choiceExpr{
				pos: position{line: 100, col: 20, offset: 2823},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 100, col: 20, offset: 2823},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 100, col: 48, offset: 2851},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 102, col: 1, offset: 2881},
			expr: &actionExpr{
				pos: position{line: 102, col: 30, offset: 2910},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 102, col: 30, offset: 2910},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 102, col: 30, offset: 2910},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 30, offset: 2910},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 102, col: 34, offset: 2914},
							expr: &litMatcher{
								pos:        position{line: 102, col: 35, offset: 2915},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 39, offset: 2919},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 102, col: 48, offset: 2928},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 48, offset: 2928},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 65, offset: 2945},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 106, col: 1, offset: 3015},
			expr: &actionExpr{
				pos: position{line: 106, col: 33, offset: 3047},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 106, col: 33, offset: 3047},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 106, col: 33, offset: 3047},
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 33, offset: 3047},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 106, col: 37, offset: 3051},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 106, col: 48, offset: 3062},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 56, offset: 3070},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 72, offset: 3086},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 110, col: 1, offset: 3165},
			expr: &actionExpr{
				pos: position{line: 110, col: 19, offset: 3183},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 110, col: 19, offset: 3183},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 19, offset: 3183},
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 19, offset: 3183},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 23, offset: 3187},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 33, offset: 3197},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 53, offset: 3217},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 59, offset: 3223},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 60, offset: 3224},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 82, offset: 3246},
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 82, offset: 3246},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 110, col: 86, offset: 3250},
							expr: &litMatcher{
								pos:        position{line: 110, col: 86, offset: 3250},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 91, offset: 3255},
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 91, offset: 3255},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 115, col: 1, offset: 3397},
			expr: &actionExpr{
				pos: position{line: 115, col: 23, offset: 3419},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 115, col: 23, offset: 3419},
					expr: &choiceExpr{
						pos: position{line: 115, col: 24, offset: 3420},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 115, col: 24, offset: 3420},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 115, col: 37, offset: 3433},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 115, col: 37, offset: 3433},
										expr: &litMatcher{
											pos:        position{line: 115, col: 38, offset: 3434},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 115, col: 42, offset: 3438},
										expr: &litMatcher{
											pos:        position{line: 115, col: 43, offset: 3439},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 115, col: 47, offset: 3443},
										expr: &ruleRefExpr{
											pos:  position{line: 115, col: 48, offset: 3444},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 115, col: 56, offset: 3452,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 119, col: 1, offset: 3493},
			expr: &actionExpr{
				pos: position{line: 119, col: 24, offset: 3516},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 119, col: 24, offset: 3516},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 119, col: 24, offset: 3516},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 119, col: 28, offset: 3520},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 119, col: 35, offset: 3527},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 119, col: 35, offset: 3527},
									expr: &choiceExpr{
										pos: position{line: 119, col: 36, offset: 3528},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 119, col: 36, offset: 3528},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 119, col: 49, offset: 3541},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 119, col: 49, offset: 3541},
														expr: &litMatcher{
															pos:        position{line: 119, col: 50, offset: 3542},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 119, col: 54, offset: 3546},
														expr: &ruleRefExpr{
															pos:  position{line: 119, col: 55, offset: 3547},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 119, col: 60, offset: 3552,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 4, offset: 3593},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 127, col: 1, offset: 3754},
			expr: &actionExpr{
				pos: position{line: 127, col: 21, offset: 3774},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 127, col: 21, offset: 3774},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 21, offset: 3774},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 21, offset: 3774},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 127, col: 25, offset: 3778},
							expr: &litMatcher{
								pos:        position{line: 127, col: 26, offset: 3779},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 30, offset: 3783},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 128, col: 9, offset: 3802},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 128, col: 10, offset: 3803},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 128, col: 10, offset: 3803},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 128, col: 10, offset: 3803},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 128, col: 21, offset: 3814},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 45, offset: 3838},
													expr: &litMatcher{
														pos:        position{line: 128, col: 45, offset: 3838},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 50, offset: 3843},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 58, offset: 3851},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 59, offset: 3852},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 82, offset: 3875},
													expr: &litMatcher{
														pos:        position{line: 128, col: 82, offset: 3875},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 87, offset: 3880},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 97, offset: 3890},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 98, offset: 3891},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 130, col: 15, offset: 4008},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 130, col: 15, offset: 4008},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 130, col: 15, offset: 4008},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 130, col: 24, offset: 4017},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 130, col: 46, offset: 4039},
													expr: &litMatcher{
														pos:        position{line: 130, col: 46, offset: 4039},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 130, col: 51, offset: 4044},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 130, col: 61, offset: 4054},
														expr: &ruleRefExpr{
															pos:  position{line: 130, col: 62, offset: 4055},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 132, col: 13, offset: 4164},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 137, col: 1, offset: 4294},
			expr: &choiceExpr{
				pos: position{line: 137, col: 27, offset: 4320},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 137, col: 27, offset: 4320},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 137, col: 27, offset: 4320},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 137, col: 27, offset: 4320},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 32, offset: 4325},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 137, col: 39, offset: 4332},
									expr: &choiceExpr{
										pos: position{line: 137, col: 40, offset: 4333},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 137, col: 40, offset: 4333},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 137, col: 52, offset: 4345},
												name: "Spaces",
											},
											&actionExpr{
												pos: position{line: 137, col: 61, offset: 4354},
												run: (*parser).callonDocumentRevisionNumber10,
												expr: &seqExpr{
													pos: position{line: 137, col: 62, offset: 4355},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 137, col: 62, offset: 4355},
															expr: &ruleRefExpr{
																pos:  position{line: 137, col: 63, offset: 4356},
																name: "EOL",
															},
														},
														&notExpr{
															pos: position{line: 137, col: 67, offset: 4360},
															expr: &litMatcher{
																pos:        position{line: 137, col: 68, offset: 4361},
																val:        ",",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 137, col: 72, offset: 4365},
															expr: &litMatcher{
																pos:        position{line: 137, col: 73, offset: 4366},
																val:        ":",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 137, col: 78, offset: 4371,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 141, col: 5, offset: 4447},
						run: (*parser).callonDocumentRevisionNumber19,
						expr: &seqExpr{
							pos: position{line: 141, col: 5, offset: 4447},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 141, col: 5, offset: 4447},
									expr: &litMatcher{
										pos:        position{line: 141, col: 5, offset: 4447},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 141, col: 11, offset: 4453},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 141, col: 18, offset: 4460},
									expr: &choiceExpr{
										pos: position{line: 141, col: 19, offset: 4461},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 141, col: 19, offset: 4461},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 141, col: 31, offset: 4473},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 141, col: 41, offset: 4483},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 141, col: 41, offset: 4483},
														expr: &ruleRefExpr{
															pos:  position{line: 141, col: 42, offset: 4484},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 141, col: 46, offset: 4488},
														expr: &litMatcher{
															pos:        position{line: 141, col: 47, offset: 4489},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 141, col: 51, offset: 4493},
														expr: &litMatcher{
															pos:        position{line: 141, col: 52, offset: 4494},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 141, col: 57, offset: 4499,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 141, col: 62, offset: 4504},
									expr: &ruleRefExpr{
										pos:  position{line: 141, col: 62, offset: 4504},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 141, col: 66, offset: 4508},
									expr: &litMatcher{
										pos:        position{line: 141, col: 67, offset: 4509},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 145, col: 1, offset: 4549},
			expr: &actionExpr{
				pos: position{line: 145, col: 25, offset: 4573},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 145, col: 25, offset: 4573},
					expr: &choiceExpr{
						pos: position{line: 145, col: 26, offset: 4574},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 145, col: 26, offset: 4574},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 145, col: 38, offset: 4586},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 145, col: 47, offset: 4595},
								run: (*parser).callonDocumentRevisionDate6,
								expr: &seqExpr{
									pos: position{line: 145, col: 48, offset: 4596},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 145, col: 48, offset: 4596},
											expr: &ruleRefExpr{
												pos:  position{line: 145, col: 49, offset: 4597},
												name: "EOL",
											},
										},
										&notExpr{
											pos: position{line: 145, col: 53, offset: 4601},
											expr: &litMatcher{
												pos:        position{line: 145, col: 54, offset: 4602},
												val:        ":",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 145, col: 59, offset: 4607,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 151, col: 1, offset: 4682},
			expr: &actionExpr{
				pos: position{line: 151, col: 27, offset: 4708},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 151, col: 27, offset: 4708},
					expr: &choiceExpr{
						pos: position{line: 151, col: 28, offset: 4709},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 151, col: 28, offset: 4709},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 151, col: 40, offset: 4721},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 151, col: 49, offset: 4730},
								run: (*parser).callonDocumentRevisionRemark6,
								expr: &seqExpr{
									pos: position{line: 151, col: 50, offset: 4731},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 151, col: 50, offset: 4731},
											expr: &ruleRefExpr{
												pos:  position{line: 151, col: 51, offset: 4732},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 151, col: 56, offset: 4737,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 160, col: 1, offset: 4927},
			expr: &choiceExpr{
				pos: position{line: 160, col: 33, offset: 4959},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 160, col: 33, offset: 4959},
						run: (*parser).callonDocumentAttributeDeclaration2,
						expr: &seqExpr{
							pos: position{line: 160, col: 33, offset: 4959},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 160, col: 33, offset: 4959},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 160, col: 37, offset: 4963},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 43, offset: 4969},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 160, col: 66, offset: 4992},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 160, col: 70, offset: 4996},
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 70, offset: 4996},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 160, col: 74, offset: 5000},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 162, col: 5, offset: 5079},
						run: (*parser).callonDocumentAttributeDeclaration11,
						expr: &seqExpr{
							pos: position{line: 162, col: 5, offset: 5079},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 162, col: 5, offset: 5079},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 162, col: 9, offset: 5083},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 15, offset: 5089},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 162, col: 38, offset: 5112},
									val:        ":",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 162, col: 42, offset: 5116},
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 42, offset: 5116},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 162, col: 46, offset: 5120},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 53, offset: 5127},
										name: "DocumentAttributeValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 162, col: 77, offset: 5151},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 169, col: 1, offset: 5399},
			expr: &actionExpr{
				pos: position{line: 169, col: 26, offset: 5424},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 169, col: 26, offset: 5424},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 169, col: 27, offset: 5425},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 169, col: 27, offset: 5425},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 35, offset: 5433},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 43, offset: 5441},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 169, col: 51, offset: 5449},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 169, col: 56, offset: 5454},
							expr: &choiceExpr{
								pos: position{line: 169, col: 57, offset: 5455},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 169, col: 57, offset: 5455},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 65, offset: 5463},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 73, offset: 5471},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 169, col: 81, offset: 5479},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 173, col: 1, offset: 5521},
			expr: &actionExpr{
				pos: position{line: 173, col: 27, offset: 5547},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 173, col: 27, offset: 5547},
					expr: &seqExpr{
						pos: position{line: 173, col: 28, offset: 5548},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 173, col: 28, offset: 5548},
								expr: &ruleRefExpr{
									pos:  position{line: 173, col: 29, offset: 5549},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 173, col: 38, offset: 5558,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 177, col: 1, offset: 5598},
			expr: &choiceExpr{
				pos: position{line: 177, col: 27, offset: 5624},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 177, col: 27, offset: 5624},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 177, col: 27, offset: 5624},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 177, col: 27, offset: 5624},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 177, col: 32, offset: 5629},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 38, offset: 5635},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 177, col: 61, offset: 5658},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 177, col: 65, offset: 5662},
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 65, offset: 5662},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 69, offset: 5666},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 5734},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 179, col: 5, offset: 5734},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 5, offset: 5734},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 9, offset: 5738},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 15, offset: 5744},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 38, offset: 5767},
									val:        "!:",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 179, col: 43, offset: 5772},
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 43, offset: 5772},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 47, offset: 5776},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 183, col: 1, offset: 5843},
			expr: &actionExpr{
				pos: position{line: 183, col: 34, offset: 5876},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 183, col: 34, offset: 5876},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 183, col: 34, offset: 5876},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 183, col: 38, offset: 5880},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 44, offset: 5886},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 183, col: 67, offset: 5909},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 190, col: 1, offset: 6097},
			expr: &actionExpr{
				pos: position{line: 190, col: 22, offset: 6118},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 190, col: 22, offset: 6118},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 190, col: 28, offset: 6124},
						expr: &ruleRefExpr{
							pos:  position{line: 190, col: 29, offset: 6125},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 194, col: 1, offset: 6215},
			expr: &actionExpr{
				pos: position{line: 194, col: 21, offset: 6235},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 194, col: 21, offset: 6235},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 194, col: 21, offset: 6235},
							expr: &choiceExpr{
								pos: position{line: 194, col: 23, offset: 6237},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 194, col: 23, offset: 6237},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 29, offset: 6243},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 35, offset: 6249},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 5, offset: 6325},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 195, col: 11, offset: 6331},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 195, col: 11, offset: 6331},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 196, col: 9, offset: 6352},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 9, offset: 6376},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6399},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6427},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6455},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6482},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6509},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6546},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6574},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttributePrefixMatch",
			pos:  position{line: 208, col: 1, offset: 6677},
			expr: &choiceExpr{
				pos: position{line: 208, col: 32, offset: 6708},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 208, col: 32, offset: 6708},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 38, offset: 6714},
						val:        ".",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 44, offset: 6720},
						val:        "#",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 211, col: 1, offset: 6805},
			expr: &choiceExpr{
				pos: position{line: 211, col: 24, offset: 6828},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 24, offset: 6828},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 42, offset: 6846},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 213, col: 1, offset: 6863},
			expr: &choiceExpr{
				pos: position{line: 213, col: 14, offset: 6876},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 14, offset: 6876},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 213, col: 14, offset: 6876},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 14, offset: 6876},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 19, offset: 6881},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 23, offset: 6885},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 27, offset: 6889},
									val:        "]]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 213, col: 32, offset: 6894},
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 32, offset: 6894},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 36, offset: 6898},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 6951},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 215, col: 5, offset: 6951},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 215, col: 5, offset: 6951},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 215, col: 10, offset: 6956},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 14, offset: 6960},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 18, offset: 6964},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 215, col: 23, offset: 6969},
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 23, offset: 6969},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 215, col: 27, offset: 6973},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 219, col: 1, offset: 7025},
			expr: &actionExpr{
				pos: position{line: 219, col: 20, offset: 7044},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 219, col: 20, offset: 7044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 20, offset: 7044},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 219, col: 25, offset: 7049},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 29, offset: 7053},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 33, offset: 7057},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 219, col: 38, offset: 7062},
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 38, offset: 7062},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 225, col: 1, offset: 7336},
			expr: &actionExpr{
				pos: position{line: 225, col: 17, offset: 7352},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 225, col: 17, offset: 7352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 17, offset: 7352},
							val:        ".",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 225, col: 21, offset: 7356},
							expr: &litMatcher{
								pos:        position{line: 225, col: 22, offset: 7357},
								val:        ".",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 225, col: 26, offset: 7361},
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 27, offset: 7362},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 225, col: 30, offset: 7365},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 225, col: 37, offset: 7372},
								run: (*parser).callonElementTitle9,
								expr: &oneOrMoreExpr{
									pos: position{line: 225, col: 37, offset: 7372},
									expr: &choiceExpr{
										pos: position{line: 225, col: 38, offset: 7373},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 225, col: 38, offset: 7373},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 225, col: 50, offset: 7385},
												name: "Spaces",
											},
											&actionExpr{
												pos: position{line: 225, col: 59, offset: 7394},
												run: (*parser).callonElementTitle14,
												expr: &seqExpr{
													pos: position{line: 225, col: 60, offset: 7395},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 225, col: 60, offset: 7395},
															expr: &ruleRefExpr{
																pos:  position{line: 225, col: 61, offset: 7396},
																name: "NEWLINE",
															},
														},
														&anyMatcher{
															line: 225, col: 70, offset: 7405,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 229, col: 4, offset: 7481},
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 4, offset: 7481},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 229, col: 8, offset: 7485},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 235, col: 1, offset: 7637},
			expr: &actionExpr{
				pos: position{line: 235, col: 16, offset: 7652},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 235, col: 16, offset: 7652},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 235, col: 16, offset: 7652},
							val:        "[.",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 235, col: 21, offset: 7657},
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 22, offset: 7658},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 235, col: 25, offset: 7661},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 235, col: 31, offset: 7667},
								run: (*parser).callonElementRole7,
								expr: &oneOrMoreExpr{
									pos: position{line: 235, col: 31, offset: 7667},
									expr: &choiceExpr{
										pos: position{line: 235, col: 32, offset: 7668},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 235, col: 32, offset: 7668},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 235, col: 44, offset: 7680},
												name: "Spaces",
											},
											&actionExpr{
												pos: position{line: 235, col: 53, offset: 7689},
												run: (*parser).callonElementRole12,
												expr: &seqExpr{
													pos: position{line: 235, col: 54, offset: 7690},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 235, col: 54, offset: 7690},
															expr: &ruleRefExpr{
																pos:  position{line: 235, col: 55, offset: 7691},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 235, col: 63, offset: 7699},
															expr: &litMatcher{
																pos:        position{line: 235, col: 64, offset: 7700},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 235, col: 69, offset: 7705,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 239, col: 4, offset: 7781},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 8, offset: 7785},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 8, offset: 7785},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 12, offset: 7789},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 243, col: 1, offset: 7845},
			expr: &actionExpr{
				pos: position{line: 243, col: 21, offset: 7865},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 243, col: 21, offset: 7865},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 21, offset: 7865},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 243, col: 33, offset: 7877},
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 33, offset: 7877},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 243, col: 37, offset: 7881},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 248, col: 1, offset: 8013},
			expr: &actionExpr{
				pos: position{line: 248, col: 30, offset: 8042},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 248, col: 30, offset: 8042},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 30, offset: 8042},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 248, col: 34, offset: 8046},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 37, offset: 8049},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 248, col: 53, offset: 8065},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 248, col: 57, offset: 8069},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 57, offset: 8069},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 61, offset: 8073},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 253, col: 1, offset: 8228},
			expr: &choiceExpr{
				pos: position{line: 253, col: 21, offset: 8248},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 253, col: 21, offset: 8248},
						run: (*parser).callonSourceAttributes2,
						expr: &seqExpr{
							pos: position{line: 253, col: 21, offset: 8248},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 253, col: 21, offset: 8248},
									val:        "[source]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 253, col: 32, offset: 8259},
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 32, offset: 8259},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 36, offset: 8263},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 255, col: 5, offset: 8314},
						run: (*parser).callonSourceAttributes8,
						expr: &seqExpr{
							pos: position{line: 255, col: 5, offset: 8314},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 255, col: 5, offset: 8314},
									val:        "[source,",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 255, col: 16, offset: 8325},
									label: "language",
									expr: &actionExpr{
										pos: position{line: 255, col: 26, offset: 8335},
										run: (*parser).callonSourceAttributes12,
										expr: &oneOrMoreExpr{
											pos: position{line: 255, col: 26, offset: 8335},
											expr: &choiceExpr{
												pos: position{line: 255, col: 27, offset: 8336},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 255, col: 27, offset: 8336},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 255, col: 39, offset: 8348},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 255, col: 48, offset: 8357},
														run: (*parser).callonSourceAttributes17,
														expr: &seqExpr{
															pos: position{line: 255, col: 49, offset: 8358},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 255, col: 49, offset: 8358},
																	expr: &ruleRefExpr{
																		pos:  position{line: 255, col: 50, offset: 8359},
																		name: "NEWLINE",
																	},
																},
																&notExpr{
																	pos: position{line: 255, col: 58, offset: 8367},
																	expr: &litMatcher{
																		pos:        position{line: 255, col: 59, offset: 8368},
																		val:        "]",
																		ignoreCase: false,
																	},
																},
																&anyMatcher{
																	line: 255, col: 64, offset: 8373,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 259, col: 7, offset: 8463},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 259, col: 11, offset: 8467},
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 11, offset: 8467},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 259, col: 15, offset: 8471},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 264, col: 1, offset: 8604},
			expr: &actionExpr{
				pos: position{line: 264, col: 19, offset: 8622},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 264, col: 19, offset: 8622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 264, col: 19, offset: 8622},
							val:        "[",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 264, col: 23, offset: 8626},
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 24, offset: 8627},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 27, offset: 8630},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 264, col: 38, offset: 8641},
								expr: &ruleRefExpr{
									pos:  position{line: 264, col: 39, offset: 8642},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 264, col: 59, offset: 8662},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 264, col: 63, offset: 8666},
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 63, offset: 8666},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 264, col: 67, offset: 8670},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 268, col: 1, offset: 8742},
			expr: &choiceExpr{
				pos: position{line: 268, col: 22, offset: 8763},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 268, col: 22, offset: 8763},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 50, offset: 8791},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 270, col: 1, offset: 8821},
			expr: &actionExpr{
				pos: position{line: 270, col: 30, offset: 8850},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 270, col: 30, offset: 8850},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 270, col: 30, offset: 8850},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 35, offset: 8855},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 49, offset: 8869},
							val:        "=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 270, col: 53, offset: 8873},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 60, offset: 8880},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 270, col: 76, offset: 8896},
							expr: &litMatcher{
								pos:        position{line: 270, col: 76, offset: 8896},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 81, offset: 8901},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 81, offset: 8901},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 274, col: 1, offset: 8984},
			expr: &actionExpr{
				pos: position{line: 274, col: 33, offset: 9016},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 274, col: 33, offset: 9016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 274, col: 33, offset: 9016},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 38, offset: 9021},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 274, col: 52, offset: 9035},
							expr: &litMatcher{
								pos:        position{line: 274, col: 52, offset: 9035},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 274, col: 57, offset: 9040},
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 57, offset: 9040},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 278, col: 1, offset: 9125},
			expr: &actionExpr{
				pos: position{line: 278, col: 17, offset: 9141},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 278, col: 17, offset: 9141},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 278, col: 17, offset: 9141},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 18, offset: 9142},
								name: "QuoteKind",
							},
						},
						&notExpr{
							pos: position{line: 278, col: 28, offset: 9152},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 29, offset: 9153},
								name: "VerseKind",
							},
						},
						&notExpr{
							pos: position{line: 278, col: 39, offset: 9163},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 40, offset: 9164},
								name: "LiteralKind",
							},
						},
						&labeledExpr{
							pos:   position{line: 278, col: 52, offset: 9176},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 278, col: 56, offset: 9180},
								expr: &choiceExpr{
									pos: position{line: 278, col: 57, offset: 9181},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 278, col: 57, offset: 9181},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 278, col: 69, offset: 9193},
											name: "Spaces",
										},
										&actionExpr{
											pos: position{line: 278, col: 78, offset: 9202},
											run: (*parser).callonAttributeKey14,
											expr: &seqExpr{
												pos: position{line: 278, col: 79, offset: 9203},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 278, col: 79, offset: 9203},
														expr: &litMatcher{
															pos:        position{line: 278, col: 80, offset: 9204},
															val:        "=",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 278, col: 84, offset: 9208},
														expr: &litMatcher{
															pos:        position{line: 278, col: 85, offset: 9209},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 278, col: 89, offset: 9213},
														expr: &litMatcher{
															pos:        position{line: 278, col: 90, offset: 9214},
															val:        "]",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 278, col: 95, offset: 9219,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 284, col: 1, offset: 9295},
			expr: &actionExpr{
				pos: position{line: 284, col: 19, offset: 9313},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 284, col: 19, offset: 9313},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 284, col: 19, offset: 9313},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 284, col: 25, offset: 9319},
								expr: &choiceExpr{
									pos: position{line: 284, col: 26, offset: 9320},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 284, col: 26, offset: 9320},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 284, col: 38, offset: 9332},
											name: "Spaces",
										},
										&seqExpr{
											pos: position{line: 284, col: 48, offset: 9342},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 284, col: 48, offset: 9342},
													expr: &litMatcher{
														pos:        position{line: 284, col: 49, offset: 9343},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 284, col: 53, offset: 9347},
													expr: &litMatcher{
														pos:        position{line: 284, col: 54, offset: 9348},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 284, col: 58, offset: 9352},
													expr: &litMatcher{
														pos:        position{line: 284, col: 59, offset: 9353},
														val:        "]",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 284, col: 64, offset: 9358,
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 284, col: 69, offset: 9363},
							expr: &seqExpr{
								pos: position{line: 284, col: 71, offset: 9365},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 284, col: 71, offset: 9365},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 71, offset: 9365},
											name: "WS",
										},
									},
									&litMatcher{
										pos:        position{line: 284, col: 75, offset: 9369},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 288, col: 1, offset: 9524},
			expr: &actionExpr{
				pos: position{line: 288, col: 21, offset: 9544},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 288, col: 21, offset: 9544},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 288, col: 21, offset: 9544},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 288, col: 36, offset: 9559},
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 36, offset: 9559},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 40, offset: 9563},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 292, col: 1, offset: 9636},
			expr: &choiceExpr{
				pos: position{line: 292, col: 20, offset: 9655},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 292, col: 20, offset: 9655},
						run: (*parser).callonQuoteAttributes2,
						expr: &seqExpr{
							pos: position{line: 292, col: 20, offset: 9655},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 292, col: 20, offset: 9655},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 292, col: 24, offset: 9659},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 292, col: 30, offset: 9665},
										name: "QuoteKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 292, col: 41, offset: 9676},
									expr: &ruleRefExpr{
										pos:  position{line: 292, col: 41, offset: 9676},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 292, col: 45, offset: 9680},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 292, col: 49, offset: 9684},
									label: "author",
									expr: &ruleRefExpr{
										pos:  position{line: 292, col: 57, offset: 9692},
										name: "QuoteAuthor",
									},
								},
								&litMatcher{
									pos:        position{line: 292, col: 70, offset: 9705},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 292, col: 74, offset: 9709},
									label: "title",
									expr: &ruleRefExpr{
										pos:  position{line: 292, col: 81, offset: 9716},
										name: "QuoteTitle",
									},
								},
								&litMatcher{
									pos:        position{line: 292, col: 93, offset: 9728},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 292, col: 97, offset: 9732},
									expr: &ruleRefExpr{
										pos:  position{line: 292, col: 97, offset: 9732},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 292, col: 101, offset: 9736},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 296, col: 1, offset: 9863},
						run: (*parser).callonQuoteAttributes19,
						expr: &seqExpr{
							pos: position{line: 296, col: 1, offset: 9863},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 296, col: 1, offset: 9863},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 296, col: 5, offset: 9867},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 11, offset: 9873},
										name: "QuoteKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 296, col: 22, offset: 9884},
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 22, offset: 9884},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 296, col: 26, offset: 9888},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 296, col: 30, offset: 9892},
									label: "author",
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 38, offset: 9900},
										name: "QuoteAuthor",
									},
								},
								&litMatcher{
									pos:        position{line: 296, col: 51, offset: 9913},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 296, col: 55, offset: 9917},
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 55, offset: 9917},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 296, col: 59, offset: 9921},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 300, col: 1, offset: 10036},
						run: (*parser).callonQuoteAttributes33,
						expr: &seqExpr{
							pos: position{line: 300, col: 1, offset: 10036},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 300, col: 1, offset: 10036},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 300, col: 5, offset: 10040},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 300, col: 11, offset: 10046},
										name: "QuoteKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 300, col: 22, offset: 10057},
									expr: &ruleRefExpr{
										pos:  position{line: 300, col: 22, offset: 10057},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 300, col: 26, offset: 10061},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 300, col: 30, offset: 10065},
									expr: &ruleRefExpr{
										pos:  position{line: 300, col: 30, offset: 10065},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 300, col: 34, offset: 10069},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteKind",
			pos:  position{line: 304, col: 1, offset: 10137},
			expr: &actionExpr{
				pos: position{line: 304, col: 14, offset: 10150},
				run: (*parser).callonQuoteKind1,
				expr: &litMatcher{
					pos:        position{line: 304, col: 14, offset: 10150},
					val:        "quote",
					ignoreCase: false,
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 308, col: 1, offset: 10194},
			expr: &choiceExpr{
				pos: position{line: 310, col: 5, offset: 10253},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 310, col: 5, offset: 10253},
						run: (*parser).callonVerseAttributes2,
						expr: &seqExpr{
							pos: position{line: 310, col: 5, offset: 10253},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 310, col: 5, offset: 10253},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 310, col: 9, offset: 10257},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 310, col: 15, offset: 10263},
										name: "VerseKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 310, col: 26, offset: 10274},
									expr: &ruleRefExpr{
										pos:  position{line: 310, col: 26, offset: 10274},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 310, col: 30, offset: 10278},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 310, col: 34, offset: 10282},
									label: "author",
									expr: &ruleRefExpr{
										pos:  position{line: 310, col: 42, offset: 10290},
										name: "QuoteAuthor",
									},
								},
								&litMatcher{
									pos:        position{line: 310, col: 55, offset: 10303},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 310, col: 59, offset: 10307},
									label: "title",
									expr: &ruleRefExpr{
										pos:  position{line: 310, col: 66, offset: 10314},
										name: "QuoteTitle",
									},
								},
								&litMatcher{
									pos:        position{line: 310, col: 78, offset: 10326},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 310, col: 82, offset: 10330},
									expr: &ruleRefExpr{
										pos:  position{line: 310, col: 82, offset: 10330},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 310, col: 86, offset: 10334},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 314, col: 5, offset: 10479},
						run: (*parser).callonVerseAttributes19,
						expr: &seqExpr{
							pos: position{line: 314, col: 5, offset: 10479},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 314, col: 5, offset: 10479},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 314, col: 9, offset: 10483},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 314, col: 15, offset: 10489},
										name: "VerseKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 314, col: 26, offset: 10500},
									expr: &ruleRefExpr{
										pos:  position{line: 314, col: 26, offset: 10500},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 314, col: 30, offset: 10504},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 314, col: 34, offset: 10508},
									label: "author",
									expr: &ruleRefExpr{
										pos:  position{line: 314, col: 42, offset: 10516},
										name: "QuoteAuthor",
									},
								},
								&litMatcher{
									pos:        position{line: 314, col: 55, offset: 10529},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 314, col: 59, offset: 10533},
									expr: &ruleRefExpr{
										pos:  position{line: 314, col: 59, offset: 10533},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 314, col: 63, offset: 10537},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 318, col: 5, offset: 10669},
						run: (*parser).callonVerseAttributes33,
						expr: &seqExpr{
							pos: position{line: 318, col: 5, offset: 10669},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 318, col: 5, offset: 10669},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 318, col: 9, offset: 10673},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 318, col: 15, offset: 10679},
										name: "VerseKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 318, col: 26, offset: 10690},
									expr: &ruleRefExpr{
										pos:  position{line: 318, col: 26, offset: 10690},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 318, col: 30, offset: 10694},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 318, col: 34, offset: 10698},
									expr: &ruleRefExpr{
										pos:  position{line: 318, col: 34, offset: 10698},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 318, col: 38, offset: 10702},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseKind",
			pos:  position{line: 322, col: 1, offset: 10778},
			expr: &actionExpr{
				pos: position{line: 322, col: 14, offset: 10791},
				run: (*parser).callonVerseKind1,
				expr: &litMatcher{
					pos:        position{line: 322, col: 14, offset: 10791},
					val:        "verse",
					ignoreCase: false,
				},
			},
		},
		{
			name: "QuoteAuthor",
			pos:  position{line: 326, col: 1, offset: 10835},
			expr: &actionExpr{
				pos: position{line: 326, col: 16, offset: 10850},
				run: (*parser).callonQuoteAuthor1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 326, col: 16, offset: 10850},
					expr: &choiceExpr{
						pos: position{line: 326, col: 17, offset: 10851},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 326, col: 17, offset: 10851},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 29, offset: 10863},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 326, col: 38, offset: 10872},
								run: (*parser).callonQuoteAuthor6,
								expr: &seqExpr{
									pos: position{line: 326, col: 39, offset: 10873},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 326, col: 39, offset: 10873},
											expr: &litMatcher{
												pos:        position{line: 326, col: 40, offset: 10874},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 326, col: 44, offset: 10878},
											expr: &litMatcher{
												pos:        position{line: 326, col: 45, offset: 10879},
												val:        "]",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 326, col: 49, offset: 10883},
											expr: &ruleRefExpr{
												pos:  position{line: 326, col: 50, offset: 10884},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 326, col: 54, offset: 10888,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteTitle",
			pos:  position{line: 332, col: 1, offset: 10963},
			expr: &actionExpr{
				pos: position{line: 332, col: 15, offset: 10977},
				run: (*parser).callonQuoteTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 332, col: 15, offset: 10977},
					expr: &choiceExpr{
						pos: position{line: 332, col: 16, offset: 10978},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 332, col: 16, offset: 10978},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 332, col: 28, offset: 10990},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 332, col: 38, offset: 11000},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 332, col: 38, offset: 11000},
										expr: &litMatcher{
											pos:        position{line: 332, col: 39, offset: 11001},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 332, col: 43, offset: 11005},
										expr: &litMatcher{
											pos:        position{line: 332, col: 44, offset: 11006},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 332, col: 48, offset: 11010},
										expr: &ruleRefExpr{
											pos:  position{line: 332, col: 49, offset: 11011},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 332, col: 53, offset: 11015,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 336, col: 1, offset: 11056},
			expr: &actionExpr{
				pos: position{line: 336, col: 21, offset: 11076},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 336, col: 21, offset: 11076},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 336, col: 21, offset: 11076},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 336, col: 25, offset: 11080},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 336, col: 31, offset: 11086},
								expr: &ruleRefExpr{
									pos:  position{line: 336, col: 32, offset: 11087},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 336, col: 51, offset: 11106},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 343, col: 1, offset: 11280},
			expr: &actionExpr{
				pos: position{line: 343, col: 12, offset: 11291},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 343, col: 12, offset: 11291},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 343, col: 12, offset: 11291},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 343, col: 23, offset: 11302},
								expr: &ruleRefExpr{
									pos:  position{line: 343, col: 24, offset: 11303},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 5, offset: 11327},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 344, col: 12, offset: 11334},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 344, col: 12, offset: 11334},
									expr: &litMatcher{
										pos:        position{line: 344, col: 13, offset: 11335},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 348, col: 5, offset: 11426},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 352, col: 5, offset: 11578},
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 5, offset: 11578},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 352, col: 9, offset: 11582},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 16, offset: 11589},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 352, col: 31, offset: 11604},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 352, col: 35, offset: 11608},
								expr: &ruleRefExpr{
									pos:  position{line: 352, col: 35, offset: 11608},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 53, offset: 11626},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 357, col: 1, offset: 11740},
			expr: &actionExpr{
				pos: position{line: 357, col: 18, offset: 11757},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 357, col: 18, offset: 11757},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 357, col: 27, offset: 11766},
						expr: &seqExpr{
							pos: position{line: 357, col: 28, offset: 11767},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 357, col: 28, offset: 11767},
									expr: &ruleRefExpr{
										pos:  position{line: 357, col: 29, offset: 11768},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 357, col: 37, offset: 11776},
									expr: &ruleRefExpr{
										pos:  position{line: 357, col: 38, offset: 11777},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 357, col: 54, offset: 11793},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 361, col: 1, offset: 11914},
			expr: &actionExpr{
				pos: position{line: 361, col: 17, offset: 11930},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 361, col: 17, offset: 11930},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 361, col: 26, offset: 11939},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 361, col: 26, offset: 11939},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 362, col: 11, offset: 11957},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 363, col: 11, offset: 11982},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 364, col: 11, offset: 12004},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 365, col: 11, offset: 12027},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 366, col: 11, offset: 12042},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 367, col: 11, offset: 12067},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 11, offset: 12087},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 369, col: 11, offset: 12108},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 370, col: 11, offset: 12148},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 371, col: 11, offset: 12168},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 378, col: 1, offset: 12321},
			expr: &seqExpr{
				pos: position{line: 378, col: 25, offset: 12345},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 378, col: 25, offset: 12345},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 35, offset: 12355},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 383, col: 1, offset: 12466},
			expr: &actionExpr{
				pos: position{line: 383, col: 19, offset: 12484},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 383, col: 19, offset: 12484},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 383, col: 19, offset: 12484},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 25, offset: 12490},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 383, col: 40, offset: 12505},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 383, col: 45, offset: 12510},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 52, offset: 12517},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 383, col: 68, offset: 12533},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 75, offset: 12540},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 387, col: 1, offset: 12681},
			expr: &actionExpr{
				pos: position{line: 387, col: 20, offset: 12700},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 387, col: 20, offset: 12700},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 387, col: 20, offset: 12700},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 26, offset: 12706},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 387, col: 41, offset: 12721},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 387, col: 45, offset: 12725},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 52, offset: 12732},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 387, col: 68, offset: 12748},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 75, offset: 12755},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 391, col: 1, offset: 12897},
			expr: &actionExpr{
				pos: position{line: 391, col: 18, offset: 12914},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 391, col: 18, offset: 12914},
					expr: &choiceExpr{
						pos: position{line: 391, col: 19, offset: 12915},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 391, col: 19, offset: 12915},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 391, col: 33, offset: 12929},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 391, col: 39, offset: 12935},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 395, col: 1, offset: 12977},
			expr: &actionExpr{
				pos: position{line: 395, col: 19, offset: 12995},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 395, col: 19, offset: 12995},
					expr: &choiceExpr{
						pos: position{line: 395, col: 20, offset: 12996},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 395, col: 20, offset: 12996},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 395, col: 33, offset: 13009},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 395, col: 33, offset: 13009},
										expr: &litMatcher{
											pos:        position{line: 395, col: 34, offset: 13010},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 395, col: 38, offset: 13014},
										expr: &litMatcher{
											pos:        position{line: 395, col: 39, offset: 13015},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 395, col: 43, offset: 13019},
										expr: &ruleRefExpr{
											pos:  position{line: 395, col: 44, offset: 13020},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 395, col: 48, offset: 13024,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 399, col: 1, offset: 13065},
			expr: &actionExpr{
				pos: position{line: 399, col: 24, offset: 13088},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 399, col: 24, offset: 13088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 399, col: 24, offset: 13088},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 28, offset: 13092},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 399, col: 34, offset: 13098},
								expr: &ruleRefExpr{
									pos:  position{line: 399, col: 35, offset: 13099},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 54, offset: 13118},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 406, col: 1, offset: 13298},
			expr: &actionExpr{
				pos: position{line: 406, col: 18, offset: 13315},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 406, col: 18, offset: 13315},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 406, col: 18, offset: 13315},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 406, col: 24, offset: 13321},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 406, col: 24, offset: 13321},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 406, col: 24, offset: 13321},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 406, col: 36, offset: 13333},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 406, col: 42, offset: 13339},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 406, col: 56, offset: 13353},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 406, col: 74, offset: 13371},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 8, offset: 13525},
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 8, offset: 13525},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 12, offset: 13529},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 412, col: 1, offset: 13582},
			expr: &actionExpr{
				pos: position{line: 412, col: 26, offset: 13607},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 412, col: 26, offset: 13607},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 412, col: 26, offset: 13607},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 412, col: 30, offset: 13611},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 412, col: 36, offset: 13617},
								expr: &choiceExpr{
									pos: position{line: 412, col: 37, offset: 13618},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 412, col: 37, offset: 13618},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 412, col: 59, offset: 13640},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 78, offset: 13659},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 416, col: 1, offset: 13729},
			expr: &actionExpr{
				pos: position{line: 416, col: 24, offset: 13752},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 416, col: 24, offset: 13752},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 416, col: 24, offset: 13752},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 416, col: 33, offset: 13761},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 40, offset: 13768},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 416, col: 66, offset: 13794},
							expr: &litMatcher{
								pos:        position{line: 416, col: 66, offset: 13794},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 421, col: 1, offset: 13890},
			expr: &actionExpr{
				pos: position{line: 421, col: 29, offset: 13918},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 421, col: 29, offset: 13918},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 421, col: 29, offset: 13918},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 421, col: 36, offset: 13925},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 421, col: 36, offset: 13925},
										name: "MultipleRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 422, col: 11, offset: 14030},
										name: "MultipleQuotedRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 423, col: 11, offset: 14062},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 424, col: 11, offset: 14088},
										name: "MultilineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 425, col: 11, offset: 14120},
										name: "SinglelineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 426, col: 11, offset: 14152},
										name: "SinglelineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 427, col: 11, offset: 14179},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 427, col: 31, offset: 14199},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 31, offset: 14199},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 427, col: 36, offset: 14204},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 427, col: 36, offset: 14204},
									expr: &litMatcher{
										pos:        position{line: 427, col: 37, offset: 14205},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 427, col: 43, offset: 14211},
									expr: &litMatcher{
										pos:        position{line: 427, col: 44, offset: 14212},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleRanges",
			pos:  position{line: 431, col: 1, offset: 14244},
			expr: &actionExpr{
				pos: position{line: 431, col: 19, offset: 14262},
				run: (*parser).callonMultipleRanges1,
				expr: &seqExpr{
					pos: position{line: 431, col: 19, offset: 14262},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 431, col: 19, offset: 14262},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 431, col: 26, offset: 14269},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 431, col: 26, offset: 14269},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 431, col: 43, offset: 14286},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 5, offset: 14308},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 432, col: 12, offset: 14315},
								expr: &actionExpr{
									pos: position{line: 432, col: 13, offset: 14316},
									run: (*parser).callonMultipleRanges9,
									expr: &seqExpr{
										pos: position{line: 432, col: 13, offset: 14316},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 432, col: 13, offset: 14316},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 432, col: 17, offset: 14320},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 432, col: 24, offset: 14327},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 432, col: 24, offset: 14327},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 432, col: 41, offset: 14344},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedRanges",
			pos:  position{line: 438, col: 1, offset: 14482},
			expr: &actionExpr{
				pos: position{line: 438, col: 25, offset: 14506},
				run: (*parser).callonMultipleQuotedRanges1,
				expr: &seqExpr{
					pos: position{line: 438, col: 25, offset: 14506},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 438, col: 25, offset: 14506},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 438, col: 30, offset: 14511},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 438, col: 37, offset: 14518},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 438, col: 37, offset: 14518},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 438, col: 54, offset: 14535},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 5, offset: 14557},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 439, col: 12, offset: 14564},
								expr: &actionExpr{
									pos: position{line: 439, col: 13, offset: 14565},
									run: (*parser).callonMultipleQuotedRanges10,
									expr: &seqExpr{
										pos: position{line: 439, col: 13, offset: 14565},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 439, col: 13, offset: 14565},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 439, col: 17, offset: 14569},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 439, col: 24, offset: 14576},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 439, col: 24, offset: 14576},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 439, col: 41, offset: 14593},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 9, offset: 14646},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultilineRange",
			pos:  position{line: 445, col: 1, offset: 14736},
			expr: &actionExpr{
				pos: position{line: 445, col: 19, offset: 14754},
				run: (*parser).callonMultilineRange1,
				expr: &seqExpr{
					pos: position{line: 445, col: 19, offset: 14754},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 445, col: 19, offset: 14754},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 26, offset: 14761},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 445, col: 34, offset: 14769},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 445, col: 39, offset: 14774},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 44, offset: 14779},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultilineQuotedRange",
			pos:  position{line: 449, col: 1, offset: 14872},
			expr: &actionExpr{
				pos: position{line: 449, col: 25, offset: 14896},
				run: (*parser).callonMultilineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 449, col: 25, offset: 14896},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 449, col: 25, offset: 14896},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 449, col: 30, offset: 14901},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 37, offset: 14908},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 45, offset: 14916},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 449, col: 50, offset: 14921},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 55, offset: 14926},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 63, offset: 14934},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SinglelineRange",
			pos:  position{line: 453, col: 1, offset: 15024},
			expr: &actionExpr{
				pos: position{line: 453, col: 20, offset: 15043},
				run: (*parser).callonSinglelineRange1,
				expr: &labeledExpr{
					pos:   position{line: 453, col: 20, offset: 15043},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 453, col: 32, offset: 15055},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SinglelineQuotedRange",
			pos:  position{line: 457, col: 1, offset: 15138},
			expr: &actionExpr{
				pos: position{line: 457, col: 26, offset: 15163},
				run: (*parser).callonSinglelineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 457, col: 26, offset: 15163},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 26, offset: 15163},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 457, col: 31, offset: 15168},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 43, offset: 15180},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 51, offset: 15188},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 461, col: 1, offset: 15268},
			expr: &actionExpr{
				pos: position{line: 461, col: 23, offset: 15290},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 461, col: 23, offset: 15290},
					expr: &seqExpr{
						pos: position{line: 461, col: 24, offset: 15291},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 461, col: 24, offset: 15291},
								expr: &litMatcher{
									pos:        position{line: 461, col: 25, offset: 15292},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 461, col: 29, offset: 15296},
								expr: &litMatcher{
									pos:        position{line: 461, col: 30, offset: 15297},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 461, col: 34, offset: 15301},
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 35, offset: 15302},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 461, col: 38, offset: 15305,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 468, col: 1, offset: 15446},
			expr: &oneOrMoreExpr{
				pos: position{line: 468, col: 14, offset: 15459},
				expr: &ruleRefExpr{
					pos:  position{line: 468, col: 14, offset: 15459},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 470, col: 1, offset: 15470},
			expr: &choiceExpr{
				pos: position{line: 470, col: 13, offset: 15482},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 470, col: 13, offset: 15482},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 31, offset: 15500},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 51, offset: 15520},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 69, offset: 15538},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 472, col: 1, offset: 15564},
			expr: &choiceExpr{
				pos: position{line: 472, col: 18, offset: 15581},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 472, col: 18, offset: 15581},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 472, col: 18, offset: 15581},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 27, offset: 15590},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 9, offset: 15647},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 9, offset: 15647},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 474, col: 15, offset: 15653},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 16, offset: 15654},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 478, col: 1, offset: 15746},
			expr: &actionExpr{
				pos: position{line: 478, col: 22, offset: 15767},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 478, col: 22, offset: 15767},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 478, col: 22, offset: 15767},
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 23, offset: 15768},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 479, col: 5, offset: 15776},
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 6, offset: 15777},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 480, col: 5, offset: 15792},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 6, offset: 15793},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 481, col: 5, offset: 15815},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 15816},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 5, offset: 15842},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 6, offset: 15843},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 15871},
							expr: &seqExpr{
								pos: position{line: 483, col: 7, offset: 15873},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 483, col: 7, offset: 15873},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 27, offset: 15893},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 484, col: 5, offset: 15924},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 6, offset: 15925},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 485, col: 5, offset: 15950},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 6, offset: 15951},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 15972},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 15973},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 487, col: 5, offset: 15992},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 488, col: 9, offset: 16007},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 488, col: 9, offset: 16007},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 488, col: 9, offset: 16007},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 488, col: 18, offset: 16016},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 19, offset: 16017},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 488, col: 35, offset: 16033},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 488, col: 45, offset: 16043},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 46, offset: 16044},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 12, offset: 16196},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 494, col: 1, offset: 16243},
			expr: &seqExpr{
				pos: position{line: 494, col: 25, offset: 16267},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 494, col: 25, offset: 16267},
						val:        "+",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 494, col: 29, offset: 16271},
						expr: &ruleRefExpr{
							pos:  position{line: 494, col: 29, offset: 16271},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 33, offset: 16275},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 496, col: 1, offset: 16281},
			expr: &actionExpr{
				pos: position{line: 496, col: 29, offset: 16309},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 496, col: 29, offset: 16309},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 29, offset: 16309},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 496, col: 41, offset: 16321},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 41, offset: 16321},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 53, offset: 16333},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 74, offset: 16354},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 82, offset: 16362},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 503, col: 1, offset: 16604},
			expr: &actionExpr{
				pos: position{line: 503, col: 20, offset: 16623},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 503, col: 20, offset: 16623},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 20, offset: 16623},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 503, col: 31, offset: 16634},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 32, offset: 16635},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 52, offset: 16655},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 60, offset: 16663},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 83, offset: 16686},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 92, offset: 16695},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 507, col: 1, offset: 16835},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 16865},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 16865},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 508, col: 5, offset: 16865},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 5, offset: 16865},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 9, offset: 16869},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 510, col: 9, offset: 16925},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 510, col: 9, offset: 16925},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 510, col: 9, offset: 16925},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 510, col: 9, offset: 16925},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 510, col: 16, offset: 16932},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 510, col: 16, offset: 16932},
															expr: &litMatcher{
																pos:        position{line: 510, col: 17, offset: 16933},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 513, col: 12, offset: 17030},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 520, col: 11, offset: 17347},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 520, col: 11, offset: 17347},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 520, col: 11, offset: 17347},
													expr: &charClassMatcher{
														pos:        position{line: 520, col: 12, offset: 17348},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 520, col: 20, offset: 17356},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 522, col: 13, offset: 17467},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 522, col: 13, offset: 17467},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 522, col: 14, offset: 17468},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 522, col: 21, offset: 17475},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 524, col: 13, offset: 17589},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 524, col: 13, offset: 17589},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 524, col: 14, offset: 17590},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 524, col: 21, offset: 17597},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 526, col: 13, offset: 17711},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 526, col: 13, offset: 17711},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 526, col: 13, offset: 17711},
													expr: &charClassMatcher{
														pos:        position{line: 526, col: 14, offset: 17712},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 526, col: 22, offset: 17720},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 528, col: 13, offset: 17834},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 528, col: 13, offset: 17834},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 528, col: 13, offset: 17834},
													expr: &charClassMatcher{
														pos:        position{line: 528, col: 14, offset: 17835},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 528, col: 22, offset: 17843},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 530, col: 12, offset: 17956},
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 12, offset: 17956},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 534, col: 1, offset: 17988},
			expr: &actionExpr{
				pos: position{line: 534, col: 27, offset: 18014},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 534, col: 27, offset: 18014},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 534, col: 37, offset: 18024},
						expr: &ruleRefExpr{
							pos:  position{line: 534, col: 37, offset: 18024},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 541, col: 1, offset: 18224},
			expr: &actionExpr{
				pos: position{line: 541, col: 22, offset: 18245},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 541, col: 22, offset: 18245},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 541, col: 22, offset: 18245},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 541, col: 33, offset: 18256},
								expr: &ruleRefExpr{
									pos:  position{line: 541, col: 34, offset: 18257},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 541, col: 54, offset: 18277},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 62, offset: 18285},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 541, col: 87, offset: 18310},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 541, col: 98, offset: 18321},
								expr: &ruleRefExpr{
									pos:  position{line: 541, col: 99, offset: 18322},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 541, col: 129, offset: 18352},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 138, offset: 18361},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 545, col: 1, offset: 18519},
			expr: &actionExpr{
				pos: position{line: 546, col: 5, offset: 18551},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 546, col: 5, offset: 18551},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 546, col: 5, offset: 18551},
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 5, offset: 18551},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 546, col: 9, offset: 18555},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 547, col: 9, offset: 18572},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 547, col: 9, offset: 18572},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &litMatcher{
											pos:        position{line: 547, col: 9, offset: 18572},
											val:        "*****",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 549, col: 13, offset: 18732},
										run: (*parser).callonUnorderedListItemPrefix9,
										expr: &litMatcher{
											pos:        position{line: 549, col: 13, offset: 18732},
											val:        "****",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 551, col: 13, offset: 18892},
										run: (*parser).callonUnorderedListItemPrefix11,
										expr: &litMatcher{
											pos:        position{line: 551, col: 13, offset: 18892},
											val:        "***",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 553, col: 13, offset: 19052},
										run: (*parser).callonUnorderedListItemPrefix13,
										expr: &litMatcher{
											pos:        position{line: 553, col: 13, offset: 19052},
											val:        "**",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 555, col: 13, offset: 19209},
										run: (*parser).callonUnorderedListItemPrefix15,
										expr: &litMatcher{
											pos:        position{line: 555, col: 13, offset: 19209},
											val:        "*",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 557, col: 13, offset: 19364},
										run: (*parser).callonUnorderedListItemPrefix17,
										expr: &litMatcher{
											pos:        position{line: 557, col: 13, offset: 19364},
											val:        "-",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 559, col: 12, offset: 19511},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 12, offset: 19511},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 563, col: 1, offset: 19544},
			expr: &actionExpr{
				pos: position{line: 563, col: 32, offset: 19575},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 563, col: 32, offset: 19575},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 563, col: 32, offset: 19575},
							expr: &litMatcher{
								pos:        position{line: 563, col: 33, offset: 19576},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 563, col: 37, offset: 19580},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 564, col: 7, offset: 19594},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 564, col: 7, offset: 19594},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 564, col: 7, offset: 19594},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 565, col: 7, offset: 19639},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 565, col: 7, offset: 19639},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 566, col: 7, offset: 19682},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 566, col: 7, offset: 19682},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 567, col: 7, offset: 19724},
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 7, offset: 19724},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 571, col: 1, offset: 19763},
			expr: &actionExpr{
				pos: position{line: 571, col: 29, offset: 19791},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 571, col: 29, offset: 19791},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 571, col: 39, offset: 19801},
						expr: &ruleRefExpr{
							pos:  position{line: 571, col: 39, offset: 19801},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 578, col: 1, offset: 20117},
			expr: &actionExpr{
				pos: position{line: 578, col: 20, offset: 20136},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 578, col: 20, offset: 20136},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 578, col: 20, offset: 20136},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 578, col: 31, offset: 20147},
								expr: &ruleRefExpr{
									pos:  position{line: 578, col: 32, offset: 20148},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 52, offset: 20168},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 58, offset: 20174},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 79, offset: 20195},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 90, offset: 20206},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 116, offset: 20232},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 578, col: 128, offset: 20244},
								expr: &ruleRefExpr{
									pos:  position{line: 578, col: 129, offset: 20245},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 582, col: 1, offset: 20384},
			expr: &actionExpr{
				pos: position{line: 582, col: 24, offset: 20407},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 582, col: 24, offset: 20407},
					expr: &choiceExpr{
						pos: position{line: 582, col: 25, offset: 20408},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 582, col: 25, offset: 20408},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 582, col: 37, offset: 20420},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 582, col: 46, offset: 20429},
								run: (*parser).callonLabeledListItemTerm6,
								expr: &seqExpr{
									pos: position{line: 582, col: 47, offset: 20430},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 582, col: 47, offset: 20430},
											expr: &ruleRefExpr{
												pos:  position{line: 582, col: 48, offset: 20431},
												name: "NEWLINE",
											},
										},
										&notExpr{
											pos: position{line: 582, col: 56, offset: 20439},
											expr: &litMatcher{
												pos:        position{line: 582, col: 57, offset: 20440},
												val:        "::",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 582, col: 63, offset: 20446,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 589, col: 1, offset: 20599},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 20632},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 20632},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 5, offset: 20632},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 590, col: 16, offset: 20643},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &choiceExpr{
									pos: position{line: 590, col: 17, offset: 20644},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 590, col: 17, offset: 20644},
											val:        "::::",
											ignoreCase: false,
										},
										&litMatcher{
											pos:        position{line: 590, col: 26, offset: 20653},
											val:        ":::",
											ignoreCase: false,
										},
										&litMatcher{
											pos:        position{line: 590, col: 34, offset: 20661},
											val:        "::",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 592, col: 9, offset: 20712},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 592, col: 9, offset: 20712},
									expr: &choiceExpr{
										pos: position{line: 592, col: 10, offset: 20713},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 592, col: 10, offset: 20713},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 592, col: 15, offset: 20718},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 592, col: 27, offset: 20730},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 596, col: 1, offset: 20770},
			expr: &actionExpr{
				pos: position{line: 596, col: 31, offset: 20800},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 596, col: 31, offset: 20800},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 596, col: 40, offset: 20809},
						expr: &ruleRefExpr{
							pos:  position{line: 596, col: 41, offset: 20810},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 603, col: 1, offset: 21001},
			expr: &choiceExpr{
				pos: position{line: 603, col: 19, offset: 21019},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 603, col: 19, offset: 21019},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 603, col: 19, offset: 21019},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 605, col: 9, offset: 21065},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 605, col: 9, offset: 21065},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 607, col: 9, offset: 21113},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 607, col: 9, offset: 21113},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 609, col: 9, offset: 21171},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 609, col: 9, offset: 21171},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 611, col: 9, offset: 21225},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 611, col: 9, offset: 21225},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 620, col: 1, offset: 21532},
			expr: &choiceExpr{
				pos: position{line: 622, col: 5, offset: 21579},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 21579},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 622, col: 5, offset: 21579},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 622, col: 5, offset: 21579},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 622, col: 16, offset: 21590},
										expr: &ruleRefExpr{
											pos:  position{line: 622, col: 17, offset: 21591},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 622, col: 37, offset: 21611},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 40, offset: 21614},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 622, col: 56, offset: 21630},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 622, col: 61, offset: 21635},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 622, col: 67, offset: 21641},
										expr: &ruleRefExpr{
											pos:  position{line: 622, col: 68, offset: 21642},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 5, offset: 21834},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 626, col: 5, offset: 21834},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 626, col: 5, offset: 21834},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 626, col: 16, offset: 21845},
										expr: &ruleRefExpr{
											pos:  position{line: 626, col: 17, offset: 21846},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 626, col: 37, offset: 21866},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 626, col: 43, offset: 21872},
										expr: &ruleRefExpr{
											pos:  position{line: 626, col: 44, offset: 21873},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 630, col: 1, offset: 21966},
			expr: &actionExpr{
				pos: position{line: 630, col: 19, offset: 21984},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 630, col: 19, offset: 21984},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 630, col: 19, offset: 21984},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 30, offset: 21995},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 50, offset: 22015},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 630, col: 61, offset: 22026},
								expr: &ruleRefExpr{
									pos:  position{line: 630, col: 62, offset: 22027},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 634, col: 1, offset: 22133},
			expr: &actionExpr{
				pos: position{line: 635, col: 5, offset: 22160},
				run: (*parser).callonFirstParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 635, col: 5, offset: 22160},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 635, col: 15, offset: 22170},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 635, col: 15, offset: 22170},
								run: (*parser).callonFirstParagraphLine4,
								expr: &labeledExpr{
									pos:   position{line: 635, col: 15, offset: 22170},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 635, col: 24, offset: 22179},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 637, col: 9, offset: 22271},
								run: (*parser).callonFirstParagraphLine7,
								expr: &seqExpr{
									pos: position{line: 637, col: 9, offset: 22271},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 637, col: 9, offset: 22271},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 637, col: 18, offset: 22280},
												expr: &ruleRefExpr{
													pos:  position{line: 637, col: 19, offset: 22281},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 637, col: 35, offset: 22297},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 637, col: 45, offset: 22307},
												expr: &ruleRefExpr{
													pos:  position{line: 637, col: 46, offset: 22308},
													name: "LineBreak",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 637, col: 58, offset: 22320},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 643, col: 1, offset: 22456},
			expr: &actionExpr{
				pos: position{line: 643, col: 23, offset: 22478},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 643, col: 23, offset: 22478},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 643, col: 33, offset: 22488},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 647, col: 1, offset: 22534},
			expr: &choiceExpr{
				pos: position{line: 649, col: 5, offset: 22586},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 22586},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 649, col: 5, offset: 22586},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 649, col: 5, offset: 22586},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 649, col: 16, offset: 22597},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 17, offset: 22598},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 650, col: 5, offset: 22622},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 657, col: 5, offset: 22825},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 657, col: 8, offset: 22828},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 657, col: 24, offset: 22844},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 657, col: 29, offset: 22849},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 657, col: 35, offset: 22855},
										expr: &ruleRefExpr{
											pos:  position{line: 657, col: 36, offset: 22856},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 661, col: 5, offset: 23048},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 661, col: 5, offset: 23048},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 661, col: 5, offset: 23048},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 661, col: 16, offset: 23059},
										expr: &ruleRefExpr{
											pos:  position{line: 661, col: 17, offset: 23060},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 662, col: 5, offset: 23084},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 669, col: 5, offset: 23287},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 669, col: 11, offset: 23293},
										expr: &ruleRefExpr{
											pos:  position{line: 669, col: 12, offset: 23294},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 673, col: 1, offset: 23395},
			expr: &actionExpr{
				pos: position{line: 673, col: 19, offset: 23413},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 673, col: 19, offset: 23413},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 673, col: 19, offset: 23413},
							expr: &ruleRefExpr{
								pos:  position{line: 673, col: 20, offset: 23414},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 673, col: 24, offset: 23418},
							expr: &ruleRefExpr{
								pos:  position{line: 673, col: 25, offset: 23419},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 5, offset: 23433},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 674, col: 15, offset: 23443},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 674, col: 15, offset: 23443},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 674, col: 15, offset: 23443},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 674, col: 24, offset: 23452},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 676, col: 9, offset: 23544},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 676, col: 9, offset: 23544},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 676, col: 9, offset: 23544},
													expr: &ruleRefExpr{
														pos:  position{line: 676, col: 10, offset: 23545},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 676, col: 25, offset: 23560},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 676, col: 34, offset: 23569},
														expr: &ruleRefExpr{
															pos:  position{line: 676, col: 35, offset: 23570},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 676, col: 51, offset: 23586},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 676, col: 61, offset: 23596},
														expr: &ruleRefExpr{
															pos:  position{line: 676, col: 62, offset: 23597},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 676, col: 74, offset: 23609},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 682, col: 1, offset: 23745},
			expr: &actionExpr{
				pos: position{line: 682, col: 18, offset: 23762},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 682, col: 18, offset: 23762},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 682, col: 18, offset: 23762},
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 19, offset: 23763},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 682, col: 23, offset: 23767},
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 24, offset: 23768},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 683, col: 5, offset: 23783},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 683, col: 14, offset: 23792},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 683, col: 14, offset: 23792},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 23813},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 23831},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 23854},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 23870},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 23893},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 23919},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 23946},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 691, col: 11, offset: 23968},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 23994},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 693, col: 11, offset: 24035},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 694, col: 11, offset: 24062},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 701, col: 1, offset: 24322},
			expr: &actionExpr{
				pos: position{line: 701, col: 37, offset: 24358},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 701, col: 37, offset: 24358},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 701, col: 37, offset: 24358},
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 38, offset: 24359},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 701, col: 48, offset: 24369},
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 49, offset: 24370},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 64, offset: 24385},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 701, col: 73, offset: 24394},
								expr: &ruleRefExpr{
									pos:  position{line: 701, col: 74, offset: 24395},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 108, offset: 24429},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 701, col: 118, offset: 24439},
								expr: &ruleRefExpr{
									pos:  position{line: 701, col: 119, offset: 24440},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 131, offset: 24452},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 705, col: 1, offset: 24543},
			expr: &actionExpr{
				pos: position{line: 705, col: 36, offset: 24578},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 705, col: 36, offset: 24578},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 705, col: 36, offset: 24578},
							expr: &ruleRefExpr{
								pos:  position{line: 705, col: 37, offset: 24579},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 705, col: 41, offset: 24583},
							expr: &ruleRefExpr{
								pos:  position{line: 705, col: 42, offset: 24584},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 706, col: 5, offset: 24599},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 706, col: 14, offset: 24608},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 706, col: 14, offset: 24608},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 707, col: 11, offset: 24626},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 708, col: 11, offset: 24649},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 709, col: 11, offset: 24665},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 710, col: 11, offset: 24688},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 711, col: 11, offset: 24709},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 712, col: 11, offset: 24731},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 713, col: 11, offset: 24757},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 714, col: 11, offset: 24783},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 719, col: 1, offset: 24917},
			expr: &actionExpr{
				pos: position{line: 719, col: 18, offset: 24934},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 719, col: 18, offset: 24934},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 719, col: 18, offset: 24934},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 719, col: 27, offset: 24943},
								expr: &choiceExpr{
									pos: position{line: 719, col: 28, offset: 24944},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 719, col: 28, offset: 24944},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 719, col: 40, offset: 24956},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 719, col: 56, offset: 24972},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 719, col: 76, offset: 24992},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 723, col: 1, offset: 25026},
			expr: &actionExpr{
				pos: position{line: 723, col: 22, offset: 25047},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 723, col: 22, offset: 25047},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 723, col: 22, offset: 25047},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 723, col: 33, offset: 25058},
								expr: &ruleRefExpr{
									pos:  position{line: 723, col: 34, offset: 25059},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 723, col: 54, offset: 25079},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 723, col: 60, offset: 25085},
								expr: &actionExpr{
									pos: position{line: 723, col: 61, offset: 25086},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 723, col: 61, offset: 25086},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 723, col: 61, offset: 25086},
												expr: &ruleRefExpr{
													pos:  position{line: 723, col: 62, offset: 25087},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 723, col: 66, offset: 25091},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 723, col: 72, offset: 25097},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 729, col: 1, offset: 25217},
			expr: &actionExpr{
				pos: position{line: 729, col: 26, offset: 25242},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 729, col: 26, offset: 25242},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 729, col: 26, offset: 25242},
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 27, offset: 25243},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 729, col: 42, offset: 25258},
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 43, offset: 25259},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 53, offset: 25269},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 729, col: 62, offset: 25278},
								expr: &ruleRefExpr{
									pos:  position{line: 729, col: 63, offset: 25279},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 94, offset: 25310},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 729, col: 104, offset: 25320},
								expr: &ruleRefExpr{
									pos:  position{line: 729, col: 105, offset: 25321},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 117, offset: 25333},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 733, col: 1, offset: 25424},
			expr: &actionExpr{
				pos: position{line: 733, col: 33, offset: 25456},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 733, col: 33, offset: 25456},
					expr: &seqExpr{
						pos: position{line: 733, col: 34, offset: 25457},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 733, col: 34, offset: 25457},
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 35, offset: 25458},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 733, col: 39, offset: 25462},
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 40, offset: 25463},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 733, col: 50, offset: 25473,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 740, col: 1, offset: 25697},
			expr: &actionExpr{
				pos: position{line: 740, col: 14, offset: 25710},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 740, col: 14, offset: 25710},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 740, col: 14, offset: 25710},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 740, col: 17, offset: 25713},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 740, col: 21, offset: 25717},
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 21, offset: 25717},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 740, col: 25, offset: 25721},
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 26, offset: 25722},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 747, col: 1, offset: 26006},
			expr: &actionExpr{
				pos: position{line: 747, col: 15, offset: 26020},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 747, col: 15, offset: 26020},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 747, col: 15, offset: 26020},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 16, offset: 26021},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 747, col: 19, offset: 26024},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 747, col: 25, offset: 26030},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 747, col: 25, offset: 26030},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 15, offset: 26054},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 15, offset: 26080},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 15, offset: 26109},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 15, offset: 26138},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 15, offset: 26169},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 15, offset: 26200},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 15, offset: 26233},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 15, offset: 26269},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 15, offset: 26305},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 757, col: 15, offset: 26342},
										name: "SubScriptOrSuperScriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 761, col: 1, offset: 26496},
			expr: &choiceExpr{
				pos: position{line: 761, col: 21, offset: 26516},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 761, col: 21, offset: 26516},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 761, col: 28, offset: 26523},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 761, col: 34, offset: 26529},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 761, col: 41, offset: 26536},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 761, col: 47, offset: 26542},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 761, col: 54, offset: 26549},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 761, col: 60, offset: 26555},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 761, col: 66, offset: 26561},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubScriptOrSuperScriptPrefix",
			pos:  position{line: 763, col: 1, offset: 26566},
			expr: &choiceExpr{
				pos: position{line: 763, col: 33, offset: 26598},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 763, col: 33, offset: 26598},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 763, col: 39, offset: 26604},
						run: (*parser).callonSubScriptOrSuperScriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 763, col: 39, offset: 26604},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 767, col: 1, offset: 26737},
			expr: &actionExpr{
				pos: position{line: 767, col: 25, offset: 26761},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 767, col: 25, offset: 26761},
					expr: &litMatcher{
						pos:        position{line: 767, col: 25, offset: 26761},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 771, col: 1, offset: 26802},
			expr: &actionExpr{
				pos: position{line: 771, col: 25, offset: 26826},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 771, col: 25, offset: 26826},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 771, col: 25, offset: 26826},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 771, col: 30, offset: 26831},
							expr: &litMatcher{
								pos:        position{line: 771, col: 30, offset: 26831},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 779, col: 1, offset: 26928},
			expr: &choiceExpr{
				pos: position{line: 779, col: 13, offset: 26940},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 779, col: 13, offset: 26940},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 779, col: 35, offset: 26962},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 781, col: 1, offset: 26983},
			expr: &actionExpr{
				pos: position{line: 781, col: 24, offset: 27006},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 781, col: 24, offset: 27006},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 781, col: 24, offset: 27006},
							expr: &litMatcher{
								pos:        position{line: 781, col: 25, offset: 27007},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 781, col: 30, offset: 27012},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 781, col: 35, offset: 27017},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 781, col: 44, offset: 27026},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 781, col: 72, offset: 27054},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 785, col: 1, offset: 27179},
			expr: &seqExpr{
				pos: position{line: 785, col: 31, offset: 27209},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 785, col: 31, offset: 27209},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 785, col: 58, offset: 27236},
						expr: &actionExpr{
							pos: position{line: 785, col: 59, offset: 27237},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 785, col: 59, offset: 27237},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 785, col: 59, offset: 27237},
										expr: &litMatcher{
											pos:        position{line: 785, col: 61, offset: 27239},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 785, col: 67, offset: 27245},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 785, col: 76, offset: 27254},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 785, col: 76, offset: 27254},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 785, col: 81, offset: 27259},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 789, col: 1, offset: 27351},
			expr: &actionExpr{
				pos: position{line: 789, col: 31, offset: 27381},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 789, col: 31, offset: 27381},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 789, col: 31, offset: 27381},
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 32, offset: 27382},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 40, offset: 27390},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 789, col: 49, offset: 27399},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 789, col: 49, offset: 27399},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 790, col: 11, offset: 27430},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 791, col: 11, offset: 27452},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 792, col: 11, offset: 27476},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 793, col: 11, offset: 27500},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 794, col: 11, offset: 27526},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 795, col: 11, offset: 27549},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 796, col: 11, offset: 27565},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 797, col: 11, offset: 27588},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 801, col: 1, offset: 27744},
			expr: &actionExpr{
				pos: position{line: 801, col: 27, offset: 27770},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 801, col: 27, offset: 27770},
					exprs: []interface{}{
						&anyMatcher{
							line: 801, col: 28, offset: 27771,
						},
						&zeroOrMoreExpr{
							pos: position{line: 801, col: 31, offset: 27774},
							expr: &seqExpr{
								pos: position{line: 801, col: 32, offset: 27775},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 801, col: 32, offset: 27775},
										expr: &litMatcher{
											pos:        position{line: 801, col: 33, offset: 27776},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 801, col: 38, offset: 27781},
										expr: &ruleRefExpr{
											pos:  position{line: 801, col: 39, offset: 27782},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 801, col: 42, offset: 27785},
										expr: &litMatcher{
											pos:        position{line: 801, col: 43, offset: 27786},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 801, col: 47, offset: 27790},
										expr: &litMatcher{
											pos:        position{line: 801, col: 48, offset: 27791},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 801, col: 52, offset: 27795},
										expr: &ruleRefExpr{
											pos:  position{line: 801, col: 53, offset: 27796},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 801, col: 61, offset: 27804,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 805, col: 1, offset: 27864},
			expr: &choiceExpr{
				pos: position{line: 805, col: 24, offset: 27887},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 805, col: 24, offset: 27887},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 805, col: 24, offset: 27887},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 805, col: 24, offset: 27887},
									expr: &litMatcher{
										pos:        position{line: 805, col: 25, offset: 27888},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 805, col: 29, offset: 27892},
									expr: &litMatcher{
										pos:        position{line: 805, col: 30, offset: 27893},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 805, col: 35, offset: 27898},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 805, col: 39, offset: 27902},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 805, col: 48, offset: 27911},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 805, col: 76, offset: 27939},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 807, col: 5, offset: 28119},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 807, col: 5, offset: 28119},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 807, col: 5, offset: 28119},
									expr: &litMatcher{
										pos:        position{line: 807, col: 6, offset: 28120},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 807, col: 11, offset: 28125},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 807, col: 16, offset: 28130},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 807, col: 25, offset: 28139},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 807, col: 53, offset: 28167},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 811, col: 1, offset: 28425},
			expr: &seqExpr{
				pos: position{line: 811, col: 31, offset: 28455},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 811, col: 31, offset: 28455},
						expr: &ruleRefExpr{
							pos:  position{line: 811, col: 32, offset: 28456},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 811, col: 35, offset: 28459},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 811, col: 62, offset: 28486},
						expr: &actionExpr{
							pos: position{line: 811, col: 63, offset: 28487},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 811, col: 63, offset: 28487},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 811, col: 63, offset: 28487},
										expr: &seqExpr{
											pos: position{line: 811, col: 65, offset: 28489},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 811, col: 65, offset: 28489},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 811, col: 69, offset: 28493},
													expr: &ruleRefExpr{
														pos:  position{line: 811, col: 70, offset: 28494},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 811, col: 80, offset: 28504},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 811, col: 88, offset: 28512},
											expr: &ruleRefExpr{
												pos:  position{line: 811, col: 88, offset: 28512},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 811, col: 93, offset: 28517},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 811, col: 102, offset: 28526},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 815, col: 1, offset: 28617},
			expr: &actionExpr{
				pos: position{line: 815, col: 31, offset: 28647},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 815, col: 31, offset: 28647},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 815, col: 31, offset: 28647},
							expr: &ruleRefExpr{
								pos:  position{line: 815, col: 32, offset: 28648},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 815, col: 40, offset: 28656},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 815, col: 49, offset: 28665},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 815, col: 49, offset: 28665},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 816, col: 11, offset: 28695},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 817, col: 11, offset: 28717},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 818, col: 11, offset: 28741},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 819, col: 11, offset: 28765},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 820, col: 11, offset: 28791},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 821, col: 11, offset: 28814},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 822, col: 11, offset: 28830},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 823, col: 11, offset: 28853},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 827, col: 1, offset: 29009},
			expr: &actionExpr{
				pos: position{line: 827, col: 27, offset: 29035},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 827, col: 27, offset: 29035},
					exprs: []interface{}{
						&anyMatcher{
							line: 827, col: 28, offset: 29036,
						},
						&zeroOrMoreExpr{
							pos: position{line: 827, col: 31, offset: 29039},
							expr: &seqExpr{
								pos: position{line: 827, col: 32, offset: 29040},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 827, col: 32, offset: 29040},
										expr: &litMatcher{
											pos:        position{line: 827, col: 33, offset: 29041},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 827, col: 37, offset: 29045},
										expr: &ruleRefExpr{
											pos:  position{line: 827, col: 38, offset: 29046},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 827, col: 41, offset: 29049},
										expr: &litMatcher{
											pos:        position{line: 827, col: 42, offset: 29050},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 827, col: 46, offset: 29054},
										expr: &litMatcher{
											pos:        position{line: 827, col: 47, offset: 29055},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 827, col: 51, offset: 29059},
										expr: &ruleRefExpr{
											pos:  position{line: 827, col: 52, offset: 29060},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 827, col: 60, offset: 29068,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 831, col: 1, offset: 29128},
			expr: &choiceExpr{
				pos: position{line: 832, col: 5, offset: 29152},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 29152},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 832, col: 5, offset: 29152},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 832, col: 5, offset: 29152},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 18, offset: 29165},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 832, col: 40, offset: 29187},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 832, col: 45, offset: 29192},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 54, offset: 29201},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 832, col: 82, offset: 29229},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 834, col: 9, offset: 29385},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 834, col: 9, offset: 29385},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 834, col: 9, offset: 29385},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 834, col: 22, offset: 29398},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 834, col: 44, offset: 29420},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 834, col: 49, offset: 29425},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 834, col: 58, offset: 29434},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 834, col: 86, offset: 29462},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 837, col: 9, offset: 29661},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 837, col: 9, offset: 29661},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 837, col: 9, offset: 29661},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 837, col: 22, offset: 29674},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 837, col: 44, offset: 29696},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 837, col: 48, offset: 29700},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 837, col: 57, offset: 29709},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 837, col: 85, offset: 29737},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 845, col: 1, offset: 29944},
			expr: &choiceExpr{
				pos: position{line: 845, col: 15, offset: 29958},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 845, col: 15, offset: 29958},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 845, col: 39, offset: 29982},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 847, col: 1, offset: 30005},
			expr: &actionExpr{
				pos: position{line: 847, col: 26, offset: 30030},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 847, col: 26, offset: 30030},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 847, col: 26, offset: 30030},
							expr: &litMatcher{
								pos:        position{line: 847, col: 27, offset: 30031},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 847, col: 32, offset: 30036},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 847, col: 37, offset: 30041},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 46, offset: 30050},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 847, col: 76, offset: 30080},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 851, col: 1, offset: 30206},
			expr: &seqExpr{
				pos: position{line: 851, col: 33, offset: 30238},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 851, col: 33, offset: 30238},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 851, col: 62, offset: 30267},
						expr: &actionExpr{
							pos: position{line: 851, col: 63, offset: 30268},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 851, col: 63, offset: 30268},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 851, col: 63, offset: 30268},
										expr: &litMatcher{
											pos:        position{line: 851, col: 65, offset: 30270},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 851, col: 71, offset: 30276},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 851, col: 80, offset: 30285},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 851, col: 80, offset: 30285},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 851, col: 85, offset: 30290},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 855, col: 1, offset: 30384},
			expr: &actionExpr{
				pos: position{line: 855, col: 33, offset: 30416},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 855, col: 33, offset: 30416},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 855, col: 33, offset: 30416},
							expr: &ruleRefExpr{
								pos:  position{line: 855, col: 34, offset: 30417},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 855, col: 42, offset: 30425},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 855, col: 51, offset: 30434},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 855, col: 51, offset: 30434},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 856, col: 11, offset: 30467},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 30487},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 858, col: 11, offset: 30511},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 859, col: 11, offset: 30535},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 860, col: 11, offset: 30561},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 861, col: 11, offset: 30584},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 862, col: 11, offset: 30600},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 863, col: 11, offset: 30623},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 867, col: 1, offset: 30781},
			expr: &actionExpr{
				pos: position{line: 867, col: 29, offset: 30809},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 867, col: 29, offset: 30809},
					exprs: []interface{}{
						&anyMatcher{
							line: 867, col: 30, offset: 30810,
						},
						&zeroOrMoreExpr{
							pos: position{line: 867, col: 33, offset: 30813},
							expr: &seqExpr{
								pos: position{line: 867, col: 34, offset: 30814},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 867, col: 34, offset: 30814},
										expr: &litMatcher{
											pos:        position{line: 867, col: 35, offset: 30815},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 867, col: 40, offset: 30820},
										expr: &litMatcher{
											pos:        position{line: 867, col: 41, offset: 30821},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 867, col: 45, offset: 30825},
										expr: &litMatcher{
											pos:        position{line: 867, col: 46, offset: 30826},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 867, col: 50, offset: 30830},
										expr: &ruleRefExpr{
											pos:  position{line: 867, col: 51, offset: 30831},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 867, col: 59, offset: 30839,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 871, col: 1, offset: 30899},
			expr: &choiceExpr{
				pos: position{line: 871, col: 26, offset: 30924},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 871, col: 26, offset: 30924},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 871, col: 26, offset: 30924},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 871, col: 26, offset: 30924},
									expr: &litMatcher{
										pos:        position{line: 871, col: 27, offset: 30925},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 871, col: 31, offset: 30929},
									expr: &litMatcher{
										pos:        position{line: 871, col: 32, offset: 30930},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 871, col: 37, offset: 30935},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 871, col: 41, offset: 30939},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 871, col: 50, offset: 30948},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 871, col: 80, offset: 30978},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 31160},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 873, col: 5, offset: 31160},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 873, col: 5, offset: 31160},
									expr: &litMatcher{
										pos:        position{line: 873, col: 6, offset: 31161},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 873, col: 11, offset: 31166},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 873, col: 16, offset: 31171},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 25, offset: 31180},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 873, col: 55, offset: 31210},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 877, col: 1, offset: 31472},
			expr: &seqExpr{
				pos: position{line: 877, col: 33, offset: 31504},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 877, col: 33, offset: 31504},
						expr: &ruleRefExpr{
							pos:  position{line: 877, col: 34, offset: 31505},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 877, col: 37, offset: 31508},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 877, col: 66, offset: 31537},
						expr: &actionExpr{
							pos: position{line: 877, col: 67, offset: 31538},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 877, col: 67, offset: 31538},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 877, col: 67, offset: 31538},
										expr: &seqExpr{
											pos: position{line: 877, col: 69, offset: 31540},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 877, col: 69, offset: 31540},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 877, col: 73, offset: 31544},
													expr: &ruleRefExpr{
														pos:  position{line: 877, col: 74, offset: 31545},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 877, col: 84, offset: 31555},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 877, col: 92, offset: 31563},
											expr: &ruleRefExpr{
												pos:  position{line: 877, col: 92, offset: 31563},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 877, col: 97, offset: 31568},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 877, col: 106, offset: 31577},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 881, col: 1, offset: 31670},
			expr: &actionExpr{
				pos: position{line: 881, col: 33, offset: 31702},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 881, col: 33, offset: 31702},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 881, col: 33, offset: 31702},
							expr: &ruleRefExpr{
								pos:  position{line: 881, col: 34, offset: 31703},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 881, col: 42, offset: 31711},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 881, col: 51, offset: 31720},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 881, col: 51, offset: 31720},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 882, col: 11, offset: 31752},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 883, col: 11, offset: 31772},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 884, col: 11, offset: 31796},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 885, col: 11, offset: 31820},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 886, col: 11, offset: 31846},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 887, col: 11, offset: 31869},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 888, col: 11, offset: 31885},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 889, col: 11, offset: 31908},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 893, col: 1, offset: 32066},
			expr: &actionExpr{
				pos: position{line: 893, col: 29, offset: 32094},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 893, col: 29, offset: 32094},
					exprs: []interface{}{
						&anyMatcher{
							line: 893, col: 30, offset: 32095,
						},
						&zeroOrMoreExpr{
							pos: position{line: 893, col: 33, offset: 32098},
							expr: &seqExpr{
								pos: position{line: 893, col: 34, offset: 32099},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 893, col: 34, offset: 32099},
										expr: &litMatcher{
											pos:        position{line: 893, col: 35, offset: 32100},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 893, col: 39, offset: 32104},
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 40, offset: 32105},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 893, col: 43, offset: 32108},
										expr: &litMatcher{
											pos:        position{line: 893, col: 44, offset: 32109},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 893, col: 48, offset: 32113},
										expr: &litMatcher{
											pos:        position{line: 893, col: 49, offset: 32114},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 893, col: 53, offset: 32118},
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 54, offset: 32119},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 893, col: 62, offset: 32127,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 897, col: 1, offset: 32187},
			expr: &choiceExpr{
				pos: position{line: 898, col: 5, offset: 32213},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 898, col: 5, offset: 32213},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 898, col: 5, offset: 32213},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 898, col: 5, offset: 32213},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 898, col: 18, offset: 32226},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 898, col: 40, offset: 32248},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 898, col: 45, offset: 32253},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 898, col: 54, offset: 32262},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 898, col: 84, offset: 32292},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 900, col: 9, offset: 32448},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 900, col: 9, offset: 32448},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 900, col: 9, offset: 32448},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 900, col: 22, offset: 32461},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 900, col: 44, offset: 32483},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 900, col: 49, offset: 32488},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 900, col: 58, offset: 32497},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 900, col: 88, offset: 32527},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 903, col: 9, offset: 32726},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 903, col: 9, offset: 32726},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 903, col: 9, offset: 32726},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 903, col: 22, offset: 32739},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 903, col: 44, offset: 32761},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 903, col: 48, offset: 32765},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 903, col: 57, offset: 32774},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 903, col: 87, offset: 32804},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 911, col: 1, offset: 33014},
			expr: &choiceExpr{
				pos: position{line: 911, col: 18, offset: 33031},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 911, col: 18, offset: 33031},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 911, col: 45, offset: 33058},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 913, col: 1, offset: 33084},
			expr: &actionExpr{
				pos: position{line: 913, col: 29, offset: 33112},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 913, col: 29, offset: 33112},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 913, col: 29, offset: 33112},
							expr: &litMatcher{
								pos:        position{line: 913, col: 30, offset: 33113},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 913, col: 35, offset: 33118},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 913, col: 40, offset: 33123},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 49, offset: 33132},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 913, col: 82, offset: 33165},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 917, col: 1, offset: 33294},
			expr: &seqExpr{
				pos: position{line: 917, col: 36, offset: 33329},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 917, col: 36, offset: 33329},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 917, col: 68, offset: 33361},
						expr: &actionExpr{
							pos: position{line: 917, col: 69, offset: 33362},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 917, col: 69, offset: 33362},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 917, col: 69, offset: 33362},
										expr: &litMatcher{
											pos:        position{line: 917, col: 71, offset: 33364},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 917, col: 77, offset: 33370},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 917, col: 86, offset: 33379},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 917, col: 86, offset: 33379},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 917, col: 91, offset: 33384},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 921, col: 1, offset: 33481},
			expr: &actionExpr{
				pos: position{line: 921, col: 36, offset: 33516},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 921, col: 36, offset: 33516},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 921, col: 36, offset: 33516},
							expr: &ruleRefExpr{
								pos:  position{line: 921, col: 37, offset: 33517},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 921, col: 45, offset: 33525},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 921, col: 54, offset: 33534},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 921, col: 54, offset: 33534},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 922, col: 11, offset: 33570},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 923, col: 11, offset: 33589},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 924, col: 11, offset: 33611},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 925, col: 11, offset: 33635},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 926, col: 11, offset: 33661},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 927, col: 11, offset: 33684},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 928, col: 11, offset: 33700},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 929, col: 11, offset: 33723},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 933, col: 1, offset: 33884},
			expr: &actionExpr{
				pos: position{line: 933, col: 32, offset: 33915},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 933, col: 32, offset: 33915},
					exprs: []interface{}{
						&anyMatcher{
							line: 933, col: 33, offset: 33916,
						},
						&zeroOrMoreExpr{
							pos: position{line: 933, col: 36, offset: 33919},
							expr: &seqExpr{
								pos: position{line: 933, col: 37, offset: 33920},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 933, col: 37, offset: 33920},
										expr: &litMatcher{
											pos:        position{line: 933, col: 38, offset: 33921},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 933, col: 43, offset: 33926},
										expr: &ruleRefExpr{
											pos:  position{line: 933, col: 44, offset: 33927},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 933, col: 47, offset: 33930},
										expr: &litMatcher{
											pos:        position{line: 933, col: 48, offset: 33931},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 933, col: 52, offset: 33935},
										expr: &litMatcher{
											pos:        position{line: 933, col: 53, offset: 33936},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 933, col: 57, offset: 33940},
										expr: &ruleRefExpr{
											pos:  position{line: 933, col: 58, offset: 33941},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 933, col: 66, offset: 33949,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 937, col: 1, offset: 34009},
			expr: &choiceExpr{
				pos: position{line: 937, col: 29, offset: 34037},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 937, col: 29, offset: 34037},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 937, col: 29, offset: 34037},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 937, col: 29, offset: 34037},
									expr: &litMatcher{
										pos:        position{line: 937, col: 30, offset: 34038},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 937, col: 34, offset: 34042},
									expr: &litMatcher{
										pos:        position{line: 937, col: 35, offset: 34043},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 937, col: 40, offset: 34048},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 937, col: 44, offset: 34052},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 53, offset: 34061},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 937, col: 86, offset: 34094},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 34279},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 939, col: 5, offset: 34279},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 939, col: 5, offset: 34279},
									expr: &litMatcher{
										pos:        position{line: 939, col: 6, offset: 34280},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 11, offset: 34285},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 939, col: 16, offset: 34290},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 25, offset: 34299},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 58, offset: 34332},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 943, col: 1, offset: 34600},
			expr: &seqExpr{
				pos: position{line: 943, col: 36, offset: 34635},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 943, col: 36, offset: 34635},
						expr: &ruleRefExpr{
							pos:  position{line: 943, col: 37, offset: 34636},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 40, offset: 34639},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 943, col: 72, offset: 34671},
						expr: &actionExpr{
							pos: position{line: 943, col: 73, offset: 34672},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 943, col: 73, offset: 34672},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 943, col: 73, offset: 34672},
										expr: &seqExpr{
											pos: position{line: 943, col: 75, offset: 34674},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 943, col: 75, offset: 34674},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 943, col: 79, offset: 34678},
													expr: &ruleRefExpr{
														pos:  position{line: 943, col: 80, offset: 34679},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 943, col: 90, offset: 34689},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 943, col: 98, offset: 34697},
											expr: &ruleRefExpr{
												pos:  position{line: 943, col: 98, offset: 34697},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 943, col: 103, offset: 34702},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 943, col: 112, offset: 34711},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 947, col: 1, offset: 34807},
			expr: &actionExpr{
				pos: position{line: 947, col: 37, offset: 34843},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 947, col: 37, offset: 34843},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 947, col: 46, offset: 34852},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 947, col: 46, offset: 34852},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 948, col: 11, offset: 34890},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 949, col: 11, offset: 34926},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 950, col: 11, offset: 34946},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 951, col: 11, offset: 34967},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 952, col: 11, offset: 34991},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 953, col: 11, offset: 35017},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 954, col: 11, offset: 35040},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 955, col: 11, offset: 35056},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 956, col: 11, offset: 35079},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 960, col: 1, offset: 35240},
			expr: &actionExpr{
				pos: position{line: 960, col: 32, offset: 35271},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 960, col: 32, offset: 35271},
					exprs: []interface{}{
						&anyMatcher{
							line: 960, col: 33, offset: 35272,
						},
						&zeroOrMoreExpr{
							pos: position{line: 960, col: 36, offset: 35275},
							expr: &seqExpr{
								pos: position{line: 960, col: 37, offset: 35276},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 960, col: 37, offset: 35276},
										expr: &ruleRefExpr{
											pos:  position{line: 960, col: 38, offset: 35277},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 960, col: 41, offset: 35280},
										expr: &litMatcher{
											pos:        position{line: 960, col: 42, offset: 35281},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 960, col: 46, offset: 35285},
										expr: &litMatcher{
											pos:        position{line: 960, col: 47, offset: 35286},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 960, col: 51, offset: 35290},
										expr: &litMatcher{
											pos:        position{line: 960, col: 52, offset: 35291},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 960, col: 56, offset: 35295},
										expr: &ruleRefExpr{
											pos:  position{line: 960, col: 57, offset: 35296},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 960, col: 65, offset: 35304,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 964, col: 1, offset: 35385},
			expr: &choiceExpr{
				pos: position{line: 965, col: 5, offset: 35414},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 35414},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 965, col: 5, offset: 35414},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 965, col: 5, offset: 35414},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 965, col: 18, offset: 35427},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 965, col: 40, offset: 35449},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 965, col: 45, offset: 35454},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 965, col: 54, offset: 35463},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 965, col: 87, offset: 35496},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 967, col: 9, offset: 35652},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 967, col: 9, offset: 35652},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 967, col: 9, offset: 35652},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 22, offset: 35665},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 44, offset: 35687},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 967, col: 49, offset: 35692},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 58, offset: 35701},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 91, offset: 35734},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 9, offset: 35933},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 970, col: 9, offset: 35933},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 970, col: 9, offset: 35933},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 22, offset: 35946},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 970, col: 44, offset: 35968},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 970, col: 48, offset: 35972},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 57, offset: 35981},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 970, col: 90, offset: 36014},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 974, col: 1, offset: 36163},
			expr: &actionExpr{
				pos: position{line: 974, col: 18, offset: 36180},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 974, col: 18, offset: 36180},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 974, col: 18, offset: 36180},
							expr: &litMatcher{
								pos:        position{line: 974, col: 19, offset: 36181},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 974, col: 23, offset: 36185},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 974, col: 27, offset: 36189},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 974, col: 36, offset: 36198},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 974, col: 58, offset: 36220},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 978, col: 1, offset: 36309},
			expr: &choiceExpr{
				pos: position{line: 978, col: 25, offset: 36333},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 978, col: 25, offset: 36333},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 978, col: 38, offset: 36346},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 980, col: 1, offset: 36365},
			expr: &actionExpr{
				pos: position{line: 980, col: 21, offset: 36385},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 980, col: 21, offset: 36385},
					expr: &seqExpr{
						pos: position{line: 980, col: 22, offset: 36386},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 980, col: 22, offset: 36386},
								expr: &ruleRefExpr{
									pos:  position{line: 980, col: 23, offset: 36387},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 980, col: 31, offset: 36395},
								expr: &ruleRefExpr{
									pos:  position{line: 980, col: 32, offset: 36396},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 980, col: 35, offset: 36399},
								expr: &litMatcher{
									pos:        position{line: 980, col: 36, offset: 36400},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 980, col: 40, offset: 36404,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 984, col: 1, offset: 36437},
			expr: &actionExpr{
				pos: position{line: 984, col: 25, offset: 36461},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 984, col: 25, offset: 36461},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 984, col: 25, offset: 36461},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 984, col: 38, offset: 36474},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 984, col: 60, offset: 36496},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 984, col: 64, offset: 36500},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 984, col: 73, offset: 36509},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 984, col: 95, offset: 36531},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 988, col: 1, offset: 36660},
			expr: &actionExpr{
				pos: position{line: 988, col: 20, offset: 36679},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 988, col: 20, offset: 36679},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 988, col: 20, offset: 36679},
							expr: &litMatcher{
								pos:        position{line: 988, col: 21, offset: 36680},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 988, col: 25, offset: 36684},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 988, col: 29, offset: 36688},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 38, offset: 36697},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 988, col: 62, offset: 36721},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 992, col: 1, offset: 36812},
			expr: &choiceExpr{
				pos: position{line: 992, col: 27, offset: 36838},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 992, col: 27, offset: 36838},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 40, offset: 36851},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 994, col: 1, offset: 36872},
			expr: &actionExpr{
				pos: position{line: 994, col: 23, offset: 36894},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 994, col: 23, offset: 36894},
					expr: &seqExpr{
						pos: position{line: 994, col: 24, offset: 36895},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 994, col: 24, offset: 36895},
								expr: &ruleRefExpr{
									pos:  position{line: 994, col: 25, offset: 36896},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 994, col: 33, offset: 36904},
								expr: &ruleRefExpr{
									pos:  position{line: 994, col: 34, offset: 36905},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 994, col: 37, offset: 36908},
								expr: &litMatcher{
									pos:        position{line: 994, col: 38, offset: 36909},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 994, col: 42, offset: 36913,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 998, col: 1, offset: 36946},
			expr: &actionExpr{
				pos: position{line: 998, col: 27, offset: 36972},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 998, col: 27, offset: 36972},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 998, col: 27, offset: 36972},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 40, offset: 36985},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 998, col: 62, offset: 37007},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 998, col: 66, offset: 37011},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 75, offset: 37020},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 998, col: 99, offset: 37044},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1005, col: 1, offset: 37280},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 16, offset: 37295},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1005, col: 16, offset: 37295},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 40, offset: 37319},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 64, offset: 37343},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1007, col: 1, offset: 37361},
			expr: &litMatcher{
				pos:        position{line: 1007, col: 32, offset: 37392},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1009, col: 1, offset: 37397},
			expr: &actionExpr{
				pos: position{line: 1009, col: 26, offset: 37422},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1009, col: 26, offset: 37422},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1009, col: 26, offset: 37422},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1009, col: 54, offset: 37450},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1009, col: 63, offset: 37459},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1009, col: 93, offset: 37489},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1009, col: 121, offset: 37517},
							expr: &ruleRefExpr{
								pos:  position{line: 1009, col: 122, offset: 37518},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1013, col: 1, offset: 37617},
			expr: &choiceExpr{
				pos: position{line: 1013, col: 33, offset: 37649},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1013, col: 34, offset: 37650},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1013, col: 34, offset: 37650},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1013, col: 35, offset: 37651},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1013, col: 35, offset: 37651},
											expr: &ruleRefExpr{
												pos:  position{line: 1013, col: 36, offset: 37652},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1013, col: 64, offset: 37680},
											expr: &ruleRefExpr{
												pos:  position{line: 1013, col: 65, offset: 37681},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1013, col: 68, offset: 37684},
											expr: &ruleRefExpr{
												pos:  position{line: 1013, col: 69, offset: 37685},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1013, col: 77, offset: 37693,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1013, col: 80, offset: 37696},
									expr: &seqExpr{
										pos: position{line: 1013, col: 81, offset: 37697},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1013, col: 81, offset: 37697},
												expr: &seqExpr{
													pos: position{line: 1013, col: 83, offset: 37699},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1013, col: 83, offset: 37699},
															expr: &ruleRefExpr{
																pos:  position{line: 1013, col: 83, offset: 37699},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1013, col: 87, offset: 37703},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1013, col: 116, offset: 37732},
												expr: &ruleRefExpr{
													pos:  position{line: 1013, col: 117, offset: 37733},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1013, col: 145, offset: 37761},
												expr: &ruleRefExpr{
													pos:  position{line: 1013, col: 146, offset: 37762},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1013, col: 154, offset: 37770,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 7, offset: 37912},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1015, col: 8, offset: 37913},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1015, col: 8, offset: 37913},
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 9, offset: 37914},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1015, col: 12, offset: 37917},
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 13, offset: 37918},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1015, col: 21, offset: 37926},
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 22, offset: 37927},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1015, col: 50, offset: 37955,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1019, col: 1, offset: 38037},
			expr: &litMatcher{
				pos:        position{line: 1019, col: 32, offset: 38068},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1021, col: 1, offset: 38075},
			expr: &actionExpr{
				pos: position{line: 1021, col: 26, offset: 38100},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1021, col: 26, offset: 38100},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1021, col: 26, offset: 38100},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1021, col: 54, offset: 38128},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 63, offset: 38137},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1021, col: 93, offset: 38167},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1021, col: 121, offset: 38195},
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 122, offset: 38196},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1025, col: 1, offset: 38295},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 33, offset: 38327},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1025, col: 34, offset: 38328},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1025, col: 34, offset: 38328},
							expr: &seqExpr{
								pos: position{line: 1025, col: 35, offset: 38329},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1025, col: 35, offset: 38329},
										expr: &ruleRefExpr{
											pos:  position{line: 1025, col: 36, offset: 38330},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1025, col: 64, offset: 38358,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1027, col: 7, offset: 38523},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1027, col: 7, offset: 38523},
							expr: &seqExpr{
								pos: position{line: 1027, col: 8, offset: 38524},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1027, col: 8, offset: 38524},
										expr: &ruleRefExpr{
											pos:  position{line: 1027, col: 9, offset: 38525},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1027, col: 12, offset: 38528},
										expr: &ruleRefExpr{
											pos:  position{line: 1027, col: 13, offset: 38529},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1027, col: 21, offset: 38537},
										expr: &ruleRefExpr{
											pos:  position{line: 1027, col: 22, offset: 38538},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1027, col: 50, offset: 38566,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1031, col: 1, offset: 38649},
			expr: &choiceExpr{
				pos: position{line: 1031, col: 21, offset: 38669},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1031, col: 21, offset: 38669},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1031, col: 21, offset: 38669},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1031, col: 21, offset: 38669},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1031, col: 30, offset: 38678},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1031, col: 38, offset: 38686},
										expr: &ruleRefExpr{
											pos:  position{line: 1031, col: 39, offset: 38687},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1031, col: 67, offset: 38715},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1033, col: 5, offset: 38805},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1033, col: 5, offset: 38805},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1033, col: 5, offset: 38805},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1033, col: 15, offset: 38815},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1033, col: 23, offset: 38823},
										expr: &choiceExpr{
											pos: position{line: 1033, col: 24, offset: 38824},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1033, col: 24, offset: 38824},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1033, col: 37, offset: 38837},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1033, col: 65, offset: 38865},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1037, col: 1, offset: 38955},
			expr: &choiceExpr{
				pos: position{line: 1037, col: 31, offset: 38985},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1037, col: 31, offset: 38985},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1037, col: 43, offset: 38997},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1037, col: 52, offset: 39006},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1037, col: 53, offset: 39007},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1037, col: 53, offset: 39007},
									expr: &litMatcher{
										pos:        position{line: 1037, col: 54, offset: 39008},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1037, col: 58, offset: 39012,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1044, col: 1, offset: 39182},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 19, offset: 39200},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1044, col: 19, offset: 39200},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1044, col: 19, offset: 39200},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1044, col: 19, offset: 39200},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1044, col: 24, offset: 39205},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1044, col: 28, offset: 39209},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1044, col: 32, offset: 39213},
									expr: &ruleRefExpr{
										pos:  position{line: 1044, col: 32, offset: 39213},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1044, col: 36, offset: 39217},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1044, col: 40, offset: 39221},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1044, col: 47, offset: 39228},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1044, col: 68, offset: 39249},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1046, col: 5, offset: 39324},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1046, col: 5, offset: 39324},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1046, col: 5, offset: 39324},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 10, offset: 39329},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 14, offset: 39333},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1046, col: 18, offset: 39337},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1050, col: 1, offset: 39400},
			expr: &actionExpr{
				pos: position{line: 1050, col: 24, offset: 39423},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1050, col: 24, offset: 39423},
					expr: &choiceExpr{
						pos: position{line: 1050, col: 25, offset: 39424},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1050, col: 25, offset: 39424},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1050, col: 37, offset: 39436},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 1050, col: 46, offset: 39445},
								run: (*parser).callonCrossReferenceLabel6,
								expr: &seqExpr{
									pos: position{line: 1050, col: 47, offset: 39446},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1050, col: 47, offset: 39446},
											expr: &litMatcher{
												pos:        position{line: 1050, col: 48, offset: 39447},
												val:        ">>",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 1050, col: 54, offset: 39453,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1059, col: 1, offset: 39629},
			expr: &actionExpr{
				pos: position{line: 1059, col: 9, offset: 39637},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1059, col: 9, offset: 39637},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1059, col: 15, offset: 39643},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1059, col: 15, offset: 39643},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1059, col: 30, offset: 39658},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1063, col: 1, offset: 39698},
			expr: &choiceExpr{
				pos: position{line: 1063, col: 17, offset: 39714},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1063, col: 17, offset: 39714},
						run: (*parser).callonExternalLink2,
						expr: &seqExpr{
							pos: position{line: 1063, col: 17, offset: 39714},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1063, col: 17, offset: 39714},
									label: "url",
									expr: &ruleRefExpr{
										pos:  position{line: 1063, col: 22, offset: 39719},
										name: "Location",
									},
								},
								&labeledExpr{
									pos:   position{line: 1063, col: 32, offset: 39729},
									label: "inlineAttributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1063, col: 50, offset: 39747},
										name: "LinkAttributes",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 39866},
						run: (*parser).callonExternalLink8,
						expr: &labeledExpr{
							pos:   position{line: 1065, col: 5, offset: 39866},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1065, col: 10, offset: 39871},
								name: "Location",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1070, col: 1, offset: 40033},
			expr: &actionExpr{
				pos: position{line: 1070, col: 17, offset: 40049},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1070, col: 17, offset: 40049},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1070, col: 17, offset: 40049},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 25, offset: 40057},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1070, col: 30, offset: 40062},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1070, col: 30, offset: 40062},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1070, col: 41, offset: 40073},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 55, offset: 40087},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1070, col: 73, offset: 40105},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1074, col: 1, offset: 40223},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 19, offset: 40241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1074, col: 19, offset: 40241},
						run: (*parser).callonLinkAttributes2,
						expr: &seqExpr{
							pos: position{line: 1074, col: 19, offset: 40241},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1074, col: 19, offset: 40241},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 23, offset: 40245},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 1074, col: 29, offset: 40251},
										name: "LinkTextAttribute",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1074, col: 48, offset: 40270},
									expr: &litMatcher{
										pos:        position{line: 1074, col: 48, offset: 40270},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1074, col: 53, offset: 40275},
									expr: &ruleRefExpr{
										pos:  position{line: 1074, col: 53, offset: 40275},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 57, offset: 40279},
									label: "otherattrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1074, col: 68, offset: 40290},
										expr: &ruleRefExpr{
											pos:  position{line: 1074, col: 69, offset: 40291},
											name: "GenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1074, col: 88, offset: 40310},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1076, col: 5, offset: 40418},
						run: (*parser).callonLinkAttributes15,
						expr: &seqExpr{
							pos: position{line: 1076, col: 5, offset: 40418},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1076, col: 5, offset: 40418},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 9, offset: 40422},
									label: "otherattrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1076, col: 20, offset: 40433},
										expr: &ruleRefExpr{
											pos:  position{line: 1076, col: 21, offset: 40434},
											name: "GenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 40, offset: 40453},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1080, col: 1, offset: 40537},
			expr: &actionExpr{
				pos: position{line: 1080, col: 22, offset: 40558},
				run: (*parser).callonLinkTextAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 1080, col: 22, offset: 40558},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1080, col: 31, offset: 40567},
						expr: &seqExpr{
							pos: position{line: 1080, col: 32, offset: 40568},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1080, col: 32, offset: 40568},
									expr: &litMatcher{
										pos:        position{line: 1080, col: 33, offset: 40569},
										val:        "=",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1080, col: 37, offset: 40573},
									expr: &litMatcher{
										pos:        position{line: 1080, col: 38, offset: 40574},
										val:        ",",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1080, col: 42, offset: 40578},
									expr: &litMatcher{
										pos:        position{line: 1080, col: 43, offset: 40579},
										val:        "]",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 1080, col: 48, offset: 40584},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1080, col: 48, offset: 40584},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 1080, col: 62, offset: 40598},
											run: (*parser).callonLinkTextAttribute13,
											expr: &seqExpr{
												pos: position{line: 1080, col: 63, offset: 40599},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1080, col: 63, offset: 40599},
														expr: &ruleRefExpr{
															pos:  position{line: 1080, col: 64, offset: 40600},
															name: "QuotedTextPrefix",
														},
													},
													&anyMatcher{
														line: 1080, col: 81, offset: 40617,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1089, col: 1, offset: 40846},
			expr: &actionExpr{
				pos: position{line: 1089, col: 15, offset: 40860},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1089, col: 15, offset: 40860},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1089, col: 15, offset: 40860},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1089, col: 26, offset: 40871},
								expr: &ruleRefExpr{
									pos:  position{line: 1089, col: 27, offset: 40872},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1089, col: 47, offset: 40892},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1089, col: 57, offset: 40902},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1089, col: 63, offset: 40908},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1089, col: 68, offset: 40913},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1089, col: 86, offset: 40931},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1089, col: 103, offset: 40948},
							expr: &ruleRefExpr{
								pos:  position{line: 1089, col: 103, offset: 40948},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1089, col: 107, offset: 40952},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1093, col: 1, offset: 41063},
			expr: &actionExpr{
				pos: position{line: 1093, col: 16, offset: 41078},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1093, col: 16, offset: 41078},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1093, col: 16, offset: 41078},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1093, col: 25, offset: 41087},
							expr: &litMatcher{
								pos:        position{line: 1093, col: 26, offset: 41088},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1093, col: 30, offset: 41092},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1093, col: 36, offset: 41098},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1093, col: 41, offset: 41103},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1093, col: 59, offset: 41121},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1097, col: 1, offset: 41234},
			expr: &actionExpr{
				pos: position{line: 1097, col: 20, offset: 41253},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1097, col: 20, offset: 41253},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1097, col: 20, offset: 41253},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1097, col: 24, offset: 41257},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1097, col: 28, offset: 41261},
								expr: &ruleRefExpr{
									pos:  position{line: 1097, col: 29, offset: 41262},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1097, col: 46, offset: 41279},
							expr: &litMatcher{
								pos:        position{line: 1097, col: 46, offset: 41279},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1097, col: 51, offset: 41284},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1097, col: 57, offset: 41290},
								expr: &ruleRefExpr{
									pos:  position{line: 1097, col: 58, offset: 41291},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1097, col: 75, offset: 41308},
							expr: &litMatcher{
								pos:        position{line: 1097, col: 75, offset: 41308},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1097, col: 80, offset: 41313},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1097, col: 87, offset: 41320},
								expr: &ruleRefExpr{
									pos:  position{line: 1097, col: 88, offset: 41321},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1097, col: 105, offset: 41338},
							expr: &litMatcher{
								pos:        position{line: 1097, col: 105, offset: 41338},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1097, col: 110, offset: 41343},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1097, col: 121, offset: 41354},
								expr: &ruleRefExpr{
									pos:  position{line: 1097, col: 122, offset: 41355},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1097, col: 141, offset: 41374},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ImageAttribute",
			pos:  position{line: 1102, col: 1, offset: 41468},
			expr: &actionExpr{
				pos: position{line: 1102, col: 19, offset: 41486},
				run: (*parser).callonImageAttribute1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1102, col: 19, offset: 41486},
					expr: &choiceExpr{
						pos: position{line: 1102, col: 20, offset: 41487},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1102, col: 20, offset: 41487},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1102, col: 32, offset: 41499},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1102, col: 42, offset: 41509},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1102, col: 42, offset: 41509},
										expr: &litMatcher{
											pos:        position{line: 1102, col: 43, offset: 41510},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1102, col: 47, offset: 41514},
										expr: &litMatcher{
											pos:        position{line: 1102, col: 48, offset: 41515},
											val:        "=",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1102, col: 52, offset: 41519},
										expr: &litMatcher{
											pos:        position{line: 1102, col: 53, offset: 41520},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1102, col: 57, offset: 41524,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1109, col: 1, offset: 41833},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 19, offset: 41851},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1109, col: 19, offset: 41851},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1109, col: 19, offset: 41851},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1109, col: 19, offset: 41851},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 32, offset: 41864},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 41, offset: 41873},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1109, col: 58, offset: 41890},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1111, col: 5, offset: 41965},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1111, col: 5, offset: 41965},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1111, col: 5, offset: 41965},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 21, offset: 41981},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 26, offset: 41986},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1111, col: 39, offset: 41999},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 43, offset: 42003},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 52, offset: 42012},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1111, col: 69, offset: 42029},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 5, offset: 42114},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1113, col: 5, offset: 42114},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1113, col: 5, offset: 42114},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 21, offset: 42130},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 26, offset: 42135},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1113, col: 39, offset: 42148},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1117, col: 1, offset: 42263},
			expr: &actionExpr{
				pos: position{line: 1117, col: 16, offset: 42278},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1117, col: 16, offset: 42278},
					expr: &choiceExpr{
						pos: position{line: 1117, col: 17, offset: 42279},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1117, col: 17, offset: 42279},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1117, col: 29, offset: 42291},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 1117, col: 38, offset: 42300},
								run: (*parser).callonFootnoteRef6,
								expr: &seqExpr{
									pos: position{line: 1117, col: 39, offset: 42301},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1117, col: 39, offset: 42301},
											expr: &litMatcher{
												pos:        position{line: 1117, col: 40, offset: 42302},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1117, col: 44, offset: 42306},
											expr: &litMatcher{
												pos:        position{line: 1117, col: 45, offset: 42307},
												val:        "]",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1117, col: 49, offset: 42311},
											expr: &ruleRefExpr{
												pos:  position{line: 1117, col: 50, offset: 42312},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 1117, col: 55, offset: 42317,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1123, col: 1, offset: 42436},
			expr: &actionExpr{
				pos: position{line: 1123, col: 20, offset: 42455},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1123, col: 20, offset: 42455},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1123, col: 29, offset: 42464},
						expr: &seqExpr{
							pos: position{line: 1123, col: 30, offset: 42465},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1123, col: 30, offset: 42465},
									expr: &litMatcher{
										pos:        position{line: 1123, col: 31, offset: 42466},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1123, col: 35, offset: 42470},
									expr: &ruleRefExpr{
										pos:  position{line: 1123, col: 36, offset: 42471},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1123, col: 40, offset: 42475},
									expr: &ruleRefExpr{
										pos:  position{line: 1123, col: 40, offset: 42475},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1123, col: 44, offset: 42479},
									expr: &ruleRefExpr{
										pos:  position{line: 1123, col: 45, offset: 42480},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1123, col: 61, offset: 42496},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1123, col: 75, offset: 42510},
									expr: &ruleRefExpr{
										pos:  position{line: 1123, col: 75, offset: 42510},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1131, col: 1, offset: 42825},
			expr: &actionExpr{
				pos: position{line: 1131, col: 19, offset: 42843},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 19, offset: 42843},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1131, col: 19, offset: 42843},
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 20, offset: 42844},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1132, col: 5, offset: 42873},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1132, col: 12, offset: 42880},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1132, col: 12, offset: 42880},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1133, col: 11, offset: 42903},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1134, col: 11, offset: 42927},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1135, col: 11, offset: 42951},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1136, col: 11, offset: 42973},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1137, col: 11, offset: 42995},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1138, col: 11, offset: 43018},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1139, col: 11, offset: 43046},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1140, col: 11, offset: 43062},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1144, col: 1, offset: 43103},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 19, offset: 43121},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1144, col: 19, offset: 43121},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1145, col: 19, offset: 43162},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 19, offset: 43202},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 19, offset: 43243},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 19, offset: 43284},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 19, offset: 43325},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 19, offset: 43363},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1156, col: 1, offset: 43582},
			expr: &seqExpr{
				pos: position{line: 1156, col: 25, offset: 43606},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1156, col: 25, offset: 43606},
						val:        "```",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1156, col: 31, offset: 43612},
						expr: &ruleRefExpr{
							pos:  position{line: 1156, col: 31, offset: 43612},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 35, offset: 43616},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1158, col: 1, offset: 43621},
			expr: &actionExpr{
				pos: position{line: 1158, col: 16, offset: 43636},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1158, col: 16, offset: 43636},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1158, col: 16, offset: 43636},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1158, col: 27, offset: 43647},
								expr: &ruleRefExpr{
									pos:  position{line: 1158, col: 28, offset: 43648},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1158, col: 48, offset: 43668},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1158, col: 69, offset: 43689},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1158, col: 77, offset: 43697},
								expr: &ruleRefExpr{
									pos:  position{line: 1158, col: 78, offset: 43698},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1158, col: 100, offset: 43720},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1158, col: 100, offset: 43720},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1158, col: 123, offset: 43743},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1162, col: 1, offset: 43851},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 23, offset: 43873},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1162, col: 23, offset: 43873},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 35, offset: 43885},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 51, offset: 43901},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 62, offset: 43912},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1165, col: 1, offset: 43952},
			expr: &actionExpr{
				pos: position{line: 1165, col: 25, offset: 43976},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1165, col: 25, offset: 43976},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1165, col: 31, offset: 43982},
						expr: &ruleRefExpr{
							pos:  position{line: 1165, col: 32, offset: 43983},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1169, col: 1, offset: 44096},
			expr: &actionExpr{
				pos: position{line: 1169, col: 29, offset: 44124},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1169, col: 29, offset: 44124},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1169, col: 29, offset: 44124},
							expr: &ruleRefExpr{
								pos:  position{line: 1169, col: 30, offset: 44125},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1169, col: 51, offset: 44146},
							expr: &ruleRefExpr{
								pos:  position{line: 1169, col: 52, offset: 44147},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1169, col: 62, offset: 44157},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1169, col: 68, offset: 44163},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1176, col: 1, offset: 44401},
			expr: &seqExpr{
				pos: position{line: 1176, col: 26, offset: 44426},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1176, col: 26, offset: 44426},
						val:        "----",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1176, col: 33, offset: 44433},
						expr: &ruleRefExpr{
							pos:  position{line: 1176, col: 33, offset: 44433},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 37, offset: 44437},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1179, col: 1, offset: 44477},
			expr: &actionExpr{
				pos: position{line: 1179, col: 17, offset: 44493},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 17, offset: 44493},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1179, col: 17, offset: 44493},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1179, col: 28, offset: 44504},
								expr: &ruleRefExpr{
									pos:  position{line: 1179, col: 29, offset: 44505},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1179, col: 49, offset: 44525},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1179, col: 71, offset: 44547},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1179, col: 79, offset: 44555},
								expr: &ruleRefExpr{
									pos:  position{line: 1179, col: 80, offset: 44556},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1179, col: 103, offset: 44579},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1179, col: 103, offset: 44579},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1179, col: 127, offset: 44603},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1183, col: 1, offset: 44712},
			expr: &choiceExpr{
				pos: position{line: 1183, col: 24, offset: 44735},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1183, col: 24, offset: 44735},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 40, offset: 44751},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1185, col: 1, offset: 44774},
			expr: &actionExpr{
				pos: position{line: 1185, col: 26, offset: 44799},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1185, col: 26, offset: 44799},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1185, col: 32, offset: 44805},
						expr: &ruleRefExpr{
							pos:  position{line: 1185, col: 33, offset: 44806},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1189, col: 1, offset: 44925},
			expr: &actionExpr{
				pos: position{line: 1189, col: 30, offset: 44954},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1189, col: 30, offset: 44954},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1189, col: 30, offset: 44954},
							expr: &ruleRefExpr{
								pos:  position{line: 1189, col: 31, offset: 44955},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1189, col: 53, offset: 44977},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1189, col: 59, offset: 44983},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1189, col: 59, offset: 44983},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1189, col: 59, offset: 44983},
											expr: &ruleRefExpr{
												pos:  position{line: 1189, col: 60, offset: 44984},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1189, col: 64, offset: 44988},
											expr: &choiceExpr{
												pos: position{line: 1189, col: 65, offset: 44989},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1189, col: 65, offset: 44989},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1189, col: 77, offset: 45001},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1189, col: 87, offset: 45011},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1189, col: 87, offset: 45011},
																expr: &ruleRefExpr{
																	pos:  position{line: 1189, col: 88, offset: 45012},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1189, col: 92, offset: 45016,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1189, col: 128, offset: 45052},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1196, col: 1, offset: 45378},
			expr: &seqExpr{
				pos: position{line: 1196, col: 26, offset: 45403},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1196, col: 26, offset: 45403},
						val:        "====",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1196, col: 33, offset: 45410},
						expr: &ruleRefExpr{
							pos:  position{line: 1196, col: 33, offset: 45410},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 37, offset: 45414},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1198, col: 1, offset: 45419},
			expr: &actionExpr{
				pos: position{line: 1198, col: 17, offset: 45435},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 17, offset: 45435},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1198, col: 17, offset: 45435},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1198, col: 28, offset: 45446},
								expr: &ruleRefExpr{
									pos:  position{line: 1198, col: 29, offset: 45447},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1198, col: 49, offset: 45467},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1198, col: 71, offset: 45489},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1198, col: 79, offset: 45497},
								expr: &choiceExpr{
									pos: position{line: 1198, col: 80, offset: 45498},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1198, col: 80, offset: 45498},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1198, col: 92, offset: 45510},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1198, col: 108, offset: 45526},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1198, col: 119, offset: 45537},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1198, col: 145, offset: 45563},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1198, col: 145, offset: 45563},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1198, col: 169, offset: 45587},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1203, col: 1, offset: 45714},
			expr: &actionExpr{
				pos: position{line: 1203, col: 26, offset: 45739},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1203, col: 26, offset: 45739},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1203, col: 32, offset: 45745},
						expr: &ruleRefExpr{
							pos:  position{line: 1203, col: 33, offset: 45746},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1207, col: 1, offset: 45860},
			expr: &actionExpr{
				pos: position{line: 1207, col: 30, offset: 45889},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 30, offset: 45889},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1207, col: 30, offset: 45889},
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 31, offset: 45890},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1207, col: 53, offset: 45912},
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 54, offset: 45913},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 64, offset: 45923},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 70, offset: 45929},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1214, col: 1, offset: 46165},
			expr: &seqExpr{
				pos: position{line: 1214, col: 24, offset: 46188},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1214, col: 24, offset: 46188},
						val:        "____",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1214, col: 31, offset: 46195},
						expr: &ruleRefExpr{
							pos:  position{line: 1214, col: 31, offset: 46195},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 35, offset: 46199},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1216, col: 1, offset: 46229},
			expr: &actionExpr{
				pos: position{line: 1216, col: 15, offset: 46243},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1216, col: 15, offset: 46243},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1216, col: 15, offset: 46243},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1216, col: 26, offset: 46254},
								expr: &ruleRefExpr{
									pos:  position{line: 1216, col: 27, offset: 46255},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1216, col: 47, offset: 46275},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 67, offset: 46295},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1216, col: 75, offset: 46303},
								expr: &ruleRefExpr{
									pos:  position{line: 1216, col: 76, offset: 46304},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1216, col: 97, offset: 46325},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1216, col: 97, offset: 46325},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1216, col: 119, offset: 46347},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1220, col: 1, offset: 46454},
			expr: &actionExpr{
				pos: position{line: 1221, col: 5, offset: 46480},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 5, offset: 46480},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1221, col: 5, offset: 46480},
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 6, offset: 46481},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1221, col: 26, offset: 46501},
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 27, offset: 46502},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1221, col: 31, offset: 46506},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1221, col: 40, offset: 46515},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1221, col: 40, offset: 46515},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1222, col: 15, offset: 46540},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1223, col: 15, offset: 46568},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1224, col: 15, offset: 46594},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1225, col: 15, offset: 46617},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1226, col: 15, offset: 46643},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1227, col: 15, offset: 46670},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1228, col: 15, offset: 46697},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1229, col: 15, offset: 46724},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1230, col: 15, offset: 46756},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1231, col: 15, offset: 46782},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1232, col: 15, offset: 46809},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1233, col: 15, offset: 46830},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1234, col: 15, offset: 46858},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1235, col: 15, offset: 46902},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1236, col: 15, offset: 46940},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1237, col: 15, offset: 46975},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1241, col: 1, offset: 47034},
			expr: &actionExpr{
				pos: position{line: 1241, col: 24, offset: 47057},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1241, col: 24, offset: 47057},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1241, col: 30, offset: 47063},
						expr: &ruleRefExpr{
							pos:  position{line: 1241, col: 31, offset: 47064},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1250, col: 1, offset: 47410},
			expr: &actionExpr{
				pos: position{line: 1250, col: 15, offset: 47424},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1250, col: 15, offset: 47424},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1250, col: 15, offset: 47424},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1250, col: 27, offset: 47436},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1251, col: 5, offset: 47460},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1254, col: 5, offset: 47637},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1254, col: 25, offset: 47657},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1254, col: 33, offset: 47665},
								expr: &ruleRefExpr{
									pos:  position{line: 1254, col: 34, offset: 47666},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1254, col: 55, offset: 47687},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1254, col: 55, offset: 47687},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1254, col: 77, offset: 47709},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1258, col: 1, offset: 47824},
			expr: &choiceExpr{
				pos: position{line: 1258, col: 22, offset: 47845},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1258, col: 22, offset: 47845},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 41, offset: 47864},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 53, offset: 47876},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1260, col: 1, offset: 47897},
			expr: &actionExpr{
				pos: position{line: 1260, col: 21, offset: 47917},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1260, col: 21, offset: 47917},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1260, col: 21, offset: 47917},
							expr: &ruleRefExpr{
								pos:  position{line: 1260, col: 22, offset: 47918},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1260, col: 42, offset: 47938},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1260, col: 51, offset: 47947},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1265, col: 1, offset: 48009},
			expr: &actionExpr{
				pos: position{line: 1265, col: 24, offset: 48032},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1265, col: 24, offset: 48032},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1265, col: 30, offset: 48038},
						expr: &ruleRefExpr{
							pos:  position{line: 1265, col: 31, offset: 48039},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1269, col: 1, offset: 48129},
			expr: &actionExpr{
				pos: position{line: 1269, col: 28, offset: 48156},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1269, col: 28, offset: 48156},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1269, col: 28, offset: 48156},
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 29, offset: 48157},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1269, col: 49, offset: 48177},
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 50, offset: 48178},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 60, offset: 48188},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1269, col: 66, offset: 48194},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1269, col: 66, offset: 48194},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1269, col: 66, offset: 48194},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1269, col: 75, offset: 48203},
												expr: &ruleRefExpr{
													pos:  position{line: 1269, col: 76, offset: 48204},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1269, col: 109, offset: 48237},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1275, col: 1, offset: 48333},
			expr: &actionExpr{
				pos: position{line: 1275, col: 35, offset: 48367},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1275, col: 35, offset: 48367},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1275, col: 35, offset: 48367},
							expr: &ruleRefExpr{
								pos:  position{line: 1275, col: 36, offset: 48368},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1275, col: 40, offset: 48372},
							expr: &ruleRefExpr{
								pos:  position{line: 1275, col: 41, offset: 48373},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1276, col: 5, offset: 48388},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1276, col: 14, offset: 48397},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1276, col: 14, offset: 48397},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1277, col: 11, offset: 48415},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1278, col: 11, offset: 48438},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1279, col: 11, offset: 48454},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1280, col: 11, offset: 48477},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1281, col: 11, offset: 48503},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 11, offset: 48530},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1283, col: 11, offset: 48552},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1284, col: 11, offset: 48578},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1285, col: 11, offset: 48619},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1286, col: 11, offset: 48646},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1293, col: 1, offset: 48876},
			expr: &seqExpr{
				pos: position{line: 1293, col: 26, offset: 48901},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1293, col: 26, offset: 48901},
						val:        "****",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1293, col: 33, offset: 48908},
						expr: &ruleRefExpr{
							pos:  position{line: 1293, col: 33, offset: 48908},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 37, offset: 48912},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1295, col: 1, offset: 48917},
			expr: &actionExpr{
				pos: position{line: 1295, col: 17, offset: 48933},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1295, col: 17, offset: 48933},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1295, col: 17, offset: 48933},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1295, col: 28, offset: 48944},
								expr: &ruleRefExpr{
									pos:  position{line: 1295, col: 29, offset: 48945},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1295, col: 49, offset: 48965},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1295, col: 71, offset: 48987},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1295, col: 79, offset: 48995},
								expr: &ruleRefExpr{
									pos:  position{line: 1295, col: 80, offset: 48996},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1295, col: 104, offset: 49020},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1295, col: 104, offset: 49020},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1295, col: 128, offset: 49044},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1299, col: 1, offset: 49153},
			expr: &choiceExpr{
				pos: position{line: 1299, col: 24, offset: 49176},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1299, col: 24, offset: 49176},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 36, offset: 49188},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 52, offset: 49204},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 63, offset: 49215},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 81, offset: 49233},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1301, col: 1, offset: 49256},
			expr: &actionExpr{
				pos: position{line: 1301, col: 20, offset: 49275},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 20, offset: 49275},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1301, col: 20, offset: 49275},
							expr: &ruleRefExpr{
								pos:  position{line: 1301, col: 21, offset: 49276},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1301, col: 34, offset: 49289},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1301, col: 43, offset: 49298},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1306, col: 1, offset: 49361},
			expr: &actionExpr{
				pos: position{line: 1306, col: 26, offset: 49386},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1306, col: 26, offset: 49386},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1306, col: 32, offset: 49392},
						expr: &ruleRefExpr{
							pos:  position{line: 1306, col: 33, offset: 49393},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1310, col: 1, offset: 49507},
			expr: &actionExpr{
				pos: position{line: 1310, col: 30, offset: 49536},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1310, col: 30, offset: 49536},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1310, col: 30, offset: 49536},
							expr: &ruleRefExpr{
								pos:  position{line: 1310, col: 31, offset: 49537},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1310, col: 53, offset: 49559},
							expr: &ruleRefExpr{
								pos:  position{line: 1310, col: 54, offset: 49560},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1310, col: 64, offset: 49570},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1310, col: 70, offset: 49576},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1318, col: 1, offset: 49807},
			expr: &actionExpr{
				pos: position{line: 1318, col: 10, offset: 49816},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 10, offset: 49816},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1318, col: 10, offset: 49816},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1318, col: 21, offset: 49827},
								expr: &ruleRefExpr{
									pos:  position{line: 1318, col: 22, offset: 49828},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1318, col: 42, offset: 49848},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1319, col: 5, offset: 49867},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1319, col: 12, offset: 49874},
								expr: &ruleRefExpr{
									pos:  position{line: 1319, col: 13, offset: 49875},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 5, offset: 49897},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1320, col: 11, offset: 49903},
								expr: &ruleRefExpr{
									pos:  position{line: 1320, col: 12, offset: 49904},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1321, col: 6, offset: 49921},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1321, col: 6, offset: 49921},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1321, col: 23, offset: 49938},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1325, col: 1, offset: 50053},
			expr: &seqExpr{
				pos: position{line: 1325, col: 23, offset: 50075},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1325, col: 23, offset: 50075},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1325, col: 27, offset: 50079},
						expr: &ruleRefExpr{
							pos:  position{line: 1325, col: 27, offset: 50079},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1327, col: 1, offset: 50084},
			expr: &seqExpr{
				pos: position{line: 1327, col: 19, offset: 50102},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1327, col: 19, offset: 50102},
						val:        "|===",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1327, col: 26, offset: 50109},
						expr: &ruleRefExpr{
							pos:  position{line: 1327, col: 26, offset: 50109},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 30, offset: 50113},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1330, col: 1, offset: 50181},
			expr: &actionExpr{
				pos: position{line: 1330, col: 20, offset: 50200},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 20, offset: 50200},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1330, col: 20, offset: 50200},
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 21, offset: 50201},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 36, offset: 50216},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1330, col: 42, offset: 50222},
								expr: &ruleRefExpr{
									pos:  position{line: 1330, col: 43, offset: 50223},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1330, col: 55, offset: 50235},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1330, col: 59, offset: 50239},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1334, col: 1, offset: 50307},
			expr: &actionExpr{
				pos: position{line: 1334, col: 14, offset: 50320},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1334, col: 14, offset: 50320},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1334, col: 14, offset: 50320},
							expr: &ruleRefExpr{
								pos:  position{line: 1334, col: 15, offset: 50321},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1334, col: 30, offset: 50336},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1334, col: 36, offset: 50342},
								expr: &ruleRefExpr{
									pos:  position{line: 1334, col: 37, offset: 50343},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1334, col: 49, offset: 50355},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1334, col: 53, offset: 50359},
							expr: &ruleRefExpr{
								pos:  position{line: 1334, col: 53, offset: 50359},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1338, col: 1, offset: 50428},
			expr: &actionExpr{
				pos: position{line: 1338, col: 14, offset: 50441},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 14, offset: 50441},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1338, col: 14, offset: 50441},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 33, offset: 50460},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1338, col: 42, offset: 50469},
								expr: &seqExpr{
									pos: position{line: 1338, col: 43, offset: 50470},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1338, col: 43, offset: 50470},
											expr: &ruleRefExpr{
												pos:  position{line: 1338, col: 44, offset: 50471},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1338, col: 63, offset: 50490},
											expr: &ruleRefExpr{
												pos:  position{line: 1338, col: 64, offset: 50491},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1338, col: 68, offset: 50495},
											expr: &ruleRefExpr{
												pos:  position{line: 1338, col: 68, offset: 50495},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1338, col: 72, offset: 50499},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1338, col: 86, offset: 50513},
											expr: &ruleRefExpr{
												pos:  position{line: 1338, col: 86, offset: 50513},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1345, col: 1, offset: 50759},
			expr: &litMatcher{
				pos:        position{line: 1345, col: 26, offset: 50784},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1347, col: 1, offset: 50792},
			expr: &actionExpr{
				pos: position{line: 1347, col: 17, offset: 50808},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1347, col: 17, offset: 50808},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1347, col: 17, offset: 50808},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1347, col: 39, offset: 50830},
							expr: &ruleRefExpr{
								pos:  position{line: 1347, col: 39, offset: 50830},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1347, col: 43, offset: 50834},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 51, offset: 50842},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1347, col: 59, offset: 50850},
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 60, offset: 50851},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1347, col: 81, offset: 50872},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1347, col: 82, offset: 50873},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1347, col: 82, offset: 50873},
											name: "CommentBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1347, col: 104, offset: 50895},
											expr: &ruleRefExpr{
												pos:  position{line: 1347, col: 104, offset: 50895},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1347, col: 108, offset: 50899},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1347, col: 115, offset: 50906},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1351, col: 1, offset: 51012},
			expr: &actionExpr{
				pos: position{line: 1351, col: 21, offset: 51032},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1351, col: 21, offset: 51032},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1351, col: 21, offset: 51032},
							expr: &choiceExpr{
								pos: position{line: 1351, col: 22, offset: 51033},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1351, col: 22, offset: 51033},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1351, col: 34, offset: 51045},
										name: "Spaces",
									},
									&actionExpr{
										pos: position{line: 1351, col: 43, offset: 51054},
										run: (*parser).callonCommentBlockLine7,
										expr: &seqExpr{
											pos: position{line: 1351, col: 44, offset: 51055},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1351, col: 44, offset: 51055},
													expr: &ruleRefExpr{
														pos:  position{line: 1351, col: 45, offset: 51056},
														name: "CommentBlockDelimiter",
													},
												},
												&notExpr{
													pos: position{line: 1351, col: 67, offset: 51078},
													expr: &ruleRefExpr{
														pos:  position{line: 1351, col: 68, offset: 51079},
														name: "EOL",
													},
												},
												&anyMatcher{
													line: 1351, col: 73, offset: 51084,
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1353, col: 5, offset: 51123},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1357, col: 1, offset: 51163},
			expr: &actionExpr{
				pos: position{line: 1357, col: 22, offset: 51184},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1357, col: 22, offset: 51184},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1357, col: 22, offset: 51184},
							expr: &ruleRefExpr{
								pos:  position{line: 1357, col: 23, offset: 51185},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1357, col: 45, offset: 51207},
							expr: &ruleRefExpr{
								pos:  position{line: 1357, col: 45, offset: 51207},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1357, col: 49, offset: 51211},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1357, col: 54, offset: 51216},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1357, col: 63, offset: 51225},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1357, col: 89, offset: 51251},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1361, col: 1, offset: 51316},
			expr: &actionExpr{
				pos: position{line: 1361, col: 29, offset: 51344},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1361, col: 29, offset: 51344},
					expr: &choiceExpr{
						pos: position{line: 1361, col: 30, offset: 51345},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1361, col: 30, offset: 51345},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1361, col: 42, offset: 51357},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 1361, col: 51, offset: 51366},
								run: (*parser).callonSingleLineCommentContent6,
								expr: &seqExpr{
									pos: position{line: 1361, col: 52, offset: 51367},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1361, col: 52, offset: 51367},
											expr: &ruleRefExpr{
												pos:  position{line: 1361, col: 53, offset: 51368},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 1361, col: 58, offset: 51373,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1371, col: 1, offset: 51716},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 17, offset: 51732},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1371, col: 17, offset: 51732},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 49, offset: 51764},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 78, offset: 51793},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1373, col: 1, offset: 51829},
			expr: &litMatcher{
				pos:        position{line: 1373, col: 26, offset: 51854},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1376, col: 1, offset: 51926},
			expr: &actionExpr{
				pos: position{line: 1376, col: 31, offset: 51956},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1376, col: 31, offset: 51956},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1376, col: 31, offset: 51956},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1376, col: 42, offset: 51967},
								expr: &ruleRefExpr{
									pos:  position{line: 1376, col: 43, offset: 51968},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 63, offset: 51988},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1376, col: 70, offset: 51995},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1381, col: 1, offset: 52225},
			expr: &actionExpr{
				pos: position{line: 1382, col: 5, offset: 52265},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1382, col: 5, offset: 52265},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1382, col: 5, offset: 52265},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1382, col: 16, offset: 52276},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1382, col: 16, offset: 52276},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1382, col: 16, offset: 52276},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1382, col: 19, offset: 52279},
											expr: &choiceExpr{
												pos: position{line: 1382, col: 20, offset: 52280},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1382, col: 20, offset: 52280},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1382, col: 32, offset: 52292},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1382, col: 41, offset: 52301},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1382, col: 42, offset: 52302},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1382, col: 42, offset: 52302},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1382, col: 43, offset: 52303},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1382, col: 48, offset: 52308,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1386, col: 8, offset: 52399},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 5, offset: 52462},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1387, col: 16, offset: 52473},
								expr: &actionExpr{
									pos: position{line: 1388, col: 9, offset: 52483},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1388, col: 9, offset: 52483},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1388, col: 9, offset: 52483},
												expr: &ruleRefExpr{
													pos:  position{line: 1388, col: 10, offset: 52484},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1389, col: 9, offset: 52503},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1389, col: 20, offset: 52514},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1389, col: 20, offset: 52514},
														expr: &choiceExpr{
															pos: position{line: 1389, col: 21, offset: 52515},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1389, col: 21, offset: 52515},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1389, col: 33, offset: 52527},
																	name: "Spaces",
																},
																&actionExpr{
																	pos: position{line: 1389, col: 42, offset: 52536},
																	run: (*parser).callonParagraphWithHeadingSpacesLines29,
																	expr: &seqExpr{
																		pos: position{line: 1389, col: 43, offset: 52537},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1389, col: 43, offset: 52537},
																				expr: &ruleRefExpr{
																					pos:  position{line: 1389, col: 44, offset: 52538},
																					name: "EOL",
																				},
																			},
																			&anyMatcher{
																				line: 1389, col: 49, offset: 52543,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1393, col: 12, offset: 52650},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1400, col: 1, offset: 52880},
			expr: &actionExpr{
				pos: position{line: 1400, col: 39, offset: 52918},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 39, offset: 52918},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1400, col: 39, offset: 52918},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1400, col: 50, offset: 52929},
								expr: &ruleRefExpr{
									pos:  position{line: 1400, col: 51, offset: 52930},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1401, col: 9, offset: 52958},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1401, col: 31, offset: 52980},
							expr: &ruleRefExpr{
								pos:  position{line: 1401, col: 31, offset: 52980},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1401, col: 35, offset: 52984},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1401, col: 43, offset: 52992},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1401, col: 50, offset: 52999},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1401, col: 92, offset: 53041},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1401, col: 93, offset: 53042},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1401, col: 93, offset: 53042},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1401, col: 115, offset: 53064},
											expr: &ruleRefExpr{
												pos:  position{line: 1401, col: 115, offset: 53064},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1401, col: 119, offset: 53068},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1401, col: 126, offset: 53075},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1406, col: 1, offset: 53234},
			expr: &actionExpr{
				pos: position{line: 1406, col: 44, offset: 53277},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1406, col: 44, offset: 53277},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1406, col: 50, offset: 53283},
						expr: &ruleRefExpr{
							pos:  position{line: 1406, col: 51, offset: 53284},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1410, col: 1, offset: 53368},
			expr: &actionExpr{
				pos: position{line: 1411, col: 5, offset: 53423},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1411, col: 5, offset: 53423},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1411, col: 5, offset: 53423},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1411, col: 11, offset: 53429},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1411, col: 11, offset: 53429},
									expr: &choiceExpr{
										pos: position{line: 1411, col: 12, offset: 53430},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1411, col: 12, offset: 53430},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1411, col: 24, offset: 53442},
												name: "Spaces",
											},
											&actionExpr{
												pos: position{line: 1411, col: 33, offset: 53451},
												run: (*parser).callonParagraphWithLiteralBlockDelimiterLine9,
												expr: &seqExpr{
													pos: position{line: 1411, col: 34, offset: 53452},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1411, col: 34, offset: 53452},
															expr: &ruleRefExpr{
																pos:  position{line: 1411, col: 35, offset: 53453},
																name: "LiteralBlockDelimiter",
															},
														},
														&notExpr{
															pos: position{line: 1411, col: 57, offset: 53475},
															expr: &ruleRefExpr{
																pos:  position{line: 1411, col: 58, offset: 53476},
																name: "EOL",
															},
														},
														&anyMatcher{
															line: 1411, col: 62, offset: 53480,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1415, col: 8, offset: 53571},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1420, col: 1, offset: 53697},
			expr: &actionExpr{
				pos: position{line: 1421, col: 5, offset: 53735},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1421, col: 5, offset: 53735},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1421, col: 5, offset: 53735},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1421, col: 16, offset: 53746},
								expr: &ruleRefExpr{
									pos:  position{line: 1421, col: 17, offset: 53747},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1422, col: 5, offset: 53771},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1429, col: 5, offset: 53976},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1429, col: 12, offset: 53983},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1433, col: 1, offset: 54133},
			expr: &actionExpr{
				pos: position{line: 1433, col: 16, offset: 54148},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1433, col: 16, offset: 54148},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1438, col: 1, offset: 54231},
			expr: &actionExpr{
				pos: position{line: 1438, col: 39, offset: 54269},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1438, col: 39, offset: 54269},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1438, col: 45, offset: 54275},
						expr: &ruleRefExpr{
							pos:  position{line: 1438, col: 46, offset: 54276},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1442, col: 1, offset: 54356},
			expr: &actionExpr{
				pos: position{line: 1442, col: 38, offset: 54393},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1442, col: 38, offset: 54393},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1442, col: 38, offset: 54393},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1442, col: 44, offset: 54399},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1442, col: 44, offset: 54399},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1442, col: 44, offset: 54399},
											expr: &ruleRefExpr{
												pos:  position{line: 1442, col: 46, offset: 54401},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1442, col: 57, offset: 54412},
											expr: &choiceExpr{
												pos: position{line: 1442, col: 58, offset: 54413},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1442, col: 58, offset: 54413},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1442, col: 70, offset: 54425},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1442, col: 79, offset: 54434},
														run: (*parser).callonParagraphWithLiteralAttributeLine12,
														expr: &seqExpr{
															pos: position{line: 1442, col: 80, offset: 54435},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1442, col: 80, offset: 54435},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1442, col: 81, offset: 54436},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1442, col: 86, offset: 54441,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1446, col: 4, offset: 54516},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1453, col: 1, offset: 54688},
			expr: &actionExpr{
				pos: position{line: 1453, col: 14, offset: 54701},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1453, col: 14, offset: 54701},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1453, col: 14, offset: 54701},
							expr: &ruleRefExpr{
								pos:  position{line: 1453, col: 15, offset: 54702},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1453, col: 19, offset: 54706},
							expr: &ruleRefExpr{
								pos:  position{line: 1453, col: 19, offset: 54706},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1453, col: 23, offset: 54710},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1460, col: 1, offset: 54857},
			expr: &charClassMatcher{
				pos:        position{line: 1460, col: 13, offset: 54869},
				val:        "[a-zA-Z0-9]",
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1462, col: 1, offset: 54882},
			expr: &choiceExpr{
				pos: position{line: 1462, col: 16, offset: 54897},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1462, col: 16, offset: 54897},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1462, col: 22, offset: 54903},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1462, col: 28, offset: 54909},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1462, col: 34, offset: 54915},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1464, col: 1, offset: 54920},
			expr: &actionExpr{
				pos: position{line: 1464, col: 14, offset: 54933},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1464, col: 14, offset: 54933},
					expr: &charClassMatcher{
						pos:        position{line: 1464, col: 14, offset: 54933},
						val:        "[a-zA-Z0-9]",
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1468, col: 1, offset: 54982},
			expr: &actionExpr{
				pos: position{line: 1468, col: 8, offset: 54989},
				run: (*parser).callonDot1,
				expr: &litMatcher{
					pos:        position{line: 1468, col: 8, offset: 54989},
					val:        ".",
					ignoreCase: false,
				},
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1472, col: 1, offset: 55029},
			expr: &actionExpr{
				pos: position{line: 1472, col: 15, offset: 55043},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1472, col: 15, offset: 55043},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1472, col: 15, offset: 55043},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1472, col: 25, offset: 55053},
							expr: &choiceExpr{
								pos: position{line: 1472, col: 27, offset: 55055},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1472, col: 27, offset: 55055},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1472, col: 32, offset: 55060},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1477, col: 1, offset: 55325},
			expr: &actionExpr{
				pos: position{line: 1477, col: 14, offset: 55338},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1477, col: 15, offset: 55339},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1477, col: 15, offset: 55339},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1477, col: 27, offset: 55351},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1477, col: 46, offset: 55370},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1477, col: 60, offset: 55384},
							expr: &actionExpr{
								pos: position{line: 1477, col: 61, offset: 55385},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1477, col: 61, offset: 55385},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1477, col: 62, offset: 55386},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1477, col: 62, offset: 55386},
													expr: &ruleRefExpr{
														pos:  position{line: 1477, col: 63, offset: 55387},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1477, col: 71, offset: 55395},
													expr: &ruleRefExpr{
														pos:  position{line: 1477, col: 72, offset: 55396},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1477, col: 75, offset: 55399},
													expr: &ruleRefExpr{
														pos:  position{line: 1477, col: 76, offset: 55400},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1477, col: 80, offset: 55404},
													expr: &ruleRefExpr{
														pos:  position{line: 1477, col: 81, offset: 55405},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1477, col: 98, offset: 55422,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1477, col: 101, offset: 55425},
											expr: &ruleRefExpr{
												pos:  position{line: 1477, col: 101, offset: 55425},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1479, col: 7, offset: 55534},
							expr: &litMatcher{
								pos:        position{line: 1479, col: 7, offset: 55534},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Text",
			pos:  position{line: 1483, col: 1, offset: 55715},
			expr: &actionExpr{
				pos: position{line: 1483, col: 9, offset: 55723},
				run: (*parser).callonText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1483, col: 9, offset: 55723},
					expr: &choiceExpr{
						pos: position{line: 1483, col: 10, offset: 55724},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1483, col: 10, offset: 55724},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1483, col: 22, offset: 55736},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 1483, col: 31, offset: 55745},
								run: (*parser).callonText6,
								expr: &seqExpr{
									pos: position{line: 1483, col: 32, offset: 55746},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1483, col: 32, offset: 55746},
											expr: &ruleRefExpr{
												pos:  position{line: 1483, col: 33, offset: 55747},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 1483, col: 37, offset: 55751,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1489, col: 1, offset: 56030},
			expr: &actionExpr{
				pos: position{line: 1489, col: 11, offset: 56040},
				run: (*parser).callonSpaces1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1489, col: 11, offset: 56040},
					expr: &ruleRefExpr{
						pos:  position{line: 1489, col: 11, offset: 56040},
						name: "WS",
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1493, col: 1, offset: 56080},
			expr: &actionExpr{
				pos: position{line: 1493, col: 17, offset: 56096},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1493, col: 17, offset: 56096},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1493, col: 26, offset: 56105},
						expr: &choiceExpr{
							pos: position{line: 1493, col: 27, offset: 56106},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1493, col: 27, offset: 56106},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1493, col: 38, offset: 56117},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1497, col: 1, offset: 56209},
			expr: &actionExpr{
				pos: position{line: 1497, col: 13, offset: 56221},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1497, col: 13, offset: 56221},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1497, col: 23, offset: 56231},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1497, col: 23, offset: 56231},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1497, col: 34, offset: 56242},
								expr: &choiceExpr{
									pos: position{line: 1497, col: 35, offset: 56243},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1497, col: 35, offset: 56243},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1497, col: 67, offset: 56275},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1497, col: 67, offset: 56275},
													expr: &ruleRefExpr{
														pos:  position{line: 1497, col: 68, offset: 56276},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1497, col: 72, offset: 56280},
													expr: &litMatcher{
														pos:        position{line: 1497, col: 73, offset: 56281},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1497, col: 77, offset: 56285,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1501, col: 1, offset: 56350},
			expr: &choiceExpr{
				pos: position{line: 1501, col: 13, offset: 56362},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 1501, col: 13, offset: 56362},
						expr: &charClassMatcher{
							pos:        position{line: 1501, col: 13, offset: 56362},
							val:        "[a-zA-Z0-9]",
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1501, col: 28, offset: 56377},
						val:        ".",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1501, col: 34, offset: 56383},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1501, col: 40, offset: 56389},
						val:        "/",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1501, col: 46, offset: 56395},
						val:        "-",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1503, col: 1, offset: 56400},
			expr: &actionExpr{
				pos: position{line: 1503, col: 8, offset: 56407},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1503, col: 8, offset: 56407},
					expr: &choiceExpr{
						pos: position{line: 1503, col: 9, offset: 56408},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1503, col: 9, offset: 56408},
								name: "Alphanums",
							},
							&actionExpr{
								pos: position{line: 1503, col: 21, offset: 56420},
								run: (*parser).callonURL5,
								expr: &seqExpr{
									pos: position{line: 1503, col: 22, offset: 56421},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1503, col: 22, offset: 56421},
											expr: &ruleRefExpr{
												pos:  position{line: 1503, col: 23, offset: 56422},
												name: "NEWLINE",
											},
										},
										&notExpr{
											pos: position{line: 1503, col: 31, offset: 56430},
											expr: &ruleRefExpr{
												pos:  position{line: 1503, col: 32, offset: 56431},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1503, col: 35, offset: 56434},
											expr: &litMatcher{
												pos:        position{line: 1503, col: 36, offset: 56435},
												val:        "[",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1503, col: 40, offset: 56439},
											expr: &litMatcher{
												pos:        position{line: 1503, col: 41, offset: 56440},
												val:        "]",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 1503, col: 46, offset: 56445,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1509, col: 1, offset: 56520},
			expr: &choiceExpr{
				pos: position{line: 1509, col: 15, offset: 56534},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1509, col: 15, offset: 56534},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1509, col: 27, offset: 56546},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1509, col: 40, offset: 56559},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1509, col: 51, offset: 56570},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1509, col: 62, offset: 56581},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1511, col: 1, offset: 56592},
			expr: &actionExpr{
				pos: position{line: 1511, col: 7, offset: 56598},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1511, col: 7, offset: 56598},
					expr: &choiceExpr{
						pos: position{line: 1511, col: 8, offset: 56599},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1511, col: 8, offset: 56599},
								name: "Alphanums",
							},
							&actionExpr{
								pos: position{line: 1511, col: 20, offset: 56611},
								run: (*parser).callonID5,
								expr: &seqExpr{
									pos: position{line: 1511, col: 21, offset: 56612},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1511, col: 21, offset: 56612},
											expr: &ruleRefExpr{
												pos:  position{line: 1511, col: 22, offset: 56613},
												name: "NEWLINE",
											},
										},
										&notExpr{
											pos: position{line: 1511, col: 30, offset: 56621},
											expr: &ruleRefExpr{
												pos:  position{line: 1511, col: 31, offset: 56622},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1511, col: 34, offset: 56625},
											expr: &litMatcher{
												pos:        position{line: 1511, col: 35, offset: 56626},
												val:        "[",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1511, col: 39, offset: 56630},
											expr: &litMatcher{
												pos:        position{line: 1511, col: 40, offset: 56631},
												val:        "]",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1511, col: 44, offset: 56635},
											expr: &litMatcher{
												pos:        position{line: 1511, col: 45, offset: 56636},
												val:        "<<",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1511, col: 50, offset: 56641},
											expr: &litMatcher{
												pos:        position{line: 1511, col: 51, offset: 56642},
												val:        ">>",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1511, col: 56, offset: 56647},
											expr: &litMatcher{
												pos:        position{line: 1511, col: 57, offset: 56648},
												val:        ",",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 1511, col: 62, offset: 56653,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1517, col: 1, offset: 56728},
			expr: &actionExpr{
				pos: position{line: 1517, col: 10, offset: 56737},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1517, col: 10, offset: 56737},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1521, col: 1, offset: 56779},
			expr: &actionExpr{
				pos: position{line: 1521, col: 11, offset: 56789},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1521, col: 11, offset: 56789},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1521, col: 11, offset: 56789},
							expr: &litMatcher{
								pos:        position{line: 1521, col: 11, offset: 56789},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1521, col: 16, offset: 56794},
							expr: &ruleRefExpr{
								pos:  position{line: 1521, col: 16, offset: 56794},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1525, col: 1, offset: 56846},
			expr: &choiceExpr{
				pos: position{line: 1525, col: 7, offset: 56852},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1525, col: 7, offset: 56852},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1525, col: 13, offset: 56858},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1525, col: 13, offset: 56858},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1529, col: 1, offset: 56899},
			expr: &choiceExpr{
				pos: position{line: 1529, col: 12, offset: 56910},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1529, col: 12, offset: 56910},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1529, col: 21, offset: 56919},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1529, col: 28, offset: 56926},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1531, col: 1, offset: 56932},
			expr: &notExpr{
				pos: position{line: 1531, col: 8, offset: 56939},
				expr: &anyMatcher{
					line: 1531, col: 9, offset: 56940,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1533, col: 1, offset: 56943},
			expr: &choiceExpr{
				pos: position{line: 1533, col: 8, offset: 56950},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1533, col: 8, offset: 56950},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1533, col: 18, offset: 56960},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onPreflightDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent3()
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber10()
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber19()
}

func (c *current) onDocumentRevisionDate6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate6()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark6()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), nil)
}

func (p *parser) callonDocumentAttributeDeclaration2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration2(stack["name"])
}

func (c *current) onDocumentAttributeDeclaration11(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration11(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle14() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle14()
}

func (c *current) onElementTitle9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle9()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole12()
}

func (c *current) onElementRole7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole7()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes2() (interface{}, error) {
	return types.NewSourceAttributes("")
}

func (p *parser) callonSourceAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes2()
}

func (c *current) onSourceAttributes17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes17()
}

func (c *current) onSourceAttributes12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes12()
}

func (c *current) onSourceAttributes8(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language.(string))
}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey14() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey14()
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes2(kind, author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), author.(string), title.(string))
}

func (p *parser) callonQuoteAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes2(stack["kind"], stack["author"], stack["title"])
}

func (c *current) onQuoteAttributes19(kind, author interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), author.(string), "")
}

func (p *parser) callonQuoteAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes19(stack["kind"], stack["author"])
}

func (c *current) onQuoteAttributes33(kind interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), "", "")
}

func (p *parser) callonQuoteAttributes33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes33(stack["kind"])
}

func (c *current) onQuoteKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteKind1()
}

func (c *current) onVerseAttributes2(kind, author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), author.(string), title.(string))

}

func (p *parser) callonVerseAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes2(stack["kind"], stack["author"], stack["title"])
}

func (c *current) onVerseAttributes19(kind, author interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), author.(string), "")

}

func (p *parser) callonVerseAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes19(stack["kind"], stack["author"])
}

func (c *current) onVerseAttributes33(kind interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), "", "")

}

func (p *parser) callonVerseAttributes33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes33(stack["kind"])
}

func (c *current) onVerseKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerseKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseKind1()
}

func (c *current) onQuoteAuthor6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAuthor6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAuthor6()
}

func (c *current) onQuoteAuthor1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAuthor1()
}

func (c *current) onQuoteTitle1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteTitle1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges9(stack["other"])
}

func (c *current) onMultipleRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges10(stack["other"])
}

func (c *current) onMultipleQuotedRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges1(stack["first"], stack["others"])
}

func (c *current) onMultilineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineRange1(stack["start"], stack["end"])
}

func (c *current) onMultilineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSinglelineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineRange1(stack["singleline"])
}

func (c *current) onSinglelineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is level 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["level"])
}

func (c *current) onOrderedListItemPrefix7(level interface{}) (interface{}, error) {
	return types.NewOrderedListItemPrefix(types.DefaultNumberingStyles[level.(int)], level.(int))

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["level"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix7() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7()
}

func (c *current) onUnorderedListItemPrefix9() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)

}

func (p *parser) callonUnorderedListItemPrefix9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix9()
}

func (c *current) onUnorderedListItemPrefix11() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)

}

func (p *parser) callonUnorderedListItemPrefix11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix11()
}

func (c *current) onUnorderedListItemPrefix13() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)

}

func (p *parser) callonUnorderedListItemPrefix13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13()
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix17() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix17()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm6()
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonFirstParagraphLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine4(stack["comment"])
}

func (c *current) onFirstParagraphLine7(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonFirstParagraphLine7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine7(stack["elements"], stack["linebreak"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attributes == nil {
		return false, nil
	}
	kind, ok := attributes.(types.ElementAttributes)[types.AttrKind]
	return ok && kind == types.Verse, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attributes == nil {
		return false, nil
	}
	kind, ok := attributes.(types.ElementAttributes)[types.AttrKind]
	return ok && kind == types.Verse, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubScriptOrSuperScriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubScriptOrSuperScriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubScriptOrSuperScriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel6()
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onExternalLink2(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink2(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink8(url interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), types.ElementAttributes{})
}

func (p *parser) callonExternalLink8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink8(stack["url"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes2(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text.(types.InlineElements), otherattrs.([]interface{}))
}

func (p *parser) callonLinkAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes2(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkAttributes15(otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(nil, otherattrs.([]interface{}))
}

func (p *parser) callonLinkAttributes15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes15(stack["otherattrs"])
}

func (c *current) onLinkTextAttribute13() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonLinkTextAttribute13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute13()
}

func (c *current) onLinkTextAttribute1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLinkTextAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute1(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onImageAttribute1() (interface{}, error) {
	// attribute is followed by "," or "]" (but do not consume the latter)
	return string(c.text), nil
}

func (p *parser) callonImageAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttribute1()
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef6()
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {
	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine7()
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent6()
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines29()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine9()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attributes == nil {
		return false, nil
	}
	kind, ok := attributes.(types.ElementAttributes)[types.AttrKind]
	return ok && kind == types.Literal, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine12()
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onDot1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDot1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDot1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onText6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonText6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onText6()
}

func (c *current) onText1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onText1()
}

func (c *current) onSpaces1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaces1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL5()
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID5()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
