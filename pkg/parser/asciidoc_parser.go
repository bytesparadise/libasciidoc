// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "PreflightDocument",
			pos:  position{line: 17, col: 1, offset: 290},
			expr: &actionExpr{
				pos: position{line: 17, col: 22, offset: 311},
				run: (*parser).callonPreflightDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 22, offset: 311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 22, offset: 311},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 35, offset: 324},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 35, offset: 324},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 49, offset: 338},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 57, offset: 346},
								name: "DocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 73, offset: 362},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 446},
			expr: &actionExpr{
				pos: position{line: 21, col: 42, offset: 487},
				run: (*parser).callonPreflightDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 42, offset: 487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 42, offset: 487},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 55, offset: 500},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 55, offset: 500},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 69, offset: 514},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 77, offset: 522},
								name: "DocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 113, offset: 558},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 28, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 28, col: 19, offset: 771},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 28, col: 19, offset: 771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 28, col: 19, offset: 771},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 27, offset: 779},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 27, offset: 779},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 44, offset: 796},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 28, col: 52, offset: 804},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 52, offset: 804},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 37, col: 1, offset: 1053},
			expr: &actionExpr{
				pos: position{line: 37, col: 18, offset: 1070},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 37, col: 18, offset: 1070},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 37, col: 18, offset: 1070},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 19, offset: 1071},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1080},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 38, col: 12, offset: 1087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 38, col: 12, offset: 1087},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 1113},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 11, offset: 1132},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 11, offset: 1157},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 42, col: 11, offset: 1181},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1235},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1257},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1276},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1327},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1351},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1391},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1425},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1456},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1481},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 55, col: 1, offset: 1519},
			expr: &labeledExpr{
				pos:   position{line: 55, col: 39, offset: 1557},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 55, col: 46, offset: 1564},
					expr: &ruleRefExpr{
						pos:  position{line: 55, col: 47, offset: 1565},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 57, col: 1, offset: 1602},
			expr: &actionExpr{
				pos: position{line: 57, col: 38, offset: 1639},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 57, col: 38, offset: 1639},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 57, col: 38, offset: 1639},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 39, offset: 1640},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1649},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 58, col: 12, offset: 1656},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 58, col: 12, offset: 1656},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 59, col: 11, offset: 1681},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 60, col: 11, offset: 1705},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 61, col: 11, offset: 1730},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1752},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1771},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1822},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1846},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1886},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1920},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1951},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1976},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 76, col: 1, offset: 2122},
			expr: &ruleRefExpr{
				pos:  position{line: 76, col: 16, offset: 2137},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 78, col: 1, offset: 2155},
			expr: &actionExpr{
				pos: position{line: 78, col: 20, offset: 2174},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 78, col: 20, offset: 2174},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 78, col: 20, offset: 2174},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 41, offset: 2195},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 49, offset: 2203},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2204},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 75, offset: 2229},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 82, col: 1, offset: 2309},
			expr: &seqExpr{
				pos: position{line: 82, col: 26, offset: 2334},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 82, col: 26, offset: 2334},
						val:        "---",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 82, col: 32, offset: 2340},
						expr: &ruleRefExpr{
							pos:  position{line: 82, col: 32, offset: 2340},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 36, offset: 2344},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 84, col: 1, offset: 2349},
			expr: &actionExpr{
				pos: position{line: 84, col: 27, offset: 2375},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 27, offset: 2375},
					expr: &oneOrMoreExpr{
						pos: position{line: 84, col: 28, offset: 2376},
						expr: &seqExpr{
							pos: position{line: 84, col: 29, offset: 2377},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 84, col: 29, offset: 2377},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 30, offset: 2378},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 84, col: 51, offset: 2399,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 91, col: 1, offset: 2565},
			expr: &actionExpr{
				pos: position{line: 91, col: 19, offset: 2583},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 91, col: 19, offset: 2583},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 19, offset: 2583},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 91, col: 23, offset: 2587},
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 23, offset: 2587},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 27, offset: 2591},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 34, offset: 2598},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 49, offset: 2613},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 91, col: 53, offset: 2617},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 53, offset: 2617},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 71, offset: 2635},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 9, offset: 2647},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 92, col: 18, offset: 2656},
								expr: &ruleRefExpr{
									pos:  position{line: 92, col: 18, offset: 2656},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 9, offset: 2683},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 93, col: 19, offset: 2693},
								expr: &ruleRefExpr{
									pos:  position{line: 93, col: 19, offset: 2693},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 98, col: 1, offset: 2802},
			expr: &choiceExpr{
				pos: position{line: 98, col: 20, offset: 2821},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 98, col: 20, offset: 2821},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 48, offset: 2849},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 100, col: 1, offset: 2879},
			expr: &actionExpr{
				pos: position{line: 100, col: 30, offset: 2908},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 100, col: 30, offset: 2908},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 100, col: 30, offset: 2908},
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 30, offset: 2908},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 100, col: 34, offset: 2912},
							expr: &litMatcher{
								pos:        position{line: 100, col: 35, offset: 2913},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 39, offset: 2917},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 100, col: 48, offset: 2926},
								expr: &ruleRefExpr{
									pos:  position{line: 100, col: 48, offset: 2926},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 65, offset: 2943},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 104, col: 1, offset: 3013},
			expr: &actionExpr{
				pos: position{line: 104, col: 33, offset: 3045},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 104, col: 33, offset: 3045},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 104, col: 33, offset: 3045},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 33, offset: 3045},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 104, col: 37, offset: 3049},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 104, col: 48, offset: 3060},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 56, offset: 3068},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 72, offset: 3084},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 108, col: 1, offset: 3163},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3181},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3181},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 19, offset: 3181},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 19, offset: 3181},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 23, offset: 3185},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 33, offset: 3195},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 53, offset: 3215},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 59, offset: 3221},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 60, offset: 3222},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 82, offset: 3244},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 82, offset: 3244},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 108, col: 86, offset: 3248},
							expr: &litMatcher{
								pos:        position{line: 108, col: 86, offset: 3248},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 91, offset: 3253},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 91, offset: 3253},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 113, col: 1, offset: 3395},
			expr: &actionExpr{
				pos: position{line: 113, col: 23, offset: 3417},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 113, col: 23, offset: 3417},
					expr: &choiceExpr{
						pos: position{line: 113, col: 24, offset: 3418},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 24, offset: 3418},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 113, col: 37, offset: 3431},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 113, col: 37, offset: 3431},
										expr: &litMatcher{
											pos:        position{line: 113, col: 38, offset: 3432},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 42, offset: 3436},
										expr: &litMatcher{
											pos:        position{line: 113, col: 43, offset: 3437},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 47, offset: 3441},
										expr: &ruleRefExpr{
											pos:  position{line: 113, col: 48, offset: 3442},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 113, col: 56, offset: 3450,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 117, col: 1, offset: 3491},
			expr: &actionExpr{
				pos: position{line: 117, col: 24, offset: 3514},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 117, col: 24, offset: 3514},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 117, col: 24, offset: 3514},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 117, col: 28, offset: 3518},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 117, col: 35, offset: 3525},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 117, col: 35, offset: 3525},
									expr: &choiceExpr{
										pos: position{line: 117, col: 36, offset: 3526},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 117, col: 36, offset: 3526},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 117, col: 49, offset: 3539},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 117, col: 49, offset: 3539},
														expr: &litMatcher{
															pos:        position{line: 117, col: 50, offset: 3540},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 117, col: 54, offset: 3544},
														expr: &ruleRefExpr{
															pos:  position{line: 117, col: 55, offset: 3545},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 117, col: 60, offset: 3550,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 119, col: 4, offset: 3591},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 125, col: 1, offset: 3752},
			expr: &actionExpr{
				pos: position{line: 125, col: 21, offset: 3772},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 125, col: 21, offset: 3772},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 21, offset: 3772},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 21, offset: 3772},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 125, col: 25, offset: 3776},
							expr: &litMatcher{
								pos:        position{line: 125, col: 26, offset: 3777},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 30, offset: 3781},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 126, col: 9, offset: 3800},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 126, col: 10, offset: 3801},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 126, col: 10, offset: 3801},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 126, col: 10, offset: 3801},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 126, col: 21, offset: 3812},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 45, offset: 3836},
													expr: &litMatcher{
														pos:        position{line: 126, col: 45, offset: 3836},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 50, offset: 3841},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 58, offset: 3849},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 59, offset: 3850},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 82, offset: 3873},
													expr: &litMatcher{
														pos:        position{line: 126, col: 82, offset: 3873},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 87, offset: 3878},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 97, offset: 3888},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 98, offset: 3889},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 128, col: 15, offset: 4006},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 128, col: 15, offset: 4006},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 128, col: 15, offset: 4006},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 128, col: 24, offset: 4015},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 46, offset: 4037},
													expr: &litMatcher{
														pos:        position{line: 128, col: 46, offset: 4037},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 51, offset: 4042},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 61, offset: 4052},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 62, offset: 4053},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 13, offset: 4162},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 135, col: 1, offset: 4292},
			expr: &choiceExpr{
				pos: position{line: 135, col: 27, offset: 4318},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 27, offset: 4318},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 135, col: 27, offset: 4318},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 135, col: 27, offset: 4318},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 135, col: 32, offset: 4323},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 135, col: 39, offset: 4330},
									expr: &choiceExpr{
										pos: position{line: 135, col: 40, offset: 4331},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 135, col: 40, offset: 4331},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 135, col: 52, offset: 4343},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 135, col: 62, offset: 4353},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 135, col: 62, offset: 4353},
														expr: &ruleRefExpr{
															pos:  position{line: 135, col: 63, offset: 4354},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 135, col: 67, offset: 4358},
														expr: &litMatcher{
															pos:        position{line: 135, col: 68, offset: 4359},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 135, col: 72, offset: 4363},
														expr: &litMatcher{
															pos:        position{line: 135, col: 73, offset: 4364},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 135, col: 78, offset: 4369,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4411},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 4411},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 137, col: 5, offset: 4411},
									expr: &litMatcher{
										pos:        position{line: 137, col: 5, offset: 4411},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 11, offset: 4417},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 137, col: 18, offset: 4424},
									expr: &choiceExpr{
										pos: position{line: 137, col: 19, offset: 4425},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 137, col: 19, offset: 4425},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 137, col: 31, offset: 4437},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 137, col: 41, offset: 4447},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 137, col: 41, offset: 4447},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 42, offset: 4448},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 137, col: 46, offset: 4452},
														expr: &litMatcher{
															pos:        position{line: 137, col: 47, offset: 4453},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 137, col: 51, offset: 4457},
														expr: &litMatcher{
															pos:        position{line: 137, col: 52, offset: 4458},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 137, col: 57, offset: 4463,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 137, col: 62, offset: 4468},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 62, offset: 4468},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 137, col: 66, offset: 4472},
									expr: &litMatcher{
										pos:        position{line: 137, col: 67, offset: 4473},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 141, col: 1, offset: 4513},
			expr: &actionExpr{
				pos: position{line: 141, col: 25, offset: 4537},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 141, col: 25, offset: 4537},
					expr: &choiceExpr{
						pos: position{line: 141, col: 26, offset: 4538},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 141, col: 26, offset: 4538},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 141, col: 38, offset: 4550},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 141, col: 48, offset: 4560},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 141, col: 48, offset: 4560},
										expr: &ruleRefExpr{
											pos:  position{line: 141, col: 49, offset: 4561},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 141, col: 53, offset: 4565},
										expr: &litMatcher{
											pos:        position{line: 141, col: 54, offset: 4566},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 141, col: 59, offset: 4571,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 145, col: 1, offset: 4612},
			expr: &actionExpr{
				pos: position{line: 145, col: 27, offset: 4638},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 145, col: 27, offset: 4638},
					expr: &choiceExpr{
						pos: position{line: 145, col: 28, offset: 4639},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 145, col: 28, offset: 4639},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 145, col: 40, offset: 4651},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 145, col: 50, offset: 4661},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 145, col: 50, offset: 4661},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 51, offset: 4662},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 145, col: 56, offset: 4667,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 152, col: 1, offset: 4823},
			expr: &actionExpr{
				pos: position{line: 152, col: 33, offset: 4855},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 152, col: 33, offset: 4855},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 152, col: 33, offset: 4855},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 37, offset: 4859},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 43, offset: 4865},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 152, col: 66, offset: 4888},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 70, offset: 4892},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 152, col: 76, offset: 4898},
								expr: &actionExpr{
									pos: position{line: 152, col: 77, offset: 4899},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 152, col: 78, offset: 4900},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 152, col: 78, offset: 4900},
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 78, offset: 4900},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 152, col: 82, offset: 4904},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 89, offset: 4911},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 152, col: 138, offset: 4960},
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 138, offset: 4960},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 142, offset: 4964},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 159, col: 1, offset: 5212},
			expr: &actionExpr{
				pos: position{line: 159, col: 26, offset: 5237},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 159, col: 26, offset: 5237},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 159, col: 27, offset: 5238},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 159, col: 27, offset: 5238},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 35, offset: 5246},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 43, offset: 5254},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 159, col: 51, offset: 5262},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 159, col: 56, offset: 5267},
							expr: &choiceExpr{
								pos: position{line: 159, col: 57, offset: 5268},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 159, col: 57, offset: 5268},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 65, offset: 5276},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 73, offset: 5284},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 159, col: 81, offset: 5292},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 163, col: 1, offset: 5334},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5360},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5360},
					expr: &seqExpr{
						pos: position{line: 163, col: 28, offset: 5361},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 163, col: 28, offset: 5361},
								expr: &ruleRefExpr{
									pos:  position{line: 163, col: 29, offset: 5362},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 163, col: 37, offset: 5370,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 167, col: 1, offset: 5410},
			expr: &choiceExpr{
				pos: position{line: 167, col: 27, offset: 5436},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 167, col: 27, offset: 5436},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 167, col: 27, offset: 5436},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 167, col: 27, offset: 5436},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 167, col: 32, offset: 5441},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 38, offset: 5447},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 167, col: 61, offset: 5470},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 167, col: 65, offset: 5474},
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 65, offset: 5474},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 167, col: 69, offset: 5478},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 5546},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 5546},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 169, col: 5, offset: 5546},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 169, col: 9, offset: 5550},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 15, offset: 5556},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 169, col: 38, offset: 5579},
									val:        "!:",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 169, col: 43, offset: 5584},
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 43, offset: 5584},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 169, col: 47, offset: 5588},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 173, col: 1, offset: 5655},
			expr: &actionExpr{
				pos: position{line: 173, col: 34, offset: 5688},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 173, col: 34, offset: 5688},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 34, offset: 5688},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 173, col: 38, offset: 5692},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 44, offset: 5698},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 67, offset: 5721},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 180, col: 1, offset: 5909},
			expr: &actionExpr{
				pos: position{line: 180, col: 22, offset: 5930},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 180, col: 22, offset: 5930},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 180, col: 28, offset: 5936},
						expr: &ruleRefExpr{
							pos:  position{line: 180, col: 29, offset: 5937},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 184, col: 1, offset: 6027},
			expr: &actionExpr{
				pos: position{line: 184, col: 21, offset: 6047},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 184, col: 21, offset: 6047},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 184, col: 21, offset: 6047},
							expr: &choiceExpr{
								pos: position{line: 184, col: 23, offset: 6049},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 184, col: 23, offset: 6049},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 29, offset: 6055},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 35, offset: 6061},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 6137},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 185, col: 11, offset: 6143},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 185, col: 11, offset: 6143},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 186, col: 9, offset: 6164},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 187, col: 9, offset: 6188},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 188, col: 9, offset: 6211},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 189, col: 9, offset: 6239},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 9, offset: 6267},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 191, col: 9, offset: 6294},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 192, col: 9, offset: 6321},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 193, col: 9, offset: 6358},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 194, col: 9, offset: 6386},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 199, col: 1, offset: 6569},
			expr: &choiceExpr{
				pos: position{line: 199, col: 24, offset: 6592},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 24, offset: 6592},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 42, offset: 6610},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 201, col: 1, offset: 6627},
			expr: &choiceExpr{
				pos: position{line: 201, col: 14, offset: 6640},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 201, col: 14, offset: 6640},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 201, col: 14, offset: 6640},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 14, offset: 6640},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 201, col: 19, offset: 6645},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 23, offset: 6649},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 27, offset: 6653},
									val:        "]]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 201, col: 32, offset: 6658},
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 32, offset: 6658},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 36, offset: 6662},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 5, offset: 6715},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 203, col: 5, offset: 6715},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 203, col: 5, offset: 6715},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 203, col: 10, offset: 6720},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 203, col: 14, offset: 6724},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 203, col: 18, offset: 6728},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 203, col: 23, offset: 6733},
									expr: &ruleRefExpr{
										pos:  position{line: 203, col: 23, offset: 6733},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 203, col: 27, offset: 6737},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 207, col: 1, offset: 6789},
			expr: &actionExpr{
				pos: position{line: 207, col: 20, offset: 6808},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 207, col: 20, offset: 6808},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 20, offset: 6808},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 207, col: 25, offset: 6813},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 29, offset: 6817},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 33, offset: 6821},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 207, col: 38, offset: 6826},
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 38, offset: 6826},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 213, col: 1, offset: 7100},
			expr: &actionExpr{
				pos: position{line: 213, col: 17, offset: 7116},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 213, col: 17, offset: 7116},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 17, offset: 7116},
							val:        ".",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 213, col: 21, offset: 7120},
							expr: &litMatcher{
								pos:        position{line: 213, col: 22, offset: 7121},
								val:        ".",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 213, col: 26, offset: 7125},
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 27, offset: 7126},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 30, offset: 7129},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 213, col: 37, offset: 7136},
								run: (*parser).callonElementTitle9,
								expr: &oneOrMoreExpr{
									pos: position{line: 213, col: 37, offset: 7136},
									expr: &choiceExpr{
										pos: position{line: 213, col: 38, offset: 7137},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 213, col: 38, offset: 7137},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 213, col: 50, offset: 7149},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 213, col: 60, offset: 7159},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 213, col: 60, offset: 7159},
														expr: &ruleRefExpr{
															pos:  position{line: 213, col: 61, offset: 7160},
															name: "NEWLINE",
														},
													},
													&anyMatcher{
														line: 213, col: 70, offset: 7169,
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 215, col: 4, offset: 7210},
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 4, offset: 7210},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 8, offset: 7214},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 221, col: 1, offset: 7366},
			expr: &actionExpr{
				pos: position{line: 221, col: 16, offset: 7381},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 221, col: 16, offset: 7381},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 16, offset: 7381},
							val:        "[.",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 221, col: 21, offset: 7386},
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 22, offset: 7387},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 221, col: 25, offset: 7390},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 221, col: 31, offset: 7396},
								run: (*parser).callonElementRole7,
								expr: &oneOrMoreExpr{
									pos: position{line: 221, col: 31, offset: 7396},
									expr: &choiceExpr{
										pos: position{line: 221, col: 32, offset: 7397},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 221, col: 32, offset: 7397},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 221, col: 44, offset: 7409},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 221, col: 54, offset: 7419},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 221, col: 54, offset: 7419},
														expr: &ruleRefExpr{
															pos:  position{line: 221, col: 55, offset: 7420},
															name: "NEWLINE",
														},
													},
													&notExpr{
														pos: position{line: 221, col: 63, offset: 7428},
														expr: &litMatcher{
															pos:        position{line: 221, col: 64, offset: 7429},
															val:        "]",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 221, col: 69, offset: 7434,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 4, offset: 7475},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 223, col: 8, offset: 7479},
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 8, offset: 7479},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 12, offset: 7483},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 227, col: 1, offset: 7539},
			expr: &actionExpr{
				pos: position{line: 227, col: 21, offset: 7559},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 227, col: 21, offset: 7559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 21, offset: 7559},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 33, offset: 7571},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 33, offset: 7571},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 37, offset: 7575},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 232, col: 1, offset: 7707},
			expr: &actionExpr{
				pos: position{line: 232, col: 30, offset: 7736},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 232, col: 30, offset: 7736},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 30, offset: 7736},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 34, offset: 7740},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 37, offset: 7743},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 232, col: 53, offset: 7759},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 232, col: 57, offset: 7763},
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 57, offset: 7763},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 61, offset: 7767},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 237, col: 1, offset: 7922},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7942},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7942},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7942},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 237, col: 31, offset: 7952},
							expr: &litMatcher{
								pos:        position{line: 237, col: 31, offset: 7952},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 36, offset: 7957},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 45, offset: 7966},
								expr: &actionExpr{
									pos: position{line: 237, col: 46, offset: 7967},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 237, col: 46, offset: 7967},
										expr: &choiceExpr{
											pos: position{line: 237, col: 47, offset: 7968},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 237, col: 47, offset: 7968},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 237, col: 59, offset: 7980},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 237, col: 69, offset: 7990},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 237, col: 69, offset: 7990},
															expr: &ruleRefExpr{
																pos:  position{line: 237, col: 70, offset: 7991},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 237, col: 78, offset: 7999},
															expr: &litMatcher{
																pos:        position{line: 237, col: 79, offset: 8000},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 237, col: 83, offset: 8004,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 239, col: 9, offset: 8054},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 13, offset: 8058},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 13, offset: 8058},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 17, offset: 8062},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 244, col: 1, offset: 8186},
			expr: &actionExpr{
				pos: position{line: 244, col: 19, offset: 8204},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 244, col: 19, offset: 8204},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 19, offset: 8204},
							val:        "[",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 244, col: 23, offset: 8208},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 24, offset: 8209},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 244, col: 27, offset: 8212},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 244, col: 38, offset: 8223},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 39, offset: 8224},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 59, offset: 8244},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 63, offset: 8248},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 63, offset: 8248},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 67, offset: 8252},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 248, col: 1, offset: 8324},
			expr: &actionExpr{
				pos: position{line: 248, col: 21, offset: 8344},
				run: (*parser).callonGenericAttribute1,
				expr: &seqExpr{
					pos: position{line: 248, col: 21, offset: 8344},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 248, col: 21, offset: 8344},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 26, offset: 8349},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 248, col: 40, offset: 8363},
							expr: &litMatcher{
								pos:        position{line: 248, col: 40, offset: 8363},
								val:        "=",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 45, offset: 8368},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 51, offset: 8374},
								expr: &ruleRefExpr{
									pos:  position{line: 248, col: 52, offset: 8375},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 248, col: 69, offset: 8392},
							expr: &litMatcher{
								pos:        position{line: 248, col: 69, offset: 8392},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 248, col: 74, offset: 8397},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 74, offset: 8397},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 252, col: 1, offset: 8480},
			expr: &actionExpr{
				pos: position{line: 252, col: 17, offset: 8496},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 252, col: 17, offset: 8496},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 252, col: 17, offset: 8496},
							expr: &litMatcher{
								pos:        position{line: 252, col: 18, offset: 8497},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 252, col: 26, offset: 8505},
							expr: &litMatcher{
								pos:        position{line: 252, col: 27, offset: 8506},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 252, col: 35, offset: 8514},
							expr: &litMatcher{
								pos:        position{line: 252, col: 36, offset: 8515},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 252, col: 46, offset: 8525},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 252, col: 50, offset: 8529},
								expr: &choiceExpr{
									pos: position{line: 252, col: 51, offset: 8530},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 252, col: 51, offset: 8530},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 252, col: 63, offset: 8542},
											name: "Spaces",
										},
										&seqExpr{
											pos: position{line: 252, col: 73, offset: 8552},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 252, col: 73, offset: 8552},
													expr: &litMatcher{
														pos:        position{line: 252, col: 74, offset: 8553},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 252, col: 78, offset: 8557},
													expr: &litMatcher{
														pos:        position{line: 252, col: 79, offset: 8558},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 252, col: 83, offset: 8562},
													expr: &litMatcher{
														pos:        position{line: 252, col: 84, offset: 8563},
														val:        "]",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 252, col: 89, offset: 8568,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 256, col: 1, offset: 8609},
			expr: &actionExpr{
				pos: position{line: 256, col: 19, offset: 8627},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 256, col: 19, offset: 8627},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 256, col: 19, offset: 8627},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 256, col: 25, offset: 8633},
								expr: &choiceExpr{
									pos: position{line: 256, col: 26, offset: 8634},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 256, col: 26, offset: 8634},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 256, col: 38, offset: 8646},
											name: "Spaces",
										},
										&seqExpr{
											pos: position{line: 256, col: 48, offset: 8656},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 256, col: 48, offset: 8656},
													expr: &litMatcher{
														pos:        position{line: 256, col: 49, offset: 8657},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 256, col: 53, offset: 8661},
													expr: &litMatcher{
														pos:        position{line: 256, col: 54, offset: 8662},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 256, col: 58, offset: 8666},
													expr: &litMatcher{
														pos:        position{line: 256, col: 59, offset: 8667},
														val:        "]",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 256, col: 63, offset: 8671,
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 256, col: 68, offset: 8676},
							expr: &seqExpr{
								pos: position{line: 256, col: 70, offset: 8678},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 256, col: 70, offset: 8678},
										expr: &ruleRefExpr{
											pos:  position{line: 256, col: 70, offset: 8678},
											name: "WS",
										},
									},
									&litMatcher{
										pos:        position{line: 256, col: 74, offset: 8682},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 260, col: 1, offset: 8837},
			expr: &actionExpr{
				pos: position{line: 260, col: 21, offset: 8857},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 260, col: 21, offset: 8857},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 21, offset: 8857},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 36, offset: 8872},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 36, offset: 8872},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 40, offset: 8876},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 264, col: 1, offset: 8949},
			expr: &actionExpr{
				pos: position{line: 264, col: 20, offset: 8968},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 264, col: 20, offset: 8968},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 264, col: 20, offset: 8968},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 264, col: 29, offset: 8977},
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 29, offset: 8977},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 264, col: 33, offset: 8981},
							expr: &litMatcher{
								pos:        position{line: 264, col: 33, offset: 8981},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 38, offset: 8986},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 45, offset: 8993},
								expr: &ruleRefExpr{
									pos:  position{line: 264, col: 46, offset: 8994},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 264, col: 63, offset: 9011},
							expr: &litMatcher{
								pos:        position{line: 264, col: 63, offset: 9011},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 68, offset: 9016},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 74, offset: 9022},
								expr: &ruleRefExpr{
									pos:  position{line: 264, col: 75, offset: 9023},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 264, col: 92, offset: 9040},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 264, col: 96, offset: 9044},
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 96, offset: 9044},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 264, col: 100, offset: 9048},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 268, col: 1, offset: 9117},
			expr: &actionExpr{
				pos: position{line: 268, col: 20, offset: 9136},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 268, col: 20, offset: 9136},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 268, col: 20, offset: 9136},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 29, offset: 9145},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 29, offset: 9145},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 268, col: 33, offset: 9149},
							expr: &litMatcher{
								pos:        position{line: 268, col: 33, offset: 9149},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 268, col: 38, offset: 9154},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 268, col: 45, offset: 9161},
								expr: &ruleRefExpr{
									pos:  position{line: 268, col: 46, offset: 9162},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 268, col: 63, offset: 9179},
							expr: &litMatcher{
								pos:        position{line: 268, col: 63, offset: 9179},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 268, col: 68, offset: 9184},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 268, col: 74, offset: 9190},
								expr: &ruleRefExpr{
									pos:  position{line: 268, col: 75, offset: 9191},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 268, col: 92, offset: 9208},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 96, offset: 9212},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 96, offset: 9212},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 100, offset: 9216},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 272, col: 1, offset: 9303},
			expr: &actionExpr{
				pos: position{line: 272, col: 19, offset: 9321},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 272, col: 19, offset: 9321},
					expr: &choiceExpr{
						pos: position{line: 272, col: 20, offset: 9322},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 272, col: 20, offset: 9322},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 272, col: 32, offset: 9334},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 272, col: 42, offset: 9344},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 272, col: 42, offset: 9344},
										expr: &litMatcher{
											pos:        position{line: 272, col: 43, offset: 9345},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 272, col: 47, offset: 9349},
										expr: &litMatcher{
											pos:        position{line: 272, col: 48, offset: 9350},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 272, col: 52, offset: 9354},
										expr: &ruleRefExpr{
											pos:  position{line: 272, col: 53, offset: 9355},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 272, col: 57, offset: 9359,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 276, col: 1, offset: 9400},
			expr: &actionExpr{
				pos: position{line: 276, col: 21, offset: 9420},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 276, col: 21, offset: 9420},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 276, col: 21, offset: 9420},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 276, col: 25, offset: 9424},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 276, col: 31, offset: 9430},
								expr: &ruleRefExpr{
									pos:  position{line: 276, col: 32, offset: 9431},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 51, offset: 9450},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 283, col: 1, offset: 9624},
			expr: &actionExpr{
				pos: position{line: 283, col: 12, offset: 9635},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 283, col: 12, offset: 9635},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 283, col: 12, offset: 9635},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 23, offset: 9646},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 24, offset: 9647},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 5, offset: 9671},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 284, col: 12, offset: 9678},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 284, col: 12, offset: 9678},
									expr: &litMatcher{
										pos:        position{line: 284, col: 13, offset: 9679},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 288, col: 5, offset: 9770},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 292, col: 5, offset: 9922},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 5, offset: 9922},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 292, col: 9, offset: 9926},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 16, offset: 9933},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 292, col: 31, offset: 9948},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 292, col: 35, offset: 9952},
								expr: &ruleRefExpr{
									pos:  position{line: 292, col: 35, offset: 9952},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 292, col: 53, offset: 9970},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 297, col: 1, offset: 10084},
			expr: &actionExpr{
				pos: position{line: 297, col: 18, offset: 10101},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 297, col: 18, offset: 10101},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 297, col: 27, offset: 10110},
						expr: &seqExpr{
							pos: position{line: 297, col: 28, offset: 10111},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 297, col: 28, offset: 10111},
									expr: &ruleRefExpr{
										pos:  position{line: 297, col: 29, offset: 10112},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 297, col: 37, offset: 10120},
									expr: &ruleRefExpr{
										pos:  position{line: 297, col: 38, offset: 10121},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 297, col: 54, offset: 10137},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 301, col: 1, offset: 10258},
			expr: &actionExpr{
				pos: position{line: 301, col: 17, offset: 10274},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 301, col: 17, offset: 10274},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 301, col: 26, offset: 10283},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 301, col: 26, offset: 10283},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 302, col: 11, offset: 10301},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 303, col: 11, offset: 10326},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 304, col: 11, offset: 10348},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 305, col: 11, offset: 10371},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 306, col: 11, offset: 10386},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 307, col: 11, offset: 10411},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 308, col: 11, offset: 10431},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 309, col: 11, offset: 10452},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 11, offset: 10492},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 311, col: 11, offset: 10512},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 318, col: 1, offset: 10665},
			expr: &seqExpr{
				pos: position{line: 318, col: 25, offset: 10689},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 318, col: 25, offset: 10689},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 318, col: 35, offset: 10699},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 323, col: 1, offset: 10810},
			expr: &actionExpr{
				pos: position{line: 323, col: 19, offset: 10828},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 323, col: 19, offset: 10828},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 323, col: 19, offset: 10828},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 25, offset: 10834},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 40, offset: 10849},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 323, col: 45, offset: 10854},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 52, offset: 10861},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 68, offset: 10877},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 75, offset: 10884},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 327, col: 1, offset: 11025},
			expr: &actionExpr{
				pos: position{line: 327, col: 20, offset: 11044},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 327, col: 20, offset: 11044},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 327, col: 20, offset: 11044},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 26, offset: 11050},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 327, col: 41, offset: 11065},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 327, col: 45, offset: 11069},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 52, offset: 11076},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 68, offset: 11092},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 75, offset: 11099},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 331, col: 1, offset: 11241},
			expr: &actionExpr{
				pos: position{line: 331, col: 18, offset: 11258},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 331, col: 18, offset: 11258},
					expr: &choiceExpr{
						pos: position{line: 331, col: 19, offset: 11259},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 331, col: 19, offset: 11259},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 331, col: 33, offset: 11273},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 331, col: 39, offset: 11279},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 335, col: 1, offset: 11321},
			expr: &actionExpr{
				pos: position{line: 335, col: 19, offset: 11339},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 335, col: 19, offset: 11339},
					expr: &choiceExpr{
						pos: position{line: 335, col: 20, offset: 11340},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 335, col: 20, offset: 11340},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 335, col: 33, offset: 11353},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 335, col: 33, offset: 11353},
										expr: &litMatcher{
											pos:        position{line: 335, col: 34, offset: 11354},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 335, col: 38, offset: 11358},
										expr: &litMatcher{
											pos:        position{line: 335, col: 39, offset: 11359},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 335, col: 43, offset: 11363},
										expr: &ruleRefExpr{
											pos:  position{line: 335, col: 44, offset: 11364},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 335, col: 48, offset: 11368,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 339, col: 1, offset: 11409},
			expr: &actionExpr{
				pos: position{line: 339, col: 24, offset: 11432},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 339, col: 24, offset: 11432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 339, col: 24, offset: 11432},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 339, col: 28, offset: 11436},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 339, col: 34, offset: 11442},
								expr: &ruleRefExpr{
									pos:  position{line: 339, col: 35, offset: 11443},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 339, col: 54, offset: 11462},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 346, col: 1, offset: 11642},
			expr: &actionExpr{
				pos: position{line: 346, col: 18, offset: 11659},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 346, col: 18, offset: 11659},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 346, col: 18, offset: 11659},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 346, col: 24, offset: 11665},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 346, col: 24, offset: 11665},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 346, col: 24, offset: 11665},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 346, col: 36, offset: 11677},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 346, col: 42, offset: 11683},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 346, col: 56, offset: 11697},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 346, col: 74, offset: 11715},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 348, col: 8, offset: 11869},
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 8, offset: 11869},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 12, offset: 11873},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 352, col: 1, offset: 11926},
			expr: &actionExpr{
				pos: position{line: 352, col: 26, offset: 11951},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 352, col: 26, offset: 11951},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 26, offset: 11951},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 352, col: 30, offset: 11955},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 352, col: 36, offset: 11961},
								expr: &choiceExpr{
									pos: position{line: 352, col: 37, offset: 11962},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 352, col: 37, offset: 11962},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 352, col: 59, offset: 11984},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 352, col: 78, offset: 12003},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 356, col: 1, offset: 12073},
			expr: &actionExpr{
				pos: position{line: 356, col: 24, offset: 12096},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 356, col: 24, offset: 12096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 24, offset: 12096},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 356, col: 33, offset: 12105},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 40, offset: 12112},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 356, col: 66, offset: 12138},
							expr: &litMatcher{
								pos:        position{line: 356, col: 66, offset: 12138},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 361, col: 1, offset: 12234},
			expr: &actionExpr{
				pos: position{line: 361, col: 29, offset: 12262},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 361, col: 29, offset: 12262},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 361, col: 29, offset: 12262},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 361, col: 36, offset: 12269},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 361, col: 36, offset: 12269},
										name: "MultipleRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 362, col: 11, offset: 12374},
										name: "MultipleQuotedRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 363, col: 11, offset: 12406},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 364, col: 11, offset: 12432},
										name: "MultilineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 365, col: 11, offset: 12464},
										name: "SinglelineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 366, col: 11, offset: 12496},
										name: "SinglelineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 367, col: 11, offset: 12523},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 367, col: 31, offset: 12543},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 31, offset: 12543},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 367, col: 36, offset: 12548},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 367, col: 36, offset: 12548},
									expr: &litMatcher{
										pos:        position{line: 367, col: 37, offset: 12549},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 367, col: 43, offset: 12555},
									expr: &litMatcher{
										pos:        position{line: 367, col: 44, offset: 12556},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleRanges",
			pos:  position{line: 371, col: 1, offset: 12588},
			expr: &actionExpr{
				pos: position{line: 371, col: 19, offset: 12606},
				run: (*parser).callonMultipleRanges1,
				expr: &seqExpr{
					pos: position{line: 371, col: 19, offset: 12606},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 371, col: 19, offset: 12606},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 371, col: 26, offset: 12613},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 371, col: 26, offset: 12613},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 371, col: 43, offset: 12630},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 372, col: 5, offset: 12652},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 372, col: 12, offset: 12659},
								expr: &actionExpr{
									pos: position{line: 372, col: 13, offset: 12660},
									run: (*parser).callonMultipleRanges9,
									expr: &seqExpr{
										pos: position{line: 372, col: 13, offset: 12660},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 372, col: 13, offset: 12660},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 372, col: 17, offset: 12664},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 372, col: 24, offset: 12671},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 372, col: 24, offset: 12671},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 372, col: 41, offset: 12688},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedRanges",
			pos:  position{line: 378, col: 1, offset: 12826},
			expr: &actionExpr{
				pos: position{line: 378, col: 25, offset: 12850},
				run: (*parser).callonMultipleQuotedRanges1,
				expr: &seqExpr{
					pos: position{line: 378, col: 25, offset: 12850},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 25, offset: 12850},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 30, offset: 12855},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 378, col: 37, offset: 12862},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 378, col: 37, offset: 12862},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 54, offset: 12879},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 379, col: 5, offset: 12901},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 379, col: 12, offset: 12908},
								expr: &actionExpr{
									pos: position{line: 379, col: 13, offset: 12909},
									run: (*parser).callonMultipleQuotedRanges10,
									expr: &seqExpr{
										pos: position{line: 379, col: 13, offset: 12909},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 379, col: 13, offset: 12909},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 379, col: 17, offset: 12913},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 379, col: 24, offset: 12920},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 379, col: 24, offset: 12920},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 379, col: 41, offset: 12937},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 381, col: 9, offset: 12990},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultilineRange",
			pos:  position{line: 385, col: 1, offset: 13080},
			expr: &actionExpr{
				pos: position{line: 385, col: 19, offset: 13098},
				run: (*parser).callonMultilineRange1,
				expr: &seqExpr{
					pos: position{line: 385, col: 19, offset: 13098},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 385, col: 19, offset: 13098},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 26, offset: 13105},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 34, offset: 13113},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 385, col: 39, offset: 13118},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 44, offset: 13123},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultilineQuotedRange",
			pos:  position{line: 389, col: 1, offset: 13216},
			expr: &actionExpr{
				pos: position{line: 389, col: 25, offset: 13240},
				run: (*parser).callonMultilineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 389, col: 25, offset: 13240},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 389, col: 25, offset: 13240},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 389, col: 30, offset: 13245},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 37, offset: 13252},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 389, col: 45, offset: 13260},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 389, col: 50, offset: 13265},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 55, offset: 13270},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 389, col: 63, offset: 13278},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SinglelineRange",
			pos:  position{line: 393, col: 1, offset: 13368},
			expr: &actionExpr{
				pos: position{line: 393, col: 20, offset: 13387},
				run: (*parser).callonSinglelineRange1,
				expr: &labeledExpr{
					pos:   position{line: 393, col: 20, offset: 13387},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 393, col: 32, offset: 13399},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SinglelineQuotedRange",
			pos:  position{line: 397, col: 1, offset: 13482},
			expr: &actionExpr{
				pos: position{line: 397, col: 26, offset: 13507},
				run: (*parser).callonSinglelineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 397, col: 26, offset: 13507},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 397, col: 26, offset: 13507},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 397, col: 31, offset: 13512},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 43, offset: 13524},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 397, col: 51, offset: 13532},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 401, col: 1, offset: 13612},
			expr: &actionExpr{
				pos: position{line: 401, col: 23, offset: 13634},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 401, col: 23, offset: 13634},
					expr: &seqExpr{
						pos: position{line: 401, col: 24, offset: 13635},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 401, col: 24, offset: 13635},
								expr: &litMatcher{
									pos:        position{line: 401, col: 25, offset: 13636},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 401, col: 29, offset: 13640},
								expr: &litMatcher{
									pos:        position{line: 401, col: 30, offset: 13641},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 401, col: 34, offset: 13645},
								expr: &ruleRefExpr{
									pos:  position{line: 401, col: 35, offset: 13646},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 401, col: 38, offset: 13649,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 408, col: 1, offset: 13790},
			expr: &oneOrMoreExpr{
				pos: position{line: 408, col: 14, offset: 13803},
				expr: &ruleRefExpr{
					pos:  position{line: 408, col: 14, offset: 13803},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 410, col: 1, offset: 13814},
			expr: &choiceExpr{
				pos: position{line: 410, col: 13, offset: 13826},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 410, col: 13, offset: 13826},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 410, col: 31, offset: 13844},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 410, col: 51, offset: 13864},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 410, col: 69, offset: 13882},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 412, col: 1, offset: 13908},
			expr: &choiceExpr{
				pos: position{line: 412, col: 18, offset: 13925},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 412, col: 18, offset: 13925},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 412, col: 18, offset: 13925},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 27, offset: 13934},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 414, col: 9, offset: 13991},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 414, col: 9, offset: 13991},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 414, col: 15, offset: 13997},
								expr: &ruleRefExpr{
									pos:  position{line: 414, col: 16, offset: 13998},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 418, col: 1, offset: 14090},
			expr: &actionExpr{
				pos: position{line: 418, col: 22, offset: 14111},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 418, col: 22, offset: 14111},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 418, col: 22, offset: 14111},
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 23, offset: 14112},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 419, col: 5, offset: 14120},
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 6, offset: 14121},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 420, col: 5, offset: 14136},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 6, offset: 14137},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 421, col: 5, offset: 14159},
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 6, offset: 14160},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 422, col: 5, offset: 14186},
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 6, offset: 14187},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 423, col: 5, offset: 14215},
							expr: &seqExpr{
								pos: position{line: 423, col: 7, offset: 14217},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 423, col: 7, offset: 14217},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 423, col: 27, offset: 14237},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 424, col: 5, offset: 14268},
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 6, offset: 14269},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 425, col: 5, offset: 14294},
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 6, offset: 14295},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 426, col: 5, offset: 14316},
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 6, offset: 14317},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 427, col: 5, offset: 14336},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 428, col: 9, offset: 14351},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 428, col: 9, offset: 14351},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 428, col: 9, offset: 14351},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 428, col: 18, offset: 14360},
												expr: &ruleRefExpr{
													pos:  position{line: 428, col: 19, offset: 14361},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 428, col: 35, offset: 14377},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 428, col: 45, offset: 14387},
												expr: &ruleRefExpr{
													pos:  position{line: 428, col: 46, offset: 14388},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 12, offset: 14540},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 434, col: 1, offset: 14587},
			expr: &seqExpr{
				pos: position{line: 434, col: 25, offset: 14611},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 434, col: 25, offset: 14611},
						val:        "+",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 434, col: 29, offset: 14615},
						expr: &ruleRefExpr{
							pos:  position{line: 434, col: 29, offset: 14615},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 434, col: 33, offset: 14619},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 436, col: 1, offset: 14625},
			expr: &actionExpr{
				pos: position{line: 436, col: 29, offset: 14653},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 436, col: 29, offset: 14653},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 436, col: 29, offset: 14653},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 436, col: 41, offset: 14665},
								expr: &ruleRefExpr{
									pos:  position{line: 436, col: 41, offset: 14665},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 53, offset: 14677},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 436, col: 74, offset: 14698},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 82, offset: 14706},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 443, col: 1, offset: 14948},
			expr: &actionExpr{
				pos: position{line: 443, col: 20, offset: 14967},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 443, col: 20, offset: 14967},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 443, col: 20, offset: 14967},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 443, col: 31, offset: 14978},
								expr: &ruleRefExpr{
									pos:  position{line: 443, col: 32, offset: 14979},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 52, offset: 14999},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 60, offset: 15007},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 83, offset: 15030},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 92, offset: 15039},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 447, col: 1, offset: 15179},
			expr: &actionExpr{
				pos: position{line: 448, col: 5, offset: 15209},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 448, col: 5, offset: 15209},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 448, col: 5, offset: 15209},
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 5, offset: 15209},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 9, offset: 15213},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 450, col: 9, offset: 15276},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 450, col: 9, offset: 15276},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 450, col: 9, offset: 15276},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 450, col: 9, offset: 15276},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 450, col: 16, offset: 15283},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 450, col: 16, offset: 15283},
															expr: &litMatcher{
																pos:        position{line: 450, col: 17, offset: 15284},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 454, col: 9, offset: 15384},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 473, col: 11, offset: 16101},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 473, col: 11, offset: 16101},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 473, col: 11, offset: 16101},
													expr: &charClassMatcher{
														pos:        position{line: 473, col: 12, offset: 16102},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 473, col: 20, offset: 16110},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 475, col: 13, offset: 16221},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 475, col: 13, offset: 16221},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 475, col: 14, offset: 16222},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 475, col: 21, offset: 16229},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 477, col: 13, offset: 16343},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 477, col: 13, offset: 16343},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 477, col: 14, offset: 16344},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 477, col: 21, offset: 16351},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 479, col: 13, offset: 16465},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 479, col: 13, offset: 16465},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 479, col: 13, offset: 16465},
													expr: &charClassMatcher{
														pos:        position{line: 479, col: 14, offset: 16466},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 479, col: 22, offset: 16474},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 481, col: 13, offset: 16588},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 481, col: 13, offset: 16588},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 481, col: 13, offset: 16588},
													expr: &charClassMatcher{
														pos:        position{line: 481, col: 14, offset: 16589},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 481, col: 22, offset: 16597},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 483, col: 12, offset: 16710},
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 12, offset: 16710},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 487, col: 1, offset: 16742},
			expr: &actionExpr{
				pos: position{line: 487, col: 27, offset: 16768},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 487, col: 27, offset: 16768},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 487, col: 37, offset: 16778},
						expr: &ruleRefExpr{
							pos:  position{line: 487, col: 37, offset: 16778},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 494, col: 1, offset: 16978},
			expr: &actionExpr{
				pos: position{line: 494, col: 22, offset: 16999},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 494, col: 22, offset: 16999},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 494, col: 22, offset: 16999},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 494, col: 33, offset: 17010},
								expr: &ruleRefExpr{
									pos:  position{line: 494, col: 34, offset: 17011},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 54, offset: 17031},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 62, offset: 17039},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 87, offset: 17064},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 494, col: 98, offset: 17075},
								expr: &ruleRefExpr{
									pos:  position{line: 494, col: 99, offset: 17076},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 129, offset: 17106},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 138, offset: 17115},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 498, col: 1, offset: 17273},
			expr: &actionExpr{
				pos: position{line: 499, col: 5, offset: 17305},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 499, col: 5, offset: 17305},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 499, col: 5, offset: 17305},
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 5, offset: 17305},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 9, offset: 17309},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 499, col: 17, offset: 17317},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 501, col: 9, offset: 17374},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 501, col: 9, offset: 17374},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 501, col: 9, offset: 17374},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 501, col: 16, offset: 17381},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 501, col: 16, offset: 17381},
															expr: &litMatcher{
																pos:        position{line: 501, col: 17, offset: 17382},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 505, col: 9, offset: 17482},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 522, col: 14, offset: 18189},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 522, col: 21, offset: 18196},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 522, col: 22, offset: 18197},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 524, col: 13, offset: 18283},
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 13, offset: 18283},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 528, col: 1, offset: 18316},
			expr: &actionExpr{
				pos: position{line: 528, col: 32, offset: 18347},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 528, col: 32, offset: 18347},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 528, col: 32, offset: 18347},
							expr: &litMatcher{
								pos:        position{line: 528, col: 33, offset: 18348},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 528, col: 37, offset: 18352},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 529, col: 7, offset: 18366},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 529, col: 7, offset: 18366},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 529, col: 7, offset: 18366},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 530, col: 7, offset: 18411},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 530, col: 7, offset: 18411},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 531, col: 7, offset: 18454},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 531, col: 7, offset: 18454},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 532, col: 7, offset: 18496},
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 7, offset: 18496},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 536, col: 1, offset: 18535},
			expr: &actionExpr{
				pos: position{line: 536, col: 29, offset: 18563},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 536, col: 29, offset: 18563},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 536, col: 39, offset: 18573},
						expr: &ruleRefExpr{
							pos:  position{line: 536, col: 39, offset: 18573},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 543, col: 1, offset: 18889},
			expr: &actionExpr{
				pos: position{line: 543, col: 20, offset: 18908},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 543, col: 20, offset: 18908},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 543, col: 20, offset: 18908},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 543, col: 31, offset: 18919},
								expr: &ruleRefExpr{
									pos:  position{line: 543, col: 32, offset: 18920},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 52, offset: 18940},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 58, offset: 18946},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 79, offset: 18967},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 90, offset: 18978},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 116, offset: 19004},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 543, col: 128, offset: 19016},
								expr: &ruleRefExpr{
									pos:  position{line: 543, col: 129, offset: 19017},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 547, col: 1, offset: 19156},
			expr: &actionExpr{
				pos: position{line: 547, col: 24, offset: 19179},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 547, col: 24, offset: 19179},
					expr: &choiceExpr{
						pos: position{line: 547, col: 25, offset: 19180},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 547, col: 25, offset: 19180},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 547, col: 37, offset: 19192},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 547, col: 47, offset: 19202},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 547, col: 47, offset: 19202},
										expr: &ruleRefExpr{
											pos:  position{line: 547, col: 48, offset: 19203},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 547, col: 56, offset: 19211},
										expr: &litMatcher{
											pos:        position{line: 547, col: 57, offset: 19212},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 547, col: 63, offset: 19218,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 551, col: 1, offset: 19260},
			expr: &actionExpr{
				pos: position{line: 552, col: 5, offset: 19293},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 552, col: 5, offset: 19293},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 552, col: 5, offset: 19293},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 552, col: 16, offset: 19304},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 552, col: 16, offset: 19304},
									expr: &litMatcher{
										pos:        position{line: 552, col: 17, offset: 19305},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 555, col: 5, offset: 19364},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 559, col: 6, offset: 19540},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 559, col: 6, offset: 19540},
									expr: &choiceExpr{
										pos: position{line: 559, col: 7, offset: 19541},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 559, col: 7, offset: 19541},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 559, col: 12, offset: 19546},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 559, col: 24, offset: 19558},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 563, col: 1, offset: 19598},
			expr: &actionExpr{
				pos: position{line: 563, col: 31, offset: 19628},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 563, col: 31, offset: 19628},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 563, col: 40, offset: 19637},
						expr: &ruleRefExpr{
							pos:  position{line: 563, col: 41, offset: 19638},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 570, col: 1, offset: 19829},
			expr: &choiceExpr{
				pos: position{line: 570, col: 19, offset: 19847},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 570, col: 19, offset: 19847},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 570, col: 19, offset: 19847},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 572, col: 9, offset: 19893},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 572, col: 9, offset: 19893},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 9, offset: 19941},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 574, col: 9, offset: 19941},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 576, col: 9, offset: 19999},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 576, col: 9, offset: 19999},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 578, col: 9, offset: 20053},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 578, col: 9, offset: 20053},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 587, col: 1, offset: 20360},
			expr: &choiceExpr{
				pos: position{line: 589, col: 5, offset: 20407},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 589, col: 5, offset: 20407},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 589, col: 5, offset: 20407},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 589, col: 5, offset: 20407},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 589, col: 16, offset: 20418},
										expr: &ruleRefExpr{
											pos:  position{line: 589, col: 17, offset: 20419},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 589, col: 37, offset: 20439},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 589, col: 40, offset: 20442},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 589, col: 56, offset: 20458},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 589, col: 61, offset: 20463},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 589, col: 67, offset: 20469},
										expr: &ruleRefExpr{
											pos:  position{line: 589, col: 68, offset: 20470},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 20662},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 593, col: 5, offset: 20662},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 593, col: 5, offset: 20662},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 593, col: 16, offset: 20673},
										expr: &ruleRefExpr{
											pos:  position{line: 593, col: 17, offset: 20674},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 593, col: 37, offset: 20694},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 593, col: 43, offset: 20700},
										expr: &ruleRefExpr{
											pos:  position{line: 593, col: 44, offset: 20701},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 598, col: 1, offset: 20866},
			expr: &actionExpr{
				pos: position{line: 598, col: 20, offset: 20885},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 598, col: 20, offset: 20885},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 598, col: 20, offset: 20885},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 598, col: 31, offset: 20896},
								expr: &ruleRefExpr{
									pos:  position{line: 598, col: 32, offset: 20897},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 599, col: 5, offset: 20922},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 607, col: 5, offset: 21213},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 16, offset: 21224},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 608, col: 5, offset: 21247},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 608, col: 16, offset: 21258},
								expr: &ruleRefExpr{
									pos:  position{line: 608, col: 17, offset: 21259},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 612, col: 1, offset: 21393},
			expr: &actionExpr{
				pos: position{line: 612, col: 19, offset: 21411},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 612, col: 19, offset: 21411},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 19, offset: 21411},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 30, offset: 21422},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 612, col: 50, offset: 21442},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 612, col: 61, offset: 21453},
								expr: &ruleRefExpr{
									pos:  position{line: 612, col: 62, offset: 21454},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 616, col: 1, offset: 21560},
			expr: &actionExpr{
				pos: position{line: 616, col: 23, offset: 21582},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 616, col: 23, offset: 21582},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 616, col: 23, offset: 21582},
							expr: &seqExpr{
								pos: position{line: 616, col: 25, offset: 21584},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 616, col: 25, offset: 21584},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 616, col: 45, offset: 21604},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 5, offset: 21634},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 617, col: 15, offset: 21644},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 617, col: 15, offset: 21644},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 617, col: 26, offset: 21655},
										expr: &ruleRefExpr{
											pos:  position{line: 617, col: 26, offset: 21655},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 42, offset: 21671},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 617, col: 52, offset: 21681},
								expr: &ruleRefExpr{
									pos:  position{line: 617, col: 53, offset: 21682},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 65, offset: 21694},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 621, col: 1, offset: 21784},
			expr: &actionExpr{
				pos: position{line: 621, col: 23, offset: 21806},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 621, col: 23, offset: 21806},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 621, col: 33, offset: 21816},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 625, col: 1, offset: 21862},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 21914},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 21914},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 627, col: 5, offset: 21914},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 627, col: 5, offset: 21914},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 627, col: 16, offset: 21925},
										expr: &ruleRefExpr{
											pos:  position{line: 627, col: 17, offset: 21926},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 628, col: 5, offset: 21950},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 635, col: 5, offset: 22162},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 635, col: 8, offset: 22165},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 635, col: 24, offset: 22181},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 635, col: 29, offset: 22186},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 635, col: 35, offset: 22192},
										expr: &ruleRefExpr{
											pos:  position{line: 635, col: 36, offset: 22193},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 22385},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 639, col: 5, offset: 22385},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 639, col: 5, offset: 22385},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 639, col: 16, offset: 22396},
										expr: &ruleRefExpr{
											pos:  position{line: 639, col: 17, offset: 22397},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 640, col: 5, offset: 22421},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 647, col: 5, offset: 22633},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 647, col: 11, offset: 22639},
										expr: &ruleRefExpr{
											pos:  position{line: 647, col: 12, offset: 22640},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 651, col: 1, offset: 22741},
			expr: &actionExpr{
				pos: position{line: 651, col: 19, offset: 22759},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 651, col: 19, offset: 22759},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 651, col: 19, offset: 22759},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 20, offset: 22760},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 651, col: 24, offset: 22764},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 25, offset: 22765},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 652, col: 5, offset: 22779},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 652, col: 15, offset: 22789},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 652, col: 15, offset: 22789},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 652, col: 15, offset: 22789},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 652, col: 24, offset: 22798},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 654, col: 9, offset: 22890},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 654, col: 9, offset: 22890},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 654, col: 9, offset: 22890},
													expr: &ruleRefExpr{
														pos:  position{line: 654, col: 10, offset: 22891},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 654, col: 25, offset: 22906},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 654, col: 34, offset: 22915},
														expr: &ruleRefExpr{
															pos:  position{line: 654, col: 35, offset: 22916},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 654, col: 51, offset: 22932},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 654, col: 61, offset: 22942},
														expr: &ruleRefExpr{
															pos:  position{line: 654, col: 62, offset: 22943},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 654, col: 74, offset: 22955},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 660, col: 1, offset: 23091},
			expr: &actionExpr{
				pos: position{line: 660, col: 18, offset: 23108},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 660, col: 18, offset: 23108},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 660, col: 18, offset: 23108},
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 19, offset: 23109},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 660, col: 23, offset: 23113},
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 24, offset: 23114},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 661, col: 5, offset: 23129},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 661, col: 14, offset: 23138},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 661, col: 14, offset: 23138},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 23159},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 23177},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 23200},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 23216},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 23239},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 23265},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 23292},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 23314},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 670, col: 11, offset: 23340},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 23381},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 23408},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 679, col: 1, offset: 23668},
			expr: &actionExpr{
				pos: position{line: 679, col: 37, offset: 23704},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 679, col: 37, offset: 23704},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 679, col: 37, offset: 23704},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 38, offset: 23705},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 679, col: 48, offset: 23715},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 49, offset: 23716},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 64, offset: 23731},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 679, col: 73, offset: 23740},
								expr: &ruleRefExpr{
									pos:  position{line: 679, col: 74, offset: 23741},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 108, offset: 23775},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 118, offset: 23785},
								expr: &ruleRefExpr{
									pos:  position{line: 679, col: 119, offset: 23786},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 131, offset: 23798},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 683, col: 1, offset: 23889},
			expr: &actionExpr{
				pos: position{line: 683, col: 36, offset: 23924},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 683, col: 36, offset: 23924},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 683, col: 36, offset: 23924},
							expr: &ruleRefExpr{
								pos:  position{line: 683, col: 37, offset: 23925},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 683, col: 41, offset: 23929},
							expr: &ruleRefExpr{
								pos:  position{line: 683, col: 42, offset: 23930},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 5, offset: 23945},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 684, col: 14, offset: 23954},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 684, col: 14, offset: 23954},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 23972},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 23995},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 24011},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 24034},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 24055},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 24077},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 691, col: 11, offset: 24103},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 24129},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 697, col: 1, offset: 24263},
			expr: &actionExpr{
				pos: position{line: 697, col: 18, offset: 24280},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 697, col: 18, offset: 24280},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 697, col: 18, offset: 24280},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 697, col: 27, offset: 24289},
								expr: &choiceExpr{
									pos: position{line: 697, col: 28, offset: 24290},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 697, col: 28, offset: 24290},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 697, col: 40, offset: 24302},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 697, col: 56, offset: 24318},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 76, offset: 24338},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 701, col: 1, offset: 24372},
			expr: &actionExpr{
				pos: position{line: 701, col: 22, offset: 24393},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 701, col: 22, offset: 24393},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 701, col: 22, offset: 24393},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 701, col: 33, offset: 24404},
								expr: &ruleRefExpr{
									pos:  position{line: 701, col: 34, offset: 24405},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 54, offset: 24425},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 701, col: 60, offset: 24431},
								expr: &actionExpr{
									pos: position{line: 701, col: 61, offset: 24432},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 701, col: 61, offset: 24432},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 701, col: 61, offset: 24432},
												expr: &ruleRefExpr{
													pos:  position{line: 701, col: 62, offset: 24433},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 701, col: 66, offset: 24437},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 701, col: 72, offset: 24443},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 707, col: 1, offset: 24563},
			expr: &actionExpr{
				pos: position{line: 707, col: 26, offset: 24588},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 707, col: 26, offset: 24588},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 707, col: 26, offset: 24588},
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 27, offset: 24589},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 707, col: 42, offset: 24604},
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 43, offset: 24605},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 707, col: 53, offset: 24615},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 707, col: 62, offset: 24624},
								expr: &ruleRefExpr{
									pos:  position{line: 707, col: 63, offset: 24625},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 707, col: 94, offset: 24656},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 707, col: 104, offset: 24666},
								expr: &ruleRefExpr{
									pos:  position{line: 707, col: 105, offset: 24667},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 707, col: 117, offset: 24679},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 711, col: 1, offset: 24770},
			expr: &actionExpr{
				pos: position{line: 711, col: 33, offset: 24802},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 711, col: 33, offset: 24802},
					expr: &seqExpr{
						pos: position{line: 711, col: 34, offset: 24803},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 711, col: 34, offset: 24803},
								expr: &ruleRefExpr{
									pos:  position{line: 711, col: 35, offset: 24804},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 711, col: 39, offset: 24808},
								expr: &ruleRefExpr{
									pos:  position{line: 711, col: 40, offset: 24809},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 711, col: 50, offset: 24819,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 718, col: 1, offset: 25043},
			expr: &actionExpr{
				pos: position{line: 718, col: 14, offset: 25056},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 718, col: 14, offset: 25056},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 718, col: 14, offset: 25056},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 718, col: 17, offset: 25059},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 718, col: 21, offset: 25063},
							expr: &ruleRefExpr{
								pos:  position{line: 718, col: 21, offset: 25063},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 718, col: 25, offset: 25067},
							expr: &ruleRefExpr{
								pos:  position{line: 718, col: 26, offset: 25068},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 725, col: 1, offset: 25352},
			expr: &actionExpr{
				pos: position{line: 725, col: 15, offset: 25366},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 725, col: 15, offset: 25366},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 725, col: 15, offset: 25366},
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 16, offset: 25367},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 19, offset: 25370},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 725, col: 25, offset: 25376},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 725, col: 25, offset: 25376},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 726, col: 15, offset: 25400},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 727, col: 15, offset: 25426},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 15, offset: 25455},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 15, offset: 25484},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 730, col: 15, offset: 25515},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 731, col: 15, offset: 25546},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 732, col: 15, offset: 25579},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 733, col: 15, offset: 25615},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 15, offset: 25651},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 735, col: 15, offset: 25688},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 739, col: 1, offset: 25842},
			expr: &choiceExpr{
				pos: position{line: 739, col: 21, offset: 25862},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 739, col: 21, offset: 25862},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 739, col: 28, offset: 25869},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 739, col: 34, offset: 25875},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 739, col: 41, offset: 25882},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 739, col: 47, offset: 25888},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 739, col: 54, offset: 25895},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 739, col: 60, offset: 25901},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 739, col: 66, offset: 25907},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 741, col: 1, offset: 25912},
			expr: &choiceExpr{
				pos: position{line: 741, col: 33, offset: 25944},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 741, col: 33, offset: 25944},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 741, col: 39, offset: 25950},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 741, col: 39, offset: 25950},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 745, col: 1, offset: 26083},
			expr: &actionExpr{
				pos: position{line: 745, col: 25, offset: 26107},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 745, col: 25, offset: 26107},
					expr: &litMatcher{
						pos:        position{line: 745, col: 25, offset: 26107},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 749, col: 1, offset: 26148},
			expr: &actionExpr{
				pos: position{line: 749, col: 25, offset: 26172},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 749, col: 25, offset: 26172},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 749, col: 25, offset: 26172},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 749, col: 30, offset: 26177},
							expr: &litMatcher{
								pos:        position{line: 749, col: 30, offset: 26177},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 757, col: 1, offset: 26274},
			expr: &choiceExpr{
				pos: position{line: 757, col: 13, offset: 26286},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 757, col: 13, offset: 26286},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 757, col: 35, offset: 26308},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 759, col: 1, offset: 26329},
			expr: &actionExpr{
				pos: position{line: 759, col: 24, offset: 26352},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 759, col: 24, offset: 26352},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 759, col: 24, offset: 26352},
							expr: &litMatcher{
								pos:        position{line: 759, col: 25, offset: 26353},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 759, col: 30, offset: 26358},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 759, col: 35, offset: 26363},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 44, offset: 26372},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 759, col: 72, offset: 26400},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 763, col: 1, offset: 26525},
			expr: &seqExpr{
				pos: position{line: 763, col: 31, offset: 26555},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 763, col: 31, offset: 26555},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 763, col: 58, offset: 26582},
						expr: &actionExpr{
							pos: position{line: 763, col: 59, offset: 26583},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 763, col: 59, offset: 26583},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 763, col: 59, offset: 26583},
										expr: &litMatcher{
											pos:        position{line: 763, col: 61, offset: 26585},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 763, col: 67, offset: 26591},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 763, col: 76, offset: 26600},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 763, col: 76, offset: 26600},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 763, col: 81, offset: 26605},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 767, col: 1, offset: 26697},
			expr: &actionExpr{
				pos: position{line: 767, col: 31, offset: 26727},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 767, col: 31, offset: 26727},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 767, col: 31, offset: 26727},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 32, offset: 26728},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 40, offset: 26736},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 767, col: 49, offset: 26745},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 767, col: 49, offset: 26745},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 768, col: 11, offset: 26776},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 769, col: 11, offset: 26798},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 770, col: 11, offset: 26822},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 26846},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 26872},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 26895},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 26911},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 26934},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 779, col: 1, offset: 27090},
			expr: &actionExpr{
				pos: position{line: 779, col: 27, offset: 27116},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 779, col: 27, offset: 27116},
					exprs: []interface{}{
						&anyMatcher{
							line: 779, col: 28, offset: 27117,
						},
						&zeroOrMoreExpr{
							pos: position{line: 779, col: 31, offset: 27120},
							expr: &seqExpr{
								pos: position{line: 779, col: 32, offset: 27121},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 779, col: 32, offset: 27121},
										expr: &litMatcher{
											pos:        position{line: 779, col: 33, offset: 27122},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 779, col: 38, offset: 27127},
										expr: &ruleRefExpr{
											pos:  position{line: 779, col: 39, offset: 27128},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 779, col: 42, offset: 27131},
										expr: &litMatcher{
											pos:        position{line: 779, col: 43, offset: 27132},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 779, col: 47, offset: 27136},
										expr: &litMatcher{
											pos:        position{line: 779, col: 48, offset: 27137},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 779, col: 52, offset: 27141},
										expr: &ruleRefExpr{
											pos:  position{line: 779, col: 53, offset: 27142},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 779, col: 61, offset: 27150,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 783, col: 1, offset: 27210},
			expr: &choiceExpr{
				pos: position{line: 783, col: 24, offset: 27233},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 783, col: 24, offset: 27233},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 783, col: 24, offset: 27233},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 783, col: 24, offset: 27233},
									expr: &litMatcher{
										pos:        position{line: 783, col: 25, offset: 27234},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 783, col: 29, offset: 27238},
									expr: &litMatcher{
										pos:        position{line: 783, col: 30, offset: 27239},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 783, col: 35, offset: 27244},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 783, col: 39, offset: 27248},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 783, col: 48, offset: 27257},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 783, col: 76, offset: 27285},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 27465},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 785, col: 5, offset: 27465},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 785, col: 5, offset: 27465},
									expr: &litMatcher{
										pos:        position{line: 785, col: 6, offset: 27466},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 785, col: 11, offset: 27471},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 785, col: 16, offset: 27476},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 25, offset: 27485},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 785, col: 53, offset: 27513},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 789, col: 1, offset: 27771},
			expr: &seqExpr{
				pos: position{line: 789, col: 31, offset: 27801},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 789, col: 31, offset: 27801},
						expr: &ruleRefExpr{
							pos:  position{line: 789, col: 32, offset: 27802},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 789, col: 35, offset: 27805},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 789, col: 62, offset: 27832},
						expr: &actionExpr{
							pos: position{line: 789, col: 63, offset: 27833},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 789, col: 63, offset: 27833},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 789, col: 63, offset: 27833},
										expr: &seqExpr{
											pos: position{line: 789, col: 65, offset: 27835},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 789, col: 65, offset: 27835},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 789, col: 69, offset: 27839},
													expr: &ruleRefExpr{
														pos:  position{line: 789, col: 70, offset: 27840},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 789, col: 80, offset: 27850},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 789, col: 88, offset: 27858},
											expr: &ruleRefExpr{
												pos:  position{line: 789, col: 88, offset: 27858},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 789, col: 93, offset: 27863},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 789, col: 102, offset: 27872},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 793, col: 1, offset: 27963},
			expr: &actionExpr{
				pos: position{line: 793, col: 31, offset: 27993},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 793, col: 31, offset: 27993},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 793, col: 31, offset: 27993},
							expr: &ruleRefExpr{
								pos:  position{line: 793, col: 32, offset: 27994},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 793, col: 40, offset: 28002},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 793, col: 49, offset: 28011},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 793, col: 49, offset: 28011},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 794, col: 11, offset: 28041},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 795, col: 11, offset: 28063},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 796, col: 11, offset: 28087},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 797, col: 11, offset: 28111},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 798, col: 11, offset: 28137},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 799, col: 11, offset: 28160},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 800, col: 11, offset: 28176},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 801, col: 11, offset: 28199},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 805, col: 1, offset: 28355},
			expr: &actionExpr{
				pos: position{line: 805, col: 27, offset: 28381},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 805, col: 27, offset: 28381},
					exprs: []interface{}{
						&anyMatcher{
							line: 805, col: 28, offset: 28382,
						},
						&zeroOrMoreExpr{
							pos: position{line: 805, col: 31, offset: 28385},
							expr: &seqExpr{
								pos: position{line: 805, col: 32, offset: 28386},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 805, col: 32, offset: 28386},
										expr: &litMatcher{
											pos:        position{line: 805, col: 33, offset: 28387},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 805, col: 37, offset: 28391},
										expr: &ruleRefExpr{
											pos:  position{line: 805, col: 38, offset: 28392},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 805, col: 41, offset: 28395},
										expr: &litMatcher{
											pos:        position{line: 805, col: 42, offset: 28396},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 805, col: 46, offset: 28400},
										expr: &litMatcher{
											pos:        position{line: 805, col: 47, offset: 28401},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 805, col: 51, offset: 28405},
										expr: &ruleRefExpr{
											pos:  position{line: 805, col: 52, offset: 28406},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 805, col: 60, offset: 28414,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 809, col: 1, offset: 28474},
			expr: &choiceExpr{
				pos: position{line: 810, col: 5, offset: 28498},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 810, col: 5, offset: 28498},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 810, col: 5, offset: 28498},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 810, col: 5, offset: 28498},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 810, col: 18, offset: 28511},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 810, col: 40, offset: 28533},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 810, col: 45, offset: 28538},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 810, col: 54, offset: 28547},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 810, col: 82, offset: 28575},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 812, col: 9, offset: 28731},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 812, col: 9, offset: 28731},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 812, col: 9, offset: 28731},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 22, offset: 28744},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 812, col: 44, offset: 28766},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 812, col: 49, offset: 28771},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 58, offset: 28780},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 812, col: 86, offset: 28808},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 815, col: 9, offset: 29007},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 815, col: 9, offset: 29007},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 815, col: 9, offset: 29007},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 815, col: 22, offset: 29020},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 815, col: 44, offset: 29042},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 815, col: 48, offset: 29046},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 815, col: 57, offset: 29055},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 815, col: 85, offset: 29083},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 823, col: 1, offset: 29290},
			expr: &choiceExpr{
				pos: position{line: 823, col: 15, offset: 29304},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 823, col: 15, offset: 29304},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 823, col: 39, offset: 29328},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 825, col: 1, offset: 29351},
			expr: &actionExpr{
				pos: position{line: 825, col: 26, offset: 29376},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 825, col: 26, offset: 29376},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 825, col: 26, offset: 29376},
							expr: &litMatcher{
								pos:        position{line: 825, col: 27, offset: 29377},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 825, col: 32, offset: 29382},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 825, col: 37, offset: 29387},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 46, offset: 29396},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 825, col: 76, offset: 29426},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 829, col: 1, offset: 29552},
			expr: &seqExpr{
				pos: position{line: 829, col: 33, offset: 29584},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 829, col: 33, offset: 29584},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 829, col: 62, offset: 29613},
						expr: &actionExpr{
							pos: position{line: 829, col: 63, offset: 29614},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 829, col: 63, offset: 29614},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 829, col: 63, offset: 29614},
										expr: &litMatcher{
											pos:        position{line: 829, col: 65, offset: 29616},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 829, col: 71, offset: 29622},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 829, col: 80, offset: 29631},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 829, col: 80, offset: 29631},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 829, col: 85, offset: 29636},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 833, col: 1, offset: 29730},
			expr: &actionExpr{
				pos: position{line: 833, col: 33, offset: 29762},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 833, col: 33, offset: 29762},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 833, col: 33, offset: 29762},
							expr: &ruleRefExpr{
								pos:  position{line: 833, col: 34, offset: 29763},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 833, col: 42, offset: 29771},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 833, col: 51, offset: 29780},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 833, col: 51, offset: 29780},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 834, col: 11, offset: 29813},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 835, col: 11, offset: 29833},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 836, col: 11, offset: 29857},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 837, col: 11, offset: 29881},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 838, col: 11, offset: 29907},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 839, col: 11, offset: 29930},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 840, col: 11, offset: 29946},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 841, col: 11, offset: 29969},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 845, col: 1, offset: 30127},
			expr: &actionExpr{
				pos: position{line: 845, col: 29, offset: 30155},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 845, col: 29, offset: 30155},
					exprs: []interface{}{
						&anyMatcher{
							line: 845, col: 30, offset: 30156,
						},
						&zeroOrMoreExpr{
							pos: position{line: 845, col: 33, offset: 30159},
							expr: &seqExpr{
								pos: position{line: 845, col: 34, offset: 30160},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 845, col: 34, offset: 30160},
										expr: &litMatcher{
											pos:        position{line: 845, col: 35, offset: 30161},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 845, col: 40, offset: 30166},
										expr: &litMatcher{
											pos:        position{line: 845, col: 41, offset: 30167},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 845, col: 45, offset: 30171},
										expr: &litMatcher{
											pos:        position{line: 845, col: 46, offset: 30172},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 845, col: 50, offset: 30176},
										expr: &ruleRefExpr{
											pos:  position{line: 845, col: 51, offset: 30177},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 845, col: 59, offset: 30185,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 849, col: 1, offset: 30245},
			expr: &choiceExpr{
				pos: position{line: 849, col: 26, offset: 30270},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 849, col: 26, offset: 30270},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 849, col: 26, offset: 30270},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 849, col: 26, offset: 30270},
									expr: &litMatcher{
										pos:        position{line: 849, col: 27, offset: 30271},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 849, col: 31, offset: 30275},
									expr: &litMatcher{
										pos:        position{line: 849, col: 32, offset: 30276},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 849, col: 37, offset: 30281},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 849, col: 41, offset: 30285},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 50, offset: 30294},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 849, col: 80, offset: 30324},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 851, col: 5, offset: 30506},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 851, col: 5, offset: 30506},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 851, col: 5, offset: 30506},
									expr: &litMatcher{
										pos:        position{line: 851, col: 6, offset: 30507},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 851, col: 11, offset: 30512},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 851, col: 16, offset: 30517},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 851, col: 25, offset: 30526},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 851, col: 55, offset: 30556},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 855, col: 1, offset: 30818},
			expr: &seqExpr{
				pos: position{line: 855, col: 33, offset: 30850},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 855, col: 33, offset: 30850},
						expr: &ruleRefExpr{
							pos:  position{line: 855, col: 34, offset: 30851},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 855, col: 37, offset: 30854},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 855, col: 66, offset: 30883},
						expr: &actionExpr{
							pos: position{line: 855, col: 67, offset: 30884},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 855, col: 67, offset: 30884},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 855, col: 67, offset: 30884},
										expr: &seqExpr{
											pos: position{line: 855, col: 69, offset: 30886},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 855, col: 69, offset: 30886},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 855, col: 73, offset: 30890},
													expr: &ruleRefExpr{
														pos:  position{line: 855, col: 74, offset: 30891},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 855, col: 84, offset: 30901},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 855, col: 92, offset: 30909},
											expr: &ruleRefExpr{
												pos:  position{line: 855, col: 92, offset: 30909},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 855, col: 97, offset: 30914},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 855, col: 106, offset: 30923},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 859, col: 1, offset: 31016},
			expr: &actionExpr{
				pos: position{line: 859, col: 33, offset: 31048},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 859, col: 33, offset: 31048},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 859, col: 33, offset: 31048},
							expr: &ruleRefExpr{
								pos:  position{line: 859, col: 34, offset: 31049},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 859, col: 42, offset: 31057},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 859, col: 51, offset: 31066},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 859, col: 51, offset: 31066},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 860, col: 11, offset: 31098},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 861, col: 11, offset: 31118},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 862, col: 11, offset: 31142},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 863, col: 11, offset: 31166},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 864, col: 11, offset: 31192},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 865, col: 11, offset: 31215},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 866, col: 11, offset: 31231},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 867, col: 11, offset: 31254},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 871, col: 1, offset: 31412},
			expr: &actionExpr{
				pos: position{line: 871, col: 29, offset: 31440},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 871, col: 29, offset: 31440},
					exprs: []interface{}{
						&anyMatcher{
							line: 871, col: 30, offset: 31441,
						},
						&zeroOrMoreExpr{
							pos: position{line: 871, col: 33, offset: 31444},
							expr: &seqExpr{
								pos: position{line: 871, col: 34, offset: 31445},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 871, col: 34, offset: 31445},
										expr: &litMatcher{
											pos:        position{line: 871, col: 35, offset: 31446},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 871, col: 39, offset: 31450},
										expr: &ruleRefExpr{
											pos:  position{line: 871, col: 40, offset: 31451},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 871, col: 43, offset: 31454},
										expr: &litMatcher{
											pos:        position{line: 871, col: 44, offset: 31455},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 871, col: 48, offset: 31459},
										expr: &litMatcher{
											pos:        position{line: 871, col: 49, offset: 31460},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 871, col: 53, offset: 31464},
										expr: &ruleRefExpr{
											pos:  position{line: 871, col: 54, offset: 31465},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 871, col: 62, offset: 31473,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 875, col: 1, offset: 31533},
			expr: &choiceExpr{
				pos: position{line: 876, col: 5, offset: 31559},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 876, col: 5, offset: 31559},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 876, col: 5, offset: 31559},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 876, col: 5, offset: 31559},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 876, col: 18, offset: 31572},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 876, col: 40, offset: 31594},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 876, col: 45, offset: 31599},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 876, col: 54, offset: 31608},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 876, col: 84, offset: 31638},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 878, col: 9, offset: 31794},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 878, col: 9, offset: 31794},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 878, col: 9, offset: 31794},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 22, offset: 31807},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 878, col: 44, offset: 31829},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 878, col: 49, offset: 31834},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 58, offset: 31843},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 878, col: 88, offset: 31873},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 9, offset: 32072},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 881, col: 9, offset: 32072},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 9, offset: 32072},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 22, offset: 32085},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 881, col: 44, offset: 32107},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 881, col: 48, offset: 32111},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 57, offset: 32120},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 881, col: 87, offset: 32150},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 888, col: 1, offset: 32359},
			expr: &choiceExpr{
				pos: position{line: 888, col: 18, offset: 32376},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 888, col: 18, offset: 32376},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 888, col: 45, offset: 32403},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 890, col: 1, offset: 32429},
			expr: &actionExpr{
				pos: position{line: 890, col: 29, offset: 32457},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 890, col: 29, offset: 32457},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 890, col: 29, offset: 32457},
							expr: &litMatcher{
								pos:        position{line: 890, col: 30, offset: 32458},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 890, col: 35, offset: 32463},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 890, col: 40, offset: 32468},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 49, offset: 32477},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 890, col: 82, offset: 32510},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 894, col: 1, offset: 32639},
			expr: &seqExpr{
				pos: position{line: 894, col: 36, offset: 32674},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 894, col: 36, offset: 32674},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 894, col: 68, offset: 32706},
						expr: &actionExpr{
							pos: position{line: 894, col: 69, offset: 32707},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 894, col: 69, offset: 32707},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 894, col: 69, offset: 32707},
										expr: &litMatcher{
											pos:        position{line: 894, col: 71, offset: 32709},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 894, col: 77, offset: 32715},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 894, col: 86, offset: 32724},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 894, col: 86, offset: 32724},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 894, col: 91, offset: 32729},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 898, col: 1, offset: 32826},
			expr: &actionExpr{
				pos: position{line: 898, col: 36, offset: 32861},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 898, col: 36, offset: 32861},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 898, col: 36, offset: 32861},
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 37, offset: 32862},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 898, col: 45, offset: 32870},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 898, col: 54, offset: 32879},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 898, col: 54, offset: 32879},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 899, col: 11, offset: 32915},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 900, col: 11, offset: 32934},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 901, col: 11, offset: 32956},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 902, col: 11, offset: 32980},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 903, col: 11, offset: 33006},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 33029},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 905, col: 11, offset: 33045},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 906, col: 11, offset: 33068},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 910, col: 1, offset: 33229},
			expr: &actionExpr{
				pos: position{line: 910, col: 32, offset: 33260},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 910, col: 32, offset: 33260},
					exprs: []interface{}{
						&anyMatcher{
							line: 910, col: 33, offset: 33261,
						},
						&zeroOrMoreExpr{
							pos: position{line: 910, col: 36, offset: 33264},
							expr: &seqExpr{
								pos: position{line: 910, col: 37, offset: 33265},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 910, col: 37, offset: 33265},
										expr: &litMatcher{
											pos:        position{line: 910, col: 38, offset: 33266},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 910, col: 43, offset: 33271},
										expr: &ruleRefExpr{
											pos:  position{line: 910, col: 44, offset: 33272},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 910, col: 47, offset: 33275},
										expr: &litMatcher{
											pos:        position{line: 910, col: 48, offset: 33276},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 910, col: 52, offset: 33280},
										expr: &litMatcher{
											pos:        position{line: 910, col: 53, offset: 33281},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 910, col: 57, offset: 33285},
										expr: &ruleRefExpr{
											pos:  position{line: 910, col: 58, offset: 33286},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 910, col: 66, offset: 33294,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 914, col: 1, offset: 33354},
			expr: &choiceExpr{
				pos: position{line: 914, col: 29, offset: 33382},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 914, col: 29, offset: 33382},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 914, col: 29, offset: 33382},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 914, col: 29, offset: 33382},
									expr: &litMatcher{
										pos:        position{line: 914, col: 30, offset: 33383},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 914, col: 34, offset: 33387},
									expr: &litMatcher{
										pos:        position{line: 914, col: 35, offset: 33388},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 914, col: 40, offset: 33393},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 914, col: 44, offset: 33397},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 914, col: 53, offset: 33406},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 914, col: 86, offset: 33439},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 916, col: 5, offset: 33624},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 916, col: 5, offset: 33624},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 916, col: 5, offset: 33624},
									expr: &litMatcher{
										pos:        position{line: 916, col: 6, offset: 33625},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 11, offset: 33630},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 916, col: 16, offset: 33635},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 25, offset: 33644},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 58, offset: 33677},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 920, col: 1, offset: 33945},
			expr: &seqExpr{
				pos: position{line: 920, col: 36, offset: 33980},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 920, col: 36, offset: 33980},
						expr: &ruleRefExpr{
							pos:  position{line: 920, col: 37, offset: 33981},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 920, col: 40, offset: 33984},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 920, col: 72, offset: 34016},
						expr: &actionExpr{
							pos: position{line: 920, col: 73, offset: 34017},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 920, col: 73, offset: 34017},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 920, col: 73, offset: 34017},
										expr: &seqExpr{
											pos: position{line: 920, col: 75, offset: 34019},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 920, col: 75, offset: 34019},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 920, col: 79, offset: 34023},
													expr: &ruleRefExpr{
														pos:  position{line: 920, col: 80, offset: 34024},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 920, col: 90, offset: 34034},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 920, col: 98, offset: 34042},
											expr: &ruleRefExpr{
												pos:  position{line: 920, col: 98, offset: 34042},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 920, col: 103, offset: 34047},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 920, col: 112, offset: 34056},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 924, col: 1, offset: 34152},
			expr: &actionExpr{
				pos: position{line: 924, col: 37, offset: 34188},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 924, col: 37, offset: 34188},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 924, col: 46, offset: 34197},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 924, col: 46, offset: 34197},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 925, col: 11, offset: 34235},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 926, col: 11, offset: 34271},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 927, col: 11, offset: 34291},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 928, col: 11, offset: 34312},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 11, offset: 34336},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 930, col: 11, offset: 34362},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 931, col: 11, offset: 34385},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 932, col: 11, offset: 34401},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 933, col: 11, offset: 34424},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 937, col: 1, offset: 34585},
			expr: &actionExpr{
				pos: position{line: 937, col: 32, offset: 34616},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 937, col: 32, offset: 34616},
					exprs: []interface{}{
						&anyMatcher{
							line: 937, col: 33, offset: 34617,
						},
						&zeroOrMoreExpr{
							pos: position{line: 937, col: 36, offset: 34620},
							expr: &seqExpr{
								pos: position{line: 937, col: 37, offset: 34621},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 937, col: 37, offset: 34621},
										expr: &ruleRefExpr{
											pos:  position{line: 937, col: 38, offset: 34622},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 937, col: 41, offset: 34625},
										expr: &litMatcher{
											pos:        position{line: 937, col: 42, offset: 34626},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 937, col: 46, offset: 34630},
										expr: &litMatcher{
											pos:        position{line: 937, col: 47, offset: 34631},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 937, col: 51, offset: 34635},
										expr: &litMatcher{
											pos:        position{line: 937, col: 52, offset: 34636},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 937, col: 56, offset: 34640},
										expr: &ruleRefExpr{
											pos:  position{line: 937, col: 57, offset: 34641},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 937, col: 65, offset: 34649,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 941, col: 1, offset: 34730},
			expr: &choiceExpr{
				pos: position{line: 942, col: 5, offset: 34759},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 34759},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 34759},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 942, col: 5, offset: 34759},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 18, offset: 34772},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 942, col: 40, offset: 34794},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 942, col: 45, offset: 34799},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 54, offset: 34808},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 942, col: 87, offset: 34841},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 9, offset: 34997},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 944, col: 9, offset: 34997},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 944, col: 9, offset: 34997},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 22, offset: 35010},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 44, offset: 35032},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 944, col: 49, offset: 35037},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 58, offset: 35046},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 91, offset: 35079},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 947, col: 9, offset: 35278},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 947, col: 9, offset: 35278},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 947, col: 9, offset: 35278},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 947, col: 22, offset: 35291},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 947, col: 44, offset: 35313},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 947, col: 48, offset: 35317},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 947, col: 57, offset: 35326},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 947, col: 90, offset: 35359},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 951, col: 1, offset: 35508},
			expr: &actionExpr{
				pos: position{line: 951, col: 18, offset: 35525},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 951, col: 18, offset: 35525},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 951, col: 18, offset: 35525},
							expr: &litMatcher{
								pos:        position{line: 951, col: 19, offset: 35526},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 951, col: 23, offset: 35530},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 951, col: 27, offset: 35534},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 951, col: 36, offset: 35543},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 951, col: 58, offset: 35565},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 955, col: 1, offset: 35654},
			expr: &choiceExpr{
				pos: position{line: 955, col: 25, offset: 35678},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 955, col: 25, offset: 35678},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 38, offset: 35691},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 957, col: 1, offset: 35710},
			expr: &actionExpr{
				pos: position{line: 957, col: 21, offset: 35730},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 957, col: 21, offset: 35730},
					expr: &seqExpr{
						pos: position{line: 957, col: 22, offset: 35731},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 957, col: 22, offset: 35731},
								expr: &ruleRefExpr{
									pos:  position{line: 957, col: 23, offset: 35732},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 957, col: 31, offset: 35740},
								expr: &ruleRefExpr{
									pos:  position{line: 957, col: 32, offset: 35741},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 957, col: 35, offset: 35744},
								expr: &litMatcher{
									pos:        position{line: 957, col: 36, offset: 35745},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 957, col: 40, offset: 35749,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 961, col: 1, offset: 35782},
			expr: &actionExpr{
				pos: position{line: 961, col: 25, offset: 35806},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 961, col: 25, offset: 35806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 961, col: 25, offset: 35806},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 38, offset: 35819},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 961, col: 60, offset: 35841},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 961, col: 64, offset: 35845},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 73, offset: 35854},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 961, col: 95, offset: 35876},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 965, col: 1, offset: 36005},
			expr: &actionExpr{
				pos: position{line: 965, col: 20, offset: 36024},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 965, col: 20, offset: 36024},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 965, col: 20, offset: 36024},
							expr: &litMatcher{
								pos:        position{line: 965, col: 21, offset: 36025},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 965, col: 25, offset: 36029},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 965, col: 29, offset: 36033},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 38, offset: 36042},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 965, col: 62, offset: 36066},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 969, col: 1, offset: 36157},
			expr: &choiceExpr{
				pos: position{line: 969, col: 27, offset: 36183},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 969, col: 27, offset: 36183},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 969, col: 40, offset: 36196},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 971, col: 1, offset: 36217},
			expr: &actionExpr{
				pos: position{line: 971, col: 23, offset: 36239},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 971, col: 23, offset: 36239},
					expr: &seqExpr{
						pos: position{line: 971, col: 24, offset: 36240},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 971, col: 24, offset: 36240},
								expr: &ruleRefExpr{
									pos:  position{line: 971, col: 25, offset: 36241},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 971, col: 33, offset: 36249},
								expr: &ruleRefExpr{
									pos:  position{line: 971, col: 34, offset: 36250},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 971, col: 37, offset: 36253},
								expr: &litMatcher{
									pos:        position{line: 971, col: 38, offset: 36254},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 971, col: 42, offset: 36258,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 975, col: 1, offset: 36291},
			expr: &actionExpr{
				pos: position{line: 975, col: 27, offset: 36317},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 975, col: 27, offset: 36317},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 975, col: 27, offset: 36317},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 40, offset: 36330},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 975, col: 62, offset: 36352},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 975, col: 66, offset: 36356},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 75, offset: 36365},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 975, col: 99, offset: 36389},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 982, col: 1, offset: 36625},
			expr: &choiceExpr{
				pos: position{line: 982, col: 16, offset: 36640},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 982, col: 16, offset: 36640},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 40, offset: 36664},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 64, offset: 36688},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 984, col: 1, offset: 36706},
			expr: &litMatcher{
				pos:        position{line: 984, col: 32, offset: 36737},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 986, col: 1, offset: 36742},
			expr: &actionExpr{
				pos: position{line: 986, col: 26, offset: 36767},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 986, col: 26, offset: 36767},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 986, col: 26, offset: 36767},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 986, col: 54, offset: 36795},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 986, col: 63, offset: 36804},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 986, col: 93, offset: 36834},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 986, col: 121, offset: 36862},
							expr: &ruleRefExpr{
								pos:  position{line: 986, col: 122, offset: 36863},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 990, col: 1, offset: 36962},
			expr: &choiceExpr{
				pos: position{line: 990, col: 33, offset: 36994},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 990, col: 34, offset: 36995},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 990, col: 34, offset: 36995},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 990, col: 35, offset: 36996},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 990, col: 35, offset: 36996},
											expr: &ruleRefExpr{
												pos:  position{line: 990, col: 36, offset: 36997},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 990, col: 64, offset: 37025},
											expr: &ruleRefExpr{
												pos:  position{line: 990, col: 65, offset: 37026},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 990, col: 68, offset: 37029},
											expr: &ruleRefExpr{
												pos:  position{line: 990, col: 69, offset: 37030},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 990, col: 77, offset: 37038,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 990, col: 80, offset: 37041},
									expr: &seqExpr{
										pos: position{line: 990, col: 81, offset: 37042},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 990, col: 81, offset: 37042},
												expr: &seqExpr{
													pos: position{line: 990, col: 83, offset: 37044},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 990, col: 83, offset: 37044},
															expr: &ruleRefExpr{
																pos:  position{line: 990, col: 83, offset: 37044},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 990, col: 87, offset: 37048},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 990, col: 116, offset: 37077},
												expr: &ruleRefExpr{
													pos:  position{line: 990, col: 117, offset: 37078},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 990, col: 145, offset: 37106},
												expr: &ruleRefExpr{
													pos:  position{line: 990, col: 146, offset: 37107},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 990, col: 154, offset: 37115,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 992, col: 7, offset: 37257},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 992, col: 8, offset: 37258},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 992, col: 8, offset: 37258},
									expr: &ruleRefExpr{
										pos:  position{line: 992, col: 9, offset: 37259},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 992, col: 12, offset: 37262},
									expr: &ruleRefExpr{
										pos:  position{line: 992, col: 13, offset: 37263},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 992, col: 21, offset: 37271},
									expr: &ruleRefExpr{
										pos:  position{line: 992, col: 22, offset: 37272},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 992, col: 50, offset: 37300,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 996, col: 1, offset: 37382},
			expr: &litMatcher{
				pos:        position{line: 996, col: 32, offset: 37413},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 998, col: 1, offset: 37420},
			expr: &actionExpr{
				pos: position{line: 998, col: 26, offset: 37445},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 998, col: 26, offset: 37445},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 998, col: 26, offset: 37445},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 998, col: 54, offset: 37473},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 63, offset: 37482},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 998, col: 93, offset: 37512},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 998, col: 121, offset: 37540},
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 122, offset: 37541},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1002, col: 1, offset: 37640},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 33, offset: 37672},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1002, col: 34, offset: 37673},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1002, col: 34, offset: 37673},
							expr: &seqExpr{
								pos: position{line: 1002, col: 35, offset: 37674},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1002, col: 35, offset: 37674},
										expr: &ruleRefExpr{
											pos:  position{line: 1002, col: 36, offset: 37675},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1002, col: 64, offset: 37703,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 7, offset: 37868},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1004, col: 7, offset: 37868},
							expr: &seqExpr{
								pos: position{line: 1004, col: 8, offset: 37869},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1004, col: 8, offset: 37869},
										expr: &ruleRefExpr{
											pos:  position{line: 1004, col: 9, offset: 37870},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1004, col: 12, offset: 37873},
										expr: &ruleRefExpr{
											pos:  position{line: 1004, col: 13, offset: 37874},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1004, col: 21, offset: 37882},
										expr: &ruleRefExpr{
											pos:  position{line: 1004, col: 22, offset: 37883},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1004, col: 50, offset: 37911,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1008, col: 1, offset: 37994},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 21, offset: 38014},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1008, col: 21, offset: 38014},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1008, col: 21, offset: 38014},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1008, col: 21, offset: 38014},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1008, col: 30, offset: 38023},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1008, col: 38, offset: 38031},
										expr: &ruleRefExpr{
											pos:  position{line: 1008, col: 39, offset: 38032},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1008, col: 67, offset: 38060},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 38150},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1010, col: 5, offset: 38150},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1010, col: 5, offset: 38150},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 15, offset: 38160},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1010, col: 23, offset: 38168},
										expr: &choiceExpr{
											pos: position{line: 1010, col: 24, offset: 38169},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1010, col: 24, offset: 38169},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1010, col: 37, offset: 38182},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 65, offset: 38210},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1014, col: 1, offset: 38300},
			expr: &choiceExpr{
				pos: position{line: 1014, col: 31, offset: 38330},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1014, col: 31, offset: 38330},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1014, col: 43, offset: 38342},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1014, col: 52, offset: 38351},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1014, col: 53, offset: 38352},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1014, col: 53, offset: 38352},
									expr: &litMatcher{
										pos:        position{line: 1014, col: 54, offset: 38353},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1014, col: 58, offset: 38357,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1021, col: 1, offset: 38527},
			expr: &choiceExpr{
				pos: position{line: 1021, col: 19, offset: 38545},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1021, col: 19, offset: 38545},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1021, col: 19, offset: 38545},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1021, col: 19, offset: 38545},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 24, offset: 38550},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1021, col: 28, offset: 38554},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1021, col: 32, offset: 38558},
									expr: &ruleRefExpr{
										pos:  position{line: 1021, col: 32, offset: 38558},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1021, col: 36, offset: 38562},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 40, offset: 38566},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1021, col: 47, offset: 38573},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1021, col: 68, offset: 38594},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 38669},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1023, col: 5, offset: 38669},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1023, col: 5, offset: 38669},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1023, col: 10, offset: 38674},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 14, offset: 38678},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1023, col: 18, offset: 38682},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1027, col: 1, offset: 38745},
			expr: &actionExpr{
				pos: position{line: 1027, col: 24, offset: 38768},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1027, col: 24, offset: 38768},
					expr: &choiceExpr{
						pos: position{line: 1027, col: 25, offset: 38769},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1027, col: 25, offset: 38769},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1027, col: 37, offset: 38781},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1027, col: 47, offset: 38791},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1027, col: 47, offset: 38791},
										expr: &litMatcher{
											pos:        position{line: 1027, col: 48, offset: 38792},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1027, col: 54, offset: 38798,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1034, col: 1, offset: 38940},
			expr: &actionExpr{
				pos: position{line: 1034, col: 9, offset: 38948},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1034, col: 9, offset: 38948},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1034, col: 15, offset: 38954},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1034, col: 15, offset: 38954},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1034, col: 30, offset: 38969},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1039, col: 1, offset: 39076},
			expr: &actionExpr{
				pos: position{line: 1039, col: 17, offset: 39092},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 17, offset: 39092},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1039, col: 17, offset: 39092},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1039, col: 25, offset: 39100},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1039, col: 30, offset: 39105},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1039, col: 30, offset: 39105},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1039, col: 41, offset: 39116},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1039, col: 55, offset: 39130},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 73, offset: 39148},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1043, col: 1, offset: 39266},
			expr: &actionExpr{
				pos: position{line: 1043, col: 17, offset: 39282},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1043, col: 17, offset: 39282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1043, col: 17, offset: 39282},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1043, col: 22, offset: 39287},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1043, col: 32, offset: 39297},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1043, col: 49, offset: 39314},
								expr: &ruleRefExpr{
									pos:  position{line: 1043, col: 50, offset: 39315},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1047, col: 1, offset: 39408},
			expr: &actionExpr{
				pos: position{line: 1047, col: 19, offset: 39426},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1047, col: 19, offset: 39426},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1047, col: 19, offset: 39426},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1047, col: 23, offset: 39430},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1047, col: 28, offset: 39435},
								expr: &ruleRefExpr{
									pos:  position{line: 1047, col: 29, offset: 39436},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1047, col: 49, offset: 39456},
							expr: &litMatcher{
								pos:        position{line: 1047, col: 49, offset: 39456},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1047, col: 54, offset: 39461},
							expr: &ruleRefExpr{
								pos:  position{line: 1047, col: 54, offset: 39461},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1047, col: 58, offset: 39465},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1047, col: 69, offset: 39476},
								expr: &ruleRefExpr{
									pos:  position{line: 1047, col: 70, offset: 39477},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1047, col: 89, offset: 39496},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1051, col: 1, offset: 39581},
			expr: &actionExpr{
				pos: position{line: 1051, col: 22, offset: 39602},
				run: (*parser).callonLinkTextAttribute1,
				expr: &seqExpr{
					pos: position{line: 1051, col: 22, offset: 39602},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1051, col: 22, offset: 39602},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1051, col: 31, offset: 39611},
								expr: &seqExpr{
									pos: position{line: 1051, col: 32, offset: 39612},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1051, col: 32, offset: 39612},
											expr: &litMatcher{
												pos:        position{line: 1051, col: 33, offset: 39613},
												val:        "=",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1051, col: 37, offset: 39617},
											expr: &litMatcher{
												pos:        position{line: 1051, col: 38, offset: 39618},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1051, col: 42, offset: 39622},
											expr: &litMatcher{
												pos:        position{line: 1051, col: 43, offset: 39623},
												val:        "]",
												ignoreCase: false,
											},
										},
										&choiceExpr{
											pos: position{line: 1051, col: 48, offset: 39628},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1051, col: 48, offset: 39628},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1051, col: 61, offset: 39641},
													name: "SimpleWord",
												},
												&ruleRefExpr{
													pos:  position{line: 1051, col: 74, offset: 39654},
													name: "Spaces",
												},
												&actionExpr{
													pos: position{line: 1051, col: 84, offset: 39664},
													run: (*parser).callonLinkTextAttribute16,
													expr: &seqExpr{
														pos: position{line: 1051, col: 85, offset: 39665},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1051, col: 85, offset: 39665},
																expr: &ruleRefExpr{
																	pos:  position{line: 1051, col: 86, offset: 39666},
																	name: "QuotedTextPrefix",
																},
															},
															&anyMatcher{
																line: 1051, col: 103, offset: 39683,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1053, col: 7, offset: 39744},
							expr: &notExpr{
								pos: position{line: 1053, col: 9, offset: 39746},
								expr: &litMatcher{
									pos:        position{line: 1053, col: 10, offset: 39747},
									val:        "=",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1060, col: 1, offset: 39920},
			expr: &actionExpr{
				pos: position{line: 1060, col: 15, offset: 39934},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1060, col: 15, offset: 39934},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1060, col: 15, offset: 39934},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1060, col: 26, offset: 39945},
								expr: &ruleRefExpr{
									pos:  position{line: 1060, col: 27, offset: 39946},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1060, col: 47, offset: 39966},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1060, col: 57, offset: 39976},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1060, col: 63, offset: 39982},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1060, col: 68, offset: 39987},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1060, col: 86, offset: 40005},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1060, col: 103, offset: 40022},
							expr: &ruleRefExpr{
								pos:  position{line: 1060, col: 103, offset: 40022},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1060, col: 107, offset: 40026},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1064, col: 1, offset: 40137},
			expr: &actionExpr{
				pos: position{line: 1064, col: 16, offset: 40152},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1064, col: 16, offset: 40152},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1064, col: 16, offset: 40152},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1064, col: 25, offset: 40161},
							expr: &litMatcher{
								pos:        position{line: 1064, col: 26, offset: 40162},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1064, col: 30, offset: 40166},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 36, offset: 40172},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1064, col: 41, offset: 40177},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 59, offset: 40195},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1068, col: 1, offset: 40308},
			expr: &actionExpr{
				pos: position{line: 1068, col: 20, offset: 40327},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1068, col: 20, offset: 40327},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1068, col: 20, offset: 40327},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1068, col: 24, offset: 40331},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1068, col: 28, offset: 40335},
								expr: &ruleRefExpr{
									pos:  position{line: 1068, col: 29, offset: 40336},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1068, col: 46, offset: 40353},
							expr: &litMatcher{
								pos:        position{line: 1068, col: 46, offset: 40353},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1068, col: 51, offset: 40358},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1068, col: 57, offset: 40364},
								expr: &ruleRefExpr{
									pos:  position{line: 1068, col: 58, offset: 40365},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1068, col: 75, offset: 40382},
							expr: &litMatcher{
								pos:        position{line: 1068, col: 75, offset: 40382},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1068, col: 80, offset: 40387},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1068, col: 87, offset: 40394},
								expr: &ruleRefExpr{
									pos:  position{line: 1068, col: 88, offset: 40395},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1068, col: 105, offset: 40412},
							expr: &litMatcher{
								pos:        position{line: 1068, col: 105, offset: 40412},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1068, col: 110, offset: 40417},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1068, col: 121, offset: 40428},
								expr: &ruleRefExpr{
									pos:  position{line: 1068, col: 122, offset: 40429},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1068, col: 141, offset: 40448},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1075, col: 1, offset: 40738},
			expr: &choiceExpr{
				pos: position{line: 1075, col: 19, offset: 40756},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1075, col: 19, offset: 40756},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1075, col: 19, offset: 40756},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1075, col: 19, offset: 40756},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1075, col: 32, offset: 40769},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1075, col: 41, offset: 40778},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1075, col: 58, offset: 40795},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1077, col: 5, offset: 40870},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1077, col: 5, offset: 40870},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1077, col: 5, offset: 40870},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 21, offset: 40886},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1077, col: 26, offset: 40891},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1077, col: 39, offset: 40904},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 43, offset: 40908},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1077, col: 52, offset: 40917},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1077, col: 69, offset: 40934},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 41019},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1079, col: 5, offset: 41019},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1079, col: 5, offset: 41019},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 21, offset: 41035},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1079, col: 26, offset: 41040},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1079, col: 39, offset: 41053},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1083, col: 1, offset: 41168},
			expr: &actionExpr{
				pos: position{line: 1083, col: 16, offset: 41183},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1083, col: 16, offset: 41183},
					expr: &choiceExpr{
						pos: position{line: 1083, col: 17, offset: 41184},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1083, col: 17, offset: 41184},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1083, col: 29, offset: 41196},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1083, col: 39, offset: 41206},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1083, col: 39, offset: 41206},
										expr: &litMatcher{
											pos:        position{line: 1083, col: 40, offset: 41207},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1083, col: 44, offset: 41211},
										expr: &litMatcher{
											pos:        position{line: 1083, col: 45, offset: 41212},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1083, col: 49, offset: 41216},
										expr: &ruleRefExpr{
											pos:  position{line: 1083, col: 50, offset: 41217},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1083, col: 55, offset: 41222,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1087, col: 1, offset: 41307},
			expr: &actionExpr{
				pos: position{line: 1087, col: 20, offset: 41326},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1087, col: 20, offset: 41326},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1087, col: 29, offset: 41335},
						expr: &seqExpr{
							pos: position{line: 1087, col: 30, offset: 41336},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1087, col: 30, offset: 41336},
									expr: &litMatcher{
										pos:        position{line: 1087, col: 31, offset: 41337},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1087, col: 35, offset: 41341},
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 36, offset: 41342},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1087, col: 40, offset: 41346},
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 40, offset: 41346},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1087, col: 44, offset: 41350},
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 45, offset: 41351},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1087, col: 61, offset: 41367},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1087, col: 75, offset: 41381},
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 75, offset: 41381},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1094, col: 1, offset: 41695},
			expr: &actionExpr{
				pos: position{line: 1094, col: 19, offset: 41713},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1094, col: 19, offset: 41713},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1094, col: 19, offset: 41713},
							expr: &ruleRefExpr{
								pos:  position{line: 1094, col: 20, offset: 41714},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 5, offset: 41743},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1095, col: 12, offset: 41750},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1095, col: 12, offset: 41750},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1096, col: 11, offset: 41773},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1097, col: 11, offset: 41797},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 41821},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1099, col: 11, offset: 41843},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1100, col: 11, offset: 41865},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1101, col: 11, offset: 41888},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1102, col: 11, offset: 41916},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 41932},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1107, col: 1, offset: 41973},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 19, offset: 41991},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1107, col: 19, offset: 41991},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1108, col: 19, offset: 42032},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 19, offset: 42072},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 19, offset: 42113},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 19, offset: 42154},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 19, offset: 42195},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1113, col: 19, offset: 42233},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1119, col: 1, offset: 42452},
			expr: &seqExpr{
				pos: position{line: 1119, col: 25, offset: 42476},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1119, col: 25, offset: 42476},
						val:        "```",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1119, col: 31, offset: 42482},
						expr: &ruleRefExpr{
							pos:  position{line: 1119, col: 31, offset: 42482},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1119, col: 35, offset: 42486},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1121, col: 1, offset: 42491},
			expr: &actionExpr{
				pos: position{line: 1121, col: 16, offset: 42506},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 16, offset: 42506},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1121, col: 16, offset: 42506},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1121, col: 27, offset: 42517},
								expr: &ruleRefExpr{
									pos:  position{line: 1121, col: 28, offset: 42518},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1121, col: 48, offset: 42538},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1121, col: 69, offset: 42559},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1121, col: 77, offset: 42567},
								expr: &ruleRefExpr{
									pos:  position{line: 1121, col: 78, offset: 42568},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1121, col: 100, offset: 42590},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1121, col: 100, offset: 42590},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1121, col: 123, offset: 42613},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1125, col: 1, offset: 42721},
			expr: &choiceExpr{
				pos: position{line: 1125, col: 23, offset: 42743},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1125, col: 23, offset: 42743},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 35, offset: 42755},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 51, offset: 42771},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 62, offset: 42782},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1128, col: 1, offset: 42822},
			expr: &actionExpr{
				pos: position{line: 1128, col: 25, offset: 42846},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1128, col: 25, offset: 42846},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1128, col: 31, offset: 42852},
						expr: &ruleRefExpr{
							pos:  position{line: 1128, col: 32, offset: 42853},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1132, col: 1, offset: 42966},
			expr: &actionExpr{
				pos: position{line: 1132, col: 29, offset: 42994},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1132, col: 29, offset: 42994},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1132, col: 29, offset: 42994},
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 30, offset: 42995},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1132, col: 51, offset: 43016},
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 52, offset: 43017},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1132, col: 62, offset: 43027},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 68, offset: 43033},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1139, col: 1, offset: 43271},
			expr: &seqExpr{
				pos: position{line: 1139, col: 26, offset: 43296},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1139, col: 26, offset: 43296},
						val:        "----",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1139, col: 33, offset: 43303},
						expr: &ruleRefExpr{
							pos:  position{line: 1139, col: 33, offset: 43303},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 37, offset: 43307},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1142, col: 1, offset: 43347},
			expr: &actionExpr{
				pos: position{line: 1142, col: 17, offset: 43363},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 17, offset: 43363},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1142, col: 17, offset: 43363},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1142, col: 28, offset: 43374},
								expr: &ruleRefExpr{
									pos:  position{line: 1142, col: 29, offset: 43375},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1142, col: 49, offset: 43395},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1142, col: 71, offset: 43417},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1142, col: 79, offset: 43425},
								expr: &ruleRefExpr{
									pos:  position{line: 1142, col: 80, offset: 43426},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1142, col: 103, offset: 43449},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1142, col: 103, offset: 43449},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 127, offset: 43473},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1146, col: 1, offset: 43582},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 24, offset: 43605},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1146, col: 24, offset: 43605},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 40, offset: 43621},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1148, col: 1, offset: 43644},
			expr: &actionExpr{
				pos: position{line: 1148, col: 26, offset: 43669},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1148, col: 26, offset: 43669},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1148, col: 32, offset: 43675},
						expr: &ruleRefExpr{
							pos:  position{line: 1148, col: 33, offset: 43676},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1152, col: 1, offset: 43795},
			expr: &actionExpr{
				pos: position{line: 1152, col: 30, offset: 43824},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 30, offset: 43824},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1152, col: 30, offset: 43824},
							expr: &ruleRefExpr{
								pos:  position{line: 1152, col: 31, offset: 43825},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1152, col: 53, offset: 43847},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1152, col: 59, offset: 43853},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1152, col: 59, offset: 43853},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1152, col: 59, offset: 43853},
											expr: &ruleRefExpr{
												pos:  position{line: 1152, col: 60, offset: 43854},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1152, col: 64, offset: 43858},
											expr: &choiceExpr{
												pos: position{line: 1152, col: 65, offset: 43859},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1152, col: 65, offset: 43859},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1152, col: 77, offset: 43871},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1152, col: 87, offset: 43881},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1152, col: 87, offset: 43881},
																expr: &ruleRefExpr{
																	pos:  position{line: 1152, col: 88, offset: 43882},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1152, col: 92, offset: 43886,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1152, col: 128, offset: 43922},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1159, col: 1, offset: 44248},
			expr: &seqExpr{
				pos: position{line: 1159, col: 26, offset: 44273},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1159, col: 26, offset: 44273},
						val:        "====",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1159, col: 33, offset: 44280},
						expr: &ruleRefExpr{
							pos:  position{line: 1159, col: 33, offset: 44280},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 37, offset: 44284},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1161, col: 1, offset: 44289},
			expr: &actionExpr{
				pos: position{line: 1161, col: 17, offset: 44305},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1161, col: 17, offset: 44305},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1161, col: 17, offset: 44305},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1161, col: 28, offset: 44316},
								expr: &ruleRefExpr{
									pos:  position{line: 1161, col: 29, offset: 44317},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1161, col: 49, offset: 44337},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1161, col: 71, offset: 44359},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1161, col: 79, offset: 44367},
								expr: &choiceExpr{
									pos: position{line: 1161, col: 80, offset: 44368},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1161, col: 80, offset: 44368},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1161, col: 92, offset: 44380},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1161, col: 108, offset: 44396},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1161, col: 119, offset: 44407},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1161, col: 145, offset: 44433},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1161, col: 145, offset: 44433},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1161, col: 169, offset: 44457},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1166, col: 1, offset: 44584},
			expr: &actionExpr{
				pos: position{line: 1166, col: 26, offset: 44609},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1166, col: 26, offset: 44609},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1166, col: 32, offset: 44615},
						expr: &ruleRefExpr{
							pos:  position{line: 1166, col: 33, offset: 44616},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1170, col: 1, offset: 44730},
			expr: &actionExpr{
				pos: position{line: 1170, col: 30, offset: 44759},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 30, offset: 44759},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1170, col: 30, offset: 44759},
							expr: &ruleRefExpr{
								pos:  position{line: 1170, col: 31, offset: 44760},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1170, col: 53, offset: 44782},
							expr: &ruleRefExpr{
								pos:  position{line: 1170, col: 54, offset: 44783},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1170, col: 64, offset: 44793},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1170, col: 70, offset: 44799},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1177, col: 1, offset: 45035},
			expr: &seqExpr{
				pos: position{line: 1177, col: 24, offset: 45058},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1177, col: 24, offset: 45058},
						val:        "____",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1177, col: 31, offset: 45065},
						expr: &ruleRefExpr{
							pos:  position{line: 1177, col: 31, offset: 45065},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 35, offset: 45069},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1179, col: 1, offset: 45099},
			expr: &actionExpr{
				pos: position{line: 1179, col: 15, offset: 45113},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 15, offset: 45113},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1179, col: 15, offset: 45113},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1179, col: 26, offset: 45124},
								expr: &ruleRefExpr{
									pos:  position{line: 1179, col: 27, offset: 45125},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1179, col: 47, offset: 45145},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1179, col: 67, offset: 45165},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1179, col: 75, offset: 45173},
								expr: &ruleRefExpr{
									pos:  position{line: 1179, col: 76, offset: 45174},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1179, col: 97, offset: 45195},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1179, col: 97, offset: 45195},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1179, col: 119, offset: 45217},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1183, col: 1, offset: 45324},
			expr: &actionExpr{
				pos: position{line: 1184, col: 5, offset: 45350},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1184, col: 5, offset: 45350},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1184, col: 5, offset: 45350},
							expr: &ruleRefExpr{
								pos:  position{line: 1184, col: 6, offset: 45351},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1184, col: 26, offset: 45371},
							expr: &ruleRefExpr{
								pos:  position{line: 1184, col: 27, offset: 45372},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1184, col: 31, offset: 45376},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1184, col: 40, offset: 45385},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1184, col: 40, offset: 45385},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1185, col: 15, offset: 45410},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1186, col: 15, offset: 45438},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1187, col: 15, offset: 45464},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1188, col: 15, offset: 45487},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1189, col: 15, offset: 45513},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1190, col: 15, offset: 45540},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1191, col: 15, offset: 45567},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 15, offset: 45594},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1193, col: 15, offset: 45626},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1194, col: 15, offset: 45652},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1195, col: 15, offset: 45679},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1196, col: 15, offset: 45700},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1197, col: 15, offset: 45728},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1198, col: 15, offset: 45772},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 15, offset: 45810},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1200, col: 15, offset: 45845},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1204, col: 1, offset: 45904},
			expr: &actionExpr{
				pos: position{line: 1204, col: 24, offset: 45927},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1204, col: 24, offset: 45927},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1204, col: 30, offset: 45933},
						expr: &ruleRefExpr{
							pos:  position{line: 1204, col: 31, offset: 45934},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1213, col: 1, offset: 46280},
			expr: &actionExpr{
				pos: position{line: 1213, col: 15, offset: 46294},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 15, offset: 46294},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1213, col: 15, offset: 46294},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1213, col: 27, offset: 46306},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1214, col: 5, offset: 46330},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1218, col: 5, offset: 46516},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 25, offset: 46536},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1218, col: 33, offset: 46544},
								expr: &ruleRefExpr{
									pos:  position{line: 1218, col: 34, offset: 46545},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1218, col: 55, offset: 46566},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1218, col: 55, offset: 46566},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1218, col: 77, offset: 46588},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1222, col: 1, offset: 46703},
			expr: &choiceExpr{
				pos: position{line: 1222, col: 22, offset: 46724},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1222, col: 22, offset: 46724},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 41, offset: 46743},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 53, offset: 46755},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1224, col: 1, offset: 46776},
			expr: &actionExpr{
				pos: position{line: 1224, col: 21, offset: 46796},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1224, col: 21, offset: 46796},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1224, col: 21, offset: 46796},
							expr: &ruleRefExpr{
								pos:  position{line: 1224, col: 22, offset: 46797},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1224, col: 42, offset: 46817},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1224, col: 51, offset: 46826},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1229, col: 1, offset: 46888},
			expr: &actionExpr{
				pos: position{line: 1229, col: 24, offset: 46911},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1229, col: 24, offset: 46911},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1229, col: 30, offset: 46917},
						expr: &ruleRefExpr{
							pos:  position{line: 1229, col: 31, offset: 46918},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1233, col: 1, offset: 47008},
			expr: &actionExpr{
				pos: position{line: 1233, col: 28, offset: 47035},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 28, offset: 47035},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1233, col: 28, offset: 47035},
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 29, offset: 47036},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1233, col: 49, offset: 47056},
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 50, offset: 47057},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 60, offset: 47067},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1233, col: 66, offset: 47073},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1233, col: 66, offset: 47073},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1233, col: 66, offset: 47073},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1233, col: 75, offset: 47082},
												expr: &ruleRefExpr{
													pos:  position{line: 1233, col: 76, offset: 47083},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1233, col: 109, offset: 47116},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1239, col: 1, offset: 47212},
			expr: &actionExpr{
				pos: position{line: 1239, col: 35, offset: 47246},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1239, col: 35, offset: 47246},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1239, col: 35, offset: 47246},
							expr: &ruleRefExpr{
								pos:  position{line: 1239, col: 36, offset: 47247},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1239, col: 40, offset: 47251},
							expr: &ruleRefExpr{
								pos:  position{line: 1239, col: 41, offset: 47252},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1240, col: 5, offset: 47267},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1240, col: 14, offset: 47276},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1240, col: 14, offset: 47276},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1241, col: 11, offset: 47294},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1242, col: 11, offset: 47317},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 47333},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 11, offset: 47356},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 47382},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 47409},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 47431},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 11, offset: 47457},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 11, offset: 47498},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1250, col: 11, offset: 47525},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1257, col: 1, offset: 47755},
			expr: &seqExpr{
				pos: position{line: 1257, col: 26, offset: 47780},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1257, col: 26, offset: 47780},
						val:        "****",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1257, col: 33, offset: 47787},
						expr: &ruleRefExpr{
							pos:  position{line: 1257, col: 33, offset: 47787},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 37, offset: 47791},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1259, col: 1, offset: 47796},
			expr: &actionExpr{
				pos: position{line: 1259, col: 17, offset: 47812},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 17, offset: 47812},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1259, col: 17, offset: 47812},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1259, col: 28, offset: 47823},
								expr: &ruleRefExpr{
									pos:  position{line: 1259, col: 29, offset: 47824},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1259, col: 49, offset: 47844},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 71, offset: 47866},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1259, col: 79, offset: 47874},
								expr: &ruleRefExpr{
									pos:  position{line: 1259, col: 80, offset: 47875},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1259, col: 104, offset: 47899},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1259, col: 104, offset: 47899},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1259, col: 128, offset: 47923},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1263, col: 1, offset: 48032},
			expr: &choiceExpr{
				pos: position{line: 1263, col: 24, offset: 48055},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1263, col: 24, offset: 48055},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 36, offset: 48067},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 52, offset: 48083},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 63, offset: 48094},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 81, offset: 48112},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1265, col: 1, offset: 48135},
			expr: &actionExpr{
				pos: position{line: 1265, col: 20, offset: 48154},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 20, offset: 48154},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1265, col: 20, offset: 48154},
							expr: &ruleRefExpr{
								pos:  position{line: 1265, col: 21, offset: 48155},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 34, offset: 48168},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1265, col: 43, offset: 48177},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1270, col: 1, offset: 48240},
			expr: &actionExpr{
				pos: position{line: 1270, col: 26, offset: 48265},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1270, col: 26, offset: 48265},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1270, col: 32, offset: 48271},
						expr: &ruleRefExpr{
							pos:  position{line: 1270, col: 33, offset: 48272},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1274, col: 1, offset: 48386},
			expr: &actionExpr{
				pos: position{line: 1274, col: 30, offset: 48415},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1274, col: 30, offset: 48415},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1274, col: 30, offset: 48415},
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 31, offset: 48416},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1274, col: 53, offset: 48438},
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 54, offset: 48439},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 64, offset: 48449},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 70, offset: 48455},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1282, col: 1, offset: 48686},
			expr: &actionExpr{
				pos: position{line: 1282, col: 10, offset: 48695},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1282, col: 10, offset: 48695},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1282, col: 10, offset: 48695},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1282, col: 21, offset: 48706},
								expr: &ruleRefExpr{
									pos:  position{line: 1282, col: 22, offset: 48707},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1282, col: 42, offset: 48727},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1283, col: 5, offset: 48746},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1283, col: 12, offset: 48753},
								expr: &ruleRefExpr{
									pos:  position{line: 1283, col: 13, offset: 48754},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 5, offset: 48776},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1284, col: 11, offset: 48782},
								expr: &ruleRefExpr{
									pos:  position{line: 1284, col: 12, offset: 48783},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1285, col: 6, offset: 48800},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1285, col: 6, offset: 48800},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1285, col: 23, offset: 48817},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1289, col: 1, offset: 48932},
			expr: &seqExpr{
				pos: position{line: 1289, col: 23, offset: 48954},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1289, col: 23, offset: 48954},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1289, col: 27, offset: 48958},
						expr: &ruleRefExpr{
							pos:  position{line: 1289, col: 27, offset: 48958},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1291, col: 1, offset: 48963},
			expr: &seqExpr{
				pos: position{line: 1291, col: 19, offset: 48981},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1291, col: 19, offset: 48981},
						val:        "|===",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1291, col: 26, offset: 48988},
						expr: &ruleRefExpr{
							pos:  position{line: 1291, col: 26, offset: 48988},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 30, offset: 48992},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1294, col: 1, offset: 49060},
			expr: &actionExpr{
				pos: position{line: 1294, col: 20, offset: 49079},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 20, offset: 49079},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1294, col: 20, offset: 49079},
							expr: &ruleRefExpr{
								pos:  position{line: 1294, col: 21, offset: 49080},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 36, offset: 49095},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1294, col: 42, offset: 49101},
								expr: &ruleRefExpr{
									pos:  position{line: 1294, col: 43, offset: 49102},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1294, col: 55, offset: 49114},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1294, col: 59, offset: 49118},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1298, col: 1, offset: 49186},
			expr: &actionExpr{
				pos: position{line: 1298, col: 14, offset: 49199},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1298, col: 14, offset: 49199},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1298, col: 14, offset: 49199},
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 15, offset: 49200},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1298, col: 30, offset: 49215},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1298, col: 36, offset: 49221},
								expr: &ruleRefExpr{
									pos:  position{line: 1298, col: 37, offset: 49222},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1298, col: 49, offset: 49234},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1298, col: 53, offset: 49238},
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 53, offset: 49238},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1302, col: 1, offset: 49307},
			expr: &actionExpr{
				pos: position{line: 1302, col: 14, offset: 49320},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1302, col: 14, offset: 49320},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1302, col: 14, offset: 49320},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1302, col: 33, offset: 49339},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1302, col: 42, offset: 49348},
								expr: &seqExpr{
									pos: position{line: 1302, col: 43, offset: 49349},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1302, col: 43, offset: 49349},
											expr: &ruleRefExpr{
												pos:  position{line: 1302, col: 44, offset: 49350},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1302, col: 63, offset: 49369},
											expr: &ruleRefExpr{
												pos:  position{line: 1302, col: 64, offset: 49370},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1302, col: 68, offset: 49374},
											expr: &ruleRefExpr{
												pos:  position{line: 1302, col: 68, offset: 49374},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1302, col: 72, offset: 49378},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1302, col: 86, offset: 49392},
											expr: &ruleRefExpr{
												pos:  position{line: 1302, col: 86, offset: 49392},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1309, col: 1, offset: 49638},
			expr: &litMatcher{
				pos:        position{line: 1309, col: 26, offset: 49663},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1311, col: 1, offset: 49671},
			expr: &actionExpr{
				pos: position{line: 1311, col: 17, offset: 49687},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1311, col: 17, offset: 49687},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1311, col: 17, offset: 49687},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1311, col: 39, offset: 49709},
							expr: &ruleRefExpr{
								pos:  position{line: 1311, col: 39, offset: 49709},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1311, col: 43, offset: 49713},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1311, col: 51, offset: 49721},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1311, col: 59, offset: 49729},
								expr: &ruleRefExpr{
									pos:  position{line: 1311, col: 60, offset: 49730},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1311, col: 81, offset: 49751},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1311, col: 82, offset: 49752},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1311, col: 82, offset: 49752},
											name: "CommentBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1311, col: 104, offset: 49774},
											expr: &ruleRefExpr{
												pos:  position{line: 1311, col: 104, offset: 49774},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1311, col: 108, offset: 49778},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1311, col: 115, offset: 49785},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1315, col: 1, offset: 49891},
			expr: &actionExpr{
				pos: position{line: 1315, col: 21, offset: 49911},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1315, col: 21, offset: 49911},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1315, col: 21, offset: 49911},
							expr: &choiceExpr{
								pos: position{line: 1315, col: 22, offset: 49912},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1315, col: 22, offset: 49912},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1315, col: 34, offset: 49924},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1315, col: 44, offset: 49934},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1315, col: 44, offset: 49934},
												expr: &ruleRefExpr{
													pos:  position{line: 1315, col: 45, offset: 49935},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1315, col: 67, offset: 49957},
												expr: &ruleRefExpr{
													pos:  position{line: 1315, col: 68, offset: 49958},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1315, col: 73, offset: 49963,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1315, col: 78, offset: 49968},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1319, col: 1, offset: 50008},
			expr: &actionExpr{
				pos: position{line: 1319, col: 22, offset: 50029},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1319, col: 22, offset: 50029},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1319, col: 22, offset: 50029},
							expr: &ruleRefExpr{
								pos:  position{line: 1319, col: 23, offset: 50030},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1319, col: 45, offset: 50052},
							expr: &ruleRefExpr{
								pos:  position{line: 1319, col: 45, offset: 50052},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1319, col: 49, offset: 50056},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1319, col: 54, offset: 50061},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1319, col: 63, offset: 50070},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1319, col: 89, offset: 50096},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1323, col: 1, offset: 50161},
			expr: &actionExpr{
				pos: position{line: 1323, col: 29, offset: 50189},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1323, col: 29, offset: 50189},
					expr: &choiceExpr{
						pos: position{line: 1323, col: 30, offset: 50190},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1323, col: 30, offset: 50190},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1323, col: 42, offset: 50202},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1323, col: 52, offset: 50212},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1323, col: 52, offset: 50212},
										expr: &ruleRefExpr{
											pos:  position{line: 1323, col: 53, offset: 50213},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1323, col: 58, offset: 50218,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1331, col: 1, offset: 50527},
			expr: &choiceExpr{
				pos: position{line: 1331, col: 17, offset: 50543},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1331, col: 17, offset: 50543},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 49, offset: 50575},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 78, offset: 50604},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1333, col: 1, offset: 50640},
			expr: &litMatcher{
				pos:        position{line: 1333, col: 26, offset: 50665},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1336, col: 1, offset: 50737},
			expr: &actionExpr{
				pos: position{line: 1336, col: 31, offset: 50767},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 31, offset: 50767},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1336, col: 31, offset: 50767},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1336, col: 42, offset: 50778},
								expr: &ruleRefExpr{
									pos:  position{line: 1336, col: 43, offset: 50779},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 63, offset: 50799},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1336, col: 70, offset: 50806},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1341, col: 1, offset: 51036},
			expr: &actionExpr{
				pos: position{line: 1342, col: 5, offset: 51076},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1342, col: 5, offset: 51076},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1342, col: 5, offset: 51076},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1342, col: 16, offset: 51087},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1342, col: 16, offset: 51087},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1342, col: 16, offset: 51087},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1342, col: 19, offset: 51090},
											expr: &choiceExpr{
												pos: position{line: 1342, col: 20, offset: 51091},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1342, col: 20, offset: 51091},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1342, col: 32, offset: 51103},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1342, col: 41, offset: 51112},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1342, col: 42, offset: 51113},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1342, col: 42, offset: 51113},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1342, col: 43, offset: 51114},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1342, col: 48, offset: 51119,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1346, col: 8, offset: 51210},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 5, offset: 51273},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1347, col: 16, offset: 51284},
								expr: &actionExpr{
									pos: position{line: 1348, col: 9, offset: 51294},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1348, col: 9, offset: 51294},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1348, col: 9, offset: 51294},
												expr: &ruleRefExpr{
													pos:  position{line: 1348, col: 10, offset: 51295},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1349, col: 9, offset: 51314},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1349, col: 20, offset: 51325},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1349, col: 20, offset: 51325},
														expr: &choiceExpr{
															pos: position{line: 1349, col: 21, offset: 51326},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1349, col: 21, offset: 51326},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1349, col: 33, offset: 51338},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1349, col: 43, offset: 51348},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1349, col: 43, offset: 51348},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1349, col: 44, offset: 51349},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1349, col: 49, offset: 51354,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1351, col: 12, offset: 51411},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1358, col: 1, offset: 51641},
			expr: &actionExpr{
				pos: position{line: 1358, col: 39, offset: 51679},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1358, col: 39, offset: 51679},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1358, col: 39, offset: 51679},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1358, col: 50, offset: 51690},
								expr: &ruleRefExpr{
									pos:  position{line: 1358, col: 51, offset: 51691},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1359, col: 9, offset: 51719},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1359, col: 31, offset: 51741},
							expr: &ruleRefExpr{
								pos:  position{line: 1359, col: 31, offset: 51741},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1359, col: 35, offset: 51745},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 43, offset: 51753},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1359, col: 50, offset: 51760},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1359, col: 92, offset: 51802},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1359, col: 93, offset: 51803},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1359, col: 93, offset: 51803},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1359, col: 115, offset: 51825},
											expr: &ruleRefExpr{
												pos:  position{line: 1359, col: 115, offset: 51825},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1359, col: 119, offset: 51829},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1359, col: 126, offset: 51836},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1364, col: 1, offset: 51995},
			expr: &actionExpr{
				pos: position{line: 1364, col: 44, offset: 52038},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1364, col: 44, offset: 52038},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1364, col: 50, offset: 52044},
						expr: &ruleRefExpr{
							pos:  position{line: 1364, col: 51, offset: 52045},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1368, col: 1, offset: 52129},
			expr: &actionExpr{
				pos: position{line: 1369, col: 5, offset: 52184},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 5, offset: 52184},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1369, col: 5, offset: 52184},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1369, col: 11, offset: 52190},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1369, col: 11, offset: 52190},
									expr: &choiceExpr{
										pos: position{line: 1369, col: 12, offset: 52191},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1369, col: 12, offset: 52191},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1369, col: 24, offset: 52203},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1369, col: 34, offset: 52213},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1369, col: 34, offset: 52213},
														expr: &ruleRefExpr{
															pos:  position{line: 1369, col: 35, offset: 52214},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1369, col: 57, offset: 52236},
														expr: &ruleRefExpr{
															pos:  position{line: 1369, col: 58, offset: 52237},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1369, col: 62, offset: 52241,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1371, col: 8, offset: 52290},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1376, col: 1, offset: 52416},
			expr: &actionExpr{
				pos: position{line: 1377, col: 5, offset: 52454},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1377, col: 5, offset: 52454},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1377, col: 5, offset: 52454},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1377, col: 16, offset: 52465},
								expr: &ruleRefExpr{
									pos:  position{line: 1377, col: 17, offset: 52466},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1378, col: 5, offset: 52490},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1385, col: 5, offset: 52704},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1385, col: 12, offset: 52711},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1389, col: 1, offset: 52861},
			expr: &actionExpr{
				pos: position{line: 1389, col: 16, offset: 52876},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1389, col: 16, offset: 52876},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1394, col: 1, offset: 52959},
			expr: &actionExpr{
				pos: position{line: 1394, col: 39, offset: 52997},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1394, col: 39, offset: 52997},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1394, col: 45, offset: 53003},
						expr: &ruleRefExpr{
							pos:  position{line: 1394, col: 46, offset: 53004},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1398, col: 1, offset: 53084},
			expr: &actionExpr{
				pos: position{line: 1398, col: 38, offset: 53121},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 38, offset: 53121},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1398, col: 38, offset: 53121},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1398, col: 44, offset: 53127},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1398, col: 44, offset: 53127},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1398, col: 44, offset: 53127},
											expr: &ruleRefExpr{
												pos:  position{line: 1398, col: 46, offset: 53129},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1398, col: 57, offset: 53140},
											expr: &choiceExpr{
												pos: position{line: 1398, col: 58, offset: 53141},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1398, col: 58, offset: 53141},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1398, col: 70, offset: 53153},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1398, col: 80, offset: 53163},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1398, col: 80, offset: 53163},
																expr: &ruleRefExpr{
																	pos:  position{line: 1398, col: 81, offset: 53164},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1398, col: 86, offset: 53169,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1400, col: 4, offset: 53210},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1407, col: 1, offset: 53382},
			expr: &actionExpr{
				pos: position{line: 1407, col: 14, offset: 53395},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1407, col: 14, offset: 53395},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1407, col: 14, offset: 53395},
							expr: &ruleRefExpr{
								pos:  position{line: 1407, col: 15, offset: 53396},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1407, col: 19, offset: 53400},
							expr: &ruleRefExpr{
								pos:  position{line: 1407, col: 19, offset: 53400},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1407, col: 23, offset: 53404},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1414, col: 1, offset: 53551},
			expr: &charClassMatcher{
				pos:        position{line: 1414, col: 13, offset: 53563},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1416, col: 1, offset: 53573},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 16, offset: 53588},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1416, col: 16, offset: 53588},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1416, col: 22, offset: 53594},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1416, col: 28, offset: 53600},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1416, col: 34, offset: 53606},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1418, col: 1, offset: 53611},
			expr: &oneOrMoreExpr{
				pos: position{line: 1418, col: 14, offset: 53624},
				expr: &charClassMatcher{
					pos:        position{line: 1418, col: 14, offset: 53624},
					val:        "[\\pL0-9]",
					ranges:     []rune{'0', '9'},
					classes:    []*unicode.RangeTable{rangeTable("L")},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1420, col: 1, offset: 53635},
			expr: &litMatcher{
				pos:        position{line: 1420, col: 8, offset: 53642},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1422, col: 1, offset: 53647},
			expr: &actionExpr{
				pos: position{line: 1422, col: 15, offset: 53661},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1422, col: 15, offset: 53661},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1422, col: 15, offset: 53661},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1422, col: 25, offset: 53671},
							expr: &choiceExpr{
								pos: position{line: 1422, col: 27, offset: 53673},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1422, col: 27, offset: 53673},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1422, col: 32, offset: 53678},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1427, col: 1, offset: 53943},
			expr: &actionExpr{
				pos: position{line: 1427, col: 14, offset: 53956},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1427, col: 15, offset: 53957},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1427, col: 15, offset: 53957},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1427, col: 27, offset: 53969},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1427, col: 46, offset: 53988},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1427, col: 60, offset: 54002},
							expr: &actionExpr{
								pos: position{line: 1427, col: 61, offset: 54003},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1427, col: 61, offset: 54003},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1427, col: 62, offset: 54004},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1427, col: 62, offset: 54004},
													expr: &ruleRefExpr{
														pos:  position{line: 1427, col: 63, offset: 54005},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1427, col: 71, offset: 54013},
													expr: &ruleRefExpr{
														pos:  position{line: 1427, col: 72, offset: 54014},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1427, col: 75, offset: 54017},
													expr: &ruleRefExpr{
														pos:  position{line: 1427, col: 76, offset: 54018},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1427, col: 80, offset: 54022},
													expr: &ruleRefExpr{
														pos:  position{line: 1427, col: 81, offset: 54023},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1427, col: 98, offset: 54040,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1427, col: 101, offset: 54043},
											expr: &ruleRefExpr{
												pos:  position{line: 1427, col: 101, offset: 54043},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1429, col: 7, offset: 54152},
							expr: &litMatcher{
								pos:        position{line: 1429, col: 7, offset: 54152},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Text",
			pos:  position{line: 1433, col: 1, offset: 54333},
			expr: &actionExpr{
				pos: position{line: 1433, col: 9, offset: 54341},
				run: (*parser).callonText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1433, col: 9, offset: 54341},
					expr: &choiceExpr{
						pos: position{line: 1433, col: 10, offset: 54342},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1433, col: 10, offset: 54342},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1433, col: 22, offset: 54354},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 1433, col: 31, offset: 54363},
								run: (*parser).callonText6,
								expr: &seqExpr{
									pos: position{line: 1433, col: 32, offset: 54364},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1433, col: 32, offset: 54364},
											expr: &ruleRefExpr{
												pos:  position{line: 1433, col: 33, offset: 54365},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 1433, col: 37, offset: 54369,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1439, col: 1, offset: 54648},
			expr: &oneOrMoreExpr{
				pos: position{line: 1439, col: 11, offset: 54658},
				expr: &ruleRefExpr{
					pos:  position{line: 1439, col: 11, offset: 54658},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1441, col: 1, offset: 54664},
			expr: &actionExpr{
				pos: position{line: 1441, col: 17, offset: 54680},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1441, col: 17, offset: 54680},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1441, col: 26, offset: 54689},
						expr: &choiceExpr{
							pos: position{line: 1441, col: 27, offset: 54690},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1441, col: 27, offset: 54690},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1441, col: 38, offset: 54701},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1445, col: 1, offset: 54793},
			expr: &actionExpr{
				pos: position{line: 1445, col: 13, offset: 54805},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1445, col: 13, offset: 54805},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1445, col: 23, offset: 54815},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1445, col: 23, offset: 54815},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1445, col: 34, offset: 54826},
								expr: &choiceExpr{
									pos: position{line: 1445, col: 35, offset: 54827},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1445, col: 35, offset: 54827},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1445, col: 46, offset: 54838},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1445, col: 78, offset: 54870},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1445, col: 78, offset: 54870},
													expr: &ruleRefExpr{
														pos:  position{line: 1445, col: 79, offset: 54871},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1445, col: 83, offset: 54875},
													expr: &litMatcher{
														pos:        position{line: 1445, col: 84, offset: 54876},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1445, col: 88, offset: 54880,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1449, col: 1, offset: 54945},
			expr: &oneOrMoreExpr{
				pos: position{line: 1449, col: 13, offset: 54957},
				expr: &choiceExpr{
					pos: position{line: 1449, col: 14, offset: 54958},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1449, col: 14, offset: 54958},
							name: "Alphanums",
						},
						&litMatcher{
							pos:        position{line: 1449, col: 26, offset: 54970},
							val:        ".",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1449, col: 32, offset: 54976},
							val:        "_",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1449, col: 38, offset: 54982},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1449, col: 44, offset: 54988},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1451, col: 1, offset: 54995},
			expr: &actionExpr{
				pos: position{line: 1451, col: 8, offset: 55002},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1451, col: 8, offset: 55002},
					expr: &choiceExpr{
						pos: position{line: 1451, col: 9, offset: 55003},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1451, col: 9, offset: 55003},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1451, col: 22, offset: 55016},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1451, col: 22, offset: 55016},
										expr: &ruleRefExpr{
											pos:  position{line: 1451, col: 23, offset: 55017},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1451, col: 31, offset: 55025},
										expr: &ruleRefExpr{
											pos:  position{line: 1451, col: 32, offset: 55026},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1451, col: 35, offset: 55029},
										expr: &litMatcher{
											pos:        position{line: 1451, col: 36, offset: 55030},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1451, col: 40, offset: 55034},
										expr: &litMatcher{
											pos:        position{line: 1451, col: 41, offset: 55035},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1451, col: 46, offset: 55040,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1455, col: 1, offset: 55081},
			expr: &choiceExpr{
				pos: position{line: 1455, col: 15, offset: 55095},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1455, col: 15, offset: 55095},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1455, col: 27, offset: 55107},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1455, col: 40, offset: 55120},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1455, col: 51, offset: 55131},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1455, col: 62, offset: 55142},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1457, col: 1, offset: 55153},
			expr: &actionExpr{
				pos: position{line: 1457, col: 7, offset: 55159},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1457, col: 7, offset: 55159},
					expr: &choiceExpr{
						pos: position{line: 1457, col: 8, offset: 55160},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1457, col: 8, offset: 55160},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1457, col: 21, offset: 55173},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1457, col: 21, offset: 55173},
										expr: &ruleRefExpr{
											pos:  position{line: 1457, col: 22, offset: 55174},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1457, col: 30, offset: 55182},
										expr: &ruleRefExpr{
											pos:  position{line: 1457, col: 31, offset: 55183},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1457, col: 34, offset: 55186},
										expr: &litMatcher{
											pos:        position{line: 1457, col: 35, offset: 55187},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1457, col: 39, offset: 55191},
										expr: &litMatcher{
											pos:        position{line: 1457, col: 40, offset: 55192},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1457, col: 44, offset: 55196},
										expr: &litMatcher{
											pos:        position{line: 1457, col: 45, offset: 55197},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1457, col: 50, offset: 55202},
										expr: &litMatcher{
											pos:        position{line: 1457, col: 51, offset: 55203},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1457, col: 56, offset: 55208},
										expr: &litMatcher{
											pos:        position{line: 1457, col: 57, offset: 55209},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1457, col: 62, offset: 55214,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1461, col: 1, offset: 55255},
			expr: &actionExpr{
				pos: position{line: 1461, col: 10, offset: 55264},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1461, col: 10, offset: 55264},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1465, col: 1, offset: 55306},
			expr: &actionExpr{
				pos: position{line: 1465, col: 11, offset: 55316},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1465, col: 11, offset: 55316},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1465, col: 11, offset: 55316},
							expr: &litMatcher{
								pos:        position{line: 1465, col: 11, offset: 55316},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1465, col: 16, offset: 55321},
							expr: &ruleRefExpr{
								pos:  position{line: 1465, col: 16, offset: 55321},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1469, col: 1, offset: 55373},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 7, offset: 55379},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1469, col: 7, offset: 55379},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1469, col: 13, offset: 55385},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1469, col: 13, offset: 55385},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1473, col: 1, offset: 55426},
			expr: &choiceExpr{
				pos: position{line: 1473, col: 12, offset: 55437},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1473, col: 12, offset: 55437},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1473, col: 21, offset: 55446},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1473, col: 28, offset: 55453},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1475, col: 1, offset: 55459},
			expr: &notExpr{
				pos: position{line: 1475, col: 8, offset: 55466},
				expr: &anyMatcher{
					line: 1475, col: 9, offset: 55467,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1477, col: 1, offset: 55470},
			expr: &choiceExpr{
				pos: position{line: 1477, col: 8, offset: 55477},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1477, col: 8, offset: 55477},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 18, offset: 55487},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onPreflightDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle9()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole7()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute1(key, value interface{}) (interface{}, error) {
	// value is set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges9(stack["other"])
}

func (c *current) onMultipleRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges10(stack["other"])
}

func (c *current) onMultipleQuotedRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges1(stack["first"], stack["others"])
}

func (c *current) onMultilineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineRange1(stack["start"], stack["end"])
}

func (c *current) onMultilineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSinglelineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineRange1(stack["singleline"])
}

func (c *current) onSinglelineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute16() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonLinkTextAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute16()
}

func (c *current) onLinkTextAttribute1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLinkTextAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute1(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onText6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonText6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onText6()
}

func (c *current) onText1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onText1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
