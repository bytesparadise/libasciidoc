// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "PreflightDocument",
			pos:  position{line: 17, col: 1, offset: 290},
			expr: &actionExpr{
				pos: position{line: 17, col: 22, offset: 311},
				run: (*parser).callonPreflightDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 22, offset: 311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 22, offset: 311},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 35, offset: 324},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 35, offset: 324},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 49, offset: 338},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 57, offset: 346},
								name: "DocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 73, offset: 362},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 446},
			expr: &actionExpr{
				pos: position{line: 21, col: 42, offset: 487},
				run: (*parser).callonPreflightDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 42, offset: 487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 42, offset: 487},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 55, offset: 500},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 55, offset: 500},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 69, offset: 514},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 77, offset: 522},
								name: "DocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 113, offset: 558},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 28, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 28, col: 19, offset: 771},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 28, col: 19, offset: 771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 28, col: 19, offset: 771},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 27, offset: 779},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 27, offset: 779},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 44, offset: 796},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 28, col: 52, offset: 804},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 52, offset: 804},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 37, col: 1, offset: 1053},
			expr: &actionExpr{
				pos: position{line: 37, col: 18, offset: 1070},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 37, col: 18, offset: 1070},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 37, col: 18, offset: 1070},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 19, offset: 1071},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1080},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 38, col: 12, offset: 1087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 38, col: 12, offset: 1087},
										name: "FrontMatter",
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 1109},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 11, offset: 1128},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 11, offset: 1153},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 42, col: 11, offset: 1177},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1202},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1224},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1243},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1294},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1318},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1358},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1392},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1423},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1448},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 55, col: 1, offset: 1486},
			expr: &labeledExpr{
				pos:   position{line: 55, col: 39, offset: 1524},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 55, col: 46, offset: 1531},
					expr: &ruleRefExpr{
						pos:  position{line: 55, col: 47, offset: 1532},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 57, col: 1, offset: 1569},
			expr: &actionExpr{
				pos: position{line: 57, col: 38, offset: 1606},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 57, col: 38, offset: 1606},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 57, col: 38, offset: 1606},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 39, offset: 1607},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1616},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 58, col: 12, offset: 1623},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 58, col: 12, offset: 1623},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 59, col: 11, offset: 1648},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 60, col: 11, offset: 1672},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 61, col: 11, offset: 1697},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1719},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1738},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1789},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1813},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1853},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1887},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1918},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1943},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 76, col: 1, offset: 2089},
			expr: &ruleRefExpr{
				pos:  position{line: 76, col: 16, offset: 2104},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 78, col: 1, offset: 2122},
			expr: &actionExpr{
				pos: position{line: 78, col: 20, offset: 2141},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 78, col: 20, offset: 2141},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 78, col: 20, offset: 2141},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 41, offset: 2162},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 49, offset: 2170},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2171},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 75, offset: 2196},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 82, col: 1, offset: 2276},
			expr: &seqExpr{
				pos: position{line: 82, col: 26, offset: 2301},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 82, col: 26, offset: 2301},
						val:        "---",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 82, col: 32, offset: 2307},
						expr: &ruleRefExpr{
							pos:  position{line: 82, col: 32, offset: 2307},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 36, offset: 2311},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 84, col: 1, offset: 2316},
			expr: &actionExpr{
				pos: position{line: 84, col: 27, offset: 2342},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 27, offset: 2342},
					expr: &actionExpr{
						pos: position{line: 84, col: 28, offset: 2343},
						run: (*parser).callonYamlFrontMatterContent3,
						expr: &oneOrMoreExpr{
							pos: position{line: 84, col: 28, offset: 2343},
							expr: &seqExpr{
								pos: position{line: 84, col: 29, offset: 2344},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 84, col: 29, offset: 2344},
										expr: &ruleRefExpr{
											pos:  position{line: 84, col: 30, offset: 2345},
											name: "YamlFrontMatterToken",
										},
									},
									&anyMatcher{
										line: 84, col: 52, offset: 2367,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 93, col: 1, offset: 2567},
			expr: &actionExpr{
				pos: position{line: 93, col: 19, offset: 2585},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 93, col: 19, offset: 2585},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 93, col: 19, offset: 2585},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 93, col: 23, offset: 2589},
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 23, offset: 2589},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 27, offset: 2593},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 34, offset: 2600},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 49, offset: 2615},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 93, col: 53, offset: 2619},
								expr: &ruleRefExpr{
									pos:  position{line: 93, col: 53, offset: 2619},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 71, offset: 2637},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 9, offset: 2649},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 94, col: 18, offset: 2658},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 18, offset: 2658},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 95, col: 9, offset: 2685},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 19, offset: 2695},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 19, offset: 2695},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 100, col: 1, offset: 2804},
			expr: &choiceExpr{
				pos: position{line: 100, col: 20, offset: 2823},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 100, col: 20, offset: 2823},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 100, col: 48, offset: 2851},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 102, col: 1, offset: 2881},
			expr: &actionExpr{
				pos: position{line: 102, col: 30, offset: 2910},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 102, col: 30, offset: 2910},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 102, col: 30, offset: 2910},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 30, offset: 2910},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 102, col: 34, offset: 2914},
							expr: &litMatcher{
								pos:        position{line: 102, col: 35, offset: 2915},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 39, offset: 2919},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 102, col: 48, offset: 2928},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 48, offset: 2928},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 65, offset: 2945},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 106, col: 1, offset: 3015},
			expr: &actionExpr{
				pos: position{line: 106, col: 33, offset: 3047},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 106, col: 33, offset: 3047},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 106, col: 33, offset: 3047},
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 33, offset: 3047},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 106, col: 37, offset: 3051},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 106, col: 48, offset: 3062},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 56, offset: 3070},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 72, offset: 3086},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 110, col: 1, offset: 3165},
			expr: &actionExpr{
				pos: position{line: 110, col: 19, offset: 3183},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 110, col: 19, offset: 3183},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 19, offset: 3183},
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 19, offset: 3183},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 23, offset: 3187},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 33, offset: 3197},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 53, offset: 3217},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 59, offset: 3223},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 60, offset: 3224},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 82, offset: 3246},
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 82, offset: 3246},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 110, col: 86, offset: 3250},
							expr: &litMatcher{
								pos:        position{line: 110, col: 86, offset: 3250},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 91, offset: 3255},
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 91, offset: 3255},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 115, col: 1, offset: 3397},
			expr: &actionExpr{
				pos: position{line: 115, col: 23, offset: 3419},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 115, col: 23, offset: 3419},
					expr: &choiceExpr{
						pos: position{line: 115, col: 24, offset: 3420},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 115, col: 24, offset: 3420},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 115, col: 37, offset: 3433},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 115, col: 37, offset: 3433},
										expr: &litMatcher{
											pos:        position{line: 115, col: 38, offset: 3434},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 115, col: 42, offset: 3438},
										expr: &litMatcher{
											pos:        position{line: 115, col: 43, offset: 3439},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 115, col: 47, offset: 3443},
										expr: &ruleRefExpr{
											pos:  position{line: 115, col: 48, offset: 3444},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 115, col: 56, offset: 3452,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 119, col: 1, offset: 3493},
			expr: &actionExpr{
				pos: position{line: 119, col: 24, offset: 3516},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 119, col: 24, offset: 3516},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 119, col: 24, offset: 3516},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 119, col: 28, offset: 3520},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 119, col: 35, offset: 3527},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 119, col: 35, offset: 3527},
									expr: &choiceExpr{
										pos: position{line: 119, col: 36, offset: 3528},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 119, col: 36, offset: 3528},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 119, col: 49, offset: 3541},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 119, col: 49, offset: 3541},
														expr: &litMatcher{
															pos:        position{line: 119, col: 50, offset: 3542},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 119, col: 54, offset: 3546},
														expr: &ruleRefExpr{
															pos:  position{line: 119, col: 55, offset: 3547},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 119, col: 60, offset: 3552,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 4, offset: 3593},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 127, col: 1, offset: 3754},
			expr: &actionExpr{
				pos: position{line: 127, col: 21, offset: 3774},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 127, col: 21, offset: 3774},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 21, offset: 3774},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 21, offset: 3774},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 127, col: 25, offset: 3778},
							expr: &litMatcher{
								pos:        position{line: 127, col: 26, offset: 3779},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 30, offset: 3783},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 128, col: 9, offset: 3802},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 128, col: 10, offset: 3803},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 128, col: 10, offset: 3803},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 128, col: 10, offset: 3803},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 128, col: 21, offset: 3814},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 45, offset: 3838},
													expr: &litMatcher{
														pos:        position{line: 128, col: 45, offset: 3838},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 50, offset: 3843},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 58, offset: 3851},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 59, offset: 3852},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 82, offset: 3875},
													expr: &litMatcher{
														pos:        position{line: 128, col: 82, offset: 3875},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 87, offset: 3880},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 97, offset: 3890},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 98, offset: 3891},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 130, col: 15, offset: 4008},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 130, col: 15, offset: 4008},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 130, col: 15, offset: 4008},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 130, col: 24, offset: 4017},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 130, col: 46, offset: 4039},
													expr: &litMatcher{
														pos:        position{line: 130, col: 46, offset: 4039},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 130, col: 51, offset: 4044},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 130, col: 61, offset: 4054},
														expr: &ruleRefExpr{
															pos:  position{line: 130, col: 62, offset: 4055},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 132, col: 13, offset: 4164},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 137, col: 1, offset: 4294},
			expr: &choiceExpr{
				pos: position{line: 137, col: 27, offset: 4320},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 137, col: 27, offset: 4320},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 137, col: 27, offset: 4320},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 137, col: 27, offset: 4320},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 32, offset: 4325},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 137, col: 39, offset: 4332},
									expr: &choiceExpr{
										pos: position{line: 137, col: 40, offset: 4333},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 137, col: 40, offset: 4333},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 137, col: 52, offset: 4345},
												name: "Spaces",
											},
											&actionExpr{
												pos: position{line: 137, col: 61, offset: 4354},
												run: (*parser).callonDocumentRevisionNumber10,
												expr: &seqExpr{
													pos: position{line: 137, col: 62, offset: 4355},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 137, col: 62, offset: 4355},
															expr: &ruleRefExpr{
																pos:  position{line: 137, col: 63, offset: 4356},
																name: "EOL",
															},
														},
														&notExpr{
															pos: position{line: 137, col: 67, offset: 4360},
															expr: &litMatcher{
																pos:        position{line: 137, col: 68, offset: 4361},
																val:        ",",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 137, col: 72, offset: 4365},
															expr: &litMatcher{
																pos:        position{line: 137, col: 73, offset: 4366},
																val:        ":",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 137, col: 78, offset: 4371,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 141, col: 5, offset: 4447},
						run: (*parser).callonDocumentRevisionNumber19,
						expr: &seqExpr{
							pos: position{line: 141, col: 5, offset: 4447},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 141, col: 5, offset: 4447},
									expr: &litMatcher{
										pos:        position{line: 141, col: 5, offset: 4447},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 141, col: 11, offset: 4453},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 141, col: 18, offset: 4460},
									expr: &choiceExpr{
										pos: position{line: 141, col: 19, offset: 4461},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 141, col: 19, offset: 4461},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 141, col: 31, offset: 4473},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 141, col: 41, offset: 4483},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 141, col: 41, offset: 4483},
														expr: &ruleRefExpr{
															pos:  position{line: 141, col: 42, offset: 4484},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 141, col: 46, offset: 4488},
														expr: &litMatcher{
															pos:        position{line: 141, col: 47, offset: 4489},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 141, col: 51, offset: 4493},
														expr: &litMatcher{
															pos:        position{line: 141, col: 52, offset: 4494},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 141, col: 57, offset: 4499,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 141, col: 62, offset: 4504},
									expr: &ruleRefExpr{
										pos:  position{line: 141, col: 62, offset: 4504},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 141, col: 66, offset: 4508},
									expr: &litMatcher{
										pos:        position{line: 141, col: 67, offset: 4509},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 145, col: 1, offset: 4549},
			expr: &actionExpr{
				pos: position{line: 145, col: 25, offset: 4573},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 145, col: 25, offset: 4573},
					expr: &choiceExpr{
						pos: position{line: 145, col: 26, offset: 4574},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 145, col: 26, offset: 4574},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 145, col: 38, offset: 4586},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 145, col: 47, offset: 4595},
								run: (*parser).callonDocumentRevisionDate6,
								expr: &seqExpr{
									pos: position{line: 145, col: 48, offset: 4596},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 145, col: 48, offset: 4596},
											expr: &ruleRefExpr{
												pos:  position{line: 145, col: 49, offset: 4597},
												name: "EOL",
											},
										},
										&notExpr{
											pos: position{line: 145, col: 53, offset: 4601},
											expr: &litMatcher{
												pos:        position{line: 145, col: 54, offset: 4602},
												val:        ":",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 145, col: 59, offset: 4607,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 151, col: 1, offset: 4682},
			expr: &actionExpr{
				pos: position{line: 151, col: 27, offset: 4708},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 151, col: 27, offset: 4708},
					expr: &choiceExpr{
						pos: position{line: 151, col: 28, offset: 4709},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 151, col: 28, offset: 4709},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 151, col: 40, offset: 4721},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 151, col: 49, offset: 4730},
								run: (*parser).callonDocumentRevisionRemark6,
								expr: &seqExpr{
									pos: position{line: 151, col: 50, offset: 4731},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 151, col: 50, offset: 4731},
											expr: &ruleRefExpr{
												pos:  position{line: 151, col: 51, offset: 4732},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 151, col: 56, offset: 4737,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 160, col: 1, offset: 4927},
			expr: &choiceExpr{
				pos: position{line: 160, col: 33, offset: 4959},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 160, col: 33, offset: 4959},
						run: (*parser).callonDocumentAttributeDeclaration2,
						expr: &seqExpr{
							pos: position{line: 160, col: 33, offset: 4959},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 160, col: 33, offset: 4959},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 160, col: 37, offset: 4963},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 43, offset: 4969},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 160, col: 66, offset: 4992},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 160, col: 70, offset: 4996},
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 70, offset: 4996},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 160, col: 74, offset: 5000},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 162, col: 5, offset: 5079},
						run: (*parser).callonDocumentAttributeDeclaration11,
						expr: &seqExpr{
							pos: position{line: 162, col: 5, offset: 5079},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 162, col: 5, offset: 5079},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 162, col: 9, offset: 5083},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 15, offset: 5089},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 162, col: 38, offset: 5112},
									val:        ":",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 162, col: 42, offset: 5116},
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 42, offset: 5116},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 162, col: 46, offset: 5120},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 53, offset: 5127},
										name: "DocumentAttributeValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 162, col: 77, offset: 5151},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 169, col: 1, offset: 5399},
			expr: &actionExpr{
				pos: position{line: 169, col: 26, offset: 5424},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 169, col: 26, offset: 5424},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 169, col: 27, offset: 5425},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 169, col: 27, offset: 5425},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 35, offset: 5433},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 43, offset: 5441},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 169, col: 51, offset: 5449},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 169, col: 56, offset: 5454},
							expr: &choiceExpr{
								pos: position{line: 169, col: 57, offset: 5455},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 169, col: 57, offset: 5455},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 65, offset: 5463},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 73, offset: 5471},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 169, col: 81, offset: 5479},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 173, col: 1, offset: 5521},
			expr: &actionExpr{
				pos: position{line: 173, col: 27, offset: 5547},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 173, col: 27, offset: 5547},
					expr: &seqExpr{
						pos: position{line: 173, col: 28, offset: 5548},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 173, col: 28, offset: 5548},
								expr: &ruleRefExpr{
									pos:  position{line: 173, col: 29, offset: 5549},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 173, col: 38, offset: 5558,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 177, col: 1, offset: 5598},
			expr: &choiceExpr{
				pos: position{line: 177, col: 27, offset: 5624},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 177, col: 27, offset: 5624},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 177, col: 27, offset: 5624},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 177, col: 27, offset: 5624},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 177, col: 32, offset: 5629},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 38, offset: 5635},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 177, col: 61, offset: 5658},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 177, col: 65, offset: 5662},
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 65, offset: 5662},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 69, offset: 5666},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 5734},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 179, col: 5, offset: 5734},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 5, offset: 5734},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 9, offset: 5738},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 15, offset: 5744},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 38, offset: 5767},
									val:        "!:",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 179, col: 43, offset: 5772},
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 43, offset: 5772},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 47, offset: 5776},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 183, col: 1, offset: 5843},
			expr: &actionExpr{
				pos: position{line: 183, col: 34, offset: 5876},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 183, col: 34, offset: 5876},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 183, col: 34, offset: 5876},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 183, col: 38, offset: 5880},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 44, offset: 5886},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 183, col: 67, offset: 5909},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 190, col: 1, offset: 6097},
			expr: &actionExpr{
				pos: position{line: 190, col: 22, offset: 6118},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 190, col: 22, offset: 6118},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 190, col: 28, offset: 6124},
						expr: &ruleRefExpr{
							pos:  position{line: 190, col: 29, offset: 6125},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 194, col: 1, offset: 6215},
			expr: &actionExpr{
				pos: position{line: 194, col: 21, offset: 6235},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 194, col: 21, offset: 6235},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 194, col: 21, offset: 6235},
							expr: &choiceExpr{
								pos: position{line: 194, col: 23, offset: 6237},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 194, col: 23, offset: 6237},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 29, offset: 6243},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 35, offset: 6249},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 5, offset: 6325},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 195, col: 11, offset: 6331},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 195, col: 11, offset: 6331},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 196, col: 9, offset: 6352},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 9, offset: 6376},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6399},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6427},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6455},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6482},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6509},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6546},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6574},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttributePrefixMatch",
			pos:  position{line: 208, col: 1, offset: 6677},
			expr: &choiceExpr{
				pos: position{line: 208, col: 32, offset: 6708},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 208, col: 32, offset: 6708},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 38, offset: 6714},
						val:        ".",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 44, offset: 6720},
						val:        "#",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 211, col: 1, offset: 6805},
			expr: &choiceExpr{
				pos: position{line: 211, col: 24, offset: 6828},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 24, offset: 6828},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 42, offset: 6846},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 213, col: 1, offset: 6863},
			expr: &choiceExpr{
				pos: position{line: 213, col: 14, offset: 6876},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 14, offset: 6876},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 213, col: 14, offset: 6876},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 14, offset: 6876},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 19, offset: 6881},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 23, offset: 6885},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 27, offset: 6889},
									val:        "]]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 213, col: 32, offset: 6894},
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 32, offset: 6894},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 36, offset: 6898},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 6951},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 215, col: 5, offset: 6951},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 215, col: 5, offset: 6951},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 215, col: 10, offset: 6956},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 14, offset: 6960},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 18, offset: 6964},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 215, col: 23, offset: 6969},
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 23, offset: 6969},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 215, col: 27, offset: 6973},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 219, col: 1, offset: 7025},
			expr: &actionExpr{
				pos: position{line: 219, col: 20, offset: 7044},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 219, col: 20, offset: 7044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 20, offset: 7044},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 219, col: 25, offset: 7049},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 29, offset: 7053},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 33, offset: 7057},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 219, col: 38, offset: 7062},
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 38, offset: 7062},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 225, col: 1, offset: 7336},
			expr: &actionExpr{
				pos: position{line: 225, col: 17, offset: 7352},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 225, col: 17, offset: 7352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 17, offset: 7352},
							val:        ".",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 225, col: 21, offset: 7356},
							expr: &litMatcher{
								pos:        position{line: 225, col: 22, offset: 7357},
								val:        ".",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 225, col: 26, offset: 7361},
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 27, offset: 7362},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 225, col: 30, offset: 7365},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 225, col: 37, offset: 7372},
								run: (*parser).callonElementTitle9,
								expr: &oneOrMoreExpr{
									pos: position{line: 225, col: 37, offset: 7372},
									expr: &choiceExpr{
										pos: position{line: 225, col: 38, offset: 7373},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 225, col: 38, offset: 7373},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 225, col: 50, offset: 7385},
												name: "Spaces",
											},
											&actionExpr{
												pos: position{line: 225, col: 59, offset: 7394},
												run: (*parser).callonElementTitle14,
												expr: &seqExpr{
													pos: position{line: 225, col: 60, offset: 7395},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 225, col: 60, offset: 7395},
															expr: &ruleRefExpr{
																pos:  position{line: 225, col: 61, offset: 7396},
																name: "NEWLINE",
															},
														},
														&anyMatcher{
															line: 225, col: 70, offset: 7405,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 229, col: 4, offset: 7481},
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 4, offset: 7481},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 229, col: 8, offset: 7485},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 235, col: 1, offset: 7637},
			expr: &actionExpr{
				pos: position{line: 235, col: 16, offset: 7652},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 235, col: 16, offset: 7652},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 235, col: 16, offset: 7652},
							val:        "[.",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 235, col: 21, offset: 7657},
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 22, offset: 7658},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 235, col: 25, offset: 7661},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 235, col: 31, offset: 7667},
								run: (*parser).callonElementRole7,
								expr: &oneOrMoreExpr{
									pos: position{line: 235, col: 31, offset: 7667},
									expr: &choiceExpr{
										pos: position{line: 235, col: 32, offset: 7668},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 235, col: 32, offset: 7668},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 235, col: 44, offset: 7680},
												name: "Spaces",
											},
											&actionExpr{
												pos: position{line: 235, col: 53, offset: 7689},
												run: (*parser).callonElementRole12,
												expr: &seqExpr{
													pos: position{line: 235, col: 54, offset: 7690},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 235, col: 54, offset: 7690},
															expr: &ruleRefExpr{
																pos:  position{line: 235, col: 55, offset: 7691},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 235, col: 63, offset: 7699},
															expr: &litMatcher{
																pos:        position{line: 235, col: 64, offset: 7700},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 235, col: 69, offset: 7705,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 239, col: 4, offset: 7781},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 8, offset: 7785},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 8, offset: 7785},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 12, offset: 7789},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 243, col: 1, offset: 7845},
			expr: &actionExpr{
				pos: position{line: 243, col: 21, offset: 7865},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 243, col: 21, offset: 7865},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 21, offset: 7865},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 243, col: 33, offset: 7877},
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 33, offset: 7877},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 243, col: 37, offset: 7881},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 248, col: 1, offset: 8013},
			expr: &actionExpr{
				pos: position{line: 248, col: 30, offset: 8042},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 248, col: 30, offset: 8042},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 30, offset: 8042},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 248, col: 34, offset: 8046},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 37, offset: 8049},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 248, col: 53, offset: 8065},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 248, col: 57, offset: 8069},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 57, offset: 8069},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 61, offset: 8073},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 253, col: 1, offset: 8228},
			expr: &choiceExpr{
				pos: position{line: 253, col: 21, offset: 8248},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 253, col: 21, offset: 8248},
						run: (*parser).callonSourceAttributes2,
						expr: &seqExpr{
							pos: position{line: 253, col: 21, offset: 8248},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 253, col: 21, offset: 8248},
									val:        "[source]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 253, col: 32, offset: 8259},
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 32, offset: 8259},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 36, offset: 8263},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 255, col: 5, offset: 8314},
						run: (*parser).callonSourceAttributes8,
						expr: &seqExpr{
							pos: position{line: 255, col: 5, offset: 8314},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 255, col: 5, offset: 8314},
									val:        "[source,",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 255, col: 16, offset: 8325},
									label: "language",
									expr: &actionExpr{
										pos: position{line: 255, col: 26, offset: 8335},
										run: (*parser).callonSourceAttributes12,
										expr: &oneOrMoreExpr{
											pos: position{line: 255, col: 26, offset: 8335},
											expr: &choiceExpr{
												pos: position{line: 255, col: 27, offset: 8336},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 255, col: 27, offset: 8336},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 255, col: 39, offset: 8348},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 255, col: 48, offset: 8357},
														run: (*parser).callonSourceAttributes17,
														expr: &seqExpr{
															pos: position{line: 255, col: 49, offset: 8358},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 255, col: 49, offset: 8358},
																	expr: &ruleRefExpr{
																		pos:  position{line: 255, col: 50, offset: 8359},
																		name: "NEWLINE",
																	},
																},
																&notExpr{
																	pos: position{line: 255, col: 58, offset: 8367},
																	expr: &litMatcher{
																		pos:        position{line: 255, col: 59, offset: 8368},
																		val:        "]",
																		ignoreCase: false,
																	},
																},
																&anyMatcher{
																	line: 255, col: 64, offset: 8373,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 259, col: 7, offset: 8463},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 259, col: 11, offset: 8467},
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 11, offset: 8467},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 259, col: 15, offset: 8471},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 264, col: 1, offset: 8604},
			expr: &actionExpr{
				pos: position{line: 264, col: 19, offset: 8622},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 264, col: 19, offset: 8622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 264, col: 19, offset: 8622},
							val:        "[",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 264, col: 23, offset: 8626},
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 24, offset: 8627},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 27, offset: 8630},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 264, col: 38, offset: 8641},
								expr: &ruleRefExpr{
									pos:  position{line: 264, col: 39, offset: 8642},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 264, col: 59, offset: 8662},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 264, col: 63, offset: 8666},
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 63, offset: 8666},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 264, col: 67, offset: 8670},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 268, col: 1, offset: 8742},
			expr: &choiceExpr{
				pos: position{line: 268, col: 22, offset: 8763},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 268, col: 22, offset: 8763},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 50, offset: 8791},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 270, col: 1, offset: 8821},
			expr: &actionExpr{
				pos: position{line: 270, col: 30, offset: 8850},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 270, col: 30, offset: 8850},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 270, col: 30, offset: 8850},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 35, offset: 8855},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 49, offset: 8869},
							val:        "=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 270, col: 53, offset: 8873},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 60, offset: 8880},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 270, col: 76, offset: 8896},
							expr: &litMatcher{
								pos:        position{line: 270, col: 76, offset: 8896},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 81, offset: 8901},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 81, offset: 8901},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 274, col: 1, offset: 8984},
			expr: &actionExpr{
				pos: position{line: 274, col: 33, offset: 9016},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 274, col: 33, offset: 9016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 274, col: 33, offset: 9016},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 38, offset: 9021},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 274, col: 52, offset: 9035},
							expr: &litMatcher{
								pos:        position{line: 274, col: 52, offset: 9035},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 274, col: 57, offset: 9040},
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 57, offset: 9040},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 278, col: 1, offset: 9125},
			expr: &actionExpr{
				pos: position{line: 278, col: 17, offset: 9141},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 278, col: 17, offset: 9141},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 278, col: 17, offset: 9141},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 18, offset: 9142},
								name: "QuoteKind",
							},
						},
						&notExpr{
							pos: position{line: 278, col: 28, offset: 9152},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 29, offset: 9153},
								name: "VerseKind",
							},
						},
						&notExpr{
							pos: position{line: 278, col: 39, offset: 9163},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 40, offset: 9164},
								name: "LiteralKind",
							},
						},
						&labeledExpr{
							pos:   position{line: 278, col: 52, offset: 9176},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 278, col: 56, offset: 9180},
								expr: &choiceExpr{
									pos: position{line: 278, col: 57, offset: 9181},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 278, col: 57, offset: 9181},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 278, col: 69, offset: 9193},
											name: "Spaces",
										},
										&actionExpr{
											pos: position{line: 278, col: 78, offset: 9202},
											run: (*parser).callonAttributeKey14,
											expr: &seqExpr{
												pos: position{line: 278, col: 79, offset: 9203},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 278, col: 79, offset: 9203},
														expr: &litMatcher{
															pos:        position{line: 278, col: 80, offset: 9204},
															val:        "=",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 278, col: 84, offset: 9208},
														expr: &litMatcher{
															pos:        position{line: 278, col: 85, offset: 9209},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 278, col: 89, offset: 9213},
														expr: &litMatcher{
															pos:        position{line: 278, col: 90, offset: 9214},
															val:        "]",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 278, col: 95, offset: 9219,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 284, col: 1, offset: 9295},
			expr: &actionExpr{
				pos: position{line: 284, col: 19, offset: 9313},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 284, col: 19, offset: 9313},
					label: "value",
					expr: &zeroOrMoreExpr{
						pos: position{line: 284, col: 25, offset: 9319},
						expr: &choiceExpr{
							pos: position{line: 284, col: 26, offset: 9320},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 284, col: 26, offset: 9320},
									name: "Alphanums",
								},
								&ruleRefExpr{
									pos:  position{line: 284, col: 38, offset: 9332},
									name: "Spaces",
								},
								&actionExpr{
									pos: position{line: 284, col: 47, offset: 9341},
									run: (*parser).callonAttributeValue7,
									expr: &seqExpr{
										pos: position{line: 284, col: 48, offset: 9342},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 284, col: 48, offset: 9342},
												expr: &litMatcher{
													pos:        position{line: 284, col: 49, offset: 9343},
													val:        "=",
													ignoreCase: false,
												},
											},
											&notExpr{
												pos: position{line: 284, col: 53, offset: 9347},
												expr: &litMatcher{
													pos:        position{line: 284, col: 54, offset: 9348},
													val:        ",",
													ignoreCase: false,
												},
											},
											&notExpr{
												pos: position{line: 284, col: 58, offset: 9352},
												expr: &litMatcher{
													pos:        position{line: 284, col: 59, offset: 9353},
													val:        "]",
													ignoreCase: false,
												},
											},
											&anyMatcher{
												line: 284, col: 64, offset: 9358,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 290, col: 1, offset: 9433},
			expr: &actionExpr{
				pos: position{line: 290, col: 21, offset: 9453},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 290, col: 21, offset: 9453},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 290, col: 21, offset: 9453},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 36, offset: 9468},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 36, offset: 9468},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 40, offset: 9472},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 294, col: 1, offset: 9545},
			expr: &choiceExpr{
				pos: position{line: 294, col: 20, offset: 9564},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 294, col: 20, offset: 9564},
						run: (*parser).callonQuoteAttributes2,
						expr: &seqExpr{
							pos: position{line: 294, col: 20, offset: 9564},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 294, col: 20, offset: 9564},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 294, col: 24, offset: 9568},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 30, offset: 9574},
										name: "QuoteKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 294, col: 41, offset: 9585},
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 41, offset: 9585},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 294, col: 45, offset: 9589},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 294, col: 49, offset: 9593},
									label: "author",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 57, offset: 9601},
										name: "QuoteAuthor",
									},
								},
								&litMatcher{
									pos:        position{line: 294, col: 70, offset: 9614},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 294, col: 74, offset: 9618},
									label: "title",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 81, offset: 9625},
										name: "QuoteTitle",
									},
								},
								&litMatcher{
									pos:        position{line: 294, col: 93, offset: 9637},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 294, col: 97, offset: 9641},
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 97, offset: 9641},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 294, col: 101, offset: 9645},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 298, col: 1, offset: 9772},
						run: (*parser).callonQuoteAttributes19,
						expr: &seqExpr{
							pos: position{line: 298, col: 1, offset: 9772},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 298, col: 1, offset: 9772},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 298, col: 5, offset: 9776},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 11, offset: 9782},
										name: "QuoteKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 298, col: 22, offset: 9793},
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 22, offset: 9793},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 298, col: 26, offset: 9797},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 298, col: 30, offset: 9801},
									label: "author",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 38, offset: 9809},
										name: "QuoteAuthor",
									},
								},
								&litMatcher{
									pos:        position{line: 298, col: 51, offset: 9822},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 298, col: 55, offset: 9826},
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 55, offset: 9826},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 59, offset: 9830},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 302, col: 1, offset: 9945},
						run: (*parser).callonQuoteAttributes33,
						expr: &seqExpr{
							pos: position{line: 302, col: 1, offset: 9945},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 302, col: 1, offset: 9945},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 302, col: 5, offset: 9949},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 11, offset: 9955},
										name: "QuoteKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 302, col: 22, offset: 9966},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 22, offset: 9966},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 302, col: 26, offset: 9970},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 302, col: 30, offset: 9974},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 30, offset: 9974},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 302, col: 34, offset: 9978},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteKind",
			pos:  position{line: 306, col: 1, offset: 10046},
			expr: &actionExpr{
				pos: position{line: 306, col: 14, offset: 10059},
				run: (*parser).callonQuoteKind1,
				expr: &litMatcher{
					pos:        position{line: 306, col: 14, offset: 10059},
					val:        "quote",
					ignoreCase: false,
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 310, col: 1, offset: 10103},
			expr: &choiceExpr{
				pos: position{line: 312, col: 5, offset: 10162},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 10162},
						run: (*parser).callonVerseAttributes2,
						expr: &seqExpr{
							pos: position{line: 312, col: 5, offset: 10162},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 312, col: 5, offset: 10162},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 312, col: 9, offset: 10166},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 15, offset: 10172},
										name: "VerseKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 312, col: 26, offset: 10183},
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 26, offset: 10183},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 312, col: 30, offset: 10187},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 312, col: 34, offset: 10191},
									label: "author",
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 42, offset: 10199},
										name: "QuoteAuthor",
									},
								},
								&litMatcher{
									pos:        position{line: 312, col: 55, offset: 10212},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 312, col: 59, offset: 10216},
									label: "title",
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 66, offset: 10223},
										name: "QuoteTitle",
									},
								},
								&litMatcher{
									pos:        position{line: 312, col: 78, offset: 10235},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 312, col: 82, offset: 10239},
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 82, offset: 10239},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 312, col: 86, offset: 10243},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 316, col: 5, offset: 10388},
						run: (*parser).callonVerseAttributes19,
						expr: &seqExpr{
							pos: position{line: 316, col: 5, offset: 10388},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 316, col: 5, offset: 10388},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 316, col: 9, offset: 10392},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 316, col: 15, offset: 10398},
										name: "VerseKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 316, col: 26, offset: 10409},
									expr: &ruleRefExpr{
										pos:  position{line: 316, col: 26, offset: 10409},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 316, col: 30, offset: 10413},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 316, col: 34, offset: 10417},
									label: "author",
									expr: &ruleRefExpr{
										pos:  position{line: 316, col: 42, offset: 10425},
										name: "QuoteAuthor",
									},
								},
								&litMatcher{
									pos:        position{line: 316, col: 55, offset: 10438},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 316, col: 59, offset: 10442},
									expr: &ruleRefExpr{
										pos:  position{line: 316, col: 59, offset: 10442},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 316, col: 63, offset: 10446},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 320, col: 5, offset: 10578},
						run: (*parser).callonVerseAttributes33,
						expr: &seqExpr{
							pos: position{line: 320, col: 5, offset: 10578},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 320, col: 5, offset: 10578},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 320, col: 9, offset: 10582},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 320, col: 15, offset: 10588},
										name: "VerseKind",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 320, col: 26, offset: 10599},
									expr: &ruleRefExpr{
										pos:  position{line: 320, col: 26, offset: 10599},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 320, col: 30, offset: 10603},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 320, col: 34, offset: 10607},
									expr: &ruleRefExpr{
										pos:  position{line: 320, col: 34, offset: 10607},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 320, col: 38, offset: 10611},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseKind",
			pos:  position{line: 324, col: 1, offset: 10687},
			expr: &actionExpr{
				pos: position{line: 324, col: 14, offset: 10700},
				run: (*parser).callonVerseKind1,
				expr: &litMatcher{
					pos:        position{line: 324, col: 14, offset: 10700},
					val:        "verse",
					ignoreCase: false,
				},
			},
		},
		{
			name: "QuoteAuthor",
			pos:  position{line: 328, col: 1, offset: 10744},
			expr: &actionExpr{
				pos: position{line: 328, col: 16, offset: 10759},
				run: (*parser).callonQuoteAuthor1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 328, col: 16, offset: 10759},
					expr: &choiceExpr{
						pos: position{line: 328, col: 17, offset: 10760},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 328, col: 17, offset: 10760},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 328, col: 29, offset: 10772},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 328, col: 38, offset: 10781},
								run: (*parser).callonQuoteAuthor6,
								expr: &seqExpr{
									pos: position{line: 328, col: 39, offset: 10782},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 328, col: 39, offset: 10782},
											expr: &litMatcher{
												pos:        position{line: 328, col: 40, offset: 10783},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 328, col: 44, offset: 10787},
											expr: &litMatcher{
												pos:        position{line: 328, col: 45, offset: 10788},
												val:        "]",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 328, col: 49, offset: 10792},
											expr: &ruleRefExpr{
												pos:  position{line: 328, col: 50, offset: 10793},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 328, col: 54, offset: 10797,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteTitle",
			pos:  position{line: 334, col: 1, offset: 10872},
			expr: &actionExpr{
				pos: position{line: 334, col: 15, offset: 10886},
				run: (*parser).callonQuoteTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 334, col: 15, offset: 10886},
					expr: &choiceExpr{
						pos: position{line: 334, col: 16, offset: 10887},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 334, col: 16, offset: 10887},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 334, col: 28, offset: 10899},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 334, col: 38, offset: 10909},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 334, col: 38, offset: 10909},
										expr: &litMatcher{
											pos:        position{line: 334, col: 39, offset: 10910},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 334, col: 43, offset: 10914},
										expr: &litMatcher{
											pos:        position{line: 334, col: 44, offset: 10915},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 334, col: 48, offset: 10919},
										expr: &ruleRefExpr{
											pos:  position{line: 334, col: 49, offset: 10920},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 334, col: 53, offset: 10924,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 338, col: 1, offset: 10965},
			expr: &actionExpr{
				pos: position{line: 338, col: 21, offset: 10985},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 338, col: 21, offset: 10985},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 338, col: 21, offset: 10985},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 338, col: 25, offset: 10989},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 338, col: 31, offset: 10995},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 32, offset: 10996},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 51, offset: 11015},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 345, col: 1, offset: 11189},
			expr: &actionExpr{
				pos: position{line: 345, col: 12, offset: 11200},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 345, col: 12, offset: 11200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 345, col: 12, offset: 11200},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 23, offset: 11211},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 24, offset: 11212},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 346, col: 5, offset: 11236},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 346, col: 12, offset: 11243},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 346, col: 12, offset: 11243},
									expr: &litMatcher{
										pos:        position{line: 346, col: 13, offset: 11244},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 350, col: 5, offset: 11335},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 354, col: 5, offset: 11487},
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 5, offset: 11487},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 9, offset: 11491},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 16, offset: 11498},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 31, offset: 11513},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 35, offset: 11517},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 35, offset: 11517},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 354, col: 53, offset: 11535},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 359, col: 1, offset: 11649},
			expr: &actionExpr{
				pos: position{line: 359, col: 18, offset: 11666},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 359, col: 18, offset: 11666},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 359, col: 27, offset: 11675},
						expr: &seqExpr{
							pos: position{line: 359, col: 28, offset: 11676},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 359, col: 28, offset: 11676},
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 29, offset: 11677},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 359, col: 37, offset: 11685},
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 38, offset: 11686},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 54, offset: 11702},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 363, col: 1, offset: 11823},
			expr: &actionExpr{
				pos: position{line: 363, col: 17, offset: 11839},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 363, col: 17, offset: 11839},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 363, col: 26, offset: 11848},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 363, col: 26, offset: 11848},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 364, col: 11, offset: 11866},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 365, col: 11, offset: 11891},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 366, col: 11, offset: 11913},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 367, col: 11, offset: 11936},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 11, offset: 11951},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 369, col: 11, offset: 11976},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 370, col: 11, offset: 11996},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 371, col: 11, offset: 12017},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 372, col: 11, offset: 12057},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 373, col: 11, offset: 12077},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 380, col: 1, offset: 12230},
			expr: &seqExpr{
				pos: position{line: 380, col: 25, offset: 12254},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 380, col: 25, offset: 12254},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 35, offset: 12264},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 385, col: 1, offset: 12375},
			expr: &actionExpr{
				pos: position{line: 385, col: 19, offset: 12393},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 385, col: 19, offset: 12393},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 385, col: 19, offset: 12393},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 25, offset: 12399},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 40, offset: 12414},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 385, col: 45, offset: 12419},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 52, offset: 12426},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 385, col: 68, offset: 12442},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 75, offset: 12449},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 389, col: 1, offset: 12590},
			expr: &actionExpr{
				pos: position{line: 389, col: 20, offset: 12609},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 389, col: 20, offset: 12609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 389, col: 20, offset: 12609},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 26, offset: 12615},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 389, col: 41, offset: 12630},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 389, col: 45, offset: 12634},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 52, offset: 12641},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 389, col: 68, offset: 12657},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 75, offset: 12664},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 393, col: 1, offset: 12806},
			expr: &actionExpr{
				pos: position{line: 393, col: 18, offset: 12823},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 393, col: 18, offset: 12823},
					expr: &choiceExpr{
						pos: position{line: 393, col: 19, offset: 12824},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 393, col: 19, offset: 12824},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 393, col: 33, offset: 12838},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 393, col: 39, offset: 12844},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 397, col: 1, offset: 12886},
			expr: &actionExpr{
				pos: position{line: 397, col: 19, offset: 12904},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 397, col: 19, offset: 12904},
					expr: &choiceExpr{
						pos: position{line: 397, col: 20, offset: 12905},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 397, col: 20, offset: 12905},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 397, col: 33, offset: 12918},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 397, col: 33, offset: 12918},
										expr: &litMatcher{
											pos:        position{line: 397, col: 34, offset: 12919},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 397, col: 38, offset: 12923},
										expr: &litMatcher{
											pos:        position{line: 397, col: 39, offset: 12924},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 397, col: 43, offset: 12928},
										expr: &ruleRefExpr{
											pos:  position{line: 397, col: 44, offset: 12929},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 397, col: 48, offset: 12933,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 401, col: 1, offset: 12974},
			expr: &actionExpr{
				pos: position{line: 401, col: 24, offset: 12997},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 401, col: 24, offset: 12997},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 24, offset: 12997},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 401, col: 28, offset: 13001},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 401, col: 34, offset: 13007},
								expr: &ruleRefExpr{
									pos:  position{line: 401, col: 35, offset: 13008},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 401, col: 54, offset: 13027},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 408, col: 1, offset: 13207},
			expr: &actionExpr{
				pos: position{line: 408, col: 18, offset: 13224},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 408, col: 18, offset: 13224},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 408, col: 18, offset: 13224},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 408, col: 24, offset: 13230},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 408, col: 24, offset: 13230},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 408, col: 24, offset: 13230},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 408, col: 36, offset: 13242},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 408, col: 42, offset: 13248},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 408, col: 56, offset: 13262},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 408, col: 74, offset: 13280},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 410, col: 8, offset: 13434},
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 8, offset: 13434},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 12, offset: 13438},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 414, col: 1, offset: 13491},
			expr: &actionExpr{
				pos: position{line: 414, col: 26, offset: 13516},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 414, col: 26, offset: 13516},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 414, col: 26, offset: 13516},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 414, col: 30, offset: 13520},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 414, col: 36, offset: 13526},
								expr: &choiceExpr{
									pos: position{line: 414, col: 37, offset: 13527},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 414, col: 37, offset: 13527},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 414, col: 59, offset: 13549},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 414, col: 78, offset: 13568},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 418, col: 1, offset: 13638},
			expr: &actionExpr{
				pos: position{line: 418, col: 24, offset: 13661},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 418, col: 24, offset: 13661},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 418, col: 24, offset: 13661},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 418, col: 33, offset: 13670},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 40, offset: 13677},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 418, col: 66, offset: 13703},
							expr: &litMatcher{
								pos:        position{line: 418, col: 66, offset: 13703},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 423, col: 1, offset: 13799},
			expr: &actionExpr{
				pos: position{line: 423, col: 29, offset: 13827},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 423, col: 29, offset: 13827},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 29, offset: 13827},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 423, col: 36, offset: 13834},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 423, col: 36, offset: 13834},
										name: "MultipleRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 424, col: 11, offset: 13939},
										name: "MultipleQuotedRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 425, col: 11, offset: 13971},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 426, col: 11, offset: 13997},
										name: "MultilineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 427, col: 11, offset: 14029},
										name: "SinglelineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 428, col: 11, offset: 14061},
										name: "SinglelineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 429, col: 11, offset: 14088},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 429, col: 31, offset: 14108},
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 31, offset: 14108},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 429, col: 36, offset: 14113},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 429, col: 36, offset: 14113},
									expr: &litMatcher{
										pos:        position{line: 429, col: 37, offset: 14114},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 429, col: 43, offset: 14120},
									expr: &litMatcher{
										pos:        position{line: 429, col: 44, offset: 14121},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleRanges",
			pos:  position{line: 433, col: 1, offset: 14153},
			expr: &actionExpr{
				pos: position{line: 433, col: 19, offset: 14171},
				run: (*parser).callonMultipleRanges1,
				expr: &seqExpr{
					pos: position{line: 433, col: 19, offset: 14171},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 433, col: 19, offset: 14171},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 433, col: 26, offset: 14178},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 433, col: 26, offset: 14178},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 433, col: 43, offset: 14195},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 434, col: 5, offset: 14217},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 434, col: 12, offset: 14224},
								expr: &actionExpr{
									pos: position{line: 434, col: 13, offset: 14225},
									run: (*parser).callonMultipleRanges9,
									expr: &seqExpr{
										pos: position{line: 434, col: 13, offset: 14225},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 434, col: 13, offset: 14225},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 434, col: 17, offset: 14229},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 434, col: 24, offset: 14236},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 434, col: 24, offset: 14236},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 434, col: 41, offset: 14253},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedRanges",
			pos:  position{line: 440, col: 1, offset: 14391},
			expr: &actionExpr{
				pos: position{line: 440, col: 25, offset: 14415},
				run: (*parser).callonMultipleQuotedRanges1,
				expr: &seqExpr{
					pos: position{line: 440, col: 25, offset: 14415},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 25, offset: 14415},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 440, col: 30, offset: 14420},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 440, col: 37, offset: 14427},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 440, col: 37, offset: 14427},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 440, col: 54, offset: 14444},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 5, offset: 14466},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 441, col: 12, offset: 14473},
								expr: &actionExpr{
									pos: position{line: 441, col: 13, offset: 14474},
									run: (*parser).callonMultipleQuotedRanges10,
									expr: &seqExpr{
										pos: position{line: 441, col: 13, offset: 14474},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 441, col: 13, offset: 14474},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 441, col: 17, offset: 14478},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 441, col: 24, offset: 14485},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 441, col: 24, offset: 14485},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 441, col: 41, offset: 14502},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 443, col: 9, offset: 14555},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultilineRange",
			pos:  position{line: 447, col: 1, offset: 14645},
			expr: &actionExpr{
				pos: position{line: 447, col: 19, offset: 14663},
				run: (*parser).callonMultilineRange1,
				expr: &seqExpr{
					pos: position{line: 447, col: 19, offset: 14663},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 447, col: 19, offset: 14663},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 447, col: 26, offset: 14670},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 447, col: 34, offset: 14678},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 447, col: 39, offset: 14683},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 447, col: 44, offset: 14688},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultilineQuotedRange",
			pos:  position{line: 451, col: 1, offset: 14781},
			expr: &actionExpr{
				pos: position{line: 451, col: 25, offset: 14805},
				run: (*parser).callonMultilineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 451, col: 25, offset: 14805},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 451, col: 25, offset: 14805},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 451, col: 30, offset: 14810},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 37, offset: 14817},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 451, col: 45, offset: 14825},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 451, col: 50, offset: 14830},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 55, offset: 14835},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 451, col: 63, offset: 14843},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SinglelineRange",
			pos:  position{line: 455, col: 1, offset: 14933},
			expr: &actionExpr{
				pos: position{line: 455, col: 20, offset: 14952},
				run: (*parser).callonSinglelineRange1,
				expr: &labeledExpr{
					pos:   position{line: 455, col: 20, offset: 14952},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 455, col: 32, offset: 14964},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SinglelineQuotedRange",
			pos:  position{line: 459, col: 1, offset: 15047},
			expr: &actionExpr{
				pos: position{line: 459, col: 26, offset: 15072},
				run: (*parser).callonSinglelineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 459, col: 26, offset: 15072},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 26, offset: 15072},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 459, col: 31, offset: 15077},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 43, offset: 15089},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 459, col: 51, offset: 15097},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 463, col: 1, offset: 15177},
			expr: &actionExpr{
				pos: position{line: 463, col: 23, offset: 15199},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 463, col: 23, offset: 15199},
					expr: &seqExpr{
						pos: position{line: 463, col: 24, offset: 15200},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 463, col: 24, offset: 15200},
								expr: &litMatcher{
									pos:        position{line: 463, col: 25, offset: 15201},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 463, col: 29, offset: 15205},
								expr: &litMatcher{
									pos:        position{line: 463, col: 30, offset: 15206},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 463, col: 34, offset: 15210},
								expr: &ruleRefExpr{
									pos:  position{line: 463, col: 35, offset: 15211},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 463, col: 38, offset: 15214,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 470, col: 1, offset: 15355},
			expr: &oneOrMoreExpr{
				pos: position{line: 470, col: 14, offset: 15368},
				expr: &ruleRefExpr{
					pos:  position{line: 470, col: 14, offset: 15368},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 472, col: 1, offset: 15379},
			expr: &choiceExpr{
				pos: position{line: 472, col: 13, offset: 15391},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 472, col: 13, offset: 15391},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 31, offset: 15409},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 51, offset: 15429},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 69, offset: 15447},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 474, col: 1, offset: 15473},
			expr: &choiceExpr{
				pos: position{line: 474, col: 18, offset: 15490},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 474, col: 18, offset: 15490},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 18, offset: 15490},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 27, offset: 15499},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 476, col: 9, offset: 15556},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 476, col: 9, offset: 15556},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 476, col: 15, offset: 15562},
								expr: &ruleRefExpr{
									pos:  position{line: 476, col: 16, offset: 15563},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 480, col: 1, offset: 15655},
			expr: &actionExpr{
				pos: position{line: 480, col: 22, offset: 15676},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 480, col: 22, offset: 15676},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 480, col: 22, offset: 15676},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 23, offset: 15677},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 481, col: 5, offset: 15685},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 15686},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 5, offset: 15701},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 6, offset: 15702},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 15724},
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 6, offset: 15725},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 484, col: 5, offset: 15751},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 6, offset: 15752},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 485, col: 5, offset: 15780},
							expr: &seqExpr{
								pos: position{line: 485, col: 7, offset: 15782},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 485, col: 7, offset: 15782},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 485, col: 27, offset: 15802},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 15833},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 15834},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 487, col: 5, offset: 15859},
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 6, offset: 15860},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 488, col: 5, offset: 15881},
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 6, offset: 15882},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 5, offset: 15901},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 490, col: 9, offset: 15916},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 490, col: 9, offset: 15916},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 490, col: 9, offset: 15916},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 490, col: 18, offset: 15925},
												expr: &ruleRefExpr{
													pos:  position{line: 490, col: 19, offset: 15926},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 490, col: 35, offset: 15942},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 490, col: 45, offset: 15952},
												expr: &ruleRefExpr{
													pos:  position{line: 490, col: 46, offset: 15953},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 12, offset: 16105},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 496, col: 1, offset: 16152},
			expr: &seqExpr{
				pos: position{line: 496, col: 25, offset: 16176},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 496, col: 25, offset: 16176},
						val:        "+",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 496, col: 29, offset: 16180},
						expr: &ruleRefExpr{
							pos:  position{line: 496, col: 29, offset: 16180},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 496, col: 33, offset: 16184},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 498, col: 1, offset: 16190},
			expr: &actionExpr{
				pos: position{line: 498, col: 29, offset: 16218},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 498, col: 29, offset: 16218},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 498, col: 29, offset: 16218},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 498, col: 41, offset: 16230},
								expr: &ruleRefExpr{
									pos:  position{line: 498, col: 41, offset: 16230},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 53, offset: 16242},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 74, offset: 16263},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 82, offset: 16271},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 505, col: 1, offset: 16513},
			expr: &actionExpr{
				pos: position{line: 505, col: 20, offset: 16532},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 505, col: 20, offset: 16532},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 505, col: 20, offset: 16532},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 31, offset: 16543},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 32, offset: 16544},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 52, offset: 16564},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 60, offset: 16572},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 83, offset: 16595},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 92, offset: 16604},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 509, col: 1, offset: 16744},
			expr: &actionExpr{
				pos: position{line: 510, col: 5, offset: 16774},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 510, col: 5, offset: 16774},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 510, col: 5, offset: 16774},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 5, offset: 16774},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 9, offset: 16778},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 512, col: 9, offset: 16834},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 512, col: 9, offset: 16834},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 512, col: 9, offset: 16834},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 512, col: 9, offset: 16834},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 512, col: 16, offset: 16841},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 512, col: 16, offset: 16841},
															expr: &litMatcher{
																pos:        position{line: 512, col: 17, offset: 16842},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 515, col: 12, offset: 16939},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 522, col: 11, offset: 17256},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 522, col: 11, offset: 17256},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 522, col: 11, offset: 17256},
													expr: &charClassMatcher{
														pos:        position{line: 522, col: 12, offset: 17257},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 522, col: 20, offset: 17265},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 524, col: 13, offset: 17376},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 524, col: 13, offset: 17376},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 524, col: 14, offset: 17377},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 524, col: 21, offset: 17384},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 526, col: 13, offset: 17498},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 526, col: 13, offset: 17498},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 526, col: 14, offset: 17499},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 526, col: 21, offset: 17506},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 528, col: 13, offset: 17620},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 528, col: 13, offset: 17620},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 528, col: 13, offset: 17620},
													expr: &charClassMatcher{
														pos:        position{line: 528, col: 14, offset: 17621},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 528, col: 22, offset: 17629},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 530, col: 13, offset: 17743},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 530, col: 13, offset: 17743},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 530, col: 13, offset: 17743},
													expr: &charClassMatcher{
														pos:        position{line: 530, col: 14, offset: 17744},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 530, col: 22, offset: 17752},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 532, col: 12, offset: 17865},
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 12, offset: 17865},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 536, col: 1, offset: 17897},
			expr: &actionExpr{
				pos: position{line: 536, col: 27, offset: 17923},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 536, col: 27, offset: 17923},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 536, col: 37, offset: 17933},
						expr: &ruleRefExpr{
							pos:  position{line: 536, col: 37, offset: 17933},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 543, col: 1, offset: 18133},
			expr: &actionExpr{
				pos: position{line: 543, col: 22, offset: 18154},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 543, col: 22, offset: 18154},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 543, col: 22, offset: 18154},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 543, col: 33, offset: 18165},
								expr: &ruleRefExpr{
									pos:  position{line: 543, col: 34, offset: 18166},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 54, offset: 18186},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 62, offset: 18194},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 87, offset: 18219},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 543, col: 98, offset: 18230},
								expr: &ruleRefExpr{
									pos:  position{line: 543, col: 99, offset: 18231},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 129, offset: 18261},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 138, offset: 18270},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 547, col: 1, offset: 18428},
			expr: &actionExpr{
				pos: position{line: 548, col: 5, offset: 18460},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 548, col: 5, offset: 18460},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 548, col: 5, offset: 18460},
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 5, offset: 18460},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 9, offset: 18464},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 549, col: 9, offset: 18481},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 549, col: 9, offset: 18481},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &litMatcher{
											pos:        position{line: 549, col: 9, offset: 18481},
											val:        "*****",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 551, col: 13, offset: 18641},
										run: (*parser).callonUnorderedListItemPrefix9,
										expr: &litMatcher{
											pos:        position{line: 551, col: 13, offset: 18641},
											val:        "****",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 553, col: 13, offset: 18801},
										run: (*parser).callonUnorderedListItemPrefix11,
										expr: &litMatcher{
											pos:        position{line: 553, col: 13, offset: 18801},
											val:        "***",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 555, col: 13, offset: 18961},
										run: (*parser).callonUnorderedListItemPrefix13,
										expr: &litMatcher{
											pos:        position{line: 555, col: 13, offset: 18961},
											val:        "**",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 557, col: 13, offset: 19118},
										run: (*parser).callonUnorderedListItemPrefix15,
										expr: &litMatcher{
											pos:        position{line: 557, col: 13, offset: 19118},
											val:        "*",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 559, col: 13, offset: 19273},
										run: (*parser).callonUnorderedListItemPrefix17,
										expr: &litMatcher{
											pos:        position{line: 559, col: 13, offset: 19273},
											val:        "-",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 561, col: 12, offset: 19420},
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 12, offset: 19420},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 565, col: 1, offset: 19453},
			expr: &actionExpr{
				pos: position{line: 565, col: 32, offset: 19484},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 565, col: 32, offset: 19484},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 565, col: 32, offset: 19484},
							expr: &litMatcher{
								pos:        position{line: 565, col: 33, offset: 19485},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 37, offset: 19489},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 566, col: 7, offset: 19503},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 566, col: 7, offset: 19503},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 566, col: 7, offset: 19503},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 567, col: 7, offset: 19548},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 567, col: 7, offset: 19548},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 568, col: 7, offset: 19591},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 568, col: 7, offset: 19591},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 569, col: 7, offset: 19633},
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 7, offset: 19633},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 573, col: 1, offset: 19672},
			expr: &actionExpr{
				pos: position{line: 573, col: 29, offset: 19700},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 573, col: 29, offset: 19700},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 573, col: 39, offset: 19710},
						expr: &ruleRefExpr{
							pos:  position{line: 573, col: 39, offset: 19710},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 580, col: 1, offset: 20026},
			expr: &actionExpr{
				pos: position{line: 580, col: 20, offset: 20045},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 580, col: 20, offset: 20045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 580, col: 20, offset: 20045},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 580, col: 31, offset: 20056},
								expr: &ruleRefExpr{
									pos:  position{line: 580, col: 32, offset: 20057},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 580, col: 52, offset: 20077},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 580, col: 58, offset: 20083},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 580, col: 79, offset: 20104},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 580, col: 90, offset: 20115},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 580, col: 116, offset: 20141},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 580, col: 128, offset: 20153},
								expr: &ruleRefExpr{
									pos:  position{line: 580, col: 129, offset: 20154},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 584, col: 1, offset: 20293},
			expr: &actionExpr{
				pos: position{line: 584, col: 24, offset: 20316},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 584, col: 24, offset: 20316},
					expr: &choiceExpr{
						pos: position{line: 584, col: 25, offset: 20317},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 584, col: 25, offset: 20317},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 584, col: 37, offset: 20329},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 584, col: 46, offset: 20338},
								run: (*parser).callonLabeledListItemTerm6,
								expr: &seqExpr{
									pos: position{line: 584, col: 47, offset: 20339},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 584, col: 47, offset: 20339},
											expr: &ruleRefExpr{
												pos:  position{line: 584, col: 48, offset: 20340},
												name: "NEWLINE",
											},
										},
										&notExpr{
											pos: position{line: 584, col: 56, offset: 20348},
											expr: &litMatcher{
												pos:        position{line: 584, col: 57, offset: 20349},
												val:        "::",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 584, col: 63, offset: 20355,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 591, col: 1, offset: 20508},
			expr: &actionExpr{
				pos: position{line: 592, col: 5, offset: 20541},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 592, col: 5, offset: 20541},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 592, col: 5, offset: 20541},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 592, col: 16, offset: 20552},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &choiceExpr{
									pos: position{line: 592, col: 17, offset: 20553},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 592, col: 17, offset: 20553},
											val:        "::::",
											ignoreCase: false,
										},
										&litMatcher{
											pos:        position{line: 592, col: 26, offset: 20562},
											val:        ":::",
											ignoreCase: false,
										},
										&litMatcher{
											pos:        position{line: 592, col: 34, offset: 20570},
											val:        "::",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 594, col: 9, offset: 20621},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 594, col: 9, offset: 20621},
									expr: &choiceExpr{
										pos: position{line: 594, col: 10, offset: 20622},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 594, col: 10, offset: 20622},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 594, col: 15, offset: 20627},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 594, col: 27, offset: 20639},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 598, col: 1, offset: 20679},
			expr: &actionExpr{
				pos: position{line: 598, col: 31, offset: 20709},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 598, col: 31, offset: 20709},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 598, col: 40, offset: 20718},
						expr: &ruleRefExpr{
							pos:  position{line: 598, col: 41, offset: 20719},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 605, col: 1, offset: 20910},
			expr: &choiceExpr{
				pos: position{line: 605, col: 19, offset: 20928},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 605, col: 19, offset: 20928},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 605, col: 19, offset: 20928},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 607, col: 9, offset: 20974},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 607, col: 9, offset: 20974},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 609, col: 9, offset: 21022},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 609, col: 9, offset: 21022},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 611, col: 9, offset: 21080},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 611, col: 9, offset: 21080},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 613, col: 9, offset: 21134},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 613, col: 9, offset: 21134},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 622, col: 1, offset: 21441},
			expr: &choiceExpr{
				pos: position{line: 624, col: 5, offset: 21488},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 624, col: 5, offset: 21488},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 624, col: 5, offset: 21488},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 624, col: 5, offset: 21488},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 624, col: 16, offset: 21499},
										expr: &ruleRefExpr{
											pos:  position{line: 624, col: 17, offset: 21500},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 624, col: 37, offset: 21520},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 624, col: 40, offset: 21523},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 624, col: 56, offset: 21539},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 624, col: 61, offset: 21544},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 624, col: 67, offset: 21550},
										expr: &ruleRefExpr{
											pos:  position{line: 624, col: 68, offset: 21551},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 628, col: 5, offset: 21743},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 628, col: 5, offset: 21743},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 628, col: 5, offset: 21743},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 628, col: 16, offset: 21754},
										expr: &ruleRefExpr{
											pos:  position{line: 628, col: 17, offset: 21755},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 628, col: 37, offset: 21775},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 628, col: 43, offset: 21781},
										expr: &ruleRefExpr{
											pos:  position{line: 628, col: 44, offset: 21782},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 632, col: 1, offset: 21875},
			expr: &actionExpr{
				pos: position{line: 632, col: 19, offset: 21893},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 632, col: 19, offset: 21893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 632, col: 19, offset: 21893},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 30, offset: 21904},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 632, col: 50, offset: 21924},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 632, col: 61, offset: 21935},
								expr: &ruleRefExpr{
									pos:  position{line: 632, col: 62, offset: 21936},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 636, col: 1, offset: 22042},
			expr: &actionExpr{
				pos: position{line: 637, col: 5, offset: 22069},
				run: (*parser).callonFirstParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 637, col: 5, offset: 22069},
					label: "elements",
					expr: &choiceExpr{
						pos: position{line: 637, col: 15, offset: 22079},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 637, col: 15, offset: 22079},
								run: (*parser).callonFirstParagraphLine4,
								expr: &labeledExpr{
									pos:   position{line: 637, col: 15, offset: 22079},
									label: "comment",
									expr: &ruleRefExpr{
										pos:  position{line: 637, col: 24, offset: 22088},
										name: "SingleLineComment",
									},
								},
							},
							&actionExpr{
								pos: position{line: 639, col: 9, offset: 22180},
								run: (*parser).callonFirstParagraphLine7,
								expr: &seqExpr{
									pos: position{line: 639, col: 9, offset: 22180},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 639, col: 9, offset: 22180},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 639, col: 18, offset: 22189},
												expr: &ruleRefExpr{
													pos:  position{line: 639, col: 19, offset: 22190},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 639, col: 35, offset: 22206},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 639, col: 45, offset: 22216},
												expr: &ruleRefExpr{
													pos:  position{line: 639, col: 46, offset: 22217},
													name: "LineBreak",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 639, col: 58, offset: 22229},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 645, col: 1, offset: 22365},
			expr: &actionExpr{
				pos: position{line: 645, col: 23, offset: 22387},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 645, col: 23, offset: 22387},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 645, col: 33, offset: 22397},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 649, col: 1, offset: 22443},
			expr: &choiceExpr{
				pos: position{line: 651, col: 5, offset: 22495},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 651, col: 5, offset: 22495},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 651, col: 5, offset: 22495},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 651, col: 5, offset: 22495},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 651, col: 16, offset: 22506},
										expr: &ruleRefExpr{
											pos:  position{line: 651, col: 17, offset: 22507},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 652, col: 5, offset: 22531},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 659, col: 5, offset: 22734},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 659, col: 8, offset: 22737},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 659, col: 24, offset: 22753},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 659, col: 29, offset: 22758},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 659, col: 35, offset: 22764},
										expr: &ruleRefExpr{
											pos:  position{line: 659, col: 36, offset: 22765},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 663, col: 5, offset: 22957},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 663, col: 5, offset: 22957},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 663, col: 5, offset: 22957},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 663, col: 16, offset: 22968},
										expr: &ruleRefExpr{
											pos:  position{line: 663, col: 17, offset: 22969},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 664, col: 5, offset: 22993},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 671, col: 5, offset: 23196},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 671, col: 11, offset: 23202},
										expr: &ruleRefExpr{
											pos:  position{line: 671, col: 12, offset: 23203},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 675, col: 1, offset: 23304},
			expr: &actionExpr{
				pos: position{line: 675, col: 19, offset: 23322},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 675, col: 19, offset: 23322},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 675, col: 19, offset: 23322},
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 20, offset: 23323},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 675, col: 24, offset: 23327},
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 25, offset: 23328},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 676, col: 5, offset: 23342},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 676, col: 15, offset: 23352},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 676, col: 15, offset: 23352},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 676, col: 15, offset: 23352},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 676, col: 24, offset: 23361},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 678, col: 9, offset: 23453},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 678, col: 9, offset: 23453},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 678, col: 9, offset: 23453},
													expr: &ruleRefExpr{
														pos:  position{line: 678, col: 10, offset: 23454},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 678, col: 25, offset: 23469},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 678, col: 34, offset: 23478},
														expr: &ruleRefExpr{
															pos:  position{line: 678, col: 35, offset: 23479},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 678, col: 51, offset: 23495},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 678, col: 61, offset: 23505},
														expr: &ruleRefExpr{
															pos:  position{line: 678, col: 62, offset: 23506},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 678, col: 74, offset: 23518},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 684, col: 1, offset: 23654},
			expr: &actionExpr{
				pos: position{line: 684, col: 18, offset: 23671},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 684, col: 18, offset: 23671},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 684, col: 18, offset: 23671},
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 19, offset: 23672},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 684, col: 23, offset: 23676},
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 24, offset: 23677},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 685, col: 5, offset: 23692},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 685, col: 14, offset: 23701},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 685, col: 14, offset: 23701},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 23722},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 23740},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 23763},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 23779},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 23802},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 691, col: 11, offset: 23828},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 23855},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 693, col: 11, offset: 23877},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 694, col: 11, offset: 23903},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 695, col: 11, offset: 23944},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 11, offset: 23971},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 703, col: 1, offset: 24231},
			expr: &actionExpr{
				pos: position{line: 703, col: 37, offset: 24267},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 703, col: 37, offset: 24267},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 703, col: 37, offset: 24267},
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 38, offset: 24268},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 703, col: 48, offset: 24278},
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 49, offset: 24279},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 703, col: 64, offset: 24294},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 703, col: 73, offset: 24303},
								expr: &ruleRefExpr{
									pos:  position{line: 703, col: 74, offset: 24304},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 703, col: 108, offset: 24338},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 703, col: 118, offset: 24348},
								expr: &ruleRefExpr{
									pos:  position{line: 703, col: 119, offset: 24349},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 703, col: 131, offset: 24361},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 707, col: 1, offset: 24452},
			expr: &actionExpr{
				pos: position{line: 707, col: 36, offset: 24487},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 707, col: 36, offset: 24487},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 707, col: 36, offset: 24487},
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 37, offset: 24488},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 707, col: 41, offset: 24492},
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 42, offset: 24493},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 708, col: 5, offset: 24508},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 708, col: 14, offset: 24517},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 708, col: 14, offset: 24517},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 709, col: 11, offset: 24535},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 710, col: 11, offset: 24558},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 711, col: 11, offset: 24574},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 712, col: 11, offset: 24597},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 713, col: 11, offset: 24618},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 714, col: 11, offset: 24640},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 715, col: 11, offset: 24666},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 716, col: 11, offset: 24692},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 721, col: 1, offset: 24826},
			expr: &actionExpr{
				pos: position{line: 721, col: 18, offset: 24843},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 721, col: 18, offset: 24843},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 721, col: 18, offset: 24843},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 721, col: 27, offset: 24852},
								expr: &choiceExpr{
									pos: position{line: 721, col: 28, offset: 24853},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 721, col: 28, offset: 24853},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 721, col: 40, offset: 24865},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 721, col: 56, offset: 24881},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 721, col: 76, offset: 24901},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 725, col: 1, offset: 24935},
			expr: &actionExpr{
				pos: position{line: 725, col: 22, offset: 24956},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 725, col: 22, offset: 24956},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 22, offset: 24956},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 725, col: 33, offset: 24967},
								expr: &ruleRefExpr{
									pos:  position{line: 725, col: 34, offset: 24968},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 54, offset: 24988},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 725, col: 60, offset: 24994},
								expr: &actionExpr{
									pos: position{line: 725, col: 61, offset: 24995},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 725, col: 61, offset: 24995},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 725, col: 61, offset: 24995},
												expr: &ruleRefExpr{
													pos:  position{line: 725, col: 62, offset: 24996},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 725, col: 66, offset: 25000},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 725, col: 72, offset: 25006},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 731, col: 1, offset: 25126},
			expr: &actionExpr{
				pos: position{line: 731, col: 26, offset: 25151},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 731, col: 26, offset: 25151},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 731, col: 26, offset: 25151},
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 27, offset: 25152},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 731, col: 42, offset: 25167},
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 43, offset: 25168},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 731, col: 53, offset: 25178},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 731, col: 62, offset: 25187},
								expr: &ruleRefExpr{
									pos:  position{line: 731, col: 63, offset: 25188},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 731, col: 94, offset: 25219},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 731, col: 104, offset: 25229},
								expr: &ruleRefExpr{
									pos:  position{line: 731, col: 105, offset: 25230},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 117, offset: 25242},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 735, col: 1, offset: 25333},
			expr: &actionExpr{
				pos: position{line: 735, col: 33, offset: 25365},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 735, col: 33, offset: 25365},
					expr: &seqExpr{
						pos: position{line: 735, col: 34, offset: 25366},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 735, col: 34, offset: 25366},
								expr: &ruleRefExpr{
									pos:  position{line: 735, col: 35, offset: 25367},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 735, col: 39, offset: 25371},
								expr: &ruleRefExpr{
									pos:  position{line: 735, col: 40, offset: 25372},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 735, col: 50, offset: 25382,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 742, col: 1, offset: 25606},
			expr: &actionExpr{
				pos: position{line: 742, col: 14, offset: 25619},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 742, col: 14, offset: 25619},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 742, col: 14, offset: 25619},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 742, col: 17, offset: 25622},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 742, col: 21, offset: 25626},
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 21, offset: 25626},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 742, col: 25, offset: 25630},
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 26, offset: 25631},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 749, col: 1, offset: 25915},
			expr: &actionExpr{
				pos: position{line: 749, col: 15, offset: 25929},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 749, col: 15, offset: 25929},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 749, col: 15, offset: 25929},
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 16, offset: 25930},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 749, col: 19, offset: 25933},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 749, col: 25, offset: 25939},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 749, col: 25, offset: 25939},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 15, offset: 25963},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 15, offset: 25989},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 15, offset: 26018},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 15, offset: 26047},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 15, offset: 26078},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 15, offset: 26109},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 15, offset: 26142},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 757, col: 15, offset: 26178},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 758, col: 15, offset: 26214},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 759, col: 15, offset: 26251},
										name: "SubScriptOrSuperScriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 763, col: 1, offset: 26405},
			expr: &choiceExpr{
				pos: position{line: 763, col: 21, offset: 26425},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 763, col: 21, offset: 26425},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 763, col: 28, offset: 26432},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 763, col: 34, offset: 26438},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 763, col: 41, offset: 26445},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 763, col: 47, offset: 26451},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 763, col: 54, offset: 26458},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 763, col: 60, offset: 26464},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 763, col: 66, offset: 26470},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubScriptOrSuperScriptPrefix",
			pos:  position{line: 765, col: 1, offset: 26475},
			expr: &choiceExpr{
				pos: position{line: 765, col: 33, offset: 26507},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 765, col: 33, offset: 26507},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 765, col: 39, offset: 26513},
						run: (*parser).callonSubScriptOrSuperScriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 765, col: 39, offset: 26513},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 769, col: 1, offset: 26646},
			expr: &actionExpr{
				pos: position{line: 769, col: 25, offset: 26670},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 769, col: 25, offset: 26670},
					expr: &litMatcher{
						pos:        position{line: 769, col: 25, offset: 26670},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 773, col: 1, offset: 26711},
			expr: &actionExpr{
				pos: position{line: 773, col: 25, offset: 26735},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 773, col: 25, offset: 26735},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 773, col: 25, offset: 26735},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 773, col: 30, offset: 26740},
							expr: &litMatcher{
								pos:        position{line: 773, col: 30, offset: 26740},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 781, col: 1, offset: 26837},
			expr: &choiceExpr{
				pos: position{line: 781, col: 13, offset: 26849},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 781, col: 13, offset: 26849},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 781, col: 35, offset: 26871},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 783, col: 1, offset: 26892},
			expr: &actionExpr{
				pos: position{line: 783, col: 24, offset: 26915},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 783, col: 24, offset: 26915},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 783, col: 24, offset: 26915},
							expr: &litMatcher{
								pos:        position{line: 783, col: 25, offset: 26916},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 783, col: 30, offset: 26921},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 783, col: 35, offset: 26926},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 44, offset: 26935},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 783, col: 72, offset: 26963},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 787, col: 1, offset: 27088},
			expr: &seqExpr{
				pos: position{line: 787, col: 31, offset: 27118},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 787, col: 31, offset: 27118},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 787, col: 58, offset: 27145},
						expr: &actionExpr{
							pos: position{line: 787, col: 59, offset: 27146},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 787, col: 59, offset: 27146},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 787, col: 59, offset: 27146},
										expr: &litMatcher{
											pos:        position{line: 787, col: 61, offset: 27148},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 787, col: 67, offset: 27154},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 787, col: 76, offset: 27163},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 787, col: 76, offset: 27163},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 787, col: 81, offset: 27168},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 791, col: 1, offset: 27260},
			expr: &actionExpr{
				pos: position{line: 791, col: 31, offset: 27290},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 791, col: 31, offset: 27290},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 791, col: 31, offset: 27290},
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 32, offset: 27291},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 791, col: 40, offset: 27299},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 791, col: 49, offset: 27308},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 791, col: 49, offset: 27308},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 792, col: 11, offset: 27339},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 793, col: 11, offset: 27361},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 794, col: 11, offset: 27385},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 795, col: 11, offset: 27409},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 796, col: 11, offset: 27435},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 797, col: 11, offset: 27458},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 798, col: 11, offset: 27474},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 799, col: 11, offset: 27497},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 803, col: 1, offset: 27653},
			expr: &actionExpr{
				pos: position{line: 803, col: 27, offset: 27679},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 803, col: 27, offset: 27679},
					exprs: []interface{}{
						&anyMatcher{
							line: 803, col: 28, offset: 27680,
						},
						&zeroOrMoreExpr{
							pos: position{line: 803, col: 31, offset: 27683},
							expr: &seqExpr{
								pos: position{line: 803, col: 32, offset: 27684},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 803, col: 32, offset: 27684},
										expr: &litMatcher{
											pos:        position{line: 803, col: 33, offset: 27685},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 803, col: 38, offset: 27690},
										expr: &ruleRefExpr{
											pos:  position{line: 803, col: 39, offset: 27691},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 803, col: 42, offset: 27694},
										expr: &litMatcher{
											pos:        position{line: 803, col: 43, offset: 27695},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 803, col: 47, offset: 27699},
										expr: &litMatcher{
											pos:        position{line: 803, col: 48, offset: 27700},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 803, col: 52, offset: 27704},
										expr: &ruleRefExpr{
											pos:  position{line: 803, col: 53, offset: 27705},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 803, col: 61, offset: 27713,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 807, col: 1, offset: 27773},
			expr: &choiceExpr{
				pos: position{line: 807, col: 24, offset: 27796},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 807, col: 24, offset: 27796},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 807, col: 24, offset: 27796},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 807, col: 24, offset: 27796},
									expr: &litMatcher{
										pos:        position{line: 807, col: 25, offset: 27797},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 807, col: 29, offset: 27801},
									expr: &litMatcher{
										pos:        position{line: 807, col: 30, offset: 27802},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 807, col: 35, offset: 27807},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 807, col: 39, offset: 27811},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 807, col: 48, offset: 27820},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 807, col: 76, offset: 27848},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 809, col: 5, offset: 28028},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 809, col: 5, offset: 28028},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 809, col: 5, offset: 28028},
									expr: &litMatcher{
										pos:        position{line: 809, col: 6, offset: 28029},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 809, col: 11, offset: 28034},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 809, col: 16, offset: 28039},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 809, col: 25, offset: 28048},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 809, col: 53, offset: 28076},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 813, col: 1, offset: 28334},
			expr: &seqExpr{
				pos: position{line: 813, col: 31, offset: 28364},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 813, col: 31, offset: 28364},
						expr: &ruleRefExpr{
							pos:  position{line: 813, col: 32, offset: 28365},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 813, col: 35, offset: 28368},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 813, col: 62, offset: 28395},
						expr: &actionExpr{
							pos: position{line: 813, col: 63, offset: 28396},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 813, col: 63, offset: 28396},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 813, col: 63, offset: 28396},
										expr: &seqExpr{
											pos: position{line: 813, col: 65, offset: 28398},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 813, col: 65, offset: 28398},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 813, col: 69, offset: 28402},
													expr: &ruleRefExpr{
														pos:  position{line: 813, col: 70, offset: 28403},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 813, col: 80, offset: 28413},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 813, col: 88, offset: 28421},
											expr: &ruleRefExpr{
												pos:  position{line: 813, col: 88, offset: 28421},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 813, col: 93, offset: 28426},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 813, col: 102, offset: 28435},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 817, col: 1, offset: 28526},
			expr: &actionExpr{
				pos: position{line: 817, col: 31, offset: 28556},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 817, col: 31, offset: 28556},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 817, col: 31, offset: 28556},
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 32, offset: 28557},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 817, col: 40, offset: 28565},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 817, col: 49, offset: 28574},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 817, col: 49, offset: 28574},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 818, col: 11, offset: 28604},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 819, col: 11, offset: 28626},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 820, col: 11, offset: 28650},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 821, col: 11, offset: 28674},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 822, col: 11, offset: 28700},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 823, col: 11, offset: 28723},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 824, col: 11, offset: 28739},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 825, col: 11, offset: 28762},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 829, col: 1, offset: 28918},
			expr: &actionExpr{
				pos: position{line: 829, col: 27, offset: 28944},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 829, col: 27, offset: 28944},
					exprs: []interface{}{
						&anyMatcher{
							line: 829, col: 28, offset: 28945,
						},
						&zeroOrMoreExpr{
							pos: position{line: 829, col: 31, offset: 28948},
							expr: &seqExpr{
								pos: position{line: 829, col: 32, offset: 28949},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 829, col: 32, offset: 28949},
										expr: &litMatcher{
											pos:        position{line: 829, col: 33, offset: 28950},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 829, col: 37, offset: 28954},
										expr: &ruleRefExpr{
											pos:  position{line: 829, col: 38, offset: 28955},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 829, col: 41, offset: 28958},
										expr: &litMatcher{
											pos:        position{line: 829, col: 42, offset: 28959},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 829, col: 46, offset: 28963},
										expr: &litMatcher{
											pos:        position{line: 829, col: 47, offset: 28964},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 829, col: 51, offset: 28968},
										expr: &ruleRefExpr{
											pos:  position{line: 829, col: 52, offset: 28969},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 829, col: 60, offset: 28977,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 833, col: 1, offset: 29037},
			expr: &choiceExpr{
				pos: position{line: 834, col: 5, offset: 29061},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 834, col: 5, offset: 29061},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 834, col: 5, offset: 29061},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 834, col: 5, offset: 29061},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 834, col: 18, offset: 29074},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 834, col: 40, offset: 29096},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 834, col: 45, offset: 29101},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 834, col: 54, offset: 29110},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 834, col: 82, offset: 29138},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 836, col: 9, offset: 29294},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 836, col: 9, offset: 29294},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 836, col: 9, offset: 29294},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 836, col: 22, offset: 29307},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 836, col: 44, offset: 29329},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 836, col: 49, offset: 29334},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 836, col: 58, offset: 29343},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 836, col: 86, offset: 29371},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 839, col: 9, offset: 29570},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 839, col: 9, offset: 29570},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 839, col: 9, offset: 29570},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 839, col: 22, offset: 29583},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 839, col: 44, offset: 29605},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 839, col: 48, offset: 29609},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 839, col: 57, offset: 29618},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 839, col: 85, offset: 29646},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 847, col: 1, offset: 29853},
			expr: &choiceExpr{
				pos: position{line: 847, col: 15, offset: 29867},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 847, col: 15, offset: 29867},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 847, col: 39, offset: 29891},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 849, col: 1, offset: 29914},
			expr: &actionExpr{
				pos: position{line: 849, col: 26, offset: 29939},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 849, col: 26, offset: 29939},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 849, col: 26, offset: 29939},
							expr: &litMatcher{
								pos:        position{line: 849, col: 27, offset: 29940},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 849, col: 32, offset: 29945},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 849, col: 37, offset: 29950},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 849, col: 46, offset: 29959},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 849, col: 76, offset: 29989},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 853, col: 1, offset: 30115},
			expr: &seqExpr{
				pos: position{line: 853, col: 33, offset: 30147},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 853, col: 33, offset: 30147},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 853, col: 62, offset: 30176},
						expr: &actionExpr{
							pos: position{line: 853, col: 63, offset: 30177},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 853, col: 63, offset: 30177},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 853, col: 63, offset: 30177},
										expr: &litMatcher{
											pos:        position{line: 853, col: 65, offset: 30179},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 853, col: 71, offset: 30185},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 853, col: 80, offset: 30194},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 853, col: 80, offset: 30194},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 853, col: 85, offset: 30199},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 857, col: 1, offset: 30293},
			expr: &actionExpr{
				pos: position{line: 857, col: 33, offset: 30325},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 857, col: 33, offset: 30325},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 857, col: 33, offset: 30325},
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 34, offset: 30326},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 857, col: 42, offset: 30334},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 857, col: 51, offset: 30343},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 857, col: 51, offset: 30343},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 858, col: 11, offset: 30376},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 859, col: 11, offset: 30396},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 860, col: 11, offset: 30420},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 861, col: 11, offset: 30444},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 862, col: 11, offset: 30470},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 863, col: 11, offset: 30493},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 864, col: 11, offset: 30509},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 865, col: 11, offset: 30532},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 869, col: 1, offset: 30690},
			expr: &actionExpr{
				pos: position{line: 869, col: 29, offset: 30718},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 869, col: 29, offset: 30718},
					exprs: []interface{}{
						&anyMatcher{
							line: 869, col: 30, offset: 30719,
						},
						&zeroOrMoreExpr{
							pos: position{line: 869, col: 33, offset: 30722},
							expr: &seqExpr{
								pos: position{line: 869, col: 34, offset: 30723},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 869, col: 34, offset: 30723},
										expr: &litMatcher{
											pos:        position{line: 869, col: 35, offset: 30724},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 869, col: 40, offset: 30729},
										expr: &litMatcher{
											pos:        position{line: 869, col: 41, offset: 30730},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 869, col: 45, offset: 30734},
										expr: &litMatcher{
											pos:        position{line: 869, col: 46, offset: 30735},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 869, col: 50, offset: 30739},
										expr: &ruleRefExpr{
											pos:  position{line: 869, col: 51, offset: 30740},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 869, col: 59, offset: 30748,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 873, col: 1, offset: 30808},
			expr: &choiceExpr{
				pos: position{line: 873, col: 26, offset: 30833},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 873, col: 26, offset: 30833},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 873, col: 26, offset: 30833},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 873, col: 26, offset: 30833},
									expr: &litMatcher{
										pos:        position{line: 873, col: 27, offset: 30834},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 873, col: 31, offset: 30838},
									expr: &litMatcher{
										pos:        position{line: 873, col: 32, offset: 30839},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 873, col: 37, offset: 30844},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 873, col: 41, offset: 30848},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 50, offset: 30857},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 873, col: 80, offset: 30887},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 875, col: 5, offset: 31069},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 875, col: 5, offset: 31069},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 875, col: 5, offset: 31069},
									expr: &litMatcher{
										pos:        position{line: 875, col: 6, offset: 31070},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 875, col: 11, offset: 31075},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 875, col: 16, offset: 31080},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 875, col: 25, offset: 31089},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 875, col: 55, offset: 31119},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 879, col: 1, offset: 31381},
			expr: &seqExpr{
				pos: position{line: 879, col: 33, offset: 31413},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 879, col: 33, offset: 31413},
						expr: &ruleRefExpr{
							pos:  position{line: 879, col: 34, offset: 31414},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 879, col: 37, offset: 31417},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 879, col: 66, offset: 31446},
						expr: &actionExpr{
							pos: position{line: 879, col: 67, offset: 31447},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 879, col: 67, offset: 31447},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 879, col: 67, offset: 31447},
										expr: &seqExpr{
											pos: position{line: 879, col: 69, offset: 31449},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 879, col: 69, offset: 31449},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 879, col: 73, offset: 31453},
													expr: &ruleRefExpr{
														pos:  position{line: 879, col: 74, offset: 31454},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 879, col: 84, offset: 31464},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 879, col: 92, offset: 31472},
											expr: &ruleRefExpr{
												pos:  position{line: 879, col: 92, offset: 31472},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 879, col: 97, offset: 31477},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 879, col: 106, offset: 31486},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 883, col: 1, offset: 31579},
			expr: &actionExpr{
				pos: position{line: 883, col: 33, offset: 31611},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 883, col: 33, offset: 31611},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 883, col: 33, offset: 31611},
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 34, offset: 31612},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 42, offset: 31620},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 883, col: 51, offset: 31629},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 883, col: 51, offset: 31629},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 884, col: 11, offset: 31661},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 885, col: 11, offset: 31681},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 886, col: 11, offset: 31705},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 887, col: 11, offset: 31729},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 888, col: 11, offset: 31755},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 889, col: 11, offset: 31778},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 890, col: 11, offset: 31794},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 891, col: 11, offset: 31817},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 895, col: 1, offset: 31975},
			expr: &actionExpr{
				pos: position{line: 895, col: 29, offset: 32003},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 895, col: 29, offset: 32003},
					exprs: []interface{}{
						&anyMatcher{
							line: 895, col: 30, offset: 32004,
						},
						&zeroOrMoreExpr{
							pos: position{line: 895, col: 33, offset: 32007},
							expr: &seqExpr{
								pos: position{line: 895, col: 34, offset: 32008},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 895, col: 34, offset: 32008},
										expr: &litMatcher{
											pos:        position{line: 895, col: 35, offset: 32009},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 895, col: 39, offset: 32013},
										expr: &ruleRefExpr{
											pos:  position{line: 895, col: 40, offset: 32014},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 895, col: 43, offset: 32017},
										expr: &litMatcher{
											pos:        position{line: 895, col: 44, offset: 32018},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 895, col: 48, offset: 32022},
										expr: &litMatcher{
											pos:        position{line: 895, col: 49, offset: 32023},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 895, col: 53, offset: 32027},
										expr: &ruleRefExpr{
											pos:  position{line: 895, col: 54, offset: 32028},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 895, col: 62, offset: 32036,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 899, col: 1, offset: 32096},
			expr: &choiceExpr{
				pos: position{line: 900, col: 5, offset: 32122},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 900, col: 5, offset: 32122},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 900, col: 5, offset: 32122},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 900, col: 5, offset: 32122},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 900, col: 18, offset: 32135},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 900, col: 40, offset: 32157},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 900, col: 45, offset: 32162},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 900, col: 54, offset: 32171},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 900, col: 84, offset: 32201},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 902, col: 9, offset: 32357},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 902, col: 9, offset: 32357},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 902, col: 9, offset: 32357},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 902, col: 22, offset: 32370},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 902, col: 44, offset: 32392},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 902, col: 49, offset: 32397},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 902, col: 58, offset: 32406},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 902, col: 88, offset: 32436},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 905, col: 9, offset: 32635},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 905, col: 9, offset: 32635},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 905, col: 9, offset: 32635},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 905, col: 22, offset: 32648},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 905, col: 44, offset: 32670},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 905, col: 48, offset: 32674},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 905, col: 57, offset: 32683},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 905, col: 87, offset: 32713},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 913, col: 1, offset: 32923},
			expr: &choiceExpr{
				pos: position{line: 913, col: 18, offset: 32940},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 913, col: 18, offset: 32940},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 913, col: 45, offset: 32967},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 915, col: 1, offset: 32993},
			expr: &actionExpr{
				pos: position{line: 915, col: 29, offset: 33021},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 915, col: 29, offset: 33021},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 915, col: 29, offset: 33021},
							expr: &litMatcher{
								pos:        position{line: 915, col: 30, offset: 33022},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 915, col: 35, offset: 33027},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 915, col: 40, offset: 33032},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 49, offset: 33041},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 915, col: 82, offset: 33074},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 919, col: 1, offset: 33203},
			expr: &seqExpr{
				pos: position{line: 919, col: 36, offset: 33238},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 919, col: 36, offset: 33238},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 919, col: 68, offset: 33270},
						expr: &actionExpr{
							pos: position{line: 919, col: 69, offset: 33271},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 919, col: 69, offset: 33271},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 919, col: 69, offset: 33271},
										expr: &litMatcher{
											pos:        position{line: 919, col: 71, offset: 33273},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 919, col: 77, offset: 33279},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 919, col: 86, offset: 33288},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 919, col: 86, offset: 33288},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 919, col: 91, offset: 33293},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 923, col: 1, offset: 33390},
			expr: &actionExpr{
				pos: position{line: 923, col: 36, offset: 33425},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 923, col: 36, offset: 33425},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 923, col: 36, offset: 33425},
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 37, offset: 33426},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 923, col: 45, offset: 33434},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 923, col: 54, offset: 33443},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 923, col: 54, offset: 33443},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 924, col: 11, offset: 33479},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 925, col: 11, offset: 33498},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 926, col: 11, offset: 33520},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 927, col: 11, offset: 33544},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 928, col: 11, offset: 33570},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 929, col: 11, offset: 33593},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 930, col: 11, offset: 33609},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 931, col: 11, offset: 33632},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 935, col: 1, offset: 33793},
			expr: &actionExpr{
				pos: position{line: 935, col: 32, offset: 33824},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 935, col: 32, offset: 33824},
					exprs: []interface{}{
						&anyMatcher{
							line: 935, col: 33, offset: 33825,
						},
						&zeroOrMoreExpr{
							pos: position{line: 935, col: 36, offset: 33828},
							expr: &seqExpr{
								pos: position{line: 935, col: 37, offset: 33829},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 935, col: 37, offset: 33829},
										expr: &litMatcher{
											pos:        position{line: 935, col: 38, offset: 33830},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 935, col: 43, offset: 33835},
										expr: &ruleRefExpr{
											pos:  position{line: 935, col: 44, offset: 33836},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 935, col: 47, offset: 33839},
										expr: &litMatcher{
											pos:        position{line: 935, col: 48, offset: 33840},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 935, col: 52, offset: 33844},
										expr: &litMatcher{
											pos:        position{line: 935, col: 53, offset: 33845},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 935, col: 57, offset: 33849},
										expr: &ruleRefExpr{
											pos:  position{line: 935, col: 58, offset: 33850},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 935, col: 66, offset: 33858,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 939, col: 1, offset: 33918},
			expr: &choiceExpr{
				pos: position{line: 939, col: 29, offset: 33946},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 939, col: 29, offset: 33946},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 939, col: 29, offset: 33946},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 939, col: 29, offset: 33946},
									expr: &litMatcher{
										pos:        position{line: 939, col: 30, offset: 33947},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 939, col: 34, offset: 33951},
									expr: &litMatcher{
										pos:        position{line: 939, col: 35, offset: 33952},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 40, offset: 33957},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 939, col: 44, offset: 33961},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 53, offset: 33970},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 86, offset: 34003},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 941, col: 5, offset: 34188},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 941, col: 5, offset: 34188},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 941, col: 5, offset: 34188},
									expr: &litMatcher{
										pos:        position{line: 941, col: 6, offset: 34189},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 11, offset: 34194},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 941, col: 16, offset: 34199},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 25, offset: 34208},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 58, offset: 34241},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 945, col: 1, offset: 34509},
			expr: &seqExpr{
				pos: position{line: 945, col: 36, offset: 34544},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 945, col: 36, offset: 34544},
						expr: &ruleRefExpr{
							pos:  position{line: 945, col: 37, offset: 34545},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 945, col: 40, offset: 34548},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 945, col: 72, offset: 34580},
						expr: &actionExpr{
							pos: position{line: 945, col: 73, offset: 34581},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 945, col: 73, offset: 34581},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 945, col: 73, offset: 34581},
										expr: &seqExpr{
											pos: position{line: 945, col: 75, offset: 34583},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 945, col: 75, offset: 34583},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 945, col: 79, offset: 34587},
													expr: &ruleRefExpr{
														pos:  position{line: 945, col: 80, offset: 34588},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 945, col: 90, offset: 34598},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 945, col: 98, offset: 34606},
											expr: &ruleRefExpr{
												pos:  position{line: 945, col: 98, offset: 34606},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 945, col: 103, offset: 34611},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 945, col: 112, offset: 34620},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 949, col: 1, offset: 34716},
			expr: &actionExpr{
				pos: position{line: 949, col: 37, offset: 34752},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 949, col: 37, offset: 34752},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 949, col: 46, offset: 34761},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 949, col: 46, offset: 34761},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 950, col: 11, offset: 34799},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 951, col: 11, offset: 34835},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 952, col: 11, offset: 34855},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 953, col: 11, offset: 34876},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 954, col: 11, offset: 34900},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 955, col: 11, offset: 34926},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 956, col: 11, offset: 34949},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 957, col: 11, offset: 34965},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 958, col: 11, offset: 34988},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 962, col: 1, offset: 35149},
			expr: &actionExpr{
				pos: position{line: 962, col: 32, offset: 35180},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 962, col: 32, offset: 35180},
					exprs: []interface{}{
						&anyMatcher{
							line: 962, col: 33, offset: 35181,
						},
						&zeroOrMoreExpr{
							pos: position{line: 962, col: 36, offset: 35184},
							expr: &seqExpr{
								pos: position{line: 962, col: 37, offset: 35185},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 962, col: 37, offset: 35185},
										expr: &ruleRefExpr{
											pos:  position{line: 962, col: 38, offset: 35186},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 962, col: 41, offset: 35189},
										expr: &litMatcher{
											pos:        position{line: 962, col: 42, offset: 35190},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 962, col: 46, offset: 35194},
										expr: &litMatcher{
											pos:        position{line: 962, col: 47, offset: 35195},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 962, col: 51, offset: 35199},
										expr: &litMatcher{
											pos:        position{line: 962, col: 52, offset: 35200},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 962, col: 56, offset: 35204},
										expr: &ruleRefExpr{
											pos:  position{line: 962, col: 57, offset: 35205},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 962, col: 65, offset: 35213,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 966, col: 1, offset: 35294},
			expr: &choiceExpr{
				pos: position{line: 967, col: 5, offset: 35323},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 967, col: 5, offset: 35323},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 967, col: 5, offset: 35323},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 967, col: 5, offset: 35323},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 18, offset: 35336},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 40, offset: 35358},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 967, col: 45, offset: 35363},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 54, offset: 35372},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 87, offset: 35405},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 9, offset: 35561},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 969, col: 9, offset: 35561},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 969, col: 9, offset: 35561},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 22, offset: 35574},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 44, offset: 35596},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 969, col: 49, offset: 35601},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 58, offset: 35610},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 91, offset: 35643},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 9, offset: 35842},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 972, col: 9, offset: 35842},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 972, col: 9, offset: 35842},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 22, offset: 35855},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 44, offset: 35877},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 972, col: 48, offset: 35881},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 57, offset: 35890},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 90, offset: 35923},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 976, col: 1, offset: 36072},
			expr: &actionExpr{
				pos: position{line: 976, col: 18, offset: 36089},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 976, col: 18, offset: 36089},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 976, col: 18, offset: 36089},
							expr: &litMatcher{
								pos:        position{line: 976, col: 19, offset: 36090},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 976, col: 23, offset: 36094},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 976, col: 27, offset: 36098},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 36, offset: 36107},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 976, col: 58, offset: 36129},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 980, col: 1, offset: 36218},
			expr: &choiceExpr{
				pos: position{line: 980, col: 25, offset: 36242},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 980, col: 25, offset: 36242},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 980, col: 38, offset: 36255},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 982, col: 1, offset: 36274},
			expr: &actionExpr{
				pos: position{line: 982, col: 21, offset: 36294},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 982, col: 21, offset: 36294},
					expr: &seqExpr{
						pos: position{line: 982, col: 22, offset: 36295},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 982, col: 22, offset: 36295},
								expr: &ruleRefExpr{
									pos:  position{line: 982, col: 23, offset: 36296},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 982, col: 31, offset: 36304},
								expr: &ruleRefExpr{
									pos:  position{line: 982, col: 32, offset: 36305},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 982, col: 35, offset: 36308},
								expr: &litMatcher{
									pos:        position{line: 982, col: 36, offset: 36309},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 982, col: 40, offset: 36313,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 986, col: 1, offset: 36346},
			expr: &actionExpr{
				pos: position{line: 986, col: 25, offset: 36370},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 986, col: 25, offset: 36370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 986, col: 25, offset: 36370},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 986, col: 38, offset: 36383},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 986, col: 60, offset: 36405},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 986, col: 64, offset: 36409},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 986, col: 73, offset: 36418},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 986, col: 95, offset: 36440},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 990, col: 1, offset: 36569},
			expr: &actionExpr{
				pos: position{line: 990, col: 20, offset: 36588},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 990, col: 20, offset: 36588},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 990, col: 20, offset: 36588},
							expr: &litMatcher{
								pos:        position{line: 990, col: 21, offset: 36589},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 990, col: 25, offset: 36593},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 990, col: 29, offset: 36597},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 990, col: 38, offset: 36606},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 990, col: 62, offset: 36630},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 994, col: 1, offset: 36721},
			expr: &choiceExpr{
				pos: position{line: 994, col: 27, offset: 36747},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 994, col: 27, offset: 36747},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 40, offset: 36760},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 996, col: 1, offset: 36781},
			expr: &actionExpr{
				pos: position{line: 996, col: 23, offset: 36803},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 996, col: 23, offset: 36803},
					expr: &seqExpr{
						pos: position{line: 996, col: 24, offset: 36804},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 996, col: 24, offset: 36804},
								expr: &ruleRefExpr{
									pos:  position{line: 996, col: 25, offset: 36805},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 996, col: 33, offset: 36813},
								expr: &ruleRefExpr{
									pos:  position{line: 996, col: 34, offset: 36814},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 996, col: 37, offset: 36817},
								expr: &litMatcher{
									pos:        position{line: 996, col: 38, offset: 36818},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 996, col: 42, offset: 36822,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1000, col: 1, offset: 36855},
			expr: &actionExpr{
				pos: position{line: 1000, col: 27, offset: 36881},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1000, col: 27, offset: 36881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1000, col: 27, offset: 36881},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1000, col: 40, offset: 36894},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1000, col: 62, offset: 36916},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1000, col: 66, offset: 36920},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1000, col: 75, offset: 36929},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1000, col: 99, offset: 36953},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1007, col: 1, offset: 37189},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 16, offset: 37204},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1007, col: 16, offset: 37204},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 40, offset: 37228},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 64, offset: 37252},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1009, col: 1, offset: 37270},
			expr: &litMatcher{
				pos:        position{line: 1009, col: 32, offset: 37301},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1011, col: 1, offset: 37306},
			expr: &actionExpr{
				pos: position{line: 1011, col: 26, offset: 37331},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 26, offset: 37331},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1011, col: 26, offset: 37331},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 54, offset: 37359},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 63, offset: 37368},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1011, col: 93, offset: 37398},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1011, col: 121, offset: 37426},
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 122, offset: 37427},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1015, col: 1, offset: 37526},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 33, offset: 37558},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1015, col: 34, offset: 37559},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1015, col: 34, offset: 37559},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1015, col: 35, offset: 37560},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1015, col: 35, offset: 37560},
											expr: &ruleRefExpr{
												pos:  position{line: 1015, col: 36, offset: 37561},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1015, col: 64, offset: 37589},
											expr: &ruleRefExpr{
												pos:  position{line: 1015, col: 65, offset: 37590},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1015, col: 68, offset: 37593},
											expr: &ruleRefExpr{
												pos:  position{line: 1015, col: 69, offset: 37594},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1015, col: 77, offset: 37602,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1015, col: 80, offset: 37605},
									expr: &seqExpr{
										pos: position{line: 1015, col: 81, offset: 37606},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1015, col: 81, offset: 37606},
												expr: &seqExpr{
													pos: position{line: 1015, col: 83, offset: 37608},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1015, col: 83, offset: 37608},
															expr: &ruleRefExpr{
																pos:  position{line: 1015, col: 83, offset: 37608},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1015, col: 87, offset: 37612},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1015, col: 116, offset: 37641},
												expr: &ruleRefExpr{
													pos:  position{line: 1015, col: 117, offset: 37642},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1015, col: 145, offset: 37670},
												expr: &ruleRefExpr{
													pos:  position{line: 1015, col: 146, offset: 37671},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1015, col: 154, offset: 37679,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1017, col: 7, offset: 37821},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1017, col: 8, offset: 37822},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1017, col: 8, offset: 37822},
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 9, offset: 37823},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1017, col: 12, offset: 37826},
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 13, offset: 37827},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1017, col: 21, offset: 37835},
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 22, offset: 37836},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1017, col: 50, offset: 37864,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1021, col: 1, offset: 37946},
			expr: &litMatcher{
				pos:        position{line: 1021, col: 32, offset: 37977},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1023, col: 1, offset: 37984},
			expr: &actionExpr{
				pos: position{line: 1023, col: 26, offset: 38009},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 26, offset: 38009},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1023, col: 26, offset: 38009},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1023, col: 54, offset: 38037},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 63, offset: 38046},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1023, col: 93, offset: 38076},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1023, col: 121, offset: 38104},
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 122, offset: 38105},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1027, col: 1, offset: 38204},
			expr: &choiceExpr{
				pos: position{line: 1027, col: 33, offset: 38236},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1027, col: 34, offset: 38237},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1027, col: 34, offset: 38237},
							expr: &seqExpr{
								pos: position{line: 1027, col: 35, offset: 38238},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1027, col: 35, offset: 38238},
										expr: &ruleRefExpr{
											pos:  position{line: 1027, col: 36, offset: 38239},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1027, col: 64, offset: 38267,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1029, col: 7, offset: 38432},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1029, col: 7, offset: 38432},
							expr: &seqExpr{
								pos: position{line: 1029, col: 8, offset: 38433},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1029, col: 8, offset: 38433},
										expr: &ruleRefExpr{
											pos:  position{line: 1029, col: 9, offset: 38434},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1029, col: 12, offset: 38437},
										expr: &ruleRefExpr{
											pos:  position{line: 1029, col: 13, offset: 38438},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1029, col: 21, offset: 38446},
										expr: &ruleRefExpr{
											pos:  position{line: 1029, col: 22, offset: 38447},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1029, col: 50, offset: 38475,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1033, col: 1, offset: 38558},
			expr: &choiceExpr{
				pos: position{line: 1033, col: 21, offset: 38578},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1033, col: 21, offset: 38578},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1033, col: 21, offset: 38578},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1033, col: 21, offset: 38578},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1033, col: 30, offset: 38587},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1033, col: 38, offset: 38595},
										expr: &ruleRefExpr{
											pos:  position{line: 1033, col: 39, offset: 38596},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1033, col: 67, offset: 38624},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1035, col: 5, offset: 38714},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1035, col: 5, offset: 38714},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1035, col: 5, offset: 38714},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1035, col: 15, offset: 38724},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1035, col: 23, offset: 38732},
										expr: &choiceExpr{
											pos: position{line: 1035, col: 24, offset: 38733},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1035, col: 24, offset: 38733},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1035, col: 37, offset: 38746},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1035, col: 65, offset: 38774},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1039, col: 1, offset: 38864},
			expr: &choiceExpr{
				pos: position{line: 1039, col: 31, offset: 38894},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1039, col: 31, offset: 38894},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1039, col: 43, offset: 38906},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1039, col: 52, offset: 38915},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1039, col: 53, offset: 38916},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1039, col: 53, offset: 38916},
									expr: &litMatcher{
										pos:        position{line: 1039, col: 54, offset: 38917},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1039, col: 58, offset: 38921,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1046, col: 1, offset: 39091},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 19, offset: 39109},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1046, col: 19, offset: 39109},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1046, col: 19, offset: 39109},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1046, col: 19, offset: 39109},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 24, offset: 39114},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 28, offset: 39118},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1046, col: 32, offset: 39122},
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 32, offset: 39122},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1046, col: 36, offset: 39126},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 40, offset: 39130},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 47, offset: 39137},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1046, col: 68, offset: 39158},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1048, col: 5, offset: 39233},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1048, col: 5, offset: 39233},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1048, col: 5, offset: 39233},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1048, col: 10, offset: 39238},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1048, col: 14, offset: 39242},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 18, offset: 39246},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1052, col: 1, offset: 39309},
			expr: &actionExpr{
				pos: position{line: 1052, col: 24, offset: 39332},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1052, col: 24, offset: 39332},
					expr: &choiceExpr{
						pos: position{line: 1052, col: 25, offset: 39333},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1052, col: 25, offset: 39333},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1052, col: 37, offset: 39345},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 1052, col: 46, offset: 39354},
								run: (*parser).callonCrossReferenceLabel6,
								expr: &seqExpr{
									pos: position{line: 1052, col: 47, offset: 39355},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1052, col: 47, offset: 39355},
											expr: &litMatcher{
												pos:        position{line: 1052, col: 48, offset: 39356},
												val:        ">>",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 1052, col: 54, offset: 39362,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1061, col: 1, offset: 39538},
			expr: &actionExpr{
				pos: position{line: 1061, col: 9, offset: 39546},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1061, col: 9, offset: 39546},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1061, col: 15, offset: 39552},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1061, col: 15, offset: 39552},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1061, col: 30, offset: 39567},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1065, col: 1, offset: 39607},
			expr: &choiceExpr{
				pos: position{line: 1065, col: 17, offset: 39623},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1065, col: 17, offset: 39623},
						run: (*parser).callonExternalLink2,
						expr: &seqExpr{
							pos: position{line: 1065, col: 17, offset: 39623},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1065, col: 17, offset: 39623},
									label: "url",
									expr: &ruleRefExpr{
										pos:  position{line: 1065, col: 22, offset: 39628},
										name: "Location",
									},
								},
								&labeledExpr{
									pos:   position{line: 1065, col: 32, offset: 39638},
									label: "inlineAttributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1065, col: 50, offset: 39656},
										name: "LinkAttributes",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1067, col: 5, offset: 39775},
						run: (*parser).callonExternalLink8,
						expr: &labeledExpr{
							pos:   position{line: 1067, col: 5, offset: 39775},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1067, col: 10, offset: 39780},
								name: "Location",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1072, col: 1, offset: 39942},
			expr: &actionExpr{
				pos: position{line: 1072, col: 17, offset: 39958},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1072, col: 17, offset: 39958},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1072, col: 17, offset: 39958},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1072, col: 25, offset: 39966},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1072, col: 30, offset: 39971},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1072, col: 30, offset: 39971},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1072, col: 41, offset: 39982},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1072, col: 55, offset: 39996},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1072, col: 73, offset: 40014},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1076, col: 1, offset: 40132},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 19, offset: 40150},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1076, col: 19, offset: 40150},
						run: (*parser).callonLinkAttributes2,
						expr: &seqExpr{
							pos: position{line: 1076, col: 19, offset: 40150},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1076, col: 19, offset: 40150},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 23, offset: 40154},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 29, offset: 40160},
										name: "LinkTextAttribute",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1076, col: 48, offset: 40179},
									expr: &litMatcher{
										pos:        position{line: 1076, col: 48, offset: 40179},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1076, col: 53, offset: 40184},
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 53, offset: 40184},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 57, offset: 40188},
									label: "otherattrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1076, col: 68, offset: 40199},
										expr: &ruleRefExpr{
											pos:  position{line: 1076, col: 69, offset: 40200},
											name: "GenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 88, offset: 40219},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1078, col: 5, offset: 40327},
						run: (*parser).callonLinkAttributes15,
						expr: &seqExpr{
							pos: position{line: 1078, col: 5, offset: 40327},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1078, col: 5, offset: 40327},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 9, offset: 40331},
									label: "otherattrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1078, col: 20, offset: 40342},
										expr: &ruleRefExpr{
											pos:  position{line: 1078, col: 21, offset: 40343},
											name: "GenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1078, col: 40, offset: 40362},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1082, col: 1, offset: 40446},
			expr: &actionExpr{
				pos: position{line: 1082, col: 22, offset: 40467},
				run: (*parser).callonLinkTextAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 1082, col: 22, offset: 40467},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1082, col: 31, offset: 40476},
						expr: &seqExpr{
							pos: position{line: 1082, col: 32, offset: 40477},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1082, col: 32, offset: 40477},
									expr: &litMatcher{
										pos:        position{line: 1082, col: 33, offset: 40478},
										val:        "=",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1082, col: 37, offset: 40482},
									expr: &litMatcher{
										pos:        position{line: 1082, col: 38, offset: 40483},
										val:        ",",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1082, col: 42, offset: 40487},
									expr: &litMatcher{
										pos:        position{line: 1082, col: 43, offset: 40488},
										val:        "]",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 1082, col: 48, offset: 40493},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1082, col: 48, offset: 40493},
											name: "QuotedText",
										},
										&actionExpr{
											pos: position{line: 1082, col: 62, offset: 40507},
											run: (*parser).callonLinkTextAttribute13,
											expr: &seqExpr{
												pos: position{line: 1082, col: 63, offset: 40508},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1082, col: 63, offset: 40508},
														expr: &ruleRefExpr{
															pos:  position{line: 1082, col: 64, offset: 40509},
															name: "QuotedTextPrefix",
														},
													},
													&anyMatcher{
														line: 1082, col: 81, offset: 40526,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1091, col: 1, offset: 40755},
			expr: &actionExpr{
				pos: position{line: 1091, col: 15, offset: 40769},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1091, col: 15, offset: 40769},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1091, col: 15, offset: 40769},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1091, col: 26, offset: 40780},
								expr: &ruleRefExpr{
									pos:  position{line: 1091, col: 27, offset: 40781},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1091, col: 47, offset: 40801},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1091, col: 57, offset: 40811},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1091, col: 63, offset: 40817},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1091, col: 68, offset: 40822},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1091, col: 86, offset: 40840},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1091, col: 103, offset: 40857},
							expr: &ruleRefExpr{
								pos:  position{line: 1091, col: 103, offset: 40857},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1091, col: 107, offset: 40861},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1095, col: 1, offset: 40972},
			expr: &actionExpr{
				pos: position{line: 1095, col: 16, offset: 40987},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1095, col: 16, offset: 40987},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1095, col: 16, offset: 40987},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1095, col: 25, offset: 40996},
							expr: &litMatcher{
								pos:        position{line: 1095, col: 26, offset: 40997},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 30, offset: 41001},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1095, col: 36, offset: 41007},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 41, offset: 41012},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1095, col: 59, offset: 41030},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1100, col: 1, offset: 41250},
			expr: &choiceExpr{
				pos: position{line: 1100, col: 20, offset: 41269},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1100, col: 20, offset: 41269},
						run: (*parser).callonImageAttributes2,
						expr: &seqExpr{
							pos: position{line: 1100, col: 20, offset: 41269},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1100, col: 20, offset: 41269},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1100, col: 24, offset: 41273},
									label: "alt",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 29, offset: 41278},
										name: "ImageAttribute",
									},
								},
								&litMatcher{
									pos:        position{line: 1100, col: 45, offset: 41294},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 5, offset: 41302},
									label: "width",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 12, offset: 41309},
										name: "ImageAttribute",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 29, offset: 41326},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 5, offset: 41334},
									label: "height",
									expr: &ruleRefExpr{
										pos:  position{line: 1102, col: 13, offset: 41342},
										name: "ImageAttribute",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1102, col: 29, offset: 41358},
									expr: &litMatcher{
										pos:        position{line: 1102, col: 29, offset: 41358},
										val:        ",",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 5, offset: 41367},
									label: "otherattrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1103, col: 16, offset: 41378},
										expr: &ruleRefExpr{
											pos:  position{line: 1103, col: 17, offset: 41379},
											name: "GenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1103, col: 36, offset: 41398},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1105, col: 5, offset: 41496},
						run: (*parser).callonImageAttributes19,
						expr: &seqExpr{
							pos: position{line: 1105, col: 5, offset: 41496},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1105, col: 5, offset: 41496},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1105, col: 9, offset: 41500},
									label: "alt",
									expr: &ruleRefExpr{
										pos:  position{line: 1105, col: 14, offset: 41505},
										name: "ImageAttribute",
									},
								},
								&litMatcher{
									pos:        position{line: 1105, col: 30, offset: 41521},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 5, offset: 41529},
									label: "width",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 12, offset: 41536},
										name: "ImageAttribute",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1106, col: 28, offset: 41552},
									expr: &litMatcher{
										pos:        position{line: 1106, col: 28, offset: 41552},
										val:        ",",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1107, col: 5, offset: 41561},
									label: "otherattrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1107, col: 16, offset: 41572},
										expr: &ruleRefExpr{
											pos:  position{line: 1107, col: 17, offset: 41573},
											name: "GenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1107, col: 36, offset: 41592},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1109, col: 5, offset: 41687},
						run: (*parser).callonImageAttributes33,
						expr: &seqExpr{
							pos: position{line: 1109, col: 5, offset: 41687},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1109, col: 5, offset: 41687},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 9, offset: 41691},
									label: "alt",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 14, offset: 41696},
										name: "ImageAttribute",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1109, col: 30, offset: 41712},
									expr: &litMatcher{
										pos:        position{line: 1109, col: 30, offset: 41712},
										val:        ",",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1110, col: 5, offset: 41721},
									label: "otherattrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1110, col: 16, offset: 41732},
										expr: &ruleRefExpr{
											pos:  position{line: 1110, col: 17, offset: 41733},
											name: "GenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1110, col: 36, offset: 41752},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 41845},
						run: (*parser).callonImageAttributes44,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 41845},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 5, offset: 41845},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 9, offset: 41849},
									label: "otherattrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1112, col: 20, offset: 41860},
										expr: &ruleRefExpr{
											pos:  position{line: 1112, col: 21, offset: 41861},
											name: "GenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1112, col: 40, offset: 41880},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttribute",
			pos:  position{line: 1117, col: 1, offset: 41974},
			expr: &actionExpr{
				pos: position{line: 1117, col: 19, offset: 41992},
				run: (*parser).callonImageAttribute1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1117, col: 19, offset: 41992},
					expr: &choiceExpr{
						pos: position{line: 1117, col: 20, offset: 41993},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1117, col: 20, offset: 41993},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1117, col: 32, offset: 42005},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 1117, col: 41, offset: 42014},
								run: (*parser).callonImageAttribute6,
								expr: &seqExpr{
									pos: position{line: 1117, col: 42, offset: 42015},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1117, col: 42, offset: 42015},
											expr: &litMatcher{
												pos:        position{line: 1117, col: 43, offset: 42016},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1117, col: 47, offset: 42020},
											expr: &litMatcher{
												pos:        position{line: 1117, col: 48, offset: 42021},
												val:        "=",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1117, col: 52, offset: 42025},
											expr: &litMatcher{
												pos:        position{line: 1117, col: 53, offset: 42026},
												val:        "]",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 1117, col: 57, offset: 42030,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1126, col: 1, offset: 42373},
			expr: &choiceExpr{
				pos: position{line: 1126, col: 19, offset: 42391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1126, col: 19, offset: 42391},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1126, col: 19, offset: 42391},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1126, col: 19, offset: 42391},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1126, col: 32, offset: 42404},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1126, col: 41, offset: 42413},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1126, col: 58, offset: 42430},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1128, col: 5, offset: 42505},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1128, col: 5, offset: 42505},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1128, col: 5, offset: 42505},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 21, offset: 42521},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 26, offset: 42526},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1128, col: 39, offset: 42539},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 43, offset: 42543},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 52, offset: 42552},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1128, col: 69, offset: 42569},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1130, col: 5, offset: 42654},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1130, col: 5, offset: 42654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1130, col: 5, offset: 42654},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1130, col: 21, offset: 42670},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1130, col: 26, offset: 42675},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1130, col: 39, offset: 42688},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1134, col: 1, offset: 42803},
			expr: &actionExpr{
				pos: position{line: 1134, col: 16, offset: 42818},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1134, col: 16, offset: 42818},
					expr: &choiceExpr{
						pos: position{line: 1134, col: 17, offset: 42819},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1134, col: 17, offset: 42819},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1134, col: 29, offset: 42831},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 1134, col: 38, offset: 42840},
								run: (*parser).callonFootnoteRef6,
								expr: &seqExpr{
									pos: position{line: 1134, col: 39, offset: 42841},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1134, col: 39, offset: 42841},
											expr: &litMatcher{
												pos:        position{line: 1134, col: 40, offset: 42842},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1134, col: 44, offset: 42846},
											expr: &litMatcher{
												pos:        position{line: 1134, col: 45, offset: 42847},
												val:        "]",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1134, col: 49, offset: 42851},
											expr: &ruleRefExpr{
												pos:  position{line: 1134, col: 50, offset: 42852},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 1134, col: 55, offset: 42857,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1140, col: 1, offset: 42976},
			expr: &actionExpr{
				pos: position{line: 1140, col: 20, offset: 42995},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1140, col: 20, offset: 42995},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1140, col: 29, offset: 43004},
						expr: &seqExpr{
							pos: position{line: 1140, col: 30, offset: 43005},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1140, col: 30, offset: 43005},
									expr: &litMatcher{
										pos:        position{line: 1140, col: 31, offset: 43006},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1140, col: 35, offset: 43010},
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 36, offset: 43011},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1140, col: 40, offset: 43015},
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 40, offset: 43015},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1140, col: 44, offset: 43019},
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 45, offset: 43020},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1140, col: 61, offset: 43036},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1140, col: 75, offset: 43050},
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 75, offset: 43050},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1148, col: 1, offset: 43365},
			expr: &actionExpr{
				pos: position{line: 1148, col: 19, offset: 43383},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1148, col: 19, offset: 43383},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1148, col: 19, offset: 43383},
							expr: &ruleRefExpr{
								pos:  position{line: 1148, col: 20, offset: 43384},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 5, offset: 43413},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1149, col: 12, offset: 43420},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1149, col: 12, offset: 43420},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1150, col: 11, offset: 43443},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1151, col: 11, offset: 43467},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1152, col: 11, offset: 43491},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1153, col: 11, offset: 43513},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1154, col: 11, offset: 43535},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1155, col: 11, offset: 43558},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 11, offset: 43586},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1157, col: 11, offset: 43602},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1161, col: 1, offset: 43643},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 19, offset: 43661},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1161, col: 19, offset: 43661},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 19, offset: 43702},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 19, offset: 43742},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 19, offset: 43783},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 19, offset: 43824},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 19, offset: 43865},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1167, col: 19, offset: 43903},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1173, col: 1, offset: 44122},
			expr: &seqExpr{
				pos: position{line: 1173, col: 25, offset: 44146},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1173, col: 25, offset: 44146},
						val:        "```",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1173, col: 31, offset: 44152},
						expr: &ruleRefExpr{
							pos:  position{line: 1173, col: 31, offset: 44152},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 35, offset: 44156},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1175, col: 1, offset: 44161},
			expr: &actionExpr{
				pos: position{line: 1175, col: 16, offset: 44176},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 16, offset: 44176},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1175, col: 16, offset: 44176},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1175, col: 27, offset: 44187},
								expr: &ruleRefExpr{
									pos:  position{line: 1175, col: 28, offset: 44188},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 48, offset: 44208},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 69, offset: 44229},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1175, col: 77, offset: 44237},
								expr: &ruleRefExpr{
									pos:  position{line: 1175, col: 78, offset: 44238},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1175, col: 100, offset: 44260},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1175, col: 100, offset: 44260},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1175, col: 123, offset: 44283},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1179, col: 1, offset: 44391},
			expr: &choiceExpr{
				pos: position{line: 1179, col: 23, offset: 44413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1179, col: 23, offset: 44413},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 35, offset: 44425},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 51, offset: 44441},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 62, offset: 44452},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1182, col: 1, offset: 44492},
			expr: &actionExpr{
				pos: position{line: 1182, col: 25, offset: 44516},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1182, col: 25, offset: 44516},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1182, col: 31, offset: 44522},
						expr: &ruleRefExpr{
							pos:  position{line: 1182, col: 32, offset: 44523},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1186, col: 1, offset: 44636},
			expr: &actionExpr{
				pos: position{line: 1186, col: 29, offset: 44664},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 29, offset: 44664},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1186, col: 29, offset: 44664},
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 30, offset: 44665},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1186, col: 51, offset: 44686},
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 52, offset: 44687},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 62, offset: 44697},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 68, offset: 44703},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1193, col: 1, offset: 44941},
			expr: &seqExpr{
				pos: position{line: 1193, col: 26, offset: 44966},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1193, col: 26, offset: 44966},
						val:        "----",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1193, col: 33, offset: 44973},
						expr: &ruleRefExpr{
							pos:  position{line: 1193, col: 33, offset: 44973},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 37, offset: 44977},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1196, col: 1, offset: 45017},
			expr: &actionExpr{
				pos: position{line: 1196, col: 17, offset: 45033},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1196, col: 17, offset: 45033},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1196, col: 17, offset: 45033},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1196, col: 28, offset: 45044},
								expr: &ruleRefExpr{
									pos:  position{line: 1196, col: 29, offset: 45045},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1196, col: 49, offset: 45065},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1196, col: 71, offset: 45087},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1196, col: 79, offset: 45095},
								expr: &ruleRefExpr{
									pos:  position{line: 1196, col: 80, offset: 45096},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1196, col: 103, offset: 45119},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1196, col: 103, offset: 45119},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1196, col: 127, offset: 45143},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1200, col: 1, offset: 45252},
			expr: &choiceExpr{
				pos: position{line: 1200, col: 24, offset: 45275},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1200, col: 24, offset: 45275},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 40, offset: 45291},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1202, col: 1, offset: 45314},
			expr: &actionExpr{
				pos: position{line: 1202, col: 26, offset: 45339},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1202, col: 26, offset: 45339},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1202, col: 32, offset: 45345},
						expr: &ruleRefExpr{
							pos:  position{line: 1202, col: 33, offset: 45346},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1206, col: 1, offset: 45465},
			expr: &actionExpr{
				pos: position{line: 1206, col: 30, offset: 45494},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 30, offset: 45494},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1206, col: 30, offset: 45494},
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 31, offset: 45495},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1206, col: 53, offset: 45517},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1206, col: 59, offset: 45523},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1206, col: 59, offset: 45523},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1206, col: 59, offset: 45523},
											expr: &ruleRefExpr{
												pos:  position{line: 1206, col: 60, offset: 45524},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1206, col: 64, offset: 45528},
											expr: &choiceExpr{
												pos: position{line: 1206, col: 65, offset: 45529},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1206, col: 65, offset: 45529},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1206, col: 77, offset: 45541},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1206, col: 87, offset: 45551},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1206, col: 87, offset: 45551},
																expr: &ruleRefExpr{
																	pos:  position{line: 1206, col: 88, offset: 45552},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1206, col: 92, offset: 45556,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1206, col: 128, offset: 45592},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1213, col: 1, offset: 45918},
			expr: &seqExpr{
				pos: position{line: 1213, col: 26, offset: 45943},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1213, col: 26, offset: 45943},
						val:        "====",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1213, col: 33, offset: 45950},
						expr: &ruleRefExpr{
							pos:  position{line: 1213, col: 33, offset: 45950},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 37, offset: 45954},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1215, col: 1, offset: 45959},
			expr: &actionExpr{
				pos: position{line: 1215, col: 17, offset: 45975},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 17, offset: 45975},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1215, col: 17, offset: 45975},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1215, col: 28, offset: 45986},
								expr: &ruleRefExpr{
									pos:  position{line: 1215, col: 29, offset: 45987},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1215, col: 49, offset: 46007},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1215, col: 71, offset: 46029},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1215, col: 79, offset: 46037},
								expr: &choiceExpr{
									pos: position{line: 1215, col: 80, offset: 46038},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1215, col: 80, offset: 46038},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1215, col: 92, offset: 46050},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1215, col: 108, offset: 46066},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1215, col: 119, offset: 46077},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1215, col: 145, offset: 46103},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1215, col: 145, offset: 46103},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1215, col: 169, offset: 46127},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1220, col: 1, offset: 46254},
			expr: &actionExpr{
				pos: position{line: 1220, col: 26, offset: 46279},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1220, col: 26, offset: 46279},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1220, col: 32, offset: 46285},
						expr: &ruleRefExpr{
							pos:  position{line: 1220, col: 33, offset: 46286},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1224, col: 1, offset: 46400},
			expr: &actionExpr{
				pos: position{line: 1224, col: 30, offset: 46429},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1224, col: 30, offset: 46429},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1224, col: 30, offset: 46429},
							expr: &ruleRefExpr{
								pos:  position{line: 1224, col: 31, offset: 46430},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1224, col: 53, offset: 46452},
							expr: &ruleRefExpr{
								pos:  position{line: 1224, col: 54, offset: 46453},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1224, col: 64, offset: 46463},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1224, col: 70, offset: 46469},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1231, col: 1, offset: 46705},
			expr: &seqExpr{
				pos: position{line: 1231, col: 24, offset: 46728},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1231, col: 24, offset: 46728},
						val:        "____",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1231, col: 31, offset: 46735},
						expr: &ruleRefExpr{
							pos:  position{line: 1231, col: 31, offset: 46735},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 35, offset: 46739},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1233, col: 1, offset: 46769},
			expr: &actionExpr{
				pos: position{line: 1233, col: 15, offset: 46783},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 15, offset: 46783},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1233, col: 15, offset: 46783},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1233, col: 26, offset: 46794},
								expr: &ruleRefExpr{
									pos:  position{line: 1233, col: 27, offset: 46795},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1233, col: 47, offset: 46815},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 67, offset: 46835},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1233, col: 75, offset: 46843},
								expr: &ruleRefExpr{
									pos:  position{line: 1233, col: 76, offset: 46844},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1233, col: 97, offset: 46865},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1233, col: 97, offset: 46865},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1233, col: 119, offset: 46887},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1237, col: 1, offset: 46994},
			expr: &actionExpr{
				pos: position{line: 1238, col: 5, offset: 47020},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1238, col: 5, offset: 47020},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1238, col: 5, offset: 47020},
							expr: &ruleRefExpr{
								pos:  position{line: 1238, col: 6, offset: 47021},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1238, col: 26, offset: 47041},
							expr: &ruleRefExpr{
								pos:  position{line: 1238, col: 27, offset: 47042},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 31, offset: 47046},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1238, col: 40, offset: 47055},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1238, col: 40, offset: 47055},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1239, col: 15, offset: 47080},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1240, col: 15, offset: 47108},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1241, col: 15, offset: 47134},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1242, col: 15, offset: 47157},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 15, offset: 47183},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 15, offset: 47210},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 15, offset: 47237},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 15, offset: 47264},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 15, offset: 47296},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 15, offset: 47322},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 15, offset: 47349},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1250, col: 15, offset: 47370},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1251, col: 15, offset: 47398},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1252, col: 15, offset: 47442},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1253, col: 15, offset: 47480},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1254, col: 15, offset: 47515},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1258, col: 1, offset: 47574},
			expr: &actionExpr{
				pos: position{line: 1258, col: 24, offset: 47597},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1258, col: 24, offset: 47597},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1258, col: 30, offset: 47603},
						expr: &ruleRefExpr{
							pos:  position{line: 1258, col: 31, offset: 47604},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1267, col: 1, offset: 47950},
			expr: &actionExpr{
				pos: position{line: 1267, col: 15, offset: 47964},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 15, offset: 47964},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1267, col: 15, offset: 47964},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 27, offset: 47976},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1268, col: 5, offset: 48000},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1271, col: 5, offset: 48177},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1271, col: 25, offset: 48197},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1271, col: 33, offset: 48205},
								expr: &ruleRefExpr{
									pos:  position{line: 1271, col: 34, offset: 48206},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1271, col: 55, offset: 48227},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1271, col: 55, offset: 48227},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1271, col: 77, offset: 48249},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1275, col: 1, offset: 48364},
			expr: &choiceExpr{
				pos: position{line: 1275, col: 22, offset: 48385},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1275, col: 22, offset: 48385},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 41, offset: 48404},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 53, offset: 48416},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1277, col: 1, offset: 48437},
			expr: &actionExpr{
				pos: position{line: 1277, col: 21, offset: 48457},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 21, offset: 48457},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1277, col: 21, offset: 48457},
							expr: &ruleRefExpr{
								pos:  position{line: 1277, col: 22, offset: 48458},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1277, col: 42, offset: 48478},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1277, col: 51, offset: 48487},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1282, col: 1, offset: 48549},
			expr: &actionExpr{
				pos: position{line: 1282, col: 24, offset: 48572},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1282, col: 24, offset: 48572},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1282, col: 30, offset: 48578},
						expr: &ruleRefExpr{
							pos:  position{line: 1282, col: 31, offset: 48579},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1286, col: 1, offset: 48669},
			expr: &actionExpr{
				pos: position{line: 1286, col: 28, offset: 48696},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1286, col: 28, offset: 48696},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1286, col: 28, offset: 48696},
							expr: &ruleRefExpr{
								pos:  position{line: 1286, col: 29, offset: 48697},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1286, col: 49, offset: 48717},
							expr: &ruleRefExpr{
								pos:  position{line: 1286, col: 50, offset: 48718},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1286, col: 60, offset: 48728},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1286, col: 66, offset: 48734},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1286, col: 66, offset: 48734},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1286, col: 66, offset: 48734},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1286, col: 75, offset: 48743},
												expr: &ruleRefExpr{
													pos:  position{line: 1286, col: 76, offset: 48744},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1286, col: 109, offset: 48777},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1292, col: 1, offset: 48873},
			expr: &actionExpr{
				pos: position{line: 1292, col: 35, offset: 48907},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1292, col: 35, offset: 48907},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1292, col: 35, offset: 48907},
							expr: &ruleRefExpr{
								pos:  position{line: 1292, col: 36, offset: 48908},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1292, col: 40, offset: 48912},
							expr: &ruleRefExpr{
								pos:  position{line: 1292, col: 41, offset: 48913},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1293, col: 5, offset: 48928},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1293, col: 14, offset: 48937},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1293, col: 14, offset: 48937},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1294, col: 11, offset: 48955},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1295, col: 11, offset: 48978},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1296, col: 11, offset: 48994},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1297, col: 11, offset: 49017},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1298, col: 11, offset: 49043},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1299, col: 11, offset: 49070},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1300, col: 11, offset: 49092},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1301, col: 11, offset: 49118},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1302, col: 11, offset: 49159},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1303, col: 11, offset: 49186},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1310, col: 1, offset: 49416},
			expr: &seqExpr{
				pos: position{line: 1310, col: 26, offset: 49441},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1310, col: 26, offset: 49441},
						val:        "****",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1310, col: 33, offset: 49448},
						expr: &ruleRefExpr{
							pos:  position{line: 1310, col: 33, offset: 49448},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1310, col: 37, offset: 49452},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1312, col: 1, offset: 49457},
			expr: &actionExpr{
				pos: position{line: 1312, col: 17, offset: 49473},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 17, offset: 49473},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1312, col: 17, offset: 49473},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1312, col: 28, offset: 49484},
								expr: &ruleRefExpr{
									pos:  position{line: 1312, col: 29, offset: 49485},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1312, col: 49, offset: 49505},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 71, offset: 49527},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1312, col: 79, offset: 49535},
								expr: &ruleRefExpr{
									pos:  position{line: 1312, col: 80, offset: 49536},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1312, col: 104, offset: 49560},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1312, col: 104, offset: 49560},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1312, col: 128, offset: 49584},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1316, col: 1, offset: 49693},
			expr: &choiceExpr{
				pos: position{line: 1316, col: 24, offset: 49716},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1316, col: 24, offset: 49716},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 36, offset: 49728},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 52, offset: 49744},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 63, offset: 49755},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 81, offset: 49773},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1318, col: 1, offset: 49796},
			expr: &actionExpr{
				pos: position{line: 1318, col: 20, offset: 49815},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 20, offset: 49815},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1318, col: 20, offset: 49815},
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 21, offset: 49816},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1318, col: 34, offset: 49829},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 43, offset: 49838},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1323, col: 1, offset: 49901},
			expr: &actionExpr{
				pos: position{line: 1323, col: 26, offset: 49926},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1323, col: 26, offset: 49926},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1323, col: 32, offset: 49932},
						expr: &ruleRefExpr{
							pos:  position{line: 1323, col: 33, offset: 49933},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1327, col: 1, offset: 50047},
			expr: &actionExpr{
				pos: position{line: 1327, col: 30, offset: 50076},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 30, offset: 50076},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1327, col: 30, offset: 50076},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 31, offset: 50077},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1327, col: 53, offset: 50099},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 54, offset: 50100},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 64, offset: 50110},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 70, offset: 50116},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1335, col: 1, offset: 50347},
			expr: &actionExpr{
				pos: position{line: 1335, col: 10, offset: 50356},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1335, col: 10, offset: 50356},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1335, col: 10, offset: 50356},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1335, col: 21, offset: 50367},
								expr: &ruleRefExpr{
									pos:  position{line: 1335, col: 22, offset: 50368},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1335, col: 42, offset: 50388},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 5, offset: 50407},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1336, col: 12, offset: 50414},
								expr: &ruleRefExpr{
									pos:  position{line: 1336, col: 13, offset: 50415},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1337, col: 5, offset: 50437},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1337, col: 11, offset: 50443},
								expr: &ruleRefExpr{
									pos:  position{line: 1337, col: 12, offset: 50444},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1338, col: 6, offset: 50461},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1338, col: 6, offset: 50461},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1338, col: 23, offset: 50478},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1342, col: 1, offset: 50593},
			expr: &seqExpr{
				pos: position{line: 1342, col: 23, offset: 50615},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1342, col: 23, offset: 50615},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1342, col: 27, offset: 50619},
						expr: &ruleRefExpr{
							pos:  position{line: 1342, col: 27, offset: 50619},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1344, col: 1, offset: 50624},
			expr: &seqExpr{
				pos: position{line: 1344, col: 19, offset: 50642},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1344, col: 19, offset: 50642},
						val:        "|===",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1344, col: 26, offset: 50649},
						expr: &ruleRefExpr{
							pos:  position{line: 1344, col: 26, offset: 50649},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 30, offset: 50653},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1347, col: 1, offset: 50721},
			expr: &actionExpr{
				pos: position{line: 1347, col: 20, offset: 50740},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1347, col: 20, offset: 50740},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1347, col: 20, offset: 50740},
							expr: &ruleRefExpr{
								pos:  position{line: 1347, col: 21, offset: 50741},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 36, offset: 50756},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1347, col: 42, offset: 50762},
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 43, offset: 50763},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1347, col: 55, offset: 50775},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1347, col: 59, offset: 50779},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1351, col: 1, offset: 50847},
			expr: &actionExpr{
				pos: position{line: 1351, col: 14, offset: 50860},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1351, col: 14, offset: 50860},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1351, col: 14, offset: 50860},
							expr: &ruleRefExpr{
								pos:  position{line: 1351, col: 15, offset: 50861},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1351, col: 30, offset: 50876},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1351, col: 36, offset: 50882},
								expr: &ruleRefExpr{
									pos:  position{line: 1351, col: 37, offset: 50883},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1351, col: 49, offset: 50895},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1351, col: 53, offset: 50899},
							expr: &ruleRefExpr{
								pos:  position{line: 1351, col: 53, offset: 50899},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1355, col: 1, offset: 50968},
			expr: &actionExpr{
				pos: position{line: 1355, col: 14, offset: 50981},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1355, col: 14, offset: 50981},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1355, col: 14, offset: 50981},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1355, col: 33, offset: 51000},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1355, col: 42, offset: 51009},
								expr: &seqExpr{
									pos: position{line: 1355, col: 43, offset: 51010},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1355, col: 43, offset: 51010},
											expr: &ruleRefExpr{
												pos:  position{line: 1355, col: 44, offset: 51011},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1355, col: 63, offset: 51030},
											expr: &ruleRefExpr{
												pos:  position{line: 1355, col: 64, offset: 51031},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1355, col: 68, offset: 51035},
											expr: &ruleRefExpr{
												pos:  position{line: 1355, col: 68, offset: 51035},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1355, col: 72, offset: 51039},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1355, col: 86, offset: 51053},
											expr: &ruleRefExpr{
												pos:  position{line: 1355, col: 86, offset: 51053},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1362, col: 1, offset: 51299},
			expr: &litMatcher{
				pos:        position{line: 1362, col: 26, offset: 51324},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1364, col: 1, offset: 51332},
			expr: &actionExpr{
				pos: position{line: 1364, col: 17, offset: 51348},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1364, col: 17, offset: 51348},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1364, col: 17, offset: 51348},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1364, col: 39, offset: 51370},
							expr: &ruleRefExpr{
								pos:  position{line: 1364, col: 39, offset: 51370},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1364, col: 43, offset: 51374},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1364, col: 51, offset: 51382},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1364, col: 59, offset: 51390},
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 60, offset: 51391},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1364, col: 81, offset: 51412},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1364, col: 82, offset: 51413},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1364, col: 82, offset: 51413},
											name: "CommentBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1364, col: 104, offset: 51435},
											expr: &ruleRefExpr{
												pos:  position{line: 1364, col: 104, offset: 51435},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1364, col: 108, offset: 51439},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1364, col: 115, offset: 51446},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1368, col: 1, offset: 51552},
			expr: &actionExpr{
				pos: position{line: 1368, col: 21, offset: 51572},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1368, col: 21, offset: 51572},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1368, col: 21, offset: 51572},
							expr: &choiceExpr{
								pos: position{line: 1368, col: 22, offset: 51573},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1368, col: 22, offset: 51573},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1368, col: 34, offset: 51585},
										name: "Spaces",
									},
									&actionExpr{
										pos: position{line: 1368, col: 43, offset: 51594},
										run: (*parser).callonCommentBlockLine7,
										expr: &seqExpr{
											pos: position{line: 1368, col: 44, offset: 51595},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1368, col: 44, offset: 51595},
													expr: &ruleRefExpr{
														pos:  position{line: 1368, col: 45, offset: 51596},
														name: "CommentBlockDelimiter",
													},
												},
												&notExpr{
													pos: position{line: 1368, col: 67, offset: 51618},
													expr: &ruleRefExpr{
														pos:  position{line: 1368, col: 68, offset: 51619},
														name: "EOL",
													},
												},
												&anyMatcher{
													line: 1368, col: 73, offset: 51624,
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1370, col: 5, offset: 51663},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1374, col: 1, offset: 51703},
			expr: &actionExpr{
				pos: position{line: 1374, col: 22, offset: 51724},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1374, col: 22, offset: 51724},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1374, col: 22, offset: 51724},
							expr: &ruleRefExpr{
								pos:  position{line: 1374, col: 23, offset: 51725},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1374, col: 45, offset: 51747},
							expr: &ruleRefExpr{
								pos:  position{line: 1374, col: 45, offset: 51747},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1374, col: 49, offset: 51751},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1374, col: 54, offset: 51756},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1374, col: 63, offset: 51765},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1374, col: 89, offset: 51791},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1378, col: 1, offset: 51856},
			expr: &actionExpr{
				pos: position{line: 1378, col: 29, offset: 51884},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1378, col: 29, offset: 51884},
					expr: &choiceExpr{
						pos: position{line: 1378, col: 30, offset: 51885},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1378, col: 30, offset: 51885},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1378, col: 42, offset: 51897},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 1378, col: 51, offset: 51906},
								run: (*parser).callonSingleLineCommentContent6,
								expr: &seqExpr{
									pos: position{line: 1378, col: 52, offset: 51907},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1378, col: 52, offset: 51907},
											expr: &ruleRefExpr{
												pos:  position{line: 1378, col: 53, offset: 51908},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 1378, col: 58, offset: 51913,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1388, col: 1, offset: 52256},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 17, offset: 52272},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1388, col: 17, offset: 52272},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 49, offset: 52304},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 78, offset: 52333},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1390, col: 1, offset: 52369},
			expr: &litMatcher{
				pos:        position{line: 1390, col: 26, offset: 52394},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1393, col: 1, offset: 52466},
			expr: &actionExpr{
				pos: position{line: 1393, col: 31, offset: 52496},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1393, col: 31, offset: 52496},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1393, col: 31, offset: 52496},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1393, col: 42, offset: 52507},
								expr: &ruleRefExpr{
									pos:  position{line: 1393, col: 43, offset: 52508},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1393, col: 63, offset: 52528},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1393, col: 70, offset: 52535},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1398, col: 1, offset: 52765},
			expr: &actionExpr{
				pos: position{line: 1399, col: 5, offset: 52805},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1399, col: 5, offset: 52805},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1399, col: 5, offset: 52805},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1399, col: 16, offset: 52816},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1399, col: 16, offset: 52816},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1399, col: 16, offset: 52816},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1399, col: 19, offset: 52819},
											expr: &choiceExpr{
												pos: position{line: 1399, col: 20, offset: 52820},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1399, col: 20, offset: 52820},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1399, col: 32, offset: 52832},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1399, col: 41, offset: 52841},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1399, col: 42, offset: 52842},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1399, col: 42, offset: 52842},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1399, col: 43, offset: 52843},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1399, col: 48, offset: 52848,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1403, col: 8, offset: 52939},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1404, col: 5, offset: 53002},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1404, col: 16, offset: 53013},
								expr: &actionExpr{
									pos: position{line: 1405, col: 9, offset: 53023},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1405, col: 9, offset: 53023},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1405, col: 9, offset: 53023},
												expr: &ruleRefExpr{
													pos:  position{line: 1405, col: 10, offset: 53024},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1406, col: 9, offset: 53043},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1406, col: 20, offset: 53054},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1406, col: 20, offset: 53054},
														expr: &choiceExpr{
															pos: position{line: 1406, col: 21, offset: 53055},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1406, col: 21, offset: 53055},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1406, col: 33, offset: 53067},
																	name: "Spaces",
																},
																&actionExpr{
																	pos: position{line: 1406, col: 42, offset: 53076},
																	run: (*parser).callonParagraphWithHeadingSpacesLines29,
																	expr: &seqExpr{
																		pos: position{line: 1406, col: 43, offset: 53077},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1406, col: 43, offset: 53077},
																				expr: &ruleRefExpr{
																					pos:  position{line: 1406, col: 44, offset: 53078},
																					name: "EOL",
																				},
																			},
																			&anyMatcher{
																				line: 1406, col: 49, offset: 53083,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1410, col: 12, offset: 53190},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1417, col: 1, offset: 53420},
			expr: &actionExpr{
				pos: position{line: 1417, col: 39, offset: 53458},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 39, offset: 53458},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1417, col: 39, offset: 53458},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1417, col: 50, offset: 53469},
								expr: &ruleRefExpr{
									pos:  position{line: 1417, col: 51, offset: 53470},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1418, col: 9, offset: 53498},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1418, col: 31, offset: 53520},
							expr: &ruleRefExpr{
								pos:  position{line: 1418, col: 31, offset: 53520},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1418, col: 35, offset: 53524},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1418, col: 43, offset: 53532},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1418, col: 50, offset: 53539},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1418, col: 92, offset: 53581},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1418, col: 93, offset: 53582},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1418, col: 93, offset: 53582},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1418, col: 115, offset: 53604},
											expr: &ruleRefExpr{
												pos:  position{line: 1418, col: 115, offset: 53604},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1418, col: 119, offset: 53608},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1418, col: 126, offset: 53615},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1423, col: 1, offset: 53774},
			expr: &actionExpr{
				pos: position{line: 1423, col: 44, offset: 53817},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1423, col: 44, offset: 53817},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1423, col: 50, offset: 53823},
						expr: &ruleRefExpr{
							pos:  position{line: 1423, col: 51, offset: 53824},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1427, col: 1, offset: 53908},
			expr: &actionExpr{
				pos: position{line: 1428, col: 5, offset: 53963},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1428, col: 5, offset: 53963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1428, col: 5, offset: 53963},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1428, col: 11, offset: 53969},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1428, col: 11, offset: 53969},
									expr: &choiceExpr{
										pos: position{line: 1428, col: 12, offset: 53970},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1428, col: 12, offset: 53970},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1428, col: 24, offset: 53982},
												name: "Spaces",
											},
											&actionExpr{
												pos: position{line: 1428, col: 33, offset: 53991},
												run: (*parser).callonParagraphWithLiteralBlockDelimiterLine9,
												expr: &seqExpr{
													pos: position{line: 1428, col: 34, offset: 53992},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1428, col: 34, offset: 53992},
															expr: &ruleRefExpr{
																pos:  position{line: 1428, col: 35, offset: 53993},
																name: "LiteralBlockDelimiter",
															},
														},
														&notExpr{
															pos: position{line: 1428, col: 57, offset: 54015},
															expr: &ruleRefExpr{
																pos:  position{line: 1428, col: 58, offset: 54016},
																name: "EOL",
															},
														},
														&anyMatcher{
															line: 1428, col: 62, offset: 54020,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1432, col: 8, offset: 54111},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1437, col: 1, offset: 54237},
			expr: &actionExpr{
				pos: position{line: 1438, col: 5, offset: 54275},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1438, col: 5, offset: 54275},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1438, col: 5, offset: 54275},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1438, col: 16, offset: 54286},
								expr: &ruleRefExpr{
									pos:  position{line: 1438, col: 17, offset: 54287},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1439, col: 5, offset: 54311},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 5, offset: 54516},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 12, offset: 54523},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1450, col: 1, offset: 54673},
			expr: &actionExpr{
				pos: position{line: 1450, col: 16, offset: 54688},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1450, col: 16, offset: 54688},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1455, col: 1, offset: 54771},
			expr: &actionExpr{
				pos: position{line: 1455, col: 39, offset: 54809},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1455, col: 39, offset: 54809},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1455, col: 45, offset: 54815},
						expr: &ruleRefExpr{
							pos:  position{line: 1455, col: 46, offset: 54816},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1459, col: 1, offset: 54896},
			expr: &actionExpr{
				pos: position{line: 1459, col: 38, offset: 54933},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1459, col: 38, offset: 54933},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1459, col: 38, offset: 54933},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1459, col: 44, offset: 54939},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1459, col: 44, offset: 54939},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1459, col: 44, offset: 54939},
											expr: &ruleRefExpr{
												pos:  position{line: 1459, col: 46, offset: 54941},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1459, col: 57, offset: 54952},
											expr: &choiceExpr{
												pos: position{line: 1459, col: 58, offset: 54953},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1459, col: 58, offset: 54953},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1459, col: 70, offset: 54965},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1459, col: 79, offset: 54974},
														run: (*parser).callonParagraphWithLiteralAttributeLine12,
														expr: &seqExpr{
															pos: position{line: 1459, col: 80, offset: 54975},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1459, col: 80, offset: 54975},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1459, col: 81, offset: 54976},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1459, col: 86, offset: 54981,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1463, col: 4, offset: 55056},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1470, col: 1, offset: 55228},
			expr: &actionExpr{
				pos: position{line: 1470, col: 14, offset: 55241},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1470, col: 14, offset: 55241},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1470, col: 14, offset: 55241},
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 15, offset: 55242},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1470, col: 19, offset: 55246},
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 19, offset: 55246},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1470, col: 23, offset: 55250},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1477, col: 1, offset: 55397},
			expr: &charClassMatcher{
				pos:        position{line: 1477, col: 13, offset: 55409},
				val:        "[a-zA-Z0-9]",
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1479, col: 1, offset: 55422},
			expr: &choiceExpr{
				pos: position{line: 1479, col: 16, offset: 55437},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1479, col: 16, offset: 55437},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1479, col: 22, offset: 55443},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1479, col: 28, offset: 55449},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1479, col: 34, offset: 55455},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1481, col: 1, offset: 55460},
			expr: &actionExpr{
				pos: position{line: 1481, col: 14, offset: 55473},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1481, col: 14, offset: 55473},
					expr: &charClassMatcher{
						pos:        position{line: 1481, col: 14, offset: 55473},
						val:        "[a-zA-Z0-9]",
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1485, col: 1, offset: 55522},
			expr: &actionExpr{
				pos: position{line: 1485, col: 8, offset: 55529},
				run: (*parser).callonDot1,
				expr: &litMatcher{
					pos:        position{line: 1485, col: 8, offset: 55529},
					val:        ".",
					ignoreCase: false,
				},
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1489, col: 1, offset: 55569},
			expr: &actionExpr{
				pos: position{line: 1489, col: 15, offset: 55583},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 15, offset: 55583},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1489, col: 15, offset: 55583},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1489, col: 25, offset: 55593},
							expr: &choiceExpr{
								pos: position{line: 1489, col: 27, offset: 55595},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1489, col: 27, offset: 55595},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1489, col: 32, offset: 55600},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1494, col: 1, offset: 55865},
			expr: &actionExpr{
				pos: position{line: 1494, col: 14, offset: 55878},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1494, col: 15, offset: 55879},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1494, col: 15, offset: 55879},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1494, col: 27, offset: 55891},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1494, col: 46, offset: 55910},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1494, col: 60, offset: 55924},
							expr: &actionExpr{
								pos: position{line: 1494, col: 61, offset: 55925},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1494, col: 61, offset: 55925},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1494, col: 62, offset: 55926},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1494, col: 62, offset: 55926},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 63, offset: 55927},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1494, col: 71, offset: 55935},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 72, offset: 55936},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1494, col: 75, offset: 55939},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 76, offset: 55940},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1494, col: 80, offset: 55944},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 81, offset: 55945},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1494, col: 98, offset: 55962,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1494, col: 101, offset: 55965},
											expr: &ruleRefExpr{
												pos:  position{line: 1494, col: 101, offset: 55965},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1496, col: 7, offset: 56074},
							expr: &litMatcher{
								pos:        position{line: 1496, col: 7, offset: 56074},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Text",
			pos:  position{line: 1500, col: 1, offset: 56255},
			expr: &actionExpr{
				pos: position{line: 1500, col: 9, offset: 56263},
				run: (*parser).callonText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1500, col: 9, offset: 56263},
					expr: &choiceExpr{
						pos: position{line: 1500, col: 10, offset: 56264},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1500, col: 10, offset: 56264},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1500, col: 22, offset: 56276},
								name: "Spaces",
							},
							&actionExpr{
								pos: position{line: 1500, col: 31, offset: 56285},
								run: (*parser).callonText6,
								expr: &seqExpr{
									pos: position{line: 1500, col: 32, offset: 56286},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1500, col: 32, offset: 56286},
											expr: &ruleRefExpr{
												pos:  position{line: 1500, col: 33, offset: 56287},
												name: "EOL",
											},
										},
										&anyMatcher{
											line: 1500, col: 37, offset: 56291,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1506, col: 1, offset: 56570},
			expr: &actionExpr{
				pos: position{line: 1506, col: 11, offset: 56580},
				run: (*parser).callonSpaces1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1506, col: 11, offset: 56580},
					expr: &ruleRefExpr{
						pos:  position{line: 1506, col: 11, offset: 56580},
						name: "WS",
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1510, col: 1, offset: 56620},
			expr: &actionExpr{
				pos: position{line: 1510, col: 17, offset: 56636},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1510, col: 17, offset: 56636},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1510, col: 26, offset: 56645},
						expr: &choiceExpr{
							pos: position{line: 1510, col: 27, offset: 56646},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1510, col: 27, offset: 56646},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1510, col: 38, offset: 56657},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1514, col: 1, offset: 56749},
			expr: &actionExpr{
				pos: position{line: 1514, col: 13, offset: 56761},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1514, col: 13, offset: 56761},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1514, col: 23, offset: 56771},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1514, col: 23, offset: 56771},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1514, col: 34, offset: 56782},
								expr: &choiceExpr{
									pos: position{line: 1514, col: 35, offset: 56783},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1514, col: 35, offset: 56783},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1514, col: 67, offset: 56815},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1514, col: 67, offset: 56815},
													expr: &ruleRefExpr{
														pos:  position{line: 1514, col: 68, offset: 56816},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1514, col: 72, offset: 56820},
													expr: &litMatcher{
														pos:        position{line: 1514, col: 73, offset: 56821},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1514, col: 77, offset: 56825,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1518, col: 1, offset: 56890},
			expr: &choiceExpr{
				pos: position{line: 1518, col: 13, offset: 56902},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 1518, col: 13, offset: 56902},
						expr: &charClassMatcher{
							pos:        position{line: 1518, col: 13, offset: 56902},
							val:        "[a-zA-Z0-9]",
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1518, col: 28, offset: 56917},
						val:        ".",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1518, col: 34, offset: 56923},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1518, col: 40, offset: 56929},
						val:        "/",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1518, col: 46, offset: 56935},
						val:        "-",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1520, col: 1, offset: 56940},
			expr: &actionExpr{
				pos: position{line: 1520, col: 8, offset: 56947},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1520, col: 8, offset: 56947},
					expr: &choiceExpr{
						pos: position{line: 1520, col: 9, offset: 56948},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1520, col: 9, offset: 56948},
								name: "Alphanums",
							},
							&actionExpr{
								pos: position{line: 1520, col: 21, offset: 56960},
								run: (*parser).callonURL5,
								expr: &seqExpr{
									pos: position{line: 1520, col: 22, offset: 56961},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1520, col: 22, offset: 56961},
											expr: &ruleRefExpr{
												pos:  position{line: 1520, col: 23, offset: 56962},
												name: "NEWLINE",
											},
										},
										&notExpr{
											pos: position{line: 1520, col: 31, offset: 56970},
											expr: &ruleRefExpr{
												pos:  position{line: 1520, col: 32, offset: 56971},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1520, col: 35, offset: 56974},
											expr: &litMatcher{
												pos:        position{line: 1520, col: 36, offset: 56975},
												val:        "[",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1520, col: 40, offset: 56979},
											expr: &litMatcher{
												pos:        position{line: 1520, col: 41, offset: 56980},
												val:        "]",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 1520, col: 46, offset: 56985,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1526, col: 1, offset: 57060},
			expr: &choiceExpr{
				pos: position{line: 1526, col: 15, offset: 57074},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1526, col: 15, offset: 57074},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1526, col: 27, offset: 57086},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1526, col: 40, offset: 57099},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1526, col: 51, offset: 57110},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1526, col: 62, offset: 57121},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1528, col: 1, offset: 57132},
			expr: &actionExpr{
				pos: position{line: 1528, col: 7, offset: 57138},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1528, col: 7, offset: 57138},
					expr: &choiceExpr{
						pos: position{line: 1528, col: 8, offset: 57139},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1528, col: 8, offset: 57139},
								name: "Alphanums",
							},
							&actionExpr{
								pos: position{line: 1528, col: 20, offset: 57151},
								run: (*parser).callonID5,
								expr: &seqExpr{
									pos: position{line: 1528, col: 21, offset: 57152},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1528, col: 21, offset: 57152},
											expr: &ruleRefExpr{
												pos:  position{line: 1528, col: 22, offset: 57153},
												name: "NEWLINE",
											},
										},
										&notExpr{
											pos: position{line: 1528, col: 30, offset: 57161},
											expr: &ruleRefExpr{
												pos:  position{line: 1528, col: 31, offset: 57162},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1528, col: 34, offset: 57165},
											expr: &litMatcher{
												pos:        position{line: 1528, col: 35, offset: 57166},
												val:        "[",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1528, col: 39, offset: 57170},
											expr: &litMatcher{
												pos:        position{line: 1528, col: 40, offset: 57171},
												val:        "]",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1528, col: 44, offset: 57175},
											expr: &litMatcher{
												pos:        position{line: 1528, col: 45, offset: 57176},
												val:        "<<",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1528, col: 50, offset: 57181},
											expr: &litMatcher{
												pos:        position{line: 1528, col: 51, offset: 57182},
												val:        ">>",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1528, col: 56, offset: 57187},
											expr: &litMatcher{
												pos:        position{line: 1528, col: 57, offset: 57188},
												val:        ",",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 1528, col: 62, offset: 57193,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1534, col: 1, offset: 57268},
			expr: &actionExpr{
				pos: position{line: 1534, col: 10, offset: 57277},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1534, col: 10, offset: 57277},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1538, col: 1, offset: 57319},
			expr: &actionExpr{
				pos: position{line: 1538, col: 11, offset: 57329},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1538, col: 11, offset: 57329},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1538, col: 11, offset: 57329},
							expr: &litMatcher{
								pos:        position{line: 1538, col: 11, offset: 57329},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1538, col: 16, offset: 57334},
							expr: &ruleRefExpr{
								pos:  position{line: 1538, col: 16, offset: 57334},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1542, col: 1, offset: 57386},
			expr: &choiceExpr{
				pos: position{line: 1542, col: 7, offset: 57392},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1542, col: 7, offset: 57392},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1542, col: 13, offset: 57398},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1542, col: 13, offset: 57398},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1546, col: 1, offset: 57439},
			expr: &choiceExpr{
				pos: position{line: 1546, col: 12, offset: 57450},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1546, col: 12, offset: 57450},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1546, col: 21, offset: 57459},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1546, col: 28, offset: 57466},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1548, col: 1, offset: 57472},
			expr: &notExpr{
				pos: position{line: 1548, col: 8, offset: 57479},
				expr: &anyMatcher{
					line: 1548, col: 9, offset: 57480,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1550, col: 1, offset: 57483},
			expr: &choiceExpr{
				pos: position{line: 1550, col: 8, offset: 57490},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1550, col: 8, offset: 57490},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1550, col: 18, offset: 57500},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onPreflightDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent3()
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber10()
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber19()
}

func (c *current) onDocumentRevisionDate6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate6()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark6()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), nil)
}

func (p *parser) callonDocumentAttributeDeclaration2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration2(stack["name"])
}

func (c *current) onDocumentAttributeDeclaration11(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration11(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle14() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle14()
}

func (c *current) onElementTitle9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle9()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole12()
}

func (c *current) onElementRole7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole7()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes2() (interface{}, error) {
	return types.NewSourceAttributes("")
}

func (p *parser) callonSourceAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes2()
}

func (c *current) onSourceAttributes17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes17()
}

func (c *current) onSourceAttributes12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes12()
}

func (c *current) onSourceAttributes8(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language.(string))
}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey14() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey14()
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue7()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes2(kind, author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), author.(string), title.(string))
}

func (p *parser) callonQuoteAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes2(stack["kind"], stack["author"], stack["title"])
}

func (c *current) onQuoteAttributes19(kind, author interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), author.(string), "")
}

func (p *parser) callonQuoteAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes19(stack["kind"], stack["author"])
}

func (c *current) onQuoteAttributes33(kind interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), "", "")
}

func (p *parser) callonQuoteAttributes33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes33(stack["kind"])
}

func (c *current) onQuoteKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteKind1()
}

func (c *current) onVerseAttributes2(kind, author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), author.(string), title.(string))

}

func (p *parser) callonVerseAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes2(stack["kind"], stack["author"], stack["title"])
}

func (c *current) onVerseAttributes19(kind, author interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), author.(string), "")

}

func (p *parser) callonVerseAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes19(stack["kind"], stack["author"])
}

func (c *current) onVerseAttributes33(kind interface{}) (interface{}, error) {
	return types.NewQuoteAttributes(kind.(string), "", "")

}

func (p *parser) callonVerseAttributes33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes33(stack["kind"])
}

func (c *current) onVerseKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerseKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseKind1()
}

func (c *current) onQuoteAuthor6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAuthor6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAuthor6()
}

func (c *current) onQuoteAuthor1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAuthor1()
}

func (c *current) onQuoteTitle1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteTitle1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges9(stack["other"])
}

func (c *current) onMultipleRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges10(stack["other"])
}

func (c *current) onMultipleQuotedRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges1(stack["first"], stack["others"])
}

func (c *current) onMultilineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineRange1(stack["start"], stack["end"])
}

func (c *current) onMultilineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSinglelineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineRange1(stack["singleline"])
}

func (c *current) onSinglelineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is level 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["level"])
}

func (c *current) onOrderedListItemPrefix7(level interface{}) (interface{}, error) {
	return types.NewOrderedListItemPrefix(types.DefaultNumberingStyles[level.(int)], level.(int))

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["level"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix7() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7()
}

func (c *current) onUnorderedListItemPrefix9() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)

}

func (p *parser) callonUnorderedListItemPrefix9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix9()
}

func (c *current) onUnorderedListItemPrefix11() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)

}

func (p *parser) callonUnorderedListItemPrefix11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix11()
}

func (c *current) onUnorderedListItemPrefix13() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)

}

func (p *parser) callonUnorderedListItemPrefix13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13()
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix17() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" marker
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix17()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm6()
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine4(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonFirstParagraphLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine4(stack["comment"])
}

func (c *current) onFirstParagraphLine7(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonFirstParagraphLine7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine7(stack["elements"], stack["linebreak"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attributes == nil {
		return false, nil
	}
	kind, ok := attributes.(types.ElementAttributes)[types.AttrKind]
	return ok && kind == types.Verse, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attributes == nil {
		return false, nil
	}
	kind, ok := attributes.(types.ElementAttributes)[types.AttrKind]
	return ok && kind == types.Verse, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubScriptOrSuperScriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubScriptOrSuperScriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubScriptOrSuperScriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel6()
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onExternalLink2(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink2(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink8(url interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), types.ElementAttributes{})
}

func (p *parser) callonExternalLink8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink8(stack["url"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes2(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text.(types.InlineElements), otherattrs.([]interface{}))
}

func (p *parser) callonLinkAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes2(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkAttributes15(otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(nil, otherattrs.([]interface{}))
}

func (p *parser) callonLinkAttributes15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes15(stack["otherattrs"])
}

func (c *current) onLinkTextAttribute13() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonLinkTextAttribute13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute13()
}

func (c *current) onLinkTextAttribute1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLinkTextAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute1(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes2(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes2(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onImageAttributes19(alt, width, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, nil, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes19(stack["alt"], stack["width"], stack["otherattrs"])
}

func (c *current) onImageAttributes33(alt, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, nil, nil, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes33(stack["alt"], stack["otherattrs"])
}

func (c *current) onImageAttributes44(otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(nil, nil, nil, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes44(stack["otherattrs"])
}

func (c *current) onImageAttribute6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageAttribute6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttribute6()
}

func (c *current) onImageAttribute1() (interface{}, error) {
	// attribute is followed by "," or "]" (but do not consume the latter)
	return string(c.text), nil
}

func (p *parser) callonImageAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttribute1()
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef6()
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {
	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine7()
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent6()
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines29()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine9()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attributes == nil {
		return false, nil
	}
	kind, ok := attributes.(types.ElementAttributes)[types.AttrKind]
	return ok && kind == types.Literal, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine12()
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onDot1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDot1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDot1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onText6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonText6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onText6()
}

func (c *current) onText1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onText1()
}

func (c *current) onSpaces1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaces1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL5()
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID5()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
