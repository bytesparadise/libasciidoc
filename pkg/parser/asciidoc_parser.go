// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

// *****************************************************************************************
// This file is generated after its sibling `asciidoc-grammar.peg` file. DO NOT MODIFY !
// *****************************************************************************************

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 18, col: 1, offset: 504},
			expr: &actionExpr{
				pos: position{line: 18, col: 13, offset: 516},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 18, col: 13, offset: 516},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 18, col: 13, offset: 516},
							label: "frontMatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 18, col: 26, offset: 529},
								expr: &ruleRefExpr{
									pos:  position{line: 18, col: 26, offset: 529},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 40, offset: 543},
							label: "documentHeader",
							expr: &zeroOrOneExpr{
								pos: position{line: 18, col: 56, offset: 559},
								expr: &ruleRefExpr{
									pos:  position{line: 18, col: 56, offset: 559},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 73, offset: 576},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 18, col: 80, offset: 583},
								expr: &choiceExpr{
									pos: position{line: 18, col: 81, offset: 584},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 18, col: 81, offset: 584},
											name: "Section",
										},
										&ruleRefExpr{
											pos:  position{line: 18, col: 91, offset: 594},
											name: "DocumentBlock",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 18, col: 107, offset: 610},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 22, col: 1, offset: 698},
			expr: &actionExpr{
				pos: position{line: 22, col: 18, offset: 715},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 22, col: 18, offset: 715},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 22, col: 18, offset: 715},
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 19, offset: 716},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 793},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 23, col: 12, offset: 800},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 23, col: 12, offset: 800},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 23, col: 24, offset: 812},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 23, col: 55, offset: 843},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 23, col: 80, offset: 868},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 23, col: 103, offset: 891},
										name: "List",
									},
									&ruleRefExpr{
										pos:  position{line: 23, col: 110, offset: 898},
										name: "BlockImage",
									},
									&ruleRefExpr{
										pos:  position{line: 23, col: 123, offset: 911},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 23, col: 138, offset: 926},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 23, col: 155, offset: 943},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 30, col: 1, offset: 1151},
			expr: &ruleRefExpr{
				pos:  position{line: 30, col: 16, offset: 1166},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 32, col: 1, offset: 1184},
			expr: &actionExpr{
				pos: position{line: 32, col: 16, offset: 1199},
				run: (*parser).callonFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 32, col: 16, offset: 1199},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 32, col: 16, offset: 1199},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 32, col: 37, offset: 1220},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 32, col: 46, offset: 1229},
								name: "YamlFrontMatterContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 32, col: 70, offset: 1253},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 36, col: 1, offset: 1333},
			expr: &seqExpr{
				pos: position{line: 36, col: 26, offset: 1358},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 36, col: 26, offset: 1358},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 36, col: 32, offset: 1364},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 38, col: 1, offset: 1369},
			expr: &actionExpr{
				pos: position{line: 38, col: 27, offset: 1395},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 38, col: 27, offset: 1395},
					expr: &seqExpr{
						pos: position{line: 38, col: 28, offset: 1396},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 38, col: 28, offset: 1396},
								expr: &ruleRefExpr{
									pos:  position{line: 38, col: 29, offset: 1397},
									name: "YamlFrontMatterToken",
								},
							},
							&anyMatcher{
								line: 38, col: 50, offset: 1418,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 46, col: 1, offset: 1642},
			expr: &actionExpr{
				pos: position{line: 46, col: 19, offset: 1660},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 46, col: 19, offset: 1660},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 46, col: 19, offset: 1660},
							label: "header",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 27, offset: 1668},
								name: "Section0Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 46, col: 42, offset: 1683},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 46, col: 51, offset: 1692},
								expr: &ruleRefExpr{
									pos:  position{line: 46, col: 51, offset: 1692},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 46, col: 69, offset: 1710},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 46, col: 79, offset: 1720},
								expr: &ruleRefExpr{
									pos:  position{line: 46, col: 79, offset: 1720},
									name: "DocumentRevision",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 46, col: 98, offset: 1739},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 46, col: 115, offset: 1756},
								expr: &ruleRefExpr{
									pos:  position{line: 46, col: 115, offset: 1756},
									name: "DocumentAttributeDeclaration",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 50, col: 1, offset: 1887},
			expr: &choiceExpr{
				pos: position{line: 50, col: 20, offset: 1906},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 20, offset: 1906},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 48, offset: 1934},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 52, col: 1, offset: 1964},
			expr: &actionExpr{
				pos: position{line: 52, col: 30, offset: 1993},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 52, col: 30, offset: 1993},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 52, col: 30, offset: 1993},
							expr: &ruleRefExpr{
								pos:  position{line: 52, col: 30, offset: 1993},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 52, col: 34, offset: 1997},
							expr: &litMatcher{
								pos:        position{line: 52, col: 35, offset: 1998},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 52, col: 39, offset: 2002},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 52, col: 48, offset: 2011},
								expr: &ruleRefExpr{
									pos:  position{line: 52, col: 48, offset: 2011},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 52, col: 65, offset: 2028},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 56, col: 1, offset: 2098},
			expr: &actionExpr{
				pos: position{line: 56, col: 33, offset: 2130},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 56, col: 33, offset: 2130},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 56, col: 33, offset: 2130},
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 33, offset: 2130},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 56, col: 37, offset: 2134},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 56, col: 48, offset: 2145},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 56, offset: 2153},
								name: "DocumentAuthor",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 60, col: 1, offset: 2244},
			expr: &actionExpr{
				pos: position{line: 60, col: 19, offset: 2262},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 60, col: 19, offset: 2262},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 60, col: 19, offset: 2262},
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 19, offset: 2262},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 23, offset: 2266},
							label: "namePart1",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 34, offset: 2277},
								name: "DocumentAuthorNamePart",
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 58, offset: 2301},
							label: "namePart2",
							expr: &zeroOrOneExpr{
								pos: position{line: 60, col: 68, offset: 2311},
								expr: &ruleRefExpr{
									pos:  position{line: 60, col: 69, offset: 2312},
									name: "DocumentAuthorNamePart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 94, offset: 2337},
							label: "namePart3",
							expr: &zeroOrOneExpr{
								pos: position{line: 60, col: 104, offset: 2347},
								expr: &ruleRefExpr{
									pos:  position{line: 60, col: 105, offset: 2348},
									name: "DocumentAuthorNamePart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 130, offset: 2373},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 60, col: 136, offset: 2379},
								expr: &ruleRefExpr{
									pos:  position{line: 60, col: 137, offset: 2380},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 60, col: 159, offset: 2402},
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 159, offset: 2402},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 60, col: 163, offset: 2406},
							expr: &litMatcher{
								pos:        position{line: 60, col: 163, offset: 2406},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 60, col: 168, offset: 2411},
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 168, offset: 2411},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorNamePart",
			pos:  position{line: 65, col: 1, offset: 2576},
			expr: &seqExpr{
				pos: position{line: 65, col: 27, offset: 2602},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 65, col: 27, offset: 2602},
						expr: &litMatcher{
							pos:        position{line: 65, col: 28, offset: 2603},
							val:        "<",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 65, col: 32, offset: 2607},
						expr: &litMatcher{
							pos:        position{line: 65, col: 33, offset: 2608},
							val:        ";",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 37, offset: 2612},
						name: "Word",
					},
					&zeroOrMoreExpr{
						pos: position{line: 65, col: 42, offset: 2617},
						expr: &ruleRefExpr{
							pos:  position{line: 65, col: 42, offset: 2617},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 67, col: 1, offset: 2622},
			expr: &seqExpr{
				pos: position{line: 67, col: 24, offset: 2645},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 67, col: 24, offset: 2645},
						val:        "<",
						ignoreCase: false,
					},
					&labeledExpr{
						pos:   position{line: 67, col: 28, offset: 2649},
						label: "email",
						expr: &oneOrMoreExpr{
							pos: position{line: 67, col: 34, offset: 2655},
							expr: &seqExpr{
								pos: position{line: 67, col: 35, offset: 2656},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 67, col: 35, offset: 2656},
										expr: &litMatcher{
											pos:        position{line: 67, col: 36, offset: 2657},
											val:        ">",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 67, col: 40, offset: 2661},
										expr: &ruleRefExpr{
											pos:  position{line: 67, col: 41, offset: 2662},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 67, col: 45, offset: 2666,
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 67, col: 49, offset: 2670},
						val:        ">",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 71, col: 1, offset: 2806},
			expr: &actionExpr{
				pos: position{line: 71, col: 21, offset: 2826},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 71, col: 21, offset: 2826},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 71, col: 21, offset: 2826},
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 21, offset: 2826},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 71, col: 25, offset: 2830},
							expr: &litMatcher{
								pos:        position{line: 71, col: 26, offset: 2831},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 71, col: 30, offset: 2835},
							label: "revnumber",
							expr: &zeroOrOneExpr{
								pos: position{line: 71, col: 40, offset: 2845},
								expr: &ruleRefExpr{
									pos:  position{line: 71, col: 41, offset: 2846},
									name: "DocumentRevisionNumber",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 71, col: 66, offset: 2871},
							expr: &litMatcher{
								pos:        position{line: 71, col: 66, offset: 2871},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 71, col: 71, offset: 2876},
							label: "revdate",
							expr: &zeroOrOneExpr{
								pos: position{line: 71, col: 79, offset: 2884},
								expr: &ruleRefExpr{
									pos:  position{line: 71, col: 80, offset: 2885},
									name: "DocumentRevisionDate",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 71, col: 103, offset: 2908},
							expr: &litMatcher{
								pos:        position{line: 71, col: 103, offset: 2908},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 71, col: 108, offset: 2913},
							label: "revremark",
							expr: &zeroOrOneExpr{
								pos: position{line: 71, col: 118, offset: 2923},
								expr: &ruleRefExpr{
									pos:  position{line: 71, col: 119, offset: 2924},
									name: "DocumentRevisionRemark",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 144, offset: 2949},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 76, col: 1, offset: 3122},
			expr: &choiceExpr{
				pos: position{line: 76, col: 27, offset: 3148},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 76, col: 27, offset: 3148},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 76, col: 27, offset: 3148},
								val:        "v",
								ignoreCase: true,
							},
							&ruleRefExpr{
								pos:  position{line: 76, col: 32, offset: 3153},
								name: "DIGIT",
							},
							&zeroOrMoreExpr{
								pos: position{line: 76, col: 39, offset: 3160},
								expr: &seqExpr{
									pos: position{line: 76, col: 40, offset: 3161},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 76, col: 40, offset: 3161},
											expr: &ruleRefExpr{
												pos:  position{line: 76, col: 41, offset: 3162},
												name: "EOL",
											},
										},
										&notExpr{
											pos: position{line: 76, col: 45, offset: 3166},
											expr: &litMatcher{
												pos:        position{line: 76, col: 46, offset: 3167},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 76, col: 50, offset: 3171},
											expr: &litMatcher{
												pos:        position{line: 76, col: 51, offset: 3172},
												val:        ":",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 76, col: 55, offset: 3176,
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 76, col: 61, offset: 3182},
						exprs: []interface{}{
							&zeroOrOneExpr{
								pos: position{line: 76, col: 61, offset: 3182},
								expr: &litMatcher{
									pos:        position{line: 76, col: 61, offset: 3182},
									val:        "v",
									ignoreCase: true,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 76, col: 67, offset: 3188},
								name: "DIGIT",
							},
							&zeroOrMoreExpr{
								pos: position{line: 76, col: 74, offset: 3195},
								expr: &seqExpr{
									pos: position{line: 76, col: 75, offset: 3196},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 76, col: 75, offset: 3196},
											expr: &ruleRefExpr{
												pos:  position{line: 76, col: 76, offset: 3197},
												name: "EOL",
											},
										},
										&notExpr{
											pos: position{line: 76, col: 80, offset: 3201},
											expr: &litMatcher{
												pos:        position{line: 76, col: 81, offset: 3202},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 76, col: 85, offset: 3206},
											expr: &litMatcher{
												pos:        position{line: 76, col: 86, offset: 3207},
												val:        ":",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 76, col: 90, offset: 3211,
										},
									},
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 76, col: 94, offset: 3215},
								expr: &ruleRefExpr{
									pos:  position{line: 76, col: 94, offset: 3215},
									name: "WS",
								},
							},
							&andExpr{
								pos: position{line: 76, col: 98, offset: 3219},
								expr: &litMatcher{
									pos:        position{line: 76, col: 99, offset: 3220},
									val:        ",",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 77, col: 1, offset: 3224},
			expr: &zeroOrMoreExpr{
				pos: position{line: 77, col: 25, offset: 3248},
				expr: &seqExpr{
					pos: position{line: 77, col: 26, offset: 3249},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 77, col: 26, offset: 3249},
							expr: &ruleRefExpr{
								pos:  position{line: 77, col: 27, offset: 3250},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 77, col: 31, offset: 3254},
							expr: &litMatcher{
								pos:        position{line: 77, col: 32, offset: 3255},
								val:        ":",
								ignoreCase: false,
							},
						},
						&anyMatcher{
							line: 77, col: 36, offset: 3259,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 78, col: 1, offset: 3264},
			expr: &zeroOrMoreExpr{
				pos: position{line: 78, col: 27, offset: 3290},
				expr: &seqExpr{
					pos: position{line: 78, col: 28, offset: 3291},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 78, col: 28, offset: 3291},
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 29, offset: 3292},
								name: "EOL",
							},
						},
						&anyMatcher{
							line: 78, col: 33, offset: 3296,
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 83, col: 1, offset: 3416},
			expr: &choiceExpr{
				pos: position{line: 83, col: 33, offset: 3448},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 83, col: 33, offset: 3448},
						name: "DocumentAttributeDeclarationWithNameOnly",
					},
					&ruleRefExpr{
						pos:  position{line: 83, col: 76, offset: 3491},
						name: "DocumentAttributeDeclarationWithNameAndValue",
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclarationWithNameOnly",
			pos:  position{line: 85, col: 1, offset: 3538},
			expr: &actionExpr{
				pos: position{line: 85, col: 45, offset: 3582},
				run: (*parser).callonDocumentAttributeDeclarationWithNameOnly1,
				expr: &seqExpr{
					pos: position{line: 85, col: 45, offset: 3582},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 85, col: 45, offset: 3582},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 85, col: 49, offset: 3586},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 55, offset: 3592},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 85, col: 70, offset: 3607},
							val:        ":",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 85, col: 74, offset: 3611},
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 74, offset: 3611},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 85, col: 78, offset: 3615},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclarationWithNameAndValue",
			pos:  position{line: 89, col: 1, offset: 3700},
			expr: &actionExpr{
				pos: position{line: 89, col: 49, offset: 3748},
				run: (*parser).callonDocumentAttributeDeclarationWithNameAndValue1,
				expr: &seqExpr{
					pos: position{line: 89, col: 49, offset: 3748},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 89, col: 49, offset: 3748},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 89, col: 53, offset: 3752},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 59, offset: 3758},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 89, col: 74, offset: 3773},
							val:        ":",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 89, col: 78, offset: 3777},
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 78, offset: 3777},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 82, offset: 3781},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 89, col: 88, offset: 3787},
								expr: &seqExpr{
									pos: position{line: 89, col: 89, offset: 3788},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 89, col: 89, offset: 3788},
											expr: &ruleRefExpr{
												pos:  position{line: 89, col: 90, offset: 3789},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 89, col: 98, offset: 3797,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 102, offset: 3801},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 93, col: 1, offset: 3904},
			expr: &choiceExpr{
				pos: position{line: 93, col: 27, offset: 3930},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 93, col: 27, offset: 3930},
						name: "DocumentAttributeResetWithSectionTitleBangSymbol",
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 78, offset: 3981},
						name: "DocumentAttributeResetWithTrailingBangSymbol",
					},
				},
			},
		},
		{
			name: "DocumentAttributeResetWithSectionTitleBangSymbol",
			pos:  position{line: 95, col: 1, offset: 4027},
			expr: &actionExpr{
				pos: position{line: 95, col: 53, offset: 4079},
				run: (*parser).callonDocumentAttributeResetWithSectionTitleBangSymbol1,
				expr: &seqExpr{
					pos: position{line: 95, col: 53, offset: 4079},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 95, col: 53, offset: 4079},
							val:        ":!",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 95, col: 58, offset: 4084},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 64, offset: 4090},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 95, col: 79, offset: 4105},
							val:        ":",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 95, col: 83, offset: 4109},
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 83, offset: 4109},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 87, offset: 4113},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeResetWithTrailingBangSymbol",
			pos:  position{line: 99, col: 1, offset: 4187},
			expr: &actionExpr{
				pos: position{line: 99, col: 49, offset: 4235},
				run: (*parser).callonDocumentAttributeResetWithTrailingBangSymbol1,
				expr: &seqExpr{
					pos: position{line: 99, col: 49, offset: 4235},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 99, col: 49, offset: 4235},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 99, col: 53, offset: 4239},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 59, offset: 4245},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 99, col: 74, offset: 4260},
							val:        "!:",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 99, col: 79, offset: 4265},
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 79, offset: 4265},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 83, offset: 4269},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 103, col: 1, offset: 4343},
			expr: &actionExpr{
				pos: position{line: 103, col: 34, offset: 4376},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 103, col: 34, offset: 4376},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 103, col: 34, offset: 4376},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 103, col: 38, offset: 4380},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 44, offset: 4386},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 103, col: 59, offset: 4401},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 110, col: 1, offset: 4649},
			expr: &seqExpr{
				pos: position{line: 110, col: 18, offset: 4666},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 110, col: 19, offset: 4667},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 110, col: 19, offset: 4667},
								val:        "[A-Z]",
								ranges:     []rune{'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
							&charClassMatcher{
								pos:        position{line: 110, col: 27, offset: 4675},
								val:        "[a-z]",
								ranges:     []rune{'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
							&charClassMatcher{
								pos:        position{line: 110, col: 35, offset: 4683},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 110, col: 43, offset: 4691},
								val:        "_",
								ignoreCase: false,
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 110, col: 48, offset: 4696},
						expr: &choiceExpr{
							pos: position{line: 110, col: 49, offset: 4697},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 110, col: 49, offset: 4697},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 110, col: 57, offset: 4705},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 110, col: 65, offset: 4713},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 110, col: 73, offset: 4721},
									val:        "-",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 115, col: 1, offset: 4841},
			expr: &seqExpr{
				pos: position{line: 115, col: 25, offset: 4865},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 115, col: 25, offset: 4865},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 115, col: 35, offset: 4875},
						name: "NEWLINE",
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 120, col: 1, offset: 4998},
			expr: &actionExpr{
				pos: position{line: 120, col: 21, offset: 5018},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 120, col: 21, offset: 5018},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 120, col: 21, offset: 5018},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 120, col: 27, offset: 5024},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 120, col: 27, offset: 5024},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 39, offset: 5036},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 54, offset: 5051},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 82, offset: 5079},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 101, offset: 5098},
										name: "AttributeGroup",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 117, offset: 5114},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 117, offset: 5114},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 121, offset: 5118},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 124, col: 1, offset: 5209},
			expr: &choiceExpr{
				pos: position{line: 124, col: 14, offset: 5222},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 124, col: 14, offset: 5222},
						run: (*parser).callonElementID2,
						expr: &labeledExpr{
							pos:   position{line: 124, col: 14, offset: 5222},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 18, offset: 5226},
								name: "InlineElementID",
							},
						},
					},
					&actionExpr{
						pos: position{line: 126, col: 5, offset: 5268},
						run: (*parser).callonElementID5,
						expr: &seqExpr{
							pos: position{line: 126, col: 5, offset: 5268},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 126, col: 5, offset: 5268},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 126, col: 10, offset: 5273},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 126, col: 14, offset: 5277},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 126, col: 18, offset: 5281},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 130, col: 1, offset: 5333},
			expr: &actionExpr{
				pos: position{line: 130, col: 20, offset: 5352},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 130, col: 20, offset: 5352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 130, col: 20, offset: 5352},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 130, col: 25, offset: 5357},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 29, offset: 5361},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 130, col: 33, offset: 5365},
							val:        "]]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 136, col: 1, offset: 5560},
			expr: &actionExpr{
				pos: position{line: 136, col: 17, offset: 5576},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 136, col: 17, offset: 5576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 136, col: 17, offset: 5576},
							val:        ".",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 136, col: 21, offset: 5580},
							expr: &litMatcher{
								pos:        position{line: 136, col: 22, offset: 5581},
								val:        ".",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 136, col: 26, offset: 5585},
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 27, offset: 5586},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 30, offset: 5589},
							label: "title",
							expr: &oneOrMoreExpr{
								pos: position{line: 136, col: 36, offset: 5595},
								expr: &seqExpr{
									pos: position{line: 136, col: 37, offset: 5596},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 136, col: 37, offset: 5596},
											expr: &ruleRefExpr{
												pos:  position{line: 136, col: 38, offset: 5597},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 136, col: 46, offset: 5605,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 141, col: 1, offset: 5750},
			expr: &actionExpr{
				pos: position{line: 141, col: 30, offset: 5779},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 141, col: 30, offset: 5779},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 141, col: 30, offset: 5779},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 141, col: 34, offset: 5783},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 141, col: 37, offset: 5786},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 141, col: 53, offset: 5802},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 146, col: 1, offset: 5945},
			expr: &actionExpr{
				pos: position{line: 146, col: 19, offset: 5963},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 146, col: 19, offset: 5963},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 146, col: 19, offset: 5963},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 146, col: 23, offset: 5967},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 34, offset: 5978},
								name: "GenericAttribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 52, offset: 5996},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 146, col: 63, offset: 6007},
								expr: &ruleRefExpr{
									pos:  position{line: 146, col: 64, offset: 6008},
									name: "OtherGenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 146, col: 89, offset: 6033},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 150, col: 1, offset: 6142},
			expr: &choiceExpr{
				pos: position{line: 150, col: 21, offset: 6162},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 150, col: 21, offset: 6162},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 150, col: 21, offset: 6162},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 150, col: 21, offset: 6162},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 26, offset: 6167},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 150, col: 40, offset: 6181},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 150, col: 44, offset: 6185},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 51, offset: 6192},
										name: "AttributeValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 6311},
						run: (*parser).callonGenericAttribute9,
						expr: &labeledExpr{
							pos:   position{line: 152, col: 5, offset: 6311},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 10, offset: 6316},
								name: "AttributeKey",
							},
						},
					},
				},
			},
		},
		{
			name: "OtherGenericAttribute",
			pos:  position{line: 156, col: 1, offset: 6418},
			expr: &choiceExpr{
				pos: position{line: 156, col: 26, offset: 6443},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 26, offset: 6443},
						run: (*parser).callonOtherGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 156, col: 26, offset: 6443},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 156, col: 26, offset: 6443},
									val:        ",",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 156, col: 30, offset: 6447},
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 30, offset: 6447},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 34, offset: 6451},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 39, offset: 6456},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 156, col: 53, offset: 6470},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 156, col: 57, offset: 6474},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 64, offset: 6481},
										name: "AttributeValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 6600},
						run: (*parser).callonOtherGenericAttribute12,
						expr: &seqExpr{
							pos: position{line: 158, col: 5, offset: 6600},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 158, col: 5, offset: 6600},
									val:        ",",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 158, col: 9, offset: 6604},
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 9, offset: 6604},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 158, col: 13, offset: 6608},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 18, offset: 6613},
										name: "AttributeKey",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 162, col: 1, offset: 6715},
			expr: &actionExpr{
				pos: position{line: 162, col: 17, offset: 6731},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 162, col: 17, offset: 6731},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 162, col: 17, offset: 6731},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 162, col: 21, offset: 6735},
								expr: &seqExpr{
									pos: position{line: 162, col: 22, offset: 6736},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 162, col: 22, offset: 6736},
											expr: &ruleRefExpr{
												pos:  position{line: 162, col: 23, offset: 6737},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 162, col: 26, offset: 6740},
											expr: &litMatcher{
												pos:        position{line: 162, col: 27, offset: 6741},
												val:        "=",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 162, col: 31, offset: 6745},
											expr: &litMatcher{
												pos:        position{line: 162, col: 32, offset: 6746},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 162, col: 36, offset: 6750},
											expr: &litMatcher{
												pos:        position{line: 162, col: 37, offset: 6751},
												val:        "]",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 162, col: 41, offset: 6755,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 162, col: 45, offset: 6759},
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 45, offset: 6759},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 166, col: 1, offset: 6789},
			expr: &actionExpr{
				pos: position{line: 166, col: 19, offset: 6807},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 166, col: 19, offset: 6807},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 166, col: 19, offset: 6807},
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 19, offset: 6807},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 23, offset: 6811},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 166, col: 29, offset: 6817},
								expr: &seqExpr{
									pos: position{line: 166, col: 30, offset: 6818},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 166, col: 30, offset: 6818},
											expr: &ruleRefExpr{
												pos:  position{line: 166, col: 31, offset: 6819},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 166, col: 34, offset: 6822},
											expr: &litMatcher{
												pos:        position{line: 166, col: 35, offset: 6823},
												val:        "=",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 166, col: 39, offset: 6827},
											expr: &litMatcher{
												pos:        position{line: 166, col: 40, offset: 6828},
												val:        "]",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 166, col: 44, offset: 6832,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 166, col: 48, offset: 6836},
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 48, offset: 6836},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 170, col: 1, offset: 6867},
			expr: &actionExpr{
				pos: position{line: 170, col: 21, offset: 6887},
				run: (*parser).callonHorizontalLayout1,
				expr: &litMatcher{
					pos:        position{line: 170, col: 21, offset: 6887},
					val:        "[horizontal]",
					ignoreCase: false,
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 177, col: 1, offset: 7074},
			expr: &actionExpr{
				pos: position{line: 177, col: 12, offset: 7085},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 177, col: 12, offset: 7085},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 177, col: 12, offset: 7085},
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 13, offset: 7086},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 178, col: 5, offset: 7156},
							label: "section",
							expr: &choiceExpr{
								pos: position{line: 178, col: 14, offset: 7165},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 178, col: 14, offset: 7165},
										name: "Section0",
									},
									&ruleRefExpr{
										pos:  position{line: 178, col: 25, offset: 7176},
										name: "Section1",
									},
									&ruleRefExpr{
										pos:  position{line: 178, col: 36, offset: 7187},
										name: "Section2",
									},
									&ruleRefExpr{
										pos:  position{line: 178, col: 47, offset: 7198},
										name: "Section3",
									},
									&ruleRefExpr{
										pos:  position{line: 178, col: 58, offset: 7209},
										name: "Section4",
									},
									&ruleRefExpr{
										pos:  position{line: 178, col: 69, offset: 7220},
										name: "Section5",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitlePrefix",
			pos:  position{line: 182, col: 1, offset: 7267},
			expr: &seqExpr{
				pos: position{line: 182, col: 23, offset: 7289},
				exprs: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 182, col: 23, offset: 7289},
						expr: &litMatcher{
							pos:        position{line: 182, col: 24, offset: 7290},
							val:        "=",
							ignoreCase: false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 182, col: 30, offset: 7296},
						expr: &ruleRefExpr{
							pos:  position{line: 182, col: 30, offset: 7296},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "Section0",
			pos:  position{line: 184, col: 1, offset: 7301},
			expr: &actionExpr{
				pos: position{line: 184, col: 13, offset: 7313},
				run: (*parser).callonSection01,
				expr: &seqExpr{
					pos: position{line: 184, col: 13, offset: 7313},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 184, col: 13, offset: 7313},
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 14, offset: 7314},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 7384},
							label: "section",
							expr: &actionExpr{
								pos: position{line: 185, col: 14, offset: 7393},
								run: (*parser).callonSection06,
								expr: &seqExpr{
									pos: position{line: 185, col: 14, offset: 7393},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 185, col: 14, offset: 7393},
											label: "header",
											expr: &ruleRefExpr{
												pos:  position{line: 185, col: 22, offset: 7401},
												name: "Section0Title",
											},
										},
										&labeledExpr{
											pos:   position{line: 185, col: 37, offset: 7416},
											label: "elements",
											expr: &zeroOrMoreExpr{
												pos: position{line: 185, col: 47, offset: 7426},
												expr: &ruleRefExpr{
													pos:  position{line: 185, col: 47, offset: 7426},
													name: "Section0Block",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section0TitlePrefix",
			pos:  position{line: 191, col: 1, offset: 7578},
			expr: &seqExpr{
				pos: position{line: 191, col: 24, offset: 7601},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 191, col: 24, offset: 7601},
						val:        "=",
						ignoreCase: false,
					},
					&oneOrMoreExpr{
						pos: position{line: 191, col: 28, offset: 7605},
						expr: &ruleRefExpr{
							pos:  position{line: 191, col: 28, offset: 7605},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "Section0Title",
			pos:  position{line: 193, col: 1, offset: 7610},
			expr: &actionExpr{
				pos: position{line: 193, col: 18, offset: 7627},
				run: (*parser).callonSection0Title1,
				expr: &seqExpr{
					pos: position{line: 193, col: 18, offset: 7627},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 193, col: 18, offset: 7627},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 193, col: 29, offset: 7638},
								expr: &ruleRefExpr{
									pos:  position{line: 193, col: 30, offset: 7639},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 49, offset: 7658},
							name: "Section0TitlePrefix",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 69, offset: 7678},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 78, offset: 7687},
								name: "TitleElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 193, col: 93, offset: 7702},
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 93, offset: 7702},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 193, col: 97, offset: 7706},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 193, col: 100, offset: 7709},
								expr: &ruleRefExpr{
									pos:  position{line: 193, col: 101, offset: 7710},
									name: "InlineElementID",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 193, col: 119, offset: 7728},
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 119, offset: 7728},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 123, offset: 7732},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Section0Block",
			pos:  position{line: 197, col: 1, offset: 7847},
			expr: &actionExpr{
				pos: position{line: 197, col: 18, offset: 7864},
				run: (*parser).callonSection0Block1,
				expr: &seqExpr{
					pos: position{line: 197, col: 18, offset: 7864},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 197, col: 18, offset: 7864},
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 19, offset: 7865},
								name: "Section0",
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 28, offset: 7874},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 197, col: 37, offset: 7883},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 197, col: 37, offset: 7883},
										name: "Section1",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 48, offset: 7894},
										name: "Section2",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 59, offset: 7905},
										name: "Section3",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 70, offset: 7916},
										name: "Section4",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 81, offset: 7927},
										name: "Section5",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 92, offset: 7938},
										name: "DocumentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section1",
			pos:  position{line: 201, col: 1, offset: 7982},
			expr: &actionExpr{
				pos: position{line: 201, col: 13, offset: 7994},
				run: (*parser).callonSection11,
				expr: &seqExpr{
					pos: position{line: 201, col: 13, offset: 7994},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 201, col: 13, offset: 7994},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 14, offset: 7995},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 202, col: 5, offset: 8065},
							label: "section",
							expr: &actionExpr{
								pos: position{line: 202, col: 14, offset: 8074},
								run: (*parser).callonSection16,
								expr: &seqExpr{
									pos: position{line: 202, col: 14, offset: 8074},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 202, col: 14, offset: 8074},
											label: "header",
											expr: &ruleRefExpr{
												pos:  position{line: 202, col: 22, offset: 8082},
												name: "Section1Title",
											},
										},
										&labeledExpr{
											pos:   position{line: 202, col: 37, offset: 8097},
											label: "elements",
											expr: &zeroOrMoreExpr{
												pos: position{line: 202, col: 47, offset: 8107},
												expr: &ruleRefExpr{
													pos:  position{line: 202, col: 47, offset: 8107},
													name: "Section1Block",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section1TitlePrefix",
			pos:  position{line: 208, col: 1, offset: 8251},
			expr: &seqExpr{
				pos: position{line: 208, col: 24, offset: 8274},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 208, col: 24, offset: 8274},
						val:        "==",
						ignoreCase: false,
					},
					&oneOrMoreExpr{
						pos: position{line: 208, col: 29, offset: 8279},
						expr: &ruleRefExpr{
							pos:  position{line: 208, col: 29, offset: 8279},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "Section1Title",
			pos:  position{line: 210, col: 1, offset: 8284},
			expr: &actionExpr{
				pos: position{line: 210, col: 18, offset: 8301},
				run: (*parser).callonSection1Title1,
				expr: &seqExpr{
					pos: position{line: 210, col: 18, offset: 8301},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 210, col: 18, offset: 8301},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 210, col: 29, offset: 8312},
								expr: &ruleRefExpr{
									pos:  position{line: 210, col: 30, offset: 8313},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 49, offset: 8332},
							name: "Section1TitlePrefix",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 69, offset: 8352},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 78, offset: 8361},
								name: "TitleElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 210, col: 93, offset: 8376},
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 93, offset: 8376},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 97, offset: 8380},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 100, offset: 8383},
								expr: &ruleRefExpr{
									pos:  position{line: 210, col: 101, offset: 8384},
									name: "InlineElementID",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 210, col: 119, offset: 8402},
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 119, offset: 8402},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 123, offset: 8406},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Section1Block",
			pos:  position{line: 214, col: 1, offset: 8521},
			expr: &actionExpr{
				pos: position{line: 214, col: 18, offset: 8538},
				run: (*parser).callonSection1Block1,
				expr: &seqExpr{
					pos: position{line: 214, col: 18, offset: 8538},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 214, col: 18, offset: 8538},
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 19, offset: 8539},
								name: "Section1Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 33, offset: 8553},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 214, col: 42, offset: 8562},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 214, col: 42, offset: 8562},
										name: "Section2",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 53, offset: 8573},
										name: "Section3",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 64, offset: 8584},
										name: "Section4",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 75, offset: 8595},
										name: "Section5",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 86, offset: 8606},
										name: "DocumentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section2",
			pos:  position{line: 218, col: 1, offset: 8650},
			expr: &actionExpr{
				pos: position{line: 218, col: 13, offset: 8662},
				run: (*parser).callonSection21,
				expr: &seqExpr{
					pos: position{line: 218, col: 13, offset: 8662},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 218, col: 13, offset: 8662},
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 14, offset: 8663},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 219, col: 5, offset: 8733},
							label: "section",
							expr: &actionExpr{
								pos: position{line: 219, col: 14, offset: 8742},
								run: (*parser).callonSection26,
								expr: &seqExpr{
									pos: position{line: 219, col: 14, offset: 8742},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 219, col: 14, offset: 8742},
											label: "header",
											expr: &ruleRefExpr{
												pos:  position{line: 219, col: 22, offset: 8750},
												name: "Section2Title",
											},
										},
										&labeledExpr{
											pos:   position{line: 219, col: 37, offset: 8765},
											label: "elements",
											expr: &zeroOrOneExpr{
												pos: position{line: 219, col: 47, offset: 8775},
												expr: &ruleRefExpr{
													pos:  position{line: 219, col: 47, offset: 8775},
													name: "Section2Block",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section2TitlePrefix",
			pos:  position{line: 225, col: 1, offset: 8927},
			expr: &seqExpr{
				pos: position{line: 225, col: 24, offset: 8950},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 225, col: 24, offset: 8950},
						val:        "===",
						ignoreCase: false,
					},
					&oneOrMoreExpr{
						pos: position{line: 225, col: 30, offset: 8956},
						expr: &ruleRefExpr{
							pos:  position{line: 225, col: 30, offset: 8956},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "Section2Title",
			pos:  position{line: 227, col: 1, offset: 8962},
			expr: &actionExpr{
				pos: position{line: 227, col: 18, offset: 8979},
				run: (*parser).callonSection2Title1,
				expr: &seqExpr{
					pos: position{line: 227, col: 18, offset: 8979},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 227, col: 18, offset: 8979},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 227, col: 29, offset: 8990},
								expr: &ruleRefExpr{
									pos:  position{line: 227, col: 30, offset: 8991},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 49, offset: 9010},
							name: "Section2TitlePrefix",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 69, offset: 9030},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 78, offset: 9039},
								name: "TitleElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 93, offset: 9054},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 93, offset: 9054},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 97, offset: 9058},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 227, col: 100, offset: 9061},
								expr: &ruleRefExpr{
									pos:  position{line: 227, col: 101, offset: 9062},
									name: "InlineElementID",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 119, offset: 9080},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 119, offset: 9080},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 123, offset: 9084},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Section2Block",
			pos:  position{line: 231, col: 1, offset: 9198},
			expr: &actionExpr{
				pos: position{line: 231, col: 18, offset: 9215},
				run: (*parser).callonSection2Block1,
				expr: &seqExpr{
					pos: position{line: 231, col: 18, offset: 9215},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 231, col: 18, offset: 9215},
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 19, offset: 9216},
								name: "Section1Title",
							},
						},
						&notExpr{
							pos: position{line: 231, col: 33, offset: 9230},
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 34, offset: 9231},
								name: "Section2Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 48, offset: 9245},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 231, col: 56, offset: 9253},
								expr: &choiceExpr{
									pos: position{line: 231, col: 57, offset: 9254},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 231, col: 57, offset: 9254},
											name: "Section3",
										},
										&ruleRefExpr{
											pos:  position{line: 231, col: 68, offset: 9265},
											name: "Section4",
										},
										&ruleRefExpr{
											pos:  position{line: 231, col: 79, offset: 9276},
											name: "Section5",
										},
										&ruleRefExpr{
											pos:  position{line: 231, col: 90, offset: 9287},
											name: "DocumentBlock",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section3",
			pos:  position{line: 235, col: 1, offset: 9332},
			expr: &actionExpr{
				pos: position{line: 235, col: 13, offset: 9344},
				run: (*parser).callonSection31,
				expr: &seqExpr{
					pos: position{line: 235, col: 13, offset: 9344},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 235, col: 13, offset: 9344},
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 14, offset: 9345},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 236, col: 5, offset: 9415},
							label: "section",
							expr: &actionExpr{
								pos: position{line: 236, col: 14, offset: 9424},
								run: (*parser).callonSection36,
								expr: &seqExpr{
									pos: position{line: 236, col: 14, offset: 9424},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 236, col: 14, offset: 9424},
											label: "header",
											expr: &ruleRefExpr{
												pos:  position{line: 236, col: 22, offset: 9432},
												name: "Section3Title",
											},
										},
										&labeledExpr{
											pos:   position{line: 236, col: 37, offset: 9447},
											label: "elements",
											expr: &zeroOrOneExpr{
												pos: position{line: 236, col: 47, offset: 9457},
												expr: &ruleRefExpr{
													pos:  position{line: 236, col: 47, offset: 9457},
													name: "Section3Block",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section3TitlePrefix",
			pos:  position{line: 242, col: 1, offset: 9609},
			expr: &seqExpr{
				pos: position{line: 242, col: 24, offset: 9632},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 242, col: 24, offset: 9632},
						val:        "====",
						ignoreCase: false,
					},
					&oneOrMoreExpr{
						pos: position{line: 242, col: 31, offset: 9639},
						expr: &ruleRefExpr{
							pos:  position{line: 242, col: 31, offset: 9639},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "Section3Title",
			pos:  position{line: 244, col: 1, offset: 9645},
			expr: &actionExpr{
				pos: position{line: 244, col: 18, offset: 9662},
				run: (*parser).callonSection3Title1,
				expr: &seqExpr{
					pos: position{line: 244, col: 18, offset: 9662},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 244, col: 18, offset: 9662},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 244, col: 29, offset: 9673},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 30, offset: 9674},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 49, offset: 9693},
							name: "Section3TitlePrefix",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 69, offset: 9713},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 78, offset: 9722},
								name: "TitleElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 93, offset: 9737},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 93, offset: 9737},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 244, col: 97, offset: 9741},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 244, col: 100, offset: 9744},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 101, offset: 9745},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 119, offset: 9763},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Section3Block",
			pos:  position{line: 248, col: 1, offset: 9877},
			expr: &actionExpr{
				pos: position{line: 248, col: 18, offset: 9894},
				run: (*parser).callonSection3Block1,
				expr: &seqExpr{
					pos: position{line: 248, col: 18, offset: 9894},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 248, col: 18, offset: 9894},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 19, offset: 9895},
								name: "Section1Title",
							},
						},
						&notExpr{
							pos: position{line: 248, col: 33, offset: 9909},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 34, offset: 9910},
								name: "Section2Title",
							},
						},
						&notExpr{
							pos: position{line: 248, col: 48, offset: 9924},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 49, offset: 9925},
								name: "Section3Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 64, offset: 9940},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 248, col: 72, offset: 9948},
								expr: &choiceExpr{
									pos: position{line: 248, col: 73, offset: 9949},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 248, col: 73, offset: 9949},
											name: "Section4",
										},
										&ruleRefExpr{
											pos:  position{line: 248, col: 84, offset: 9960},
											name: "Section5",
										},
										&ruleRefExpr{
											pos:  position{line: 248, col: 95, offset: 9971},
											name: "DocumentBlock",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section4",
			pos:  position{line: 252, col: 1, offset: 10016},
			expr: &actionExpr{
				pos: position{line: 252, col: 13, offset: 10028},
				run: (*parser).callonSection41,
				expr: &seqExpr{
					pos: position{line: 252, col: 13, offset: 10028},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 252, col: 13, offset: 10028},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 14, offset: 10029},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 253, col: 5, offset: 10099},
							label: "section",
							expr: &actionExpr{
								pos: position{line: 253, col: 14, offset: 10108},
								run: (*parser).callonSection46,
								expr: &seqExpr{
									pos: position{line: 253, col: 14, offset: 10108},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 253, col: 14, offset: 10108},
											label: "header",
											expr: &ruleRefExpr{
												pos:  position{line: 253, col: 22, offset: 10116},
												name: "Section4Title",
											},
										},
										&labeledExpr{
											pos:   position{line: 253, col: 37, offset: 10131},
											label: "elements",
											expr: &zeroOrOneExpr{
												pos: position{line: 253, col: 47, offset: 10141},
												expr: &ruleRefExpr{
													pos:  position{line: 253, col: 47, offset: 10141},
													name: "Section4Block",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section4TitlePrefix",
			pos:  position{line: 259, col: 1, offset: 10293},
			expr: &seqExpr{
				pos: position{line: 259, col: 24, offset: 10316},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 259, col: 24, offset: 10316},
						val:        "=====",
						ignoreCase: false,
					},
					&oneOrMoreExpr{
						pos: position{line: 259, col: 32, offset: 10324},
						expr: &ruleRefExpr{
							pos:  position{line: 259, col: 32, offset: 10324},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "Section4Title",
			pos:  position{line: 261, col: 1, offset: 10330},
			expr: &actionExpr{
				pos: position{line: 261, col: 18, offset: 10347},
				run: (*parser).callonSection4Title1,
				expr: &seqExpr{
					pos: position{line: 261, col: 18, offset: 10347},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 261, col: 18, offset: 10347},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 29, offset: 10358},
								expr: &ruleRefExpr{
									pos:  position{line: 261, col: 30, offset: 10359},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 261, col: 49, offset: 10378},
							name: "Section4TitlePrefix",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 69, offset: 10398},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 78, offset: 10407},
								name: "TitleElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 261, col: 93, offset: 10422},
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 93, offset: 10422},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 261, col: 97, offset: 10426},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 261, col: 100, offset: 10429},
								expr: &ruleRefExpr{
									pos:  position{line: 261, col: 101, offset: 10430},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 261, col: 119, offset: 10448},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Section4Block",
			pos:  position{line: 265, col: 1, offset: 10562},
			expr: &actionExpr{
				pos: position{line: 265, col: 18, offset: 10579},
				run: (*parser).callonSection4Block1,
				expr: &seqExpr{
					pos: position{line: 265, col: 18, offset: 10579},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 265, col: 18, offset: 10579},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 19, offset: 10580},
								name: "Section1Title",
							},
						},
						&notExpr{
							pos: position{line: 265, col: 33, offset: 10594},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 34, offset: 10595},
								name: "Section2Title",
							},
						},
						&notExpr{
							pos: position{line: 265, col: 48, offset: 10609},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 49, offset: 10610},
								name: "Section3Title",
							},
						},
						&notExpr{
							pos: position{line: 265, col: 63, offset: 10624},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 64, offset: 10625},
								name: "Section4Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 79, offset: 10640},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 265, col: 87, offset: 10648},
								expr: &choiceExpr{
									pos: position{line: 265, col: 88, offset: 10649},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 265, col: 88, offset: 10649},
											name: "Section5",
										},
										&ruleRefExpr{
											pos:  position{line: 265, col: 99, offset: 10660},
											name: "DocumentBlock",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section5",
			pos:  position{line: 269, col: 1, offset: 10705},
			expr: &actionExpr{
				pos: position{line: 269, col: 13, offset: 10717},
				run: (*parser).callonSection51,
				expr: &seqExpr{
					pos: position{line: 269, col: 13, offset: 10717},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 269, col: 13, offset: 10717},
							expr: &ruleRefExpr{
								pos:  position{line: 269, col: 14, offset: 10718},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 5, offset: 10788},
							label: "section",
							expr: &actionExpr{
								pos: position{line: 270, col: 14, offset: 10797},
								run: (*parser).callonSection56,
								expr: &seqExpr{
									pos: position{line: 270, col: 14, offset: 10797},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 270, col: 14, offset: 10797},
											label: "header",
											expr: &ruleRefExpr{
												pos:  position{line: 270, col: 22, offset: 10805},
												name: "Section5Title",
											},
										},
										&labeledExpr{
											pos:   position{line: 270, col: 37, offset: 10820},
											label: "elements",
											expr: &zeroOrOneExpr{
												pos: position{line: 270, col: 47, offset: 10830},
												expr: &ruleRefExpr{
													pos:  position{line: 270, col: 47, offset: 10830},
													name: "Section5Block",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section5TitlePrefix",
			pos:  position{line: 276, col: 1, offset: 10982},
			expr: &seqExpr{
				pos: position{line: 276, col: 24, offset: 11005},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 276, col: 24, offset: 11005},
						val:        "======",
						ignoreCase: false,
					},
					&oneOrMoreExpr{
						pos: position{line: 276, col: 33, offset: 11014},
						expr: &ruleRefExpr{
							pos:  position{line: 276, col: 33, offset: 11014},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "Section5Title",
			pos:  position{line: 278, col: 1, offset: 11020},
			expr: &actionExpr{
				pos: position{line: 278, col: 18, offset: 11037},
				run: (*parser).callonSection5Title1,
				expr: &seqExpr{
					pos: position{line: 278, col: 18, offset: 11037},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 278, col: 18, offset: 11037},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 278, col: 29, offset: 11048},
								expr: &ruleRefExpr{
									pos:  position{line: 278, col: 30, offset: 11049},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 278, col: 49, offset: 11068},
							name: "Section5TitlePrefix",
						},
						&labeledExpr{
							pos:   position{line: 278, col: 69, offset: 11088},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 78, offset: 11097},
								name: "TitleElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 278, col: 93, offset: 11112},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 93, offset: 11112},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 278, col: 97, offset: 11116},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 278, col: 100, offset: 11119},
								expr: &ruleRefExpr{
									pos:  position{line: 278, col: 101, offset: 11120},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 278, col: 119, offset: 11138},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Section5Block",
			pos:  position{line: 282, col: 1, offset: 11252},
			expr: &actionExpr{
				pos: position{line: 282, col: 18, offset: 11269},
				run: (*parser).callonSection5Block1,
				expr: &seqExpr{
					pos: position{line: 282, col: 18, offset: 11269},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 282, col: 18, offset: 11269},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 19, offset: 11270},
								name: "Section1Title",
							},
						},
						&notExpr{
							pos: position{line: 282, col: 33, offset: 11284},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 34, offset: 11285},
								name: "Section2Title",
							},
						},
						&notExpr{
							pos: position{line: 282, col: 48, offset: 11299},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 49, offset: 11300},
								name: "Section3Title",
							},
						},
						&notExpr{
							pos: position{line: 282, col: 63, offset: 11314},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 64, offset: 11315},
								name: "Section4Title",
							},
						},
						&notExpr{
							pos: position{line: 282, col: 78, offset: 11329},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 79, offset: 11330},
								name: "Section5Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 282, col: 93, offset: 11344},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 282, col: 101, offset: 11352},
								expr: &ruleRefExpr{
									pos:  position{line: 282, col: 102, offset: 11353},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 286, col: 1, offset: 11398},
			expr: &actionExpr{
				pos: position{line: 286, col: 18, offset: 11415},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 286, col: 18, offset: 11415},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 286, col: 27, offset: 11424},
						expr: &seqExpr{
							pos: position{line: 286, col: 28, offset: 11425},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 286, col: 28, offset: 11425},
									expr: &ruleRefExpr{
										pos:  position{line: 286, col: 29, offset: 11426},
										name: "NEWLINE",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 286, col: 37, offset: 11434},
									expr: &ruleRefExpr{
										pos:  position{line: 286, col: 37, offset: 11434},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 286, col: 41, offset: 11438},
									expr: &ruleRefExpr{
										pos:  position{line: 286, col: 42, offset: 11439},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 286, col: 58, offset: 11455},
									name: "TitleElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 286, col: 71, offset: 11468},
									expr: &ruleRefExpr{
										pos:  position{line: 286, col: 71, offset: 11468},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 291, col: 1, offset: 11641},
			expr: &actionExpr{
				pos: position{line: 291, col: 17, offset: 11657},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 291, col: 17, offset: 11657},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 291, col: 26, offset: 11666},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 291, col: 26, offset: 11666},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 291, col: 43, offset: 11683},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 291, col: 57, offset: 11697},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 291, col: 71, offset: 11711},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 291, col: 84, offset: 11724},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 291, col: 91, offset: 11731},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 291, col: 123, offset: 11763},
								name: "Word",
							},
						},
					},
				},
			},
		},
		{
			name: "List",
			pos:  position{line: 300, col: 1, offset: 11959},
			expr: &actionExpr{
				pos: position{line: 300, col: 9, offset: 11967},
				run: (*parser).callonList1,
				expr: &seqExpr{
					pos: position{line: 300, col: 9, offset: 11967},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 300, col: 9, offset: 11967},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 300, col: 20, offset: 11978},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 21, offset: 11979},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 5, offset: 12071},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 14, offset: 12080},
								name: "ListItems",
							},
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 306, col: 1, offset: 12174},
			expr: &oneOrMoreExpr{
				pos: position{line: 306, col: 14, offset: 12187},
				expr: &choiceExpr{
					pos: position{line: 306, col: 15, offset: 12188},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 306, col: 15, offset: 12188},
							name: "OrderedListItem",
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 33, offset: 12206},
							name: "UnorderedListItem",
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 53, offset: 12226},
							name: "LabeledListItem",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 308, col: 1, offset: 12245},
			expr: &actionExpr{
				pos: position{line: 308, col: 19, offset: 12263},
				run: (*parser).callonListParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 308, col: 19, offset: 12263},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 308, col: 25, offset: 12269},
						expr: &seqExpr{
							pos: position{line: 309, col: 5, offset: 12275},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 309, col: 5, offset: 12275},
									expr: &ruleRefExpr{
										pos:  position{line: 309, col: 7, offset: 12277},
										name: "OrderedListItemPrefix",
									},
								},
								&notExpr{
									pos: position{line: 310, col: 5, offset: 12305},
									expr: &ruleRefExpr{
										pos:  position{line: 310, col: 7, offset: 12307},
										name: "UnorderedListItemPrefix",
									},
								},
								&notExpr{
									pos: position{line: 311, col: 5, offset: 12337},
									expr: &seqExpr{
										pos: position{line: 311, col: 7, offset: 12339},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 311, col: 7, offset: 12339},
												name: "LabeledListItemTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 311, col: 27, offset: 12359},
												name: "LabeledListItemSeparator",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 312, col: 5, offset: 12390},
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 7, offset: 12392},
										name: "ListItemContinuation",
									},
								},
								&notExpr{
									pos: position{line: 313, col: 5, offset: 12419},
									expr: &ruleRefExpr{
										pos:  position{line: 313, col: 7, offset: 12421},
										name: "ElementAttribute",
									},
								},
								&notExpr{
									pos: position{line: 314, col: 5, offset: 12443},
									expr: &ruleRefExpr{
										pos:  position{line: 314, col: 7, offset: 12445},
										name: "BlockDelimiter",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 315, col: 5, offset: 12465},
									name: "InlineElements",
								},
								&ruleRefExpr{
									pos:  position{line: 315, col: 20, offset: 12480},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 319, col: 1, offset: 12550},
			expr: &actionExpr{
				pos: position{line: 319, col: 25, offset: 12574},
				run: (*parser).callonListItemContinuation1,
				expr: &seqExpr{
					pos: position{line: 319, col: 25, offset: 12574},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 319, col: 25, offset: 12574},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 319, col: 29, offset: 12578},
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 29, offset: 12578},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 33, offset: 12582},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedDocumentBlock",
			pos:  position{line: 323, col: 1, offset: 12634},
			expr: &actionExpr{
				pos: position{line: 323, col: 27, offset: 12660},
				run: (*parser).callonContinuedDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 323, col: 27, offset: 12660},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 323, col: 27, offset: 12660},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 48, offset: 12681},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 56, offset: 12689},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 330, col: 1, offset: 12846},
			expr: &actionExpr{
				pos: position{line: 330, col: 20, offset: 12865},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 330, col: 20, offset: 12865},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 330, col: 20, offset: 12865},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 330, col: 31, offset: 12876},
								expr: &ruleRefExpr{
									pos:  position{line: 330, col: 32, offset: 12877},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 51, offset: 12896},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 59, offset: 12904},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 82, offset: 12927},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 91, offset: 12936},
								name: "OrderedListItemContent",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 330, col: 115, offset: 12960},
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 115, offset: 12960},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 334, col: 1, offset: 13103},
			expr: &actionExpr{
				pos: position{line: 334, col: 26, offset: 13128},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 334, col: 26, offset: 13128},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 334, col: 26, offset: 13128},
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 26, offset: 13128},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 30, offset: 13132},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 336, col: 5, offset: 13187},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 336, col: 5, offset: 13187},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &litMatcher{
											pos:        position{line: 336, col: 5, offset: 13187},
											val:        ".....",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 338, col: 9, offset: 13300},
										run: (*parser).callonOrderedListItemPrefix9,
										expr: &litMatcher{
											pos:        position{line: 338, col: 9, offset: 13300},
											val:        "....",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 340, col: 9, offset: 13411},
										run: (*parser).callonOrderedListItemPrefix11,
										expr: &litMatcher{
											pos:        position{line: 340, col: 9, offset: 13411},
											val:        "...",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 342, col: 9, offset: 13520},
										run: (*parser).callonOrderedListItemPrefix13,
										expr: &litMatcher{
											pos:        position{line: 342, col: 9, offset: 13520},
											val:        "..",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 344, col: 9, offset: 13627},
										run: (*parser).callonOrderedListItemPrefix15,
										expr: &litMatcher{
											pos:        position{line: 344, col: 9, offset: 13627},
											val:        ".",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 347, col: 9, offset: 13754},
										run: (*parser).callonOrderedListItemPrefix17,
										expr: &seqExpr{
											pos: position{line: 347, col: 9, offset: 13754},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 347, col: 9, offset: 13754},
													expr: &charClassMatcher{
														pos:        position{line: 347, col: 10, offset: 13755},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 347, col: 18, offset: 13763},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 349, col: 9, offset: 13866},
										run: (*parser).callonOrderedListItemPrefix22,
										expr: &seqExpr{
											pos: position{line: 349, col: 9, offset: 13866},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 349, col: 9, offset: 13866},
													expr: &charClassMatcher{
														pos:        position{line: 349, col: 10, offset: 13867},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 349, col: 18, offset: 13875},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 351, col: 9, offset: 13981},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 351, col: 9, offset: 13981},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 351, col: 9, offset: 13981},
													expr: &charClassMatcher{
														pos:        position{line: 351, col: 10, offset: 13982},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 351, col: 18, offset: 13990},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 353, col: 9, offset: 14096},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 353, col: 9, offset: 14096},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 353, col: 9, offset: 14096},
													expr: &charClassMatcher{
														pos:        position{line: 353, col: 10, offset: 14097},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 353, col: 18, offset: 14105},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 355, col: 9, offset: 14211},
										run: (*parser).callonOrderedListItemPrefix37,
										expr: &seqExpr{
											pos: position{line: 355, col: 9, offset: 14211},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 355, col: 9, offset: 14211},
													expr: &charClassMatcher{
														pos:        position{line: 355, col: 10, offset: 14212},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 355, col: 18, offset: 14220},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 357, col: 8, offset: 14325},
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 8, offset: 14325},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 361, col: 1, offset: 14365},
			expr: &actionExpr{
				pos: position{line: 361, col: 27, offset: 14391},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 361, col: 27, offset: 14391},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 361, col: 37, offset: 14401},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 361, col: 37, offset: 14401},
								expr: &ruleRefExpr{
									pos:  position{line: 361, col: 37, offset: 14401},
									name: "ListParagraph",
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 361, col: 52, offset: 14416},
								expr: &ruleRefExpr{
									pos:  position{line: 361, col: 52, offset: 14416},
									name: "ContinuedDocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 368, col: 1, offset: 14743},
			expr: &actionExpr{
				pos: position{line: 368, col: 22, offset: 14764},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 368, col: 22, offset: 14764},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 368, col: 22, offset: 14764},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 30, offset: 14772},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 368, col: 55, offset: 14797},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 64, offset: 14806},
								name: "UnorderedListItemContent",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 368, col: 90, offset: 14832},
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 90, offset: 14832},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 372, col: 1, offset: 14951},
			expr: &actionExpr{
				pos: position{line: 372, col: 28, offset: 14978},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 372, col: 28, offset: 14978},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 372, col: 28, offset: 14978},
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 28, offset: 14978},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 372, col: 32, offset: 14982},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 373, col: 5, offset: 14995},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 373, col: 5, offset: 14995},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &litMatcher{
											pos:        position{line: 373, col: 5, offset: 14995},
											val:        "*****",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 376, col: 7, offset: 15155},
										run: (*parser).callonUnorderedListItemPrefix9,
										expr: &litMatcher{
											pos:        position{line: 376, col: 7, offset: 15155},
											val:        "****",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 379, col: 7, offset: 15314},
										run: (*parser).callonUnorderedListItemPrefix11,
										expr: &litMatcher{
											pos:        position{line: 379, col: 7, offset: 15314},
											val:        "***",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 382, col: 7, offset: 15473},
										run: (*parser).callonUnorderedListItemPrefix13,
										expr: &litMatcher{
											pos:        position{line: 382, col: 7, offset: 15473},
											val:        "**",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 385, col: 7, offset: 15629},
										run: (*parser).callonUnorderedListItemPrefix15,
										expr: &litMatcher{
											pos:        position{line: 385, col: 7, offset: 15629},
											val:        "*",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 388, col: 7, offset: 15783},
										run: (*parser).callonUnorderedListItemPrefix17,
										expr: &litMatcher{
											pos:        position{line: 388, col: 7, offset: 15783},
											val:        "-",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 390, col: 12, offset: 15924},
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 12, offset: 15924},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 394, col: 1, offset: 15957},
			expr: &actionExpr{
				pos: position{line: 394, col: 29, offset: 15985},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 394, col: 29, offset: 15985},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 394, col: 39, offset: 15995},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 394, col: 39, offset: 15995},
								expr: &ruleRefExpr{
									pos:  position{line: 394, col: 39, offset: 15995},
									name: "ListParagraph",
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 394, col: 54, offset: 16010},
								expr: &ruleRefExpr{
									pos:  position{line: 394, col: 54, offset: 16010},
									name: "ContinuedDocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 401, col: 1, offset: 16335},
			expr: &choiceExpr{
				pos: position{line: 401, col: 20, offset: 16354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 401, col: 20, offset: 16354},
						run: (*parser).callonLabeledListItem2,
						expr: &seqExpr{
							pos: position{line: 401, col: 20, offset: 16354},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 401, col: 20, offset: 16354},
									label: "term",
									expr: &ruleRefExpr{
										pos:  position{line: 401, col: 26, offset: 16360},
										name: "LabeledListItemTerm",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 401, col: 47, offset: 16381},
									name: "LabeledListItemSeparator",
								},
								&labeledExpr{
									pos:   position{line: 401, col: 72, offset: 16406},
									label: "description",
									expr: &ruleRefExpr{
										pos:  position{line: 401, col: 85, offset: 16419},
										name: "LabeledListItemDescription",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 403, col: 6, offset: 16541},
						run: (*parser).callonLabeledListItem9,
						expr: &seqExpr{
							pos: position{line: 403, col: 6, offset: 16541},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 403, col: 6, offset: 16541},
									label: "term",
									expr: &ruleRefExpr{
										pos:  position{line: 403, col: 12, offset: 16547},
										name: "LabeledListItemTerm",
									},
								},
								&litMatcher{
									pos:        position{line: 403, col: 33, offset: 16568},
									val:        "::",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 403, col: 38, offset: 16573},
									expr: &ruleRefExpr{
										pos:  position{line: 403, col: 38, offset: 16573},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 403, col: 42, offset: 16577},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 407, col: 1, offset: 16714},
			expr: &actionExpr{
				pos: position{line: 407, col: 24, offset: 16737},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 24, offset: 16737},
					label: "term",
					expr: &zeroOrMoreExpr{
						pos: position{line: 407, col: 29, offset: 16742},
						expr: &seqExpr{
							pos: position{line: 407, col: 30, offset: 16743},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 407, col: 30, offset: 16743},
									expr: &ruleRefExpr{
										pos:  position{line: 407, col: 31, offset: 16744},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 407, col: 39, offset: 16752},
									expr: &litMatcher{
										pos:        position{line: 407, col: 40, offset: 16753},
										val:        "::",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 407, col: 45, offset: 16758,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 412, col: 1, offset: 16849},
			expr: &seqExpr{
				pos: position{line: 412, col: 30, offset: 16878},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 412, col: 30, offset: 16878},
						val:        "::",
						ignoreCase: false,
					},
					&oneOrMoreExpr{
						pos: position{line: 412, col: 35, offset: 16883},
						expr: &choiceExpr{
							pos: position{line: 412, col: 36, offset: 16884},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 412, col: 36, offset: 16884},
									name: "WS",
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 41, offset: 16889},
									name: "NEWLINE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 414, col: 1, offset: 16900},
			expr: &actionExpr{
				pos: position{line: 414, col: 31, offset: 16930},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 414, col: 31, offset: 16930},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 414, col: 40, offset: 16939},
						expr: &choiceExpr{
							pos: position{line: 414, col: 41, offset: 16940},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 414, col: 41, offset: 16940},
									name: "ListParagraph",
								},
								&ruleRefExpr{
									pos:  position{line: 414, col: 57, offset: 16956},
									name: "ContinuedDocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 421, col: 1, offset: 17264},
			expr: &choiceExpr{
				pos: position{line: 421, col: 19, offset: 17282},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 421, col: 19, offset: 17282},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 421, col: 19, offset: 17282},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 423, col: 5, offset: 17320},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 423, col: 5, offset: 17320},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 425, col: 5, offset: 17360},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 425, col: 5, offset: 17360},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 17410},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 427, col: 5, offset: 17410},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 429, col: 5, offset: 17456},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 429, col: 5, offset: 17456},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 438, col: 1, offset: 17759},
			expr: &choiceExpr{
				pos: position{line: 440, col: 5, offset: 17806},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 440, col: 5, offset: 17806},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 440, col: 5, offset: 17806},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 440, col: 5, offset: 17806},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 440, col: 16, offset: 17817},
										expr: &ruleRefExpr{
											pos:  position{line: 440, col: 17, offset: 17818},
											name: "ElementAttribute",
										},
									},
								},
								&notExpr{
									pos: position{line: 440, col: 36, offset: 17837},
									expr: &seqExpr{
										pos: position{line: 440, col: 38, offset: 17839},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 440, col: 38, offset: 17839},
												expr: &litMatcher{
													pos:        position{line: 440, col: 38, offset: 17839},
													val:        "=",
													ignoreCase: false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 440, col: 43, offset: 17844},
												expr: &ruleRefExpr{
													pos:  position{line: 440, col: 43, offset: 17844},
													name: "WS",
												},
											},
											&notExpr{
												pos: position{line: 440, col: 47, offset: 17848},
												expr: &ruleRefExpr{
													pos:  position{line: 440, col: 48, offset: 17849},
													name: "NEWLINE",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 440, col: 57, offset: 17858},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 60, offset: 17861},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 440, col: 76, offset: 17877},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 440, col: 81, offset: 17882},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 440, col: 87, offset: 17888},
										expr: &seqExpr{
											pos: position{line: 440, col: 88, offset: 17889},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 440, col: 88, offset: 17889},
													name: "InlineElements",
												},
												&ruleRefExpr{
													pos:  position{line: 440, col: 103, offset: 17904},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 444, col: 5, offset: 18072},
						run: (*parser).callonParagraph23,
						expr: &seqExpr{
							pos: position{line: 444, col: 5, offset: 18072},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 444, col: 5, offset: 18072},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 444, col: 16, offset: 18083},
										expr: &ruleRefExpr{
											pos:  position{line: 444, col: 17, offset: 18084},
											name: "ElementAttribute",
										},
									},
								},
								&notExpr{
									pos: position{line: 444, col: 36, offset: 18103},
									expr: &seqExpr{
										pos: position{line: 444, col: 38, offset: 18105},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 444, col: 38, offset: 18105},
												expr: &litMatcher{
													pos:        position{line: 444, col: 38, offset: 18105},
													val:        "=",
													ignoreCase: false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 444, col: 43, offset: 18110},
												expr: &ruleRefExpr{
													pos:  position{line: 444, col: 43, offset: 18110},
													name: "WS",
												},
											},
											&notExpr{
												pos: position{line: 444, col: 47, offset: 18114},
												expr: &ruleRefExpr{
													pos:  position{line: 444, col: 48, offset: 18115},
													name: "NEWLINE",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 444, col: 57, offset: 18124},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 444, col: 63, offset: 18130},
										expr: &seqExpr{
											pos: position{line: 444, col: 64, offset: 18131},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 444, col: 64, offset: 18131},
													name: "InlineElements",
												},
												&ruleRefExpr{
													pos:  position{line: 444, col: 79, offset: 18146},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 448, col: 1, offset: 18248},
			expr: &actionExpr{
				pos: position{line: 448, col: 19, offset: 18266},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 448, col: 19, offset: 18266},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 448, col: 19, offset: 18266},
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 20, offset: 18267},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 448, col: 24, offset: 18271},
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 25, offset: 18272},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 40, offset: 18287},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 448, col: 49, offset: 18296},
								expr: &seqExpr{
									pos: position{line: 448, col: 50, offset: 18297},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 448, col: 50, offset: 18297},
											expr: &ruleRefExpr{
												pos:  position{line: 448, col: 51, offset: 18298},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 448, col: 55, offset: 18302},
											expr: &ruleRefExpr{
												pos:  position{line: 448, col: 55, offset: 18302},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 448, col: 59, offset: 18306},
											expr: &ruleRefExpr{
												pos:  position{line: 448, col: 60, offset: 18307},
												name: "InlineElementID",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 448, col: 76, offset: 18323},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 448, col: 90, offset: 18337},
											expr: &ruleRefExpr{
												pos:  position{line: 448, col: 90, offset: 18337},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 453, col: 1, offset: 18511},
			expr: &actionExpr{
				pos: position{line: 453, col: 18, offset: 18528},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 453, col: 18, offset: 18528},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 453, col: 27, offset: 18537},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 453, col: 27, offset: 18537},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 453, col: 44, offset: 18554},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 453, col: 58, offset: 18568},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 453, col: 72, offset: 18582},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 453, col: 85, offset: 18595},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 453, col: 92, offset: 18602},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 453, col: 124, offset: 18634},
								name: "Word",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 461, col: 1, offset: 18968},
			expr: &choiceExpr{
				pos: position{line: 461, col: 15, offset: 18982},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 461, col: 15, offset: 18982},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 461, col: 26, offset: 18993},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 461, col: 39, offset: 19006},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 462, col: 13, offset: 19034},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 462, col: 31, offset: 19052},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 462, col: 51, offset: 19072},
						name: "EscapedMonospaceText",
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 464, col: 1, offset: 19094},
			expr: &choiceExpr{
				pos: position{line: 464, col: 13, offset: 19106},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 464, col: 13, offset: 19106},
						run: (*parser).callonBoldText2,
						expr: &seqExpr{
							pos: position{line: 464, col: 13, offset: 19106},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 464, col: 13, offset: 19106},
									expr: &litMatcher{
										pos:        position{line: 464, col: 14, offset: 19107},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 464, col: 19, offset: 19112},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 464, col: 24, offset: 19117},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 464, col: 33, offset: 19126},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 464, col: 52, offset: 19145},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 19270},
						run: (*parser).callonBoldText10,
						expr: &seqExpr{
							pos: position{line: 466, col: 5, offset: 19270},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 466, col: 5, offset: 19270},
									expr: &litMatcher{
										pos:        position{line: 466, col: 6, offset: 19271},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 466, col: 11, offset: 19276},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 466, col: 16, offset: 19281},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 466, col: 25, offset: 19290},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 466, col: 44, offset: 19309},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 469, col: 5, offset: 19474},
						run: (*parser).callonBoldText18,
						expr: &seqExpr{
							pos: position{line: 469, col: 5, offset: 19474},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 469, col: 5, offset: 19474},
									expr: &litMatcher{
										pos:        position{line: 469, col: 6, offset: 19475},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 469, col: 10, offset: 19479},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 469, col: 14, offset: 19483},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 469, col: 23, offset: 19492},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 469, col: 42, offset: 19511},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 473, col: 1, offset: 19611},
			expr: &choiceExpr{
				pos: position{line: 473, col: 20, offset: 19630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 473, col: 20, offset: 19630},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 473, col: 20, offset: 19630},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 473, col: 20, offset: 19630},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 473, col: 33, offset: 19643},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 473, col: 33, offset: 19643},
												val:        "\\\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 473, col: 38, offset: 19648},
												expr: &litMatcher{
													pos:        position{line: 473, col: 38, offset: 19648},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 473, col: 44, offset: 19654},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 473, col: 49, offset: 19659},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 473, col: 58, offset: 19668},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 473, col: 77, offset: 19687},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 475, col: 5, offset: 19842},
						run: (*parser).callonEscapedBoldText13,
						expr: &seqExpr{
							pos: position{line: 475, col: 5, offset: 19842},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 475, col: 5, offset: 19842},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 475, col: 18, offset: 19855},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 475, col: 18, offset: 19855},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 475, col: 22, offset: 19859},
												expr: &litMatcher{
													pos:        position{line: 475, col: 22, offset: 19859},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 475, col: 28, offset: 19865},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 475, col: 33, offset: 19870},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 475, col: 42, offset: 19879},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 475, col: 61, offset: 19898},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 478, col: 5, offset: 20092},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 478, col: 5, offset: 20092},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 478, col: 5, offset: 20092},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 478, col: 18, offset: 20105},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 478, col: 18, offset: 20105},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 478, col: 22, offset: 20109},
												expr: &litMatcher{
													pos:        position{line: 478, col: 22, offset: 20109},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 478, col: 28, offset: 20115},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 478, col: 32, offset: 20119},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 478, col: 41, offset: 20128},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 478, col: 60, offset: 20147},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 482, col: 1, offset: 20299},
			expr: &choiceExpr{
				pos: position{line: 482, col: 15, offset: 20313},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 482, col: 15, offset: 20313},
						run: (*parser).callonItalicText2,
						expr: &seqExpr{
							pos: position{line: 482, col: 15, offset: 20313},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 482, col: 15, offset: 20313},
									expr: &litMatcher{
										pos:        position{line: 482, col: 16, offset: 20314},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 482, col: 21, offset: 20319},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 482, col: 26, offset: 20324},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 482, col: 35, offset: 20333},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 482, col: 54, offset: 20352},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 484, col: 5, offset: 20433},
						run: (*parser).callonItalicText10,
						expr: &seqExpr{
							pos: position{line: 484, col: 5, offset: 20433},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 484, col: 5, offset: 20433},
									expr: &litMatcher{
										pos:        position{line: 484, col: 6, offset: 20434},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 484, col: 11, offset: 20439},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 484, col: 16, offset: 20444},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 484, col: 25, offset: 20453},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 484, col: 44, offset: 20472},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 487, col: 5, offset: 20639},
						run: (*parser).callonItalicText18,
						expr: &seqExpr{
							pos: position{line: 487, col: 5, offset: 20639},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 487, col: 5, offset: 20639},
									expr: &litMatcher{
										pos:        position{line: 487, col: 6, offset: 20640},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 487, col: 10, offset: 20644},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 487, col: 14, offset: 20648},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 23, offset: 20657},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 487, col: 42, offset: 20676},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 491, col: 1, offset: 20755},
			expr: &choiceExpr{
				pos: position{line: 491, col: 22, offset: 20776},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 491, col: 22, offset: 20776},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 491, col: 22, offset: 20776},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 491, col: 22, offset: 20776},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 491, col: 35, offset: 20789},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 491, col: 35, offset: 20789},
												val:        "\\\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 491, col: 40, offset: 20794},
												expr: &litMatcher{
													pos:        position{line: 491, col: 40, offset: 20794},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 491, col: 46, offset: 20800},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 491, col: 51, offset: 20805},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 491, col: 60, offset: 20814},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 491, col: 79, offset: 20833},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 493, col: 5, offset: 20988},
						run: (*parser).callonEscapedItalicText13,
						expr: &seqExpr{
							pos: position{line: 493, col: 5, offset: 20988},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 493, col: 5, offset: 20988},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 493, col: 18, offset: 21001},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 493, col: 18, offset: 21001},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 493, col: 22, offset: 21005},
												expr: &litMatcher{
													pos:        position{line: 493, col: 22, offset: 21005},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 493, col: 28, offset: 21011},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 493, col: 33, offset: 21016},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 493, col: 42, offset: 21025},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 493, col: 61, offset: 21044},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 496, col: 5, offset: 21238},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 496, col: 5, offset: 21238},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 496, col: 5, offset: 21238},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 496, col: 18, offset: 21251},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 496, col: 18, offset: 21251},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 496, col: 22, offset: 21255},
												expr: &litMatcher{
													pos:        position{line: 496, col: 22, offset: 21255},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 496, col: 28, offset: 21261},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 496, col: 32, offset: 21265},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 496, col: 41, offset: 21274},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 496, col: 60, offset: 21293},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 500, col: 1, offset: 21445},
			expr: &choiceExpr{
				pos: position{line: 500, col: 18, offset: 21462},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 500, col: 18, offset: 21462},
						run: (*parser).callonMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 500, col: 18, offset: 21462},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 500, col: 18, offset: 21462},
									expr: &litMatcher{
										pos:        position{line: 500, col: 19, offset: 21463},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 500, col: 24, offset: 21468},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 500, col: 29, offset: 21473},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 500, col: 38, offset: 21482},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 500, col: 57, offset: 21501},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 502, col: 5, offset: 21631},
						run: (*parser).callonMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 502, col: 5, offset: 21631},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 502, col: 5, offset: 21631},
									expr: &litMatcher{
										pos:        position{line: 502, col: 6, offset: 21632},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 502, col: 11, offset: 21637},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 502, col: 16, offset: 21642},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 502, col: 25, offset: 21651},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 502, col: 44, offset: 21670},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 21840},
						run: (*parser).callonMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 505, col: 5, offset: 21840},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 505, col: 5, offset: 21840},
									expr: &litMatcher{
										pos:        position{line: 505, col: 6, offset: 21841},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 505, col: 10, offset: 21845},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 505, col: 14, offset: 21849},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 23, offset: 21858},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 505, col: 42, offset: 21877},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 509, col: 1, offset: 22004},
			expr: &choiceExpr{
				pos: position{line: 509, col: 25, offset: 22028},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 509, col: 25, offset: 22028},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 509, col: 25, offset: 22028},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 509, col: 25, offset: 22028},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 509, col: 38, offset: 22041},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 509, col: 38, offset: 22041},
												val:        "\\\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 509, col: 43, offset: 22046},
												expr: &litMatcher{
													pos:        position{line: 509, col: 43, offset: 22046},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 509, col: 49, offset: 22052},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 509, col: 54, offset: 22057},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 509, col: 63, offset: 22066},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 509, col: 82, offset: 22085},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 511, col: 5, offset: 22240},
						run: (*parser).callonEscapedMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 511, col: 5, offset: 22240},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 511, col: 5, offset: 22240},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 511, col: 18, offset: 22253},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 511, col: 18, offset: 22253},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 511, col: 22, offset: 22257},
												expr: &litMatcher{
													pos:        position{line: 511, col: 22, offset: 22257},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 511, col: 28, offset: 22263},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 511, col: 33, offset: 22268},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 511, col: 42, offset: 22277},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 511, col: 61, offset: 22296},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 514, col: 5, offset: 22490},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 514, col: 5, offset: 22490},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 514, col: 5, offset: 22490},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 514, col: 18, offset: 22503},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 514, col: 18, offset: 22503},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 514, col: 22, offset: 22507},
												expr: &litMatcher{
													pos:        position{line: 514, col: 22, offset: 22507},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 514, col: 28, offset: 22513},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 514, col: 32, offset: 22517},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 514, col: 41, offset: 22526},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 514, col: 60, offset: 22545},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextContent",
			pos:  position{line: 518, col: 1, offset: 22697},
			expr: &seqExpr{
				pos: position{line: 518, col: 22, offset: 22718},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 518, col: 22, offset: 22718},
						name: "QuotedTextContentElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 518, col: 47, offset: 22743},
						expr: &seqExpr{
							pos: position{line: 518, col: 48, offset: 22744},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 518, col: 48, offset: 22744},
									expr: &ruleRefExpr{
										pos:  position{line: 518, col: 48, offset: 22744},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 518, col: 52, offset: 22748},
									name: "QuotedTextContentElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextContentElement",
			pos:  position{line: 520, col: 1, offset: 22776},
			expr: &choiceExpr{
				pos: position{line: 520, col: 29, offset: 22804},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 520, col: 29, offset: 22804},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 520, col: 42, offset: 22817},
						name: "QuotedTextWord",
					},
					&ruleRefExpr{
						pos:  position{line: 520, col: 59, offset: 22834},
						name: "WordWithQuotePunctuation",
					},
				},
			},
		},
		{
			name: "QuotedTextWord",
			pos:  position{line: 522, col: 1, offset: 22963},
			expr: &oneOrMoreExpr{
				pos: position{line: 522, col: 19, offset: 22981},
				expr: &seqExpr{
					pos: position{line: 522, col: 20, offset: 22982},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 522, col: 20, offset: 22982},
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 21, offset: 22983},
								name: "NEWLINE",
							},
						},
						&notExpr{
							pos: position{line: 522, col: 29, offset: 22991},
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 30, offset: 22992},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 522, col: 33, offset: 22995},
							expr: &litMatcher{
								pos:        position{line: 522, col: 34, offset: 22996},
								val:        "*",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 522, col: 38, offset: 23000},
							expr: &litMatcher{
								pos:        position{line: 522, col: 39, offset: 23001},
								val:        "_",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 522, col: 43, offset: 23005},
							expr: &litMatcher{
								pos:        position{line: 522, col: 44, offset: 23006},
								val:        "`",
								ignoreCase: false,
							},
						},
						&anyMatcher{
							line: 522, col: 48, offset: 23010,
						},
					},
				},
			},
		},
		{
			name: "WordWithQuotePunctuation",
			pos:  position{line: 524, col: 1, offset: 23053},
			expr: &actionExpr{
				pos: position{line: 524, col: 29, offset: 23081},
				run: (*parser).callonWordWithQuotePunctuation1,
				expr: &oneOrMoreExpr{
					pos: position{line: 524, col: 29, offset: 23081},
					expr: &seqExpr{
						pos: position{line: 524, col: 30, offset: 23082},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 524, col: 30, offset: 23082},
								expr: &ruleRefExpr{
									pos:  position{line: 524, col: 31, offset: 23083},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 524, col: 39, offset: 23091},
								expr: &ruleRefExpr{
									pos:  position{line: 524, col: 40, offset: 23092},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 524, col: 44, offset: 23096,
							},
						},
					},
				},
			},
		},
		{
			name: "UnbalancedQuotePunctuation",
			pos:  position{line: 529, col: 1, offset: 23341},
			expr: &choiceExpr{
				pos: position{line: 529, col: 31, offset: 23371},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 529, col: 31, offset: 23371},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 529, col: 37, offset: 23377},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 529, col: 43, offset: 23383},
						val:        "`",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 534, col: 1, offset: 23495},
			expr: &choiceExpr{
				pos: position{line: 534, col: 16, offset: 23510},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 534, col: 16, offset: 23510},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 534, col: 40, offset: 23534},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 534, col: 64, offset: 23558},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 536, col: 1, offset: 23576},
			expr: &actionExpr{
				pos: position{line: 536, col: 26, offset: 23601},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 536, col: 26, offset: 23601},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 536, col: 26, offset: 23601},
							val:        "+",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 536, col: 30, offset: 23605},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 536, col: 38, offset: 23613},
								expr: &seqExpr{
									pos: position{line: 536, col: 39, offset: 23614},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 536, col: 39, offset: 23614},
											expr: &ruleRefExpr{
												pos:  position{line: 536, col: 40, offset: 23615},
												name: "NEWLINE",
											},
										},
										&notExpr{
											pos: position{line: 536, col: 48, offset: 23623},
											expr: &litMatcher{
												pos:        position{line: 536, col: 49, offset: 23624},
												val:        "+",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 536, col: 53, offset: 23628,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 536, col: 57, offset: 23632},
							val:        "+",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 540, col: 1, offset: 23727},
			expr: &actionExpr{
				pos: position{line: 540, col: 26, offset: 23752},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 540, col: 26, offset: 23752},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 540, col: 26, offset: 23752},
							val:        "+++",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 540, col: 32, offset: 23758},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 540, col: 40, offset: 23766},
								expr: &seqExpr{
									pos: position{line: 540, col: 41, offset: 23767},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 540, col: 41, offset: 23767},
											expr: &litMatcher{
												pos:        position{line: 540, col: 42, offset: 23768},
												val:        "+++",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 540, col: 48, offset: 23774,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 540, col: 52, offset: 23778},
							val:        "+++",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 544, col: 1, offset: 23875},
			expr: &choiceExpr{
				pos: position{line: 544, col: 21, offset: 23895},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 544, col: 21, offset: 23895},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 544, col: 21, offset: 23895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 544, col: 21, offset: 23895},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 544, col: 30, offset: 23904},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 544, col: 38, offset: 23912},
										expr: &ruleRefExpr{
											pos:  position{line: 544, col: 39, offset: 23913},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 544, col: 67, offset: 23941},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 546, col: 5, offset: 24032},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 546, col: 5, offset: 24032},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 546, col: 5, offset: 24032},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 546, col: 15, offset: 24042},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 546, col: 23, offset: 24050},
										expr: &choiceExpr{
											pos: position{line: 546, col: 24, offset: 24051},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 546, col: 24, offset: 24051},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 546, col: 37, offset: 24064},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 546, col: 65, offset: 24092},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 550, col: 1, offset: 24182},
			expr: &seqExpr{
				pos: position{line: 550, col: 31, offset: 24212},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 550, col: 31, offset: 24212},
						expr: &litMatcher{
							pos:        position{line: 550, col: 32, offset: 24213},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 550, col: 36, offset: 24217,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 555, col: 1, offset: 24333},
			expr: &actionExpr{
				pos: position{line: 555, col: 19, offset: 24351},
				run: (*parser).callonCrossReference1,
				expr: &seqExpr{
					pos: position{line: 555, col: 19, offset: 24351},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 555, col: 19, offset: 24351},
							val:        "<<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 555, col: 24, offset: 24356},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 28, offset: 24360},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 555, col: 32, offset: 24364},
							val:        ">>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 562, col: 1, offset: 24523},
			expr: &choiceExpr{
				pos: position{line: 562, col: 9, offset: 24531},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 562, col: 9, offset: 24531},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 562, col: 24, offset: 24546},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 564, col: 1, offset: 24561},
			expr: &choiceExpr{
				pos: position{line: 564, col: 17, offset: 24577},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 564, col: 17, offset: 24577},
						run: (*parser).callonExternalLink2,
						expr: &seqExpr{
							pos: position{line: 564, col: 17, offset: 24577},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 564, col: 17, offset: 24577},
									label: "url",
									expr: &seqExpr{
										pos: position{line: 564, col: 22, offset: 24582},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 564, col: 22, offset: 24582},
												name: "URL_SCHEME",
											},
											&ruleRefExpr{
												pos:  position{line: 564, col: 33, offset: 24593},
												name: "URL",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 564, col: 38, offset: 24598},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 564, col: 50, offset: 24610},
										name: "LinkAttributes",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 566, col: 5, offset: 24715},
						run: (*parser).callonExternalLink10,
						expr: &labeledExpr{
							pos:   position{line: 566, col: 5, offset: 24715},
							label: "url",
							expr: &seqExpr{
								pos: position{line: 566, col: 10, offset: 24720},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 566, col: 10, offset: 24720},
										name: "URL_SCHEME",
									},
									&ruleRefExpr{
										pos:  position{line: 566, col: 21, offset: 24731},
										name: "URL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 571, col: 1, offset: 24859},
			expr: &actionExpr{
				pos: position{line: 571, col: 17, offset: 24875},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 571, col: 17, offset: 24875},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 571, col: 17, offset: 24875},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 571, col: 25, offset: 24883},
							label: "url",
							expr: &seqExpr{
								pos: position{line: 571, col: 30, offset: 24888},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 571, col: 30, offset: 24888},
										expr: &ruleRefExpr{
											pos:  position{line: 571, col: 30, offset: 24888},
											name: "URL_SCHEME",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 571, col: 42, offset: 24900},
										name: "URL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 47, offset: 24905},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 59, offset: 24917},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 575, col: 1, offset: 25021},
			expr: &choiceExpr{
				pos: position{line: 575, col: 19, offset: 25039},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 575, col: 19, offset: 25039},
						run: (*parser).callonLinkAttributes2,
						expr: &seqExpr{
							pos: position{line: 575, col: 19, offset: 25039},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 575, col: 19, offset: 25039},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 575, col: 23, offset: 25043},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 575, col: 29, offset: 25049},
										name: "LinkTextAttribute",
									},
								},
								&labeledExpr{
									pos:   position{line: 576, col: 9, offset: 25076},
									label: "otherAttrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 576, col: 20, offset: 25087},
										expr: &ruleRefExpr{
											pos:  position{line: 576, col: 21, offset: 25088},
											name: "OtherGenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 576, col: 45, offset: 25112},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 578, col: 5, offset: 25207},
						run: (*parser).callonLinkAttributes11,
						expr: &seqExpr{
							pos: position{line: 578, col: 5, offset: 25207},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 578, col: 5, offset: 25207},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 578, col: 9, offset: 25211},
									label: "otherAttrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 578, col: 20, offset: 25222},
										expr: &ruleRefExpr{
											pos:  position{line: 578, col: 21, offset: 25223},
											name: "OtherGenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 578, col: 45, offset: 25247},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 582, col: 1, offset: 25324},
			expr: &actionExpr{
				pos: position{line: 582, col: 22, offset: 25345},
				run: (*parser).callonLinkTextAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 582, col: 22, offset: 25345},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 582, col: 28, offset: 25351},
						expr: &seqExpr{
							pos: position{line: 582, col: 29, offset: 25352},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 582, col: 29, offset: 25352},
									expr: &litMatcher{
										pos:        position{line: 582, col: 30, offset: 25353},
										val:        ",",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 582, col: 34, offset: 25357},
									expr: &litMatcher{
										pos:        position{line: 582, col: 35, offset: 25358},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 582, col: 39, offset: 25362,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 589, col: 1, offset: 25495},
			expr: &actionExpr{
				pos: position{line: 589, col: 15, offset: 25509},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 589, col: 15, offset: 25509},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 589, col: 15, offset: 25509},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 589, col: 26, offset: 25520},
								expr: &ruleRefExpr{
									pos:  position{line: 589, col: 27, offset: 25521},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 589, col: 46, offset: 25540},
							label: "image",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 52, offset: 25546},
								name: "BlockImageMacro",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 589, col: 69, offset: 25563},
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 69, offset: 25563},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 589, col: 73, offset: 25567},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockImageMacro",
			pos:  position{line: 594, col: 1, offset: 25726},
			expr: &actionExpr{
				pos: position{line: 594, col: 20, offset: 25745},
				run: (*parser).callonBlockImageMacro1,
				expr: &seqExpr{
					pos: position{line: 594, col: 20, offset: 25745},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 594, col: 20, offset: 25745},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 594, col: 30, offset: 25755},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 36, offset: 25761},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 41, offset: 25766},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 53, offset: 25778},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 598, col: 1, offset: 25883},
			expr: &actionExpr{
				pos: position{line: 598, col: 16, offset: 25898},
				run: (*parser).callonInlineImage1,
				expr: &labeledExpr{
					pos:   position{line: 598, col: 16, offset: 25898},
					label: "image",
					expr: &ruleRefExpr{
						pos:  position{line: 598, col: 22, offset: 25904},
						name: "InlineImageMacro",
					},
				},
			},
		},
		{
			name: "InlineImageMacro",
			pos:  position{line: 603, col: 1, offset: 26049},
			expr: &actionExpr{
				pos: position{line: 603, col: 21, offset: 26069},
				run: (*parser).callonInlineImageMacro1,
				expr: &seqExpr{
					pos: position{line: 603, col: 21, offset: 26069},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 603, col: 21, offset: 26069},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 603, col: 30, offset: 26078},
							expr: &litMatcher{
								pos:        position{line: 603, col: 31, offset: 26079},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 35, offset: 26083},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 41, offset: 26089},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 46, offset: 26094},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 58, offset: 26106},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 607, col: 1, offset: 26211},
			expr: &choiceExpr{
				pos: position{line: 607, col: 20, offset: 26230},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 607, col: 20, offset: 26230},
						run: (*parser).callonImageAttributes2,
						expr: &seqExpr{
							pos: position{line: 607, col: 20, offset: 26230},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 607, col: 20, offset: 26230},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 607, col: 24, offset: 26234},
									label: "alt",
									expr: &ruleRefExpr{
										pos:  position{line: 607, col: 29, offset: 26239},
										name: "ImageAltAttribute",
									},
								},
								&labeledExpr{
									pos:   position{line: 608, col: 9, offset: 26266},
									label: "width",
									expr: &ruleRefExpr{
										pos:  position{line: 608, col: 16, offset: 26273},
										name: "ImageWidthAttribute",
									},
								},
								&labeledExpr{
									pos:   position{line: 609, col: 9, offset: 26302},
									label: "height",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 17, offset: 26310},
										name: "ImageHeightAttribute",
									},
								},
								&labeledExpr{
									pos:   position{line: 610, col: 9, offset: 26340},
									label: "otherAttrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 610, col: 20, offset: 26351},
										expr: &ruleRefExpr{
											pos:  position{line: 610, col: 21, offset: 26352},
											name: "OtherGenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 610, col: 45, offset: 26376},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 612, col: 5, offset: 26518},
						run: (*parser).callonImageAttributes15,
						expr: &seqExpr{
							pos: position{line: 612, col: 5, offset: 26518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 612, col: 5, offset: 26518},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 612, col: 9, offset: 26522},
									label: "alt",
									expr: &ruleRefExpr{
										pos:  position{line: 612, col: 14, offset: 26527},
										name: "ImageAltAttribute",
									},
								},
								&labeledExpr{
									pos:   position{line: 613, col: 9, offset: 26554},
									label: "width",
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 16, offset: 26561},
										name: "ImageWidthAttribute",
									},
								},
								&labeledExpr{
									pos:   position{line: 614, col: 9, offset: 26590},
									label: "otherAttrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 614, col: 20, offset: 26601},
										expr: &ruleRefExpr{
											pos:  position{line: 614, col: 21, offset: 26602},
											name: "OtherGenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 614, col: 45, offset: 26626},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 616, col: 5, offset: 26749},
						run: (*parser).callonImageAttributes26,
						expr: &seqExpr{
							pos: position{line: 616, col: 5, offset: 26749},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 616, col: 5, offset: 26749},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 616, col: 9, offset: 26753},
									label: "alt",
									expr: &ruleRefExpr{
										pos:  position{line: 616, col: 14, offset: 26758},
										name: "ImageAltAttribute",
									},
								},
								&labeledExpr{
									pos:   position{line: 617, col: 9, offset: 26785},
									label: "otherAttrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 617, col: 20, offset: 26796},
										expr: &ruleRefExpr{
											pos:  position{line: 617, col: 21, offset: 26797},
											name: "OtherGenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 617, col: 45, offset: 26821},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 26926},
						run: (*parser).callonImageAttributes35,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 26926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 619, col: 5, offset: 26926},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 619, col: 9, offset: 26930},
									label: "otherAttrs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 619, col: 20, offset: 26941},
										expr: &ruleRefExpr{
											pos:  position{line: 619, col: 21, offset: 26942},
											name: "OtherGenericAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 619, col: 45, offset: 26966},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttribute",
			pos:  position{line: 623, col: 1, offset: 27054},
			expr: &actionExpr{
				pos: position{line: 623, col: 22, offset: 27075},
				run: (*parser).callonImageAltAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 623, col: 22, offset: 27075},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 623, col: 28, offset: 27081},
						expr: &seqExpr{
							pos: position{line: 623, col: 29, offset: 27082},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 623, col: 29, offset: 27082},
									expr: &litMatcher{
										pos:        position{line: 623, col: 30, offset: 27083},
										val:        ",",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 623, col: 34, offset: 27087},
									expr: &litMatcher{
										pos:        position{line: 623, col: 35, offset: 27088},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 623, col: 39, offset: 27092,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttribute",
			pos:  position{line: 627, col: 1, offset: 27123},
			expr: &actionExpr{
				pos: position{line: 627, col: 24, offset: 27146},
				run: (*parser).callonImageWidthAttribute1,
				expr: &seqExpr{
					pos: position{line: 627, col: 24, offset: 27146},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 627, col: 24, offset: 27146},
							val:        ",",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 627, col: 28, offset: 27150},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 627, col: 34, offset: 27156},
								expr: &seqExpr{
									pos: position{line: 627, col: 35, offset: 27157},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 627, col: 35, offset: 27157},
											expr: &litMatcher{
												pos:        position{line: 627, col: 36, offset: 27158},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 627, col: 40, offset: 27162},
											expr: &litMatcher{
												pos:        position{line: 627, col: 41, offset: 27163},
												val:        "]",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 627, col: 45, offset: 27167,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttribute",
			pos:  position{line: 631, col: 1, offset: 27198},
			expr: &actionExpr{
				pos: position{line: 631, col: 25, offset: 27222},
				run: (*parser).callonImageHeightAttribute1,
				expr: &seqExpr{
					pos: position{line: 631, col: 25, offset: 27222},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 631, col: 25, offset: 27222},
							val:        ",",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 631, col: 29, offset: 27226},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 631, col: 35, offset: 27232},
								expr: &seqExpr{
									pos: position{line: 631, col: 36, offset: 27233},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 631, col: 36, offset: 27233},
											expr: &litMatcher{
												pos:        position{line: 631, col: 37, offset: 27234},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 631, col: 41, offset: 27238},
											expr: &litMatcher{
												pos:        position{line: 631, col: 42, offset: 27239},
												val:        "]",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 631, col: 46, offset: 27243,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 638, col: 1, offset: 27537},
			expr: &choiceExpr{
				pos: position{line: 638, col: 19, offset: 27555},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 638, col: 19, offset: 27555},
						name: "FencedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 638, col: 33, offset: 27569},
						name: "ListingBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 638, col: 48, offset: 27584},
						name: "ExampleBlock",
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 640, col: 1, offset: 27598},
			expr: &choiceExpr{
				pos: position{line: 640, col: 19, offset: 27616},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 640, col: 19, offset: 27616},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 640, col: 43, offset: 27640},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 640, col: 66, offset: 27663},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 640, col: 90, offset: 27687},
						name: "ExampleBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 642, col: 1, offset: 27710},
			expr: &litMatcher{
				pos:        position{line: 642, col: 25, offset: 27734},
				val:        "```",
				ignoreCase: false,
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 644, col: 1, offset: 27741},
			expr: &actionExpr{
				pos: position{line: 644, col: 16, offset: 27756},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 644, col: 16, offset: 27756},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 644, col: 16, offset: 27756},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 644, col: 27, offset: 27767},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 28, offset: 27768},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 47, offset: 27787},
							name: "FencedBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 644, col: 68, offset: 27808},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 68, offset: 27808},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 72, offset: 27812},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 644, col: 80, offset: 27820},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 644, col: 88, offset: 27828},
								expr: &choiceExpr{
									pos: position{line: 644, col: 89, offset: 27829},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 644, col: 89, offset: 27829},
											name: "List",
										},
										&ruleRefExpr{
											pos:  position{line: 644, col: 96, offset: 27836},
											name: "BlockParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 644, col: 113, offset: 27853},
											name: "BlankLine",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 644, col: 126, offset: 27866},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 644, col: 127, offset: 27867},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 644, col: 127, offset: 27867},
											name: "FencedBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 644, col: 148, offset: 27888},
											expr: &ruleRefExpr{
												pos:  position{line: 644, col: 148, offset: 27888},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 644, col: 152, offset: 27892},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 644, col: 159, offset: 27899},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 648, col: 1, offset: 28016},
			expr: &litMatcher{
				pos:        position{line: 648, col: 26, offset: 28041},
				val:        "----",
				ignoreCase: false,
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 650, col: 1, offset: 28049},
			expr: &actionExpr{
				pos: position{line: 650, col: 17, offset: 28065},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 650, col: 17, offset: 28065},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 17, offset: 28065},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 650, col: 28, offset: 28076},
								expr: &ruleRefExpr{
									pos:  position{line: 650, col: 29, offset: 28077},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 650, col: 48, offset: 28096},
							name: "ListingBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 650, col: 70, offset: 28118},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 70, offset: 28118},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 650, col: 74, offset: 28122},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 650, col: 82, offset: 28130},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 650, col: 90, offset: 28138},
								expr: &choiceExpr{
									pos: position{line: 650, col: 91, offset: 28139},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 650, col: 91, offset: 28139},
											name: "List",
										},
										&ruleRefExpr{
											pos:  position{line: 650, col: 98, offset: 28146},
											name: "BlockParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 650, col: 115, offset: 28163},
											name: "BlankLine",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 650, col: 128, offset: 28176},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 650, col: 129, offset: 28177},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 650, col: 129, offset: 28177},
											name: "ListingBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 650, col: 151, offset: 28199},
											expr: &ruleRefExpr{
												pos:  position{line: 650, col: 151, offset: 28199},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 650, col: 155, offset: 28203},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 650, col: 162, offset: 28210},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 654, col: 1, offset: 28328},
			expr: &litMatcher{
				pos:        position{line: 654, col: 26, offset: 28353},
				val:        "====",
				ignoreCase: false,
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 656, col: 1, offset: 28361},
			expr: &actionExpr{
				pos: position{line: 656, col: 17, offset: 28377},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 656, col: 17, offset: 28377},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 17, offset: 28377},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 656, col: 28, offset: 28388},
								expr: &ruleRefExpr{
									pos:  position{line: 656, col: 29, offset: 28389},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 48, offset: 28408},
							name: "ExampleBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 656, col: 70, offset: 28430},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 70, offset: 28430},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 74, offset: 28434},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 656, col: 82, offset: 28442},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 656, col: 90, offset: 28450},
								expr: &choiceExpr{
									pos: position{line: 656, col: 91, offset: 28451},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 656, col: 91, offset: 28451},
											name: "List",
										},
										&ruleRefExpr{
											pos:  position{line: 656, col: 98, offset: 28458},
											name: "BlockParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 656, col: 115, offset: 28475},
											name: "BlankLine",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 656, col: 129, offset: 28489},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 656, col: 130, offset: 28490},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 656, col: 130, offset: 28490},
											name: "ExampleBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 656, col: 152, offset: 28512},
											expr: &ruleRefExpr{
												pos:  position{line: 656, col: 152, offset: 28512},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 656, col: 156, offset: 28516},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 656, col: 163, offset: 28523},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockParagraph",
			pos:  position{line: 660, col: 1, offset: 28641},
			expr: &actionExpr{
				pos: position{line: 660, col: 20, offset: 28660},
				run: (*parser).callonBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 660, col: 20, offset: 28660},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 660, col: 26, offset: 28666},
						expr: &seqExpr{
							pos: position{line: 661, col: 5, offset: 28672},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 661, col: 5, offset: 28672},
									expr: &ruleRefExpr{
										pos:  position{line: 661, col: 7, offset: 28674},
										name: "OrderedListItemPrefix",
									},
								},
								&notExpr{
									pos: position{line: 662, col: 5, offset: 28702},
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 7, offset: 28704},
										name: "UnorderedListItemPrefix",
									},
								},
								&notExpr{
									pos: position{line: 663, col: 5, offset: 28734},
									expr: &seqExpr{
										pos: position{line: 663, col: 7, offset: 28736},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 663, col: 7, offset: 28736},
												name: "LabeledListItemTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 663, col: 27, offset: 28756},
												name: "LabeledListItemSeparator",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 664, col: 5, offset: 28787},
									expr: &ruleRefExpr{
										pos:  position{line: 664, col: 7, offset: 28789},
										name: "ListItemContinuation",
									},
								},
								&notExpr{
									pos: position{line: 666, col: 5, offset: 28842},
									expr: &ruleRefExpr{
										pos:  position{line: 666, col: 7, offset: 28844},
										name: "BlockDelimiter",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 667, col: 5, offset: 28864},
									name: "InlineElements",
								},
								&ruleRefExpr{
									pos:  position{line: 667, col: 20, offset: 28879},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 674, col: 1, offset: 29216},
			expr: &choiceExpr{
				pos: position{line: 674, col: 17, offset: 29232},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 674, col: 17, offset: 29232},
						name: "ParagraphWithSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 674, col: 39, offset: 29254},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 674, col: 76, offset: 29291},
						name: "ParagraphWithLiteralAttribute",
					},
				},
			},
		},
		{
			name: "ParagraphWithSpaces",
			pos:  position{line: 677, col: 1, offset: 29386},
			expr: &actionExpr{
				pos: position{line: 677, col: 24, offset: 29409},
				run: (*parser).callonParagraphWithSpaces1,
				expr: &seqExpr{
					pos: position{line: 677, col: 24, offset: 29409},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 677, col: 24, offset: 29409},
							label: "spaces",
							expr: &oneOrMoreExpr{
								pos: position{line: 677, col: 32, offset: 29417},
								expr: &ruleRefExpr{
									pos:  position{line: 677, col: 32, offset: 29417},
									name: "WS",
								},
							},
						},
						&notExpr{
							pos: position{line: 677, col: 37, offset: 29422},
							expr: &ruleRefExpr{
								pos:  position{line: 677, col: 38, offset: 29423},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 677, col: 46, offset: 29431},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 677, col: 55, offset: 29440},
								name: "LiteralBlockContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 677, col: 76, offset: 29461},
							name: "EndOfLiteralBlock",
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockContent",
			pos:  position{line: 682, col: 1, offset: 29642},
			expr: &actionExpr{
				pos: position{line: 682, col: 24, offset: 29665},
				run: (*parser).callonLiteralBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 682, col: 24, offset: 29665},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 682, col: 32, offset: 29673},
						expr: &seqExpr{
							pos: position{line: 682, col: 33, offset: 29674},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 682, col: 33, offset: 29674},
									expr: &seqExpr{
										pos: position{line: 682, col: 35, offset: 29676},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 682, col: 35, offset: 29676},
												name: "NEWLINE",
											},
											&ruleRefExpr{
												pos:  position{line: 682, col: 43, offset: 29684},
												name: "BlankLine",
											},
										},
									},
								},
								&anyMatcher{
									line: 682, col: 54, offset: 29695,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfLiteralBlock",
			pos:  position{line: 687, col: 1, offset: 29780},
			expr: &choiceExpr{
				pos: position{line: 687, col: 22, offset: 29801},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 687, col: 22, offset: 29801},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 687, col: 22, offset: 29801},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 687, col: 30, offset: 29809},
								name: "BlankLine",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 687, col: 42, offset: 29821},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 687, col: 52, offset: 29831},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 690, col: 1, offset: 29891},
			expr: &actionExpr{
				pos: position{line: 690, col: 39, offset: 29929},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 690, col: 39, offset: 29929},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 690, col: 39, offset: 29929},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 690, col: 61, offset: 29951},
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 61, offset: 29951},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 690, col: 65, offset: 29955},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 690, col: 73, offset: 29963},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 690, col: 81, offset: 29971},
								expr: &seqExpr{
									pos: position{line: 690, col: 82, offset: 29972},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 690, col: 82, offset: 29972},
											expr: &ruleRefExpr{
												pos:  position{line: 690, col: 83, offset: 29973},
												name: "LiteralBlockDelimiter",
											},
										},
										&anyMatcher{
											line: 690, col: 105, offset: 29995,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 690, col: 110, offset: 30000},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 690, col: 111, offset: 30001},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 690, col: 111, offset: 30001},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 690, col: 133, offset: 30023},
											expr: &ruleRefExpr{
												pos:  position{line: 690, col: 133, offset: 30023},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 690, col: 137, offset: 30027},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 690, col: 144, offset: 30034},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 694, col: 1, offset: 30119},
			expr: &litMatcher{
				pos:        position{line: 694, col: 26, offset: 30144},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 697, col: 1, offset: 30206},
			expr: &actionExpr{
				pos: position{line: 697, col: 34, offset: 30239},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 697, col: 34, offset: 30239},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 697, col: 34, offset: 30239},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 697, col: 46, offset: 30251},
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 46, offset: 30251},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 50, offset: 30255},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 697, col: 58, offset: 30263},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 67, offset: 30272},
								name: "LiteralBlockContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 88, offset: 30293},
							name: "EndOfLiteralBlock",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 704, col: 1, offset: 30496},
			expr: &actionExpr{
				pos: position{line: 704, col: 14, offset: 30509},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 704, col: 14, offset: 30509},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 704, col: 14, offset: 30509},
							expr: &ruleRefExpr{
								pos:  position{line: 704, col: 15, offset: 30510},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 704, col: 19, offset: 30514},
							expr: &ruleRefExpr{
								pos:  position{line: 704, col: 19, offset: 30514},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 704, col: 23, offset: 30518},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 711, col: 1, offset: 30665},
			expr: &actionExpr{
				pos: position{line: 711, col: 9, offset: 30673},
				run: (*parser).callonWord1,
				expr: &oneOrMoreExpr{
					pos: position{line: 711, col: 9, offset: 30673},
					expr: &seqExpr{
						pos: position{line: 711, col: 10, offset: 30674},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 711, col: 10, offset: 30674},
								expr: &ruleRefExpr{
									pos:  position{line: 711, col: 11, offset: 30675},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 711, col: 19, offset: 30683},
								expr: &ruleRefExpr{
									pos:  position{line: 711, col: 20, offset: 30684},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 711, col: 23, offset: 30687,
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 715, col: 1, offset: 30727},
			expr: &actionExpr{
				pos: position{line: 715, col: 8, offset: 30734},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 715, col: 8, offset: 30734},
					expr: &seqExpr{
						pos: position{line: 715, col: 9, offset: 30735},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 715, col: 9, offset: 30735},
								expr: &ruleRefExpr{
									pos:  position{line: 715, col: 10, offset: 30736},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 715, col: 18, offset: 30744},
								expr: &ruleRefExpr{
									pos:  position{line: 715, col: 19, offset: 30745},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 715, col: 22, offset: 30748},
								expr: &litMatcher{
									pos:        position{line: 715, col: 23, offset: 30749},
									val:        "[",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 715, col: 27, offset: 30753},
								expr: &litMatcher{
									pos:        position{line: 715, col: 28, offset: 30754},
									val:        "]",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 715, col: 32, offset: 30758,
							},
						},
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 719, col: 1, offset: 30798},
			expr: &actionExpr{
				pos: position{line: 719, col: 7, offset: 30804},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 719, col: 7, offset: 30804},
					expr: &seqExpr{
						pos: position{line: 719, col: 8, offset: 30805},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 719, col: 8, offset: 30805},
								expr: &ruleRefExpr{
									pos:  position{line: 719, col: 9, offset: 30806},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 719, col: 17, offset: 30814},
								expr: &ruleRefExpr{
									pos:  position{line: 719, col: 18, offset: 30815},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 719, col: 21, offset: 30818},
								expr: &litMatcher{
									pos:        position{line: 719, col: 22, offset: 30819},
									val:        "[",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 719, col: 26, offset: 30823},
								expr: &litMatcher{
									pos:        position{line: 719, col: 27, offset: 30824},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 719, col: 31, offset: 30828},
								expr: &litMatcher{
									pos:        position{line: 719, col: 32, offset: 30829},
									val:        "<<",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 719, col: 37, offset: 30834},
								expr: &litMatcher{
									pos:        position{line: 719, col: 38, offset: 30835},
									val:        ">>",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 719, col: 42, offset: 30839,
							},
						},
					},
				},
			},
		},
		{
			name: "URL_TEXT",
			pos:  position{line: 723, col: 1, offset: 30879},
			expr: &actionExpr{
				pos: position{line: 723, col: 13, offset: 30891},
				run: (*parser).callonURL_TEXT1,
				expr: &oneOrMoreExpr{
					pos: position{line: 723, col: 13, offset: 30891},
					expr: &seqExpr{
						pos: position{line: 723, col: 14, offset: 30892},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 723, col: 14, offset: 30892},
								expr: &ruleRefExpr{
									pos:  position{line: 723, col: 15, offset: 30893},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 723, col: 23, offset: 30901},
								expr: &litMatcher{
									pos:        position{line: 723, col: 24, offset: 30902},
									val:        "[",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 723, col: 28, offset: 30906},
								expr: &litMatcher{
									pos:        position{line: 723, col: 29, offset: 30907},
									val:        "]",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 723, col: 33, offset: 30911,
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 727, col: 1, offset: 30951},
			expr: &choiceExpr{
				pos: position{line: 727, col: 15, offset: 30965},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 727, col: 15, offset: 30965},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 727, col: 27, offset: 30977},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 727, col: 40, offset: 30990},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 727, col: 51, offset: 31001},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 727, col: 62, offset: 31012},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 729, col: 1, offset: 31023},
			expr: &charClassMatcher{
				pos:        position{line: 729, col: 10, offset: 31032},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "WS",
			pos:  position{line: 731, col: 1, offset: 31039},
			expr: &choiceExpr{
				pos: position{line: 731, col: 7, offset: 31045},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 731, col: 7, offset: 31045},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 731, col: 13, offset: 31051},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 731, col: 13, offset: 31051},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 735, col: 1, offset: 31096},
			expr: &choiceExpr{
				pos: position{line: 735, col: 12, offset: 31107},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 735, col: 12, offset: 31107},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 735, col: 21, offset: 31116},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 735, col: 28, offset: 31123},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 737, col: 1, offset: 31129},
			expr: &notExpr{
				pos: position{line: 737, col: 8, offset: 31136},
				expr: &anyMatcher{
					line: 737, col: 9, offset: 31137,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 739, col: 1, offset: 31140},
			expr: &choiceExpr{
				pos: position{line: 739, col: 8, offset: 31147},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 739, col: 8, offset: 31147},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 739, col: 18, offset: 31157},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onDocument1(frontMatter, documentHeader, blocks interface{}) (interface{}, error) {
	return types.NewDocument(frontMatter, documentHeader, blocks.([]interface{}))
}

func (p *parser) callonDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["frontMatter"], stack["documentHeader"], stack["blocks"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	// element attribute alone should be take recognized as such
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(header, authors, revision, otherAttributes interface{}) (interface{}, error) {

	return types.NewDocumentHeader(header, authors, revision, otherAttributes.([]interface{}))
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["header"], stack["authors"], stack["revision"], stack["otherAttributes"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(namePart1, namePart2, namePart3, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(namePart1, namePart2, namePart3, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["namePart1"], stack["namePart2"], stack["namePart3"], stack["email"])
}

func (c *current) onDocumentRevision1(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentAttributeDeclarationWithNameOnly1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.([]interface{}), nil)
}

func (p *parser) callonDocumentAttributeDeclarationWithNameOnly1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclarationWithNameOnly1(stack["name"])
}

func (c *current) onDocumentAttributeDeclarationWithNameAndValue1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.([]interface{}), value.([]interface{}))
}

func (p *parser) callonDocumentAttributeDeclarationWithNameAndValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclarationWithNameAndValue1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeResetWithSectionTitleBangSymbol1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.([]interface{}))
}

func (p *parser) callonDocumentAttributeResetWithSectionTitleBangSymbol1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeResetWithSectionTitleBangSymbol1(stack["name"])
}

func (c *current) onDocumentAttributeResetWithTrailingBangSymbol1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.([]interface{}))
}

func (p *parser) callonDocumentAttributeResetWithTrailingBangSymbol1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeResetWithTrailingBangSymbol1(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.([]interface{}))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID5(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID5(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.([]interface{}))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onAttributeGroup1(attribute, attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(append([]interface{}{attribute}, attributes.([]interface{})...))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attribute"], stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is set
	return types.NewGenericAttribute(key.([]interface{}), value.([]interface{}))
}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute9(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.([]interface{}), nil)
}

func (p *parser) callonGenericAttribute9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute9(stack["key"])
}

func (c *current) onOtherGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is set
	return types.NewGenericAttribute(key.([]interface{}), value.([]interface{}))
}

func (p *parser) callonOtherGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onOtherGenericAttribute12(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.([]interface{}), nil)
}

func (p *parser) callonOtherGenericAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherGenericAttribute12(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return key, nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return map[string]interface{}{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onSection1(section interface{}) (interface{}, error) {
	return section, nil

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["section"])
}

func (c *current) onSection06(header, elements interface{}) (interface{}, error) {
	return types.NewSection(0, header.(types.SectionTitle), elements.([]interface{}))

}

func (p *parser) callonSection06() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection06(stack["header"], stack["elements"])
}

func (c *current) onSection01(section interface{}) (interface{}, error) {
	return section, nil

}

func (p *parser) callonSection01() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection01(stack["section"])
}

func (c *current) onSection0Title1(attributes, content, id interface{}) (interface{}, error) {

	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection0Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection0Title1(stack["attributes"], stack["content"], stack["id"])
}

func (c *current) onSection0Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection0Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection0Block1(stack["content"])
}

func (c *current) onSection16(header, elements interface{}) (interface{}, error) {
	return types.NewSection(1, header.(types.SectionTitle), elements.([]interface{}))

}

func (p *parser) callonSection16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection16(stack["header"], stack["elements"])
}

func (c *current) onSection11(section interface{}) (interface{}, error) {
	return section, nil
}

func (p *parser) callonSection11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection11(stack["section"])
}

func (c *current) onSection1Title1(attributes, content, id interface{}) (interface{}, error) {

	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection1Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1Title1(stack["attributes"], stack["content"], stack["id"])
}

func (c *current) onSection1Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection1Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1Block1(stack["content"])
}

func (c *current) onSection26(header, elements interface{}) (interface{}, error) {
	return types.NewSection(2, header.(types.SectionTitle), elements.([]interface{}))

}

func (p *parser) callonSection26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection26(stack["header"], stack["elements"])
}

func (c *current) onSection21(section interface{}) (interface{}, error) {
	return section, nil

}

func (p *parser) callonSection21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection21(stack["section"])
}

func (c *current) onSection2Title1(attributes, content, id interface{}) (interface{}, error) {
	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection2Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection2Title1(stack["attributes"], stack["content"], stack["id"])
}

func (c *current) onSection2Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection2Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection2Block1(stack["content"])
}

func (c *current) onSection36(header, elements interface{}) (interface{}, error) {
	return types.NewSection(3, header.(types.SectionTitle), elements.([]interface{}))

}

func (p *parser) callonSection36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection36(stack["header"], stack["elements"])
}

func (c *current) onSection31(section interface{}) (interface{}, error) {
	return section, nil

}

func (p *parser) callonSection31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection31(stack["section"])
}

func (c *current) onSection3Title1(attributes, content, id interface{}) (interface{}, error) {
	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection3Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3Title1(stack["attributes"], stack["content"], stack["id"])
}

func (c *current) onSection3Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection3Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3Block1(stack["content"])
}

func (c *current) onSection46(header, elements interface{}) (interface{}, error) {
	return types.NewSection(4, header.(types.SectionTitle), elements.([]interface{}))

}

func (p *parser) callonSection46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection46(stack["header"], stack["elements"])
}

func (c *current) onSection41(section interface{}) (interface{}, error) {
	return section, nil

}

func (p *parser) callonSection41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection41(stack["section"])
}

func (c *current) onSection4Title1(attributes, content, id interface{}) (interface{}, error) {
	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection4Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4Title1(stack["attributes"], stack["content"], stack["id"])
}

func (c *current) onSection4Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection4Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4Block1(stack["content"])
}

func (c *current) onSection56(header, elements interface{}) (interface{}, error) {
	return types.NewSection(5, header.(types.SectionTitle), elements.([]interface{}))

}

func (p *parser) callonSection56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection56(stack["header"], stack["elements"])
}

func (c *current) onSection51(section interface{}) (interface{}, error) {
	return section, nil

}

func (p *parser) callonSection51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection51(stack["section"])
}

func (c *current) onSection5Title1(attributes, content, id interface{}) (interface{}, error) {
	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection5Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5Title1(stack["attributes"], stack["content"], stack["id"])
}

func (c *current) onSection5Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection5Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5Block1(stack["content"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	// fmt.Printf("matching title elements: %v\n", elements)
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	// fmt.Printf("matching title element: %v\n", element)
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onList1(attributes, elements interface{}) (interface{}, error) {
	return types.NewList(elements.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList1(stack["attributes"], stack["elements"])
}

func (c *current) onListParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonListParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph1(stack["lines"])
}

func (c *current) onListItemContinuation1() (interface{}, error) {
	return types.NewListItemContinuation()
}

func (p *parser) callonListItemContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemContinuation1()
}

func (c *current) onContinuedDocumentBlock1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonContinuedDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedDocumentBlock1(stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix7() (interface{}, error) {
	// numbering style: "....."
	return types.NewOrderedListItemPrefix(types.UpperRoman, 5)

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7()
}

func (c *current) onOrderedListItemPrefix9() (interface{}, error) {
	// numbering style: "...."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)

}

func (p *parser) callonOrderedListItemPrefix9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix9()
}

func (c *current) onOrderedListItemPrefix11() (interface{}, error) {
	// numbering style: "..."
	return types.NewOrderedListItemPrefix(types.LowerRoman, 3)

}

func (p *parser) callonOrderedListItemPrefix11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix11()
}

func (c *current) onOrderedListItemPrefix13() (interface{}, error) {
	// numbering style: ".."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)

}

func (p *parser) callonOrderedListItemPrefix13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13()
}

func (c *current) onOrderedListItemPrefix15() (interface{}, error) {
	// numbering style: "."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)
	// explicit numbering

}

func (p *parser) callonOrderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix15()
}

func (c *current) onOrderedListItemPrefix17() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix17()
}

func (c *current) onOrderedListItemPrefix22() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix22()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix37() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix37()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil

}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(prefix, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), content.([]interface{}))
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["prefix"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix7() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7()
}

func (c *current) onUnorderedListItemPrefix9() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)

}

func (p *parser) callonUnorderedListItemPrefix9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix9()
}

func (c *current) onUnorderedListItemPrefix11() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)

}

func (p *parser) callonUnorderedListItemPrefix11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix11()
}

func (c *current) onUnorderedListItemPrefix13() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)

}

func (p *parser) callonUnorderedListItemPrefix13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13()
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix17() (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix17()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem2(term, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(term.([]interface{}), description.([]interface{}))
}

func (p *parser) callonLabeledListItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem2(stack["term"], stack["description"])
}

func (c *current) onLabeledListItem9(term interface{}) (interface{}, error) {
	// here, WS is optional since there is no description afterwards
	return types.NewLabeledListItem(term.([]interface{}), nil)
}

func (p *parser) callonLabeledListItem9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem9(stack["term"])
}

func (c *current) onLabeledListItemTerm1(term interface{}) (interface{}, error) {
	return term, nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["term"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {
	// TODO: replace with (ListParagraph+ ContinuedDocumentBlock*) and use a single rule for all item contents ?
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes.([]interface{}))

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph23(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph23(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	// fmt.Printf("matching inline elements: %v\n", elements)
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	// fmt.Printf("matching inline element: %v\n", element)
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onBoldText2(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoldText2(stack["content"])
}

func (c *current) onBoldText10(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewQuotedText(types.Bold, result)
}

func (p *parser) callonBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoldText10(stack["content"])
}

func (c *current) onBoldText18(content interface{}) (interface{}, error) {
	// single punctuation
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoldText18(stack["content"])
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "**", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText13(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "*", result)
}

func (p *parser) callonEscapedBoldText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText13(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText24(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["content"])
}

func (c *current) onItalicText2(content interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicText2(stack["content"])
}

func (c *current) onItalicText10(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewQuotedText(types.Italic, result)
}

func (p *parser) callonItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicText10(stack["content"])
}

func (c *current) onItalicText18(content interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicText18(stack["content"])
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "__", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText13(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "_", result)
}

func (p *parser) callonEscapedItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText13(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText24(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["content"])
}

func (c *current) onMonospaceText2(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonospaceText2(stack["content"])
}

func (c *current) onMonospaceText10(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewQuotedText(types.Monospace, result)
}

func (p *parser) callonMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonospaceText10(stack["content"])
}

func (c *current) onMonospaceText18(content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonospaceText18(stack["content"])
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "``", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText13(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "`", result)
}

func (p *parser) callonEscapedMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText13(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText24(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["content"])
}

func (c *current) onWordWithQuotePunctuation1() (interface{}, error) {
	// can have "*", "_" or "`" within, maybe because the user inserted another quote, or made an error (extra or missing space, for example)
	return c.text, nil
}

func (p *parser) callonWordWithQuotePunctuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWordWithQuotePunctuation1()
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, content.([]interface{}))
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, content.([]interface{}))
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onCrossReference1(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string))
}

func (p *parser) callonCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference1(stack["id"])
}

func (c *current) onExternalLink2(url, attributes interface{}) (interface{}, error) {
	return types.NewLink(url.([]interface{}), attributes.(map[string]interface{}))
}

func (p *parser) callonExternalLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink2(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink10(url interface{}) (interface{}, error) {
	return types.NewLink(url.([]interface{}), nil)
}

func (p *parser) callonExternalLink10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink10(stack["url"])
}

func (c *current) onRelativeLink1(url, attributes interface{}) (interface{}, error) {
	return types.NewLink(url.([]interface{}), attributes.(map[string]interface{}))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["attributes"])
}

func (c *current) onLinkAttributes2(text, otherAttrs interface{}) (interface{}, error) {
	return types.NewLinkAttributes(text.([]interface{}), otherAttrs.([]interface{}))
}

func (p *parser) callonLinkAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes2(stack["text"], stack["otherAttrs"])
}

func (c *current) onLinkAttributes11(otherAttrs interface{}) (interface{}, error) {
	return types.NewLinkAttributes(nil, otherAttrs.([]interface{}))
}

func (p *parser) callonLinkAttributes11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes11(stack["otherAttrs"])
}

func (c *current) onLinkTextAttribute1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLinkTextAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute1(stack["value"])
}

func (c *current) onBlockImage1(attributes, image interface{}) (interface{}, error) {
	// here we can ignore the blank line in the returned element
	return types.NewBlockImage(image.(types.ImageMacro), attributes.([]interface{}))
}

func (p *parser) callonBlockImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["attributes"], stack["image"])
}

func (c *current) onBlockImageMacro1(path, attributes interface{}) (interface{}, error) {
	return types.NewImageMacro(path.(string), attributes.(map[string]interface{}))
}

func (p *parser) callonBlockImageMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImageMacro1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(image interface{}) (interface{}, error) {
	// here we can ignore the blank line in the returned element
	return types.NewInlineImage(image.(types.ImageMacro))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["image"])
}

func (c *current) onInlineImageMacro1(path, attributes interface{}) (interface{}, error) {
	return types.NewImageMacro(path.(string), attributes.(map[string]interface{}))
}

func (p *parser) callonInlineImageMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageMacro1(stack["path"], stack["attributes"])
}

func (c *current) onImageAttributes2(alt, width, height, otherAttrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt.([]interface{}), width.([]interface{}), height.([]interface{}), otherAttrs.([]interface{}))
}

func (p *parser) callonImageAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes2(stack["alt"], stack["width"], stack["height"], stack["otherAttrs"])
}

func (c *current) onImageAttributes15(alt, width, otherAttrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt.([]interface{}), width.([]interface{}), nil, otherAttrs.([]interface{}))
}

func (p *parser) callonImageAttributes15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes15(stack["alt"], stack["width"], stack["otherAttrs"])
}

func (c *current) onImageAttributes26(alt, otherAttrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt.([]interface{}), nil, nil, otherAttrs.([]interface{}))
}

func (p *parser) callonImageAttributes26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes26(stack["alt"], stack["otherAttrs"])
}

func (c *current) onImageAttributes35(otherAttrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(nil, nil, nil, otherAttrs.([]interface{}))
}

func (p *parser) callonImageAttributes35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes35(stack["otherAttrs"])
}

func (c *current) onImageAltAttribute1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonImageAltAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttribute1(stack["value"])
}

func (c *current) onImageWidthAttribute1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonImageWidthAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttribute1(stack["value"])
}

func (c *current) onImageHeightAttribute1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonImageHeightAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttribute1(stack["value"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.FencedBlock, content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.ListingBlock, content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.ExampleBlock, content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockParagraph1(stack["lines"])
}

func (c *current) onParagraphWithSpaces1(spaces, content interface{}) (interface{}, error) {
	return types.NewLiteralBlock(spaces.([]interface{}), content.([]interface{}))
}

func (p *parser) callonParagraphWithSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithSpaces1(stack["spaces"], stack["content"])
}

func (c *current) onLiteralBlockContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonLiteralBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent1(stack["content"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(content interface{}) (interface{}, error) {
	return types.NewLiteralBlock([]interface{}{}, content.([]interface{}))
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["content"])
}

func (c *current) onParagraphWithLiteralAttribute1(content interface{}) (interface{}, error) {
	return types.NewLiteralBlock([]interface{}{}, content.([]interface{}))
}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["content"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onWord1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord1()
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onURL_TEXT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL_TEXT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL_TEXT1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
		emptyState: make(storeDict),
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}

	// emptyState contains an empty storeDict, which is used to optimize cloneState if global "state" store is not used.
	emptyState storeDict
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	if len(p.cur.state) == 0 {
		if len(p.emptyState) > 0 {
			p.emptyState = make(storeDict)
		}
		return p.emptyState
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
