// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "PreflightDocument",
			pos:  position{line: 17, col: 1, offset: 290},
			expr: &actionExpr{
				pos: position{line: 17, col: 22, offset: 311},
				run: (*parser).callonPreflightDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 22, offset: 311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 22, offset: 311},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 35, offset: 324},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 35, offset: 324},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 49, offset: 338},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 57, offset: 346},
								name: "DocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 73, offset: 362},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 446},
			expr: &actionExpr{
				pos: position{line: 21, col: 42, offset: 487},
				run: (*parser).callonPreflightDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 42, offset: 487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 42, offset: 487},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 55, offset: 500},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 55, offset: 500},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 69, offset: 514},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 77, offset: 522},
								name: "DocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 113, offset: 558},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 28, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 28, col: 19, offset: 771},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 28, col: 19, offset: 771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 28, col: 19, offset: 771},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 27, offset: 779},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 27, offset: 779},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 44, offset: 796},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 28, col: 52, offset: 804},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 52, offset: 804},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 37, col: 1, offset: 1053},
			expr: &actionExpr{
				pos: position{line: 37, col: 18, offset: 1070},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 37, col: 18, offset: 1070},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 37, col: 18, offset: 1070},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 19, offset: 1071},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1080},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 38, col: 12, offset: 1087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 38, col: 12, offset: 1087},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 1113},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 11, offset: 1132},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 11, offset: 1157},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 42, col: 11, offset: 1181},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1235},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1257},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1276},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1327},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1351},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1391},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1425},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1456},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1481},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 55, col: 1, offset: 1519},
			expr: &labeledExpr{
				pos:   position{line: 55, col: 39, offset: 1557},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 55, col: 46, offset: 1564},
					expr: &ruleRefExpr{
						pos:  position{line: 55, col: 47, offset: 1565},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 57, col: 1, offset: 1602},
			expr: &actionExpr{
				pos: position{line: 57, col: 38, offset: 1639},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 57, col: 38, offset: 1639},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 57, col: 38, offset: 1639},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 39, offset: 1640},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1649},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 58, col: 12, offset: 1656},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 58, col: 12, offset: 1656},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 59, col: 11, offset: 1681},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 60, col: 11, offset: 1705},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 61, col: 11, offset: 1730},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1752},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1771},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1822},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1846},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1886},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1920},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1951},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1976},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 76, col: 1, offset: 2122},
			expr: &ruleRefExpr{
				pos:  position{line: 76, col: 16, offset: 2137},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 78, col: 1, offset: 2155},
			expr: &actionExpr{
				pos: position{line: 78, col: 20, offset: 2174},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 78, col: 20, offset: 2174},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 78, col: 20, offset: 2174},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 41, offset: 2195},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 49, offset: 2203},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2204},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 75, offset: 2229},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 82, col: 1, offset: 2309},
			expr: &seqExpr{
				pos: position{line: 82, col: 26, offset: 2334},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 82, col: 26, offset: 2334},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 32, offset: 2340},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 84, col: 1, offset: 2346},
			expr: &actionExpr{
				pos: position{line: 84, col: 27, offset: 2372},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 27, offset: 2372},
					expr: &oneOrMoreExpr{
						pos: position{line: 84, col: 28, offset: 2373},
						expr: &seqExpr{
							pos: position{line: 84, col: 29, offset: 2374},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 84, col: 29, offset: 2374},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 30, offset: 2375},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 84, col: 51, offset: 2396,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 91, col: 1, offset: 2562},
			expr: &actionExpr{
				pos: position{line: 91, col: 19, offset: 2580},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 91, col: 19, offset: 2580},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 19, offset: 2580},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 91, col: 23, offset: 2584},
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 23, offset: 2584},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 27, offset: 2588},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 34, offset: 2595},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 49, offset: 2610},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 91, col: 53, offset: 2614},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 53, offset: 2614},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 71, offset: 2632},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 9, offset: 2644},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 92, col: 18, offset: 2653},
								expr: &ruleRefExpr{
									pos:  position{line: 92, col: 18, offset: 2653},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 9, offset: 2680},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 93, col: 19, offset: 2690},
								expr: &ruleRefExpr{
									pos:  position{line: 93, col: 19, offset: 2690},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 98, col: 1, offset: 2799},
			expr: &choiceExpr{
				pos: position{line: 98, col: 20, offset: 2818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 98, col: 20, offset: 2818},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 48, offset: 2846},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 100, col: 1, offset: 2876},
			expr: &actionExpr{
				pos: position{line: 100, col: 30, offset: 2905},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 100, col: 30, offset: 2905},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 100, col: 30, offset: 2905},
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 30, offset: 2905},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 100, col: 34, offset: 2909},
							expr: &litMatcher{
								pos:        position{line: 100, col: 35, offset: 2910},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 39, offset: 2914},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 100, col: 48, offset: 2923},
								expr: &ruleRefExpr{
									pos:  position{line: 100, col: 48, offset: 2923},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 65, offset: 2940},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 104, col: 1, offset: 3010},
			expr: &actionExpr{
				pos: position{line: 104, col: 33, offset: 3042},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 104, col: 33, offset: 3042},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 104, col: 33, offset: 3042},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 33, offset: 3042},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 104, col: 37, offset: 3046},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 104, col: 48, offset: 3057},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 56, offset: 3065},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 72, offset: 3081},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 108, col: 1, offset: 3160},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3178},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3178},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 19, offset: 3178},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 19, offset: 3178},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 23, offset: 3182},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 33, offset: 3192},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 53, offset: 3212},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 59, offset: 3218},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 60, offset: 3219},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 82, offset: 3241},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 82, offset: 3241},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 108, col: 86, offset: 3245},
							expr: &litMatcher{
								pos:        position{line: 108, col: 86, offset: 3245},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 91, offset: 3250},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 91, offset: 3250},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 113, col: 1, offset: 3392},
			expr: &actionExpr{
				pos: position{line: 113, col: 23, offset: 3414},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 113, col: 23, offset: 3414},
					expr: &choiceExpr{
						pos: position{line: 113, col: 24, offset: 3415},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 24, offset: 3415},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 113, col: 37, offset: 3428},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 113, col: 37, offset: 3428},
										expr: &litMatcher{
											pos:        position{line: 113, col: 38, offset: 3429},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 42, offset: 3433},
										expr: &litMatcher{
											pos:        position{line: 113, col: 43, offset: 3434},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 47, offset: 3438},
										expr: &ruleRefExpr{
											pos:  position{line: 113, col: 48, offset: 3439},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 113, col: 56, offset: 3447,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 117, col: 1, offset: 3488},
			expr: &actionExpr{
				pos: position{line: 117, col: 24, offset: 3511},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 117, col: 24, offset: 3511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 117, col: 24, offset: 3511},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 117, col: 28, offset: 3515},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 117, col: 35, offset: 3522},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 117, col: 35, offset: 3522},
									expr: &choiceExpr{
										pos: position{line: 117, col: 36, offset: 3523},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 117, col: 36, offset: 3523},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 117, col: 49, offset: 3536},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 117, col: 49, offset: 3536},
														expr: &litMatcher{
															pos:        position{line: 117, col: 50, offset: 3537},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 117, col: 54, offset: 3541},
														expr: &ruleRefExpr{
															pos:  position{line: 117, col: 55, offset: 3542},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 117, col: 60, offset: 3547,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 119, col: 4, offset: 3588},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 125, col: 1, offset: 3749},
			expr: &actionExpr{
				pos: position{line: 125, col: 21, offset: 3769},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 125, col: 21, offset: 3769},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 21, offset: 3769},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 21, offset: 3769},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 125, col: 25, offset: 3773},
							expr: &litMatcher{
								pos:        position{line: 125, col: 26, offset: 3774},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 30, offset: 3778},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 126, col: 9, offset: 3797},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 126, col: 10, offset: 3798},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 126, col: 10, offset: 3798},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 126, col: 10, offset: 3798},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 126, col: 21, offset: 3809},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 45, offset: 3833},
													expr: &litMatcher{
														pos:        position{line: 126, col: 45, offset: 3833},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 50, offset: 3838},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 58, offset: 3846},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 59, offset: 3847},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 82, offset: 3870},
													expr: &litMatcher{
														pos:        position{line: 126, col: 82, offset: 3870},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 87, offset: 3875},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 97, offset: 3885},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 98, offset: 3886},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 128, col: 15, offset: 4003},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 128, col: 15, offset: 4003},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 128, col: 15, offset: 4003},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 128, col: 24, offset: 4012},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 46, offset: 4034},
													expr: &litMatcher{
														pos:        position{line: 128, col: 46, offset: 4034},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 51, offset: 4039},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 61, offset: 4049},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 62, offset: 4050},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 13, offset: 4159},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 135, col: 1, offset: 4289},
			expr: &choiceExpr{
				pos: position{line: 135, col: 27, offset: 4315},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 27, offset: 4315},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 135, col: 27, offset: 4315},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 135, col: 27, offset: 4315},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 135, col: 32, offset: 4320},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 135, col: 39, offset: 4327},
									expr: &choiceExpr{
										pos: position{line: 135, col: 40, offset: 4328},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 135, col: 40, offset: 4328},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 135, col: 52, offset: 4340},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 135, col: 62, offset: 4350},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 135, col: 62, offset: 4350},
														expr: &ruleRefExpr{
															pos:  position{line: 135, col: 63, offset: 4351},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 135, col: 67, offset: 4355},
														expr: &litMatcher{
															pos:        position{line: 135, col: 68, offset: 4356},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 135, col: 72, offset: 4360},
														expr: &litMatcher{
															pos:        position{line: 135, col: 73, offset: 4361},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 135, col: 78, offset: 4366,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4408},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 4408},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 137, col: 5, offset: 4408},
									expr: &litMatcher{
										pos:        position{line: 137, col: 5, offset: 4408},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 11, offset: 4414},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 137, col: 18, offset: 4421},
									expr: &choiceExpr{
										pos: position{line: 137, col: 19, offset: 4422},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 137, col: 19, offset: 4422},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 137, col: 31, offset: 4434},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 137, col: 41, offset: 4444},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 137, col: 41, offset: 4444},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 42, offset: 4445},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 137, col: 46, offset: 4449},
														expr: &litMatcher{
															pos:        position{line: 137, col: 47, offset: 4450},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 137, col: 51, offset: 4454},
														expr: &litMatcher{
															pos:        position{line: 137, col: 52, offset: 4455},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 137, col: 57, offset: 4460,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 137, col: 62, offset: 4465},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 62, offset: 4465},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 137, col: 66, offset: 4469},
									expr: &litMatcher{
										pos:        position{line: 137, col: 67, offset: 4470},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 141, col: 1, offset: 4510},
			expr: &actionExpr{
				pos: position{line: 141, col: 25, offset: 4534},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 141, col: 25, offset: 4534},
					expr: &choiceExpr{
						pos: position{line: 141, col: 26, offset: 4535},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 141, col: 26, offset: 4535},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 141, col: 38, offset: 4547},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 141, col: 48, offset: 4557},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 141, col: 48, offset: 4557},
										expr: &ruleRefExpr{
											pos:  position{line: 141, col: 49, offset: 4558},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 141, col: 53, offset: 4562},
										expr: &litMatcher{
											pos:        position{line: 141, col: 54, offset: 4563},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 141, col: 59, offset: 4568,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 145, col: 1, offset: 4609},
			expr: &actionExpr{
				pos: position{line: 145, col: 27, offset: 4635},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 145, col: 27, offset: 4635},
					expr: &choiceExpr{
						pos: position{line: 145, col: 28, offset: 4636},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 145, col: 28, offset: 4636},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 145, col: 40, offset: 4648},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 145, col: 50, offset: 4658},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 145, col: 50, offset: 4658},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 51, offset: 4659},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 145, col: 56, offset: 4664,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 152, col: 1, offset: 4820},
			expr: &actionExpr{
				pos: position{line: 152, col: 33, offset: 4852},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 152, col: 33, offset: 4852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 152, col: 33, offset: 4852},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 37, offset: 4856},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 43, offset: 4862},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 152, col: 66, offset: 4885},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 70, offset: 4889},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 152, col: 76, offset: 4895},
								expr: &actionExpr{
									pos: position{line: 152, col: 77, offset: 4896},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 152, col: 78, offset: 4897},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 152, col: 78, offset: 4897},
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 78, offset: 4897},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 152, col: 82, offset: 4901},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 89, offset: 4908},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 138, offset: 4957},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 159, col: 1, offset: 5206},
			expr: &actionExpr{
				pos: position{line: 159, col: 26, offset: 5231},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 159, col: 26, offset: 5231},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 159, col: 27, offset: 5232},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 159, col: 27, offset: 5232},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 35, offset: 5240},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 43, offset: 5248},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 159, col: 51, offset: 5256},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 159, col: 56, offset: 5261},
							expr: &choiceExpr{
								pos: position{line: 159, col: 57, offset: 5262},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 159, col: 57, offset: 5262},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 65, offset: 5270},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 73, offset: 5278},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 159, col: 81, offset: 5286},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 163, col: 1, offset: 5328},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5354},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5354},
					expr: &seqExpr{
						pos: position{line: 163, col: 28, offset: 5355},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 163, col: 28, offset: 5355},
								expr: &ruleRefExpr{
									pos:  position{line: 163, col: 29, offset: 5356},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 163, col: 37, offset: 5364,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 167, col: 1, offset: 5404},
			expr: &choiceExpr{
				pos: position{line: 167, col: 27, offset: 5430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 167, col: 27, offset: 5430},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 167, col: 27, offset: 5430},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 167, col: 27, offset: 5430},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 167, col: 32, offset: 5435},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 38, offset: 5441},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 167, col: 61, offset: 5464},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 167, col: 65, offset: 5468},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 5537},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 5537},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 169, col: 5, offset: 5537},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 169, col: 9, offset: 5541},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 15, offset: 5547},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 169, col: 38, offset: 5570},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 169, col: 43, offset: 5575},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 173, col: 1, offset: 5643},
			expr: &actionExpr{
				pos: position{line: 173, col: 34, offset: 5676},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 173, col: 34, offset: 5676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 34, offset: 5676},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 173, col: 38, offset: 5680},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 44, offset: 5686},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 67, offset: 5709},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 180, col: 1, offset: 5897},
			expr: &actionExpr{
				pos: position{line: 180, col: 22, offset: 5918},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 180, col: 22, offset: 5918},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 180, col: 28, offset: 5924},
						expr: &ruleRefExpr{
							pos:  position{line: 180, col: 29, offset: 5925},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 184, col: 1, offset: 6015},
			expr: &actionExpr{
				pos: position{line: 184, col: 21, offset: 6035},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 184, col: 21, offset: 6035},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 184, col: 21, offset: 6035},
							expr: &choiceExpr{
								pos: position{line: 184, col: 23, offset: 6037},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 184, col: 23, offset: 6037},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 29, offset: 6043},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 35, offset: 6049},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 6125},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 185, col: 11, offset: 6131},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 185, col: 11, offset: 6131},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 186, col: 9, offset: 6152},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 187, col: 9, offset: 6176},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 188, col: 9, offset: 6199},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 189, col: 9, offset: 6227},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 9, offset: 6255},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 191, col: 9, offset: 6282},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 192, col: 9, offset: 6309},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 193, col: 9, offset: 6346},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 194, col: 9, offset: 6374},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 199, col: 1, offset: 6557},
			expr: &choiceExpr{
				pos: position{line: 199, col: 24, offset: 6580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 24, offset: 6580},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 42, offset: 6598},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 201, col: 1, offset: 6615},
			expr: &choiceExpr{
				pos: position{line: 201, col: 14, offset: 6628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 201, col: 14, offset: 6628},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 201, col: 14, offset: 6628},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 14, offset: 6628},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 201, col: 19, offset: 6633},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 23, offset: 6637},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 27, offset: 6641},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 32, offset: 6646},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 5, offset: 6700},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 203, col: 5, offset: 6700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 203, col: 5, offset: 6700},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 203, col: 10, offset: 6705},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 203, col: 14, offset: 6709},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 203, col: 18, offset: 6713},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 203, col: 23, offset: 6718},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 207, col: 1, offset: 6771},
			expr: &actionExpr{
				pos: position{line: 207, col: 20, offset: 6790},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 207, col: 20, offset: 6790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 20, offset: 6790},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 207, col: 25, offset: 6795},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 29, offset: 6799},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 33, offset: 6803},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 207, col: 38, offset: 6808},
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 38, offset: 6808},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 213, col: 1, offset: 7082},
			expr: &actionExpr{
				pos: position{line: 213, col: 17, offset: 7098},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 213, col: 17, offset: 7098},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 17, offset: 7098},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 213, col: 21, offset: 7102},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 213, col: 28, offset: 7109},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 213, col: 28, offset: 7109},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 213, col: 28, offset: 7109},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 213, col: 38, offset: 7119},
											expr: &choiceExpr{
												pos: position{line: 213, col: 39, offset: 7120},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 213, col: 39, offset: 7120},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 213, col: 51, offset: 7132},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 213, col: 61, offset: 7142},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 213, col: 61, offset: 7142},
																expr: &ruleRefExpr{
																	pos:  position{line: 213, col: 62, offset: 7143},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 213, col: 70, offset: 7151,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 4, offset: 7192},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 221, col: 1, offset: 7344},
			expr: &actionExpr{
				pos: position{line: 221, col: 16, offset: 7359},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 221, col: 16, offset: 7359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 16, offset: 7359},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 221, col: 21, offset: 7364},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 221, col: 27, offset: 7370},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 221, col: 27, offset: 7370},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 221, col: 27, offset: 7370},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 221, col: 37, offset: 7380},
											expr: &choiceExpr{
												pos: position{line: 221, col: 38, offset: 7381},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 221, col: 38, offset: 7381},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 221, col: 50, offset: 7393},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 221, col: 60, offset: 7403},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 221, col: 60, offset: 7403},
																expr: &ruleRefExpr{
																	pos:  position{line: 221, col: 61, offset: 7404},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 221, col: 69, offset: 7412},
																expr: &litMatcher{
																	pos:        position{line: 221, col: 70, offset: 7413},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 221, col: 74, offset: 7417,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 4, offset: 7458},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 8, offset: 7462},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 227, col: 1, offset: 7519},
			expr: &actionExpr{
				pos: position{line: 227, col: 21, offset: 7539},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 227, col: 21, offset: 7539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 21, offset: 7539},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 33, offset: 7551},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 33, offset: 7551},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 37, offset: 7555},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 232, col: 1, offset: 7687},
			expr: &actionExpr{
				pos: position{line: 232, col: 30, offset: 7716},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 232, col: 30, offset: 7716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 30, offset: 7716},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 34, offset: 7720},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 37, offset: 7723},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 232, col: 53, offset: 7739},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 57, offset: 7743},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 237, col: 1, offset: 7899},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7919},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7919},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 237, col: 31, offset: 7929},
							expr: &litMatcher{
								pos:        position{line: 237, col: 31, offset: 7929},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 36, offset: 7934},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 45, offset: 7943},
								expr: &actionExpr{
									pos: position{line: 237, col: 46, offset: 7944},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 237, col: 46, offset: 7944},
										expr: &choiceExpr{
											pos: position{line: 237, col: 47, offset: 7945},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 237, col: 47, offset: 7945},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 237, col: 59, offset: 7957},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 237, col: 69, offset: 7967},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 237, col: 69, offset: 7967},
															expr: &ruleRefExpr{
																pos:  position{line: 237, col: 70, offset: 7968},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 237, col: 78, offset: 7976},
															expr: &litMatcher{
																pos:        position{line: 237, col: 79, offset: 7977},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 237, col: 83, offset: 7981,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 239, col: 9, offset: 8031},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 13, offset: 8035},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 244, col: 1, offset: 8160},
			expr: &actionExpr{
				pos: position{line: 244, col: 19, offset: 8178},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 244, col: 19, offset: 8178},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 19, offset: 8178},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 23, offset: 8182},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 244, col: 34, offset: 8193},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 35, offset: 8194},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 54, offset: 8213},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 58, offset: 8217},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 248, col: 1, offset: 8290},
			expr: &actionExpr{
				pos: position{line: 248, col: 21, offset: 8310},
				run: (*parser).callonGenericAttribute1,
				expr: &seqExpr{
					pos: position{line: 248, col: 21, offset: 8310},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 248, col: 21, offset: 8310},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 26, offset: 8315},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 248, col: 40, offset: 8329},
							expr: &litMatcher{
								pos:        position{line: 248, col: 40, offset: 8329},
								val:        "=",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 45, offset: 8334},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 51, offset: 8340},
								expr: &ruleRefExpr{
									pos:  position{line: 248, col: 52, offset: 8341},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 248, col: 69, offset: 8358},
							expr: &litMatcher{
								pos:        position{line: 248, col: 69, offset: 8358},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 248, col: 74, offset: 8363},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 74, offset: 8363},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 252, col: 1, offset: 8446},
			expr: &actionExpr{
				pos: position{line: 252, col: 17, offset: 8462},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 252, col: 17, offset: 8462},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 252, col: 17, offset: 8462},
							expr: &litMatcher{
								pos:        position{line: 252, col: 18, offset: 8463},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 252, col: 26, offset: 8471},
							expr: &litMatcher{
								pos:        position{line: 252, col: 27, offset: 8472},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 252, col: 35, offset: 8480},
							expr: &litMatcher{
								pos:        position{line: 252, col: 36, offset: 8481},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 252, col: 46, offset: 8491},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 252, col: 50, offset: 8495},
								expr: &choiceExpr{
									pos: position{line: 252, col: 51, offset: 8496},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 252, col: 51, offset: 8496},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 252, col: 63, offset: 8508},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 84, offset: 8529},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 84, offset: 8529},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 256, col: 1, offset: 8569},
			expr: &actionExpr{
				pos: position{line: 256, col: 19, offset: 8587},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 256, col: 19, offset: 8587},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 256, col: 19, offset: 8587},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 256, col: 25, offset: 8593},
								expr: &choiceExpr{
									pos: position{line: 256, col: 26, offset: 8594},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 256, col: 26, offset: 8594},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 256, col: 38, offset: 8606},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 256, col: 47, offset: 8615},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 256, col: 68, offset: 8636},
							expr: &litMatcher{
								pos:        position{line: 256, col: 69, offset: 8637},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 260, col: 1, offset: 8792},
			expr: &seqExpr{
				pos: position{line: 260, col: 24, offset: 8815},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 260, col: 24, offset: 8815},
						expr: &ruleRefExpr{
							pos:  position{line: 260, col: 25, offset: 8816},
							name: "WS",
						},
					},
					&notExpr{
						pos: position{line: 260, col: 28, offset: 8819},
						expr: &litMatcher{
							pos:        position{line: 260, col: 29, offset: 8820},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 260, col: 33, offset: 8824},
						expr: &litMatcher{
							pos:        position{line: 260, col: 34, offset: 8825},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 260, col: 38, offset: 8829},
						expr: &litMatcher{
							pos:        position{line: 260, col: 39, offset: 8830},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 260, col: 43, offset: 8834,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 262, col: 1, offset: 8838},
			expr: &actionExpr{
				pos: position{line: 262, col: 21, offset: 8858},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 262, col: 21, offset: 8858},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 21, offset: 8858},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 262, col: 36, offset: 8873},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 266, col: 1, offset: 8947},
			expr: &actionExpr{
				pos: position{line: 266, col: 20, offset: 8966},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 266, col: 20, offset: 8966},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 20, offset: 8966},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 29, offset: 8975},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 29, offset: 8975},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 266, col: 33, offset: 8979},
							expr: &litMatcher{
								pos:        position{line: 266, col: 33, offset: 8979},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 38, offset: 8984},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 45, offset: 8991},
								expr: &ruleRefExpr{
									pos:  position{line: 266, col: 46, offset: 8992},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 266, col: 63, offset: 9009},
							expr: &litMatcher{
								pos:        position{line: 266, col: 63, offset: 9009},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 68, offset: 9014},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 74, offset: 9020},
								expr: &ruleRefExpr{
									pos:  position{line: 266, col: 75, offset: 9021},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 92, offset: 9038},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 96, offset: 9042},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 270, col: 1, offset: 9112},
			expr: &actionExpr{
				pos: position{line: 270, col: 20, offset: 9131},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 270, col: 20, offset: 9131},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 20, offset: 9131},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 29, offset: 9140},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 29, offset: 9140},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 270, col: 33, offset: 9144},
							expr: &litMatcher{
								pos:        position{line: 270, col: 33, offset: 9144},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 38, offset: 9149},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 270, col: 45, offset: 9156},
								expr: &ruleRefExpr{
									pos:  position{line: 270, col: 46, offset: 9157},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 270, col: 63, offset: 9174},
							expr: &litMatcher{
								pos:        position{line: 270, col: 63, offset: 9174},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 68, offset: 9179},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 270, col: 74, offset: 9185},
								expr: &ruleRefExpr{
									pos:  position{line: 270, col: 75, offset: 9186},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 92, offset: 9203},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 96, offset: 9207},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 274, col: 1, offset: 9295},
			expr: &actionExpr{
				pos: position{line: 274, col: 19, offset: 9313},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 274, col: 19, offset: 9313},
					expr: &choiceExpr{
						pos: position{line: 274, col: 20, offset: 9314},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 274, col: 20, offset: 9314},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 274, col: 32, offset: 9326},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 274, col: 42, offset: 9336},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 274, col: 42, offset: 9336},
										expr: &litMatcher{
											pos:        position{line: 274, col: 43, offset: 9337},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 274, col: 47, offset: 9341},
										expr: &litMatcher{
											pos:        position{line: 274, col: 48, offset: 9342},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 274, col: 52, offset: 9346},
										expr: &ruleRefExpr{
											pos:  position{line: 274, col: 53, offset: 9347},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 274, col: 57, offset: 9351,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 278, col: 1, offset: 9392},
			expr: &actionExpr{
				pos: position{line: 278, col: 21, offset: 9412},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 278, col: 21, offset: 9412},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 278, col: 21, offset: 9412},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 278, col: 25, offset: 9416},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 278, col: 31, offset: 9422},
								expr: &ruleRefExpr{
									pos:  position{line: 278, col: 32, offset: 9423},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 51, offset: 9442},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 285, col: 1, offset: 9616},
			expr: &actionExpr{
				pos: position{line: 285, col: 12, offset: 9627},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 285, col: 12, offset: 9627},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 285, col: 12, offset: 9627},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 23, offset: 9638},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 24, offset: 9639},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 5, offset: 9663},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 286, col: 12, offset: 9670},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 286, col: 12, offset: 9670},
									expr: &litMatcher{
										pos:        position{line: 286, col: 13, offset: 9671},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 290, col: 5, offset: 9762},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 294, col: 5, offset: 9914},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 5, offset: 9914},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 294, col: 9, offset: 9918},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 16, offset: 9925},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 294, col: 31, offset: 9940},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 294, col: 35, offset: 9944},
								expr: &ruleRefExpr{
									pos:  position{line: 294, col: 35, offset: 9944},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 294, col: 53, offset: 9962},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 299, col: 1, offset: 10076},
			expr: &actionExpr{
				pos: position{line: 299, col: 18, offset: 10093},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 299, col: 18, offset: 10093},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 299, col: 27, offset: 10102},
						expr: &seqExpr{
							pos: position{line: 299, col: 28, offset: 10103},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 299, col: 28, offset: 10103},
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 29, offset: 10104},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 299, col: 37, offset: 10112},
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 38, offset: 10113},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 299, col: 54, offset: 10129},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 303, col: 1, offset: 10250},
			expr: &actionExpr{
				pos: position{line: 303, col: 17, offset: 10266},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 303, col: 17, offset: 10266},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 303, col: 26, offset: 10275},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 303, col: 26, offset: 10275},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 304, col: 11, offset: 10296},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 305, col: 11, offset: 10314},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 306, col: 11, offset: 10339},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 307, col: 11, offset: 10361},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 308, col: 11, offset: 10384},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 309, col: 11, offset: 10399},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 11, offset: 10424},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 311, col: 11, offset: 10445},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 312, col: 11, offset: 10485},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 313, col: 11, offset: 10505},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 320, col: 1, offset: 10658},
			expr: &seqExpr{
				pos: position{line: 320, col: 25, offset: 10682},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 320, col: 25, offset: 10682},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 320, col: 35, offset: 10692},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 325, col: 1, offset: 10803},
			expr: &actionExpr{
				pos: position{line: 325, col: 19, offset: 10821},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 325, col: 19, offset: 10821},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 19, offset: 10821},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 25, offset: 10827},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 40, offset: 10842},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 325, col: 45, offset: 10847},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 52, offset: 10854},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 68, offset: 10870},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 75, offset: 10877},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 329, col: 1, offset: 11018},
			expr: &actionExpr{
				pos: position{line: 329, col: 20, offset: 11037},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 329, col: 20, offset: 11037},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 329, col: 20, offset: 11037},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 26, offset: 11043},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 329, col: 41, offset: 11058},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 329, col: 45, offset: 11062},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 52, offset: 11069},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 329, col: 68, offset: 11085},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 75, offset: 11092},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 333, col: 1, offset: 11234},
			expr: &actionExpr{
				pos: position{line: 333, col: 18, offset: 11251},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 333, col: 18, offset: 11251},
					expr: &choiceExpr{
						pos: position{line: 333, col: 19, offset: 11252},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 333, col: 19, offset: 11252},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 333, col: 33, offset: 11266},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 333, col: 39, offset: 11272},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 337, col: 1, offset: 11314},
			expr: &actionExpr{
				pos: position{line: 337, col: 19, offset: 11332},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 337, col: 19, offset: 11332},
					expr: &choiceExpr{
						pos: position{line: 337, col: 20, offset: 11333},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 337, col: 20, offset: 11333},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 337, col: 33, offset: 11346},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 337, col: 33, offset: 11346},
										expr: &litMatcher{
											pos:        position{line: 337, col: 34, offset: 11347},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 337, col: 38, offset: 11351},
										expr: &litMatcher{
											pos:        position{line: 337, col: 39, offset: 11352},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 337, col: 43, offset: 11356},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 44, offset: 11357},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 337, col: 48, offset: 11361,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 341, col: 1, offset: 11402},
			expr: &actionExpr{
				pos: position{line: 341, col: 24, offset: 11425},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 341, col: 24, offset: 11425},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 24, offset: 11425},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 341, col: 28, offset: 11429},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 341, col: 34, offset: 11435},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 35, offset: 11436},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 341, col: 54, offset: 11455},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 348, col: 1, offset: 11635},
			expr: &actionExpr{
				pos: position{line: 348, col: 18, offset: 11652},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 348, col: 18, offset: 11652},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 348, col: 18, offset: 11652},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 348, col: 24, offset: 11658},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 348, col: 24, offset: 11658},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 348, col: 24, offset: 11658},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 348, col: 36, offset: 11670},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 348, col: 42, offset: 11676},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 348, col: 56, offset: 11690},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 348, col: 74, offset: 11708},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 8, offset: 11862},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 354, col: 1, offset: 11916},
			expr: &actionExpr{
				pos: position{line: 354, col: 26, offset: 11941},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 354, col: 26, offset: 11941},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 26, offset: 11941},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 30, offset: 11945},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 36, offset: 11951},
								expr: &choiceExpr{
									pos: position{line: 354, col: 37, offset: 11952},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 354, col: 37, offset: 11952},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 354, col: 59, offset: 11974},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 78, offset: 11993},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 358, col: 1, offset: 12063},
			expr: &actionExpr{
				pos: position{line: 358, col: 24, offset: 12086},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 358, col: 24, offset: 12086},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 24, offset: 12086},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 358, col: 33, offset: 12095},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 40, offset: 12102},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 358, col: 66, offset: 12128},
							expr: &litMatcher{
								pos:        position{line: 358, col: 66, offset: 12128},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 363, col: 1, offset: 12224},
			expr: &actionExpr{
				pos: position{line: 363, col: 29, offset: 12252},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 363, col: 29, offset: 12252},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 363, col: 29, offset: 12252},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 363, col: 36, offset: 12259},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 363, col: 36, offset: 12259},
										name: "MultipleRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 364, col: 11, offset: 12364},
										name: "MultipleQuotedRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 365, col: 11, offset: 12396},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 366, col: 11, offset: 12422},
										name: "MultilineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 367, col: 11, offset: 12454},
										name: "SinglelineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 368, col: 11, offset: 12486},
										name: "SinglelineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 369, col: 11, offset: 12513},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 369, col: 31, offset: 12533},
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 31, offset: 12533},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 369, col: 36, offset: 12538},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 369, col: 36, offset: 12538},
									expr: &litMatcher{
										pos:        position{line: 369, col: 37, offset: 12539},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 369, col: 43, offset: 12545},
									expr: &litMatcher{
										pos:        position{line: 369, col: 44, offset: 12546},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleRanges",
			pos:  position{line: 373, col: 1, offset: 12578},
			expr: &actionExpr{
				pos: position{line: 373, col: 19, offset: 12596},
				run: (*parser).callonMultipleRanges1,
				expr: &seqExpr{
					pos: position{line: 373, col: 19, offset: 12596},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 373, col: 19, offset: 12596},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 373, col: 26, offset: 12603},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 373, col: 26, offset: 12603},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 373, col: 43, offset: 12620},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 374, col: 5, offset: 12642},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 374, col: 12, offset: 12649},
								expr: &actionExpr{
									pos: position{line: 374, col: 13, offset: 12650},
									run: (*parser).callonMultipleRanges9,
									expr: &seqExpr{
										pos: position{line: 374, col: 13, offset: 12650},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 374, col: 13, offset: 12650},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 374, col: 17, offset: 12654},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 374, col: 24, offset: 12661},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 374, col: 24, offset: 12661},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 374, col: 41, offset: 12678},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedRanges",
			pos:  position{line: 380, col: 1, offset: 12816},
			expr: &actionExpr{
				pos: position{line: 380, col: 25, offset: 12840},
				run: (*parser).callonMultipleQuotedRanges1,
				expr: &seqExpr{
					pos: position{line: 380, col: 25, offset: 12840},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 380, col: 25, offset: 12840},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 380, col: 30, offset: 12845},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 380, col: 37, offset: 12852},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 380, col: 37, offset: 12852},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 54, offset: 12869},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 5, offset: 12891},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 381, col: 12, offset: 12898},
								expr: &actionExpr{
									pos: position{line: 381, col: 13, offset: 12899},
									run: (*parser).callonMultipleQuotedRanges10,
									expr: &seqExpr{
										pos: position{line: 381, col: 13, offset: 12899},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 381, col: 13, offset: 12899},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 381, col: 17, offset: 12903},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 381, col: 24, offset: 12910},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 381, col: 24, offset: 12910},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 381, col: 41, offset: 12927},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 383, col: 9, offset: 12980},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultilineRange",
			pos:  position{line: 387, col: 1, offset: 13070},
			expr: &actionExpr{
				pos: position{line: 387, col: 19, offset: 13088},
				run: (*parser).callonMultilineRange1,
				expr: &seqExpr{
					pos: position{line: 387, col: 19, offset: 13088},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 387, col: 19, offset: 13088},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 26, offset: 13095},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 387, col: 34, offset: 13103},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 387, col: 39, offset: 13108},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 44, offset: 13113},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultilineQuotedRange",
			pos:  position{line: 391, col: 1, offset: 13206},
			expr: &actionExpr{
				pos: position{line: 391, col: 25, offset: 13230},
				run: (*parser).callonMultilineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 391, col: 25, offset: 13230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 25, offset: 13230},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 391, col: 30, offset: 13235},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 37, offset: 13242},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 391, col: 45, offset: 13250},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 391, col: 50, offset: 13255},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 55, offset: 13260},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 391, col: 63, offset: 13268},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SinglelineRange",
			pos:  position{line: 395, col: 1, offset: 13358},
			expr: &actionExpr{
				pos: position{line: 395, col: 20, offset: 13377},
				run: (*parser).callonSinglelineRange1,
				expr: &labeledExpr{
					pos:   position{line: 395, col: 20, offset: 13377},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 395, col: 32, offset: 13389},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SinglelineQuotedRange",
			pos:  position{line: 399, col: 1, offset: 13472},
			expr: &actionExpr{
				pos: position{line: 399, col: 26, offset: 13497},
				run: (*parser).callonSinglelineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 399, col: 26, offset: 13497},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 399, col: 26, offset: 13497},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 31, offset: 13502},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 43, offset: 13514},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 51, offset: 13522},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 403, col: 1, offset: 13602},
			expr: &actionExpr{
				pos: position{line: 403, col: 23, offset: 13624},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 403, col: 23, offset: 13624},
					expr: &seqExpr{
						pos: position{line: 403, col: 24, offset: 13625},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 403, col: 24, offset: 13625},
								expr: &litMatcher{
									pos:        position{line: 403, col: 25, offset: 13626},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 403, col: 29, offset: 13630},
								expr: &litMatcher{
									pos:        position{line: 403, col: 30, offset: 13631},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 403, col: 34, offset: 13635},
								expr: &ruleRefExpr{
									pos:  position{line: 403, col: 35, offset: 13636},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 403, col: 38, offset: 13639,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 410, col: 1, offset: 13780},
			expr: &oneOrMoreExpr{
				pos: position{line: 410, col: 14, offset: 13793},
				expr: &ruleRefExpr{
					pos:  position{line: 410, col: 14, offset: 13793},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 412, col: 1, offset: 13804},
			expr: &choiceExpr{
				pos: position{line: 412, col: 13, offset: 13816},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 412, col: 13, offset: 13816},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 412, col: 31, offset: 13834},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 412, col: 51, offset: 13854},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 412, col: 69, offset: 13872},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 414, col: 1, offset: 13898},
			expr: &choiceExpr{
				pos: position{line: 414, col: 18, offset: 13915},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 414, col: 18, offset: 13915},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 414, col: 18, offset: 13915},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 27, offset: 13924},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 9, offset: 13981},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 416, col: 9, offset: 13981},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 416, col: 15, offset: 13987},
								expr: &ruleRefExpr{
									pos:  position{line: 416, col: 16, offset: 13988},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 420, col: 1, offset: 14080},
			expr: &actionExpr{
				pos: position{line: 420, col: 22, offset: 14101},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 420, col: 22, offset: 14101},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 420, col: 22, offset: 14101},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 23, offset: 14102},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 421, col: 5, offset: 14110},
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 6, offset: 14111},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 422, col: 5, offset: 14126},
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 6, offset: 14127},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 423, col: 5, offset: 14149},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 6, offset: 14150},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 424, col: 5, offset: 14176},
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 6, offset: 14177},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 425, col: 5, offset: 14205},
							expr: &seqExpr{
								pos: position{line: 425, col: 7, offset: 14207},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 425, col: 7, offset: 14207},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 425, col: 27, offset: 14227},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 426, col: 5, offset: 14258},
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 6, offset: 14259},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 427, col: 5, offset: 14284},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 6, offset: 14285},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 428, col: 5, offset: 14306},
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 6, offset: 14307},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 429, col: 5, offset: 14326},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 430, col: 9, offset: 14341},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 430, col: 9, offset: 14341},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 430, col: 9, offset: 14341},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 430, col: 18, offset: 14350},
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 19, offset: 14351},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 430, col: 35, offset: 14367},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 430, col: 45, offset: 14377},
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 46, offset: 14378},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 12, offset: 14530},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 436, col: 1, offset: 14577},
			expr: &seqExpr{
				pos: position{line: 436, col: 25, offset: 14601},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 436, col: 25, offset: 14601},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 29, offset: 14605},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 438, col: 1, offset: 14612},
			expr: &actionExpr{
				pos: position{line: 438, col: 29, offset: 14640},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 438, col: 29, offset: 14640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 438, col: 29, offset: 14640},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 438, col: 41, offset: 14652},
								expr: &ruleRefExpr{
									pos:  position{line: 438, col: 41, offset: 14652},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 438, col: 53, offset: 14664},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 438, col: 74, offset: 14685},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 82, offset: 14693},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 445, col: 1, offset: 14935},
			expr: &actionExpr{
				pos: position{line: 445, col: 20, offset: 14954},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 445, col: 20, offset: 14954},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 445, col: 20, offset: 14954},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 445, col: 31, offset: 14965},
								expr: &ruleRefExpr{
									pos:  position{line: 445, col: 32, offset: 14966},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 52, offset: 14986},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 60, offset: 14994},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 83, offset: 15017},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 92, offset: 15026},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 449, col: 1, offset: 15166},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 15196},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 450, col: 5, offset: 15196},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 450, col: 5, offset: 15196},
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 5, offset: 15196},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 9, offset: 15200},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 452, col: 9, offset: 15263},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 452, col: 9, offset: 15263},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 452, col: 9, offset: 15263},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 452, col: 9, offset: 15263},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 452, col: 16, offset: 15270},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 452, col: 16, offset: 15270},
															expr: &litMatcher{
																pos:        position{line: 452, col: 17, offset: 15271},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 456, col: 9, offset: 15371},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 475, col: 11, offset: 16088},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 475, col: 11, offset: 16088},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 475, col: 11, offset: 16088},
													expr: &charClassMatcher{
														pos:        position{line: 475, col: 12, offset: 16089},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 475, col: 20, offset: 16097},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 477, col: 13, offset: 16208},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 477, col: 13, offset: 16208},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 477, col: 14, offset: 16209},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 477, col: 21, offset: 16216},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 479, col: 13, offset: 16330},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 479, col: 13, offset: 16330},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 479, col: 14, offset: 16331},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 479, col: 21, offset: 16338},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 481, col: 13, offset: 16452},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 481, col: 13, offset: 16452},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 481, col: 13, offset: 16452},
													expr: &charClassMatcher{
														pos:        position{line: 481, col: 14, offset: 16453},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 481, col: 22, offset: 16461},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 483, col: 13, offset: 16575},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 483, col: 13, offset: 16575},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 483, col: 13, offset: 16575},
													expr: &charClassMatcher{
														pos:        position{line: 483, col: 14, offset: 16576},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 483, col: 22, offset: 16584},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 485, col: 12, offset: 16697},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 12, offset: 16697},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 489, col: 1, offset: 16729},
			expr: &actionExpr{
				pos: position{line: 489, col: 27, offset: 16755},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 489, col: 27, offset: 16755},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 489, col: 37, offset: 16765},
						expr: &ruleRefExpr{
							pos:  position{line: 489, col: 37, offset: 16765},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 496, col: 1, offset: 16965},
			expr: &actionExpr{
				pos: position{line: 496, col: 22, offset: 16986},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 496, col: 22, offset: 16986},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 22, offset: 16986},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 33, offset: 16997},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 34, offset: 16998},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 54, offset: 17018},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 62, offset: 17026},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 87, offset: 17051},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 98, offset: 17062},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 99, offset: 17063},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 129, offset: 17093},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 138, offset: 17102},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 500, col: 1, offset: 17260},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 17292},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 17292},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 501, col: 5, offset: 17292},
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 5, offset: 17292},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 501, col: 9, offset: 17296},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 501, col: 17, offset: 17304},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 503, col: 9, offset: 17361},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 503, col: 9, offset: 17361},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 503, col: 9, offset: 17361},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 503, col: 16, offset: 17368},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 503, col: 16, offset: 17368},
															expr: &litMatcher{
																pos:        position{line: 503, col: 17, offset: 17369},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 507, col: 9, offset: 17469},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 524, col: 14, offset: 18176},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 524, col: 21, offset: 18183},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 524, col: 22, offset: 18184},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 526, col: 13, offset: 18270},
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 13, offset: 18270},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 530, col: 1, offset: 18303},
			expr: &actionExpr{
				pos: position{line: 530, col: 32, offset: 18334},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 530, col: 32, offset: 18334},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 530, col: 32, offset: 18334},
							expr: &litMatcher{
								pos:        position{line: 530, col: 33, offset: 18335},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 37, offset: 18339},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 531, col: 7, offset: 18353},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 531, col: 7, offset: 18353},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 531, col: 7, offset: 18353},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 532, col: 7, offset: 18398},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 532, col: 7, offset: 18398},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 533, col: 7, offset: 18441},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 533, col: 7, offset: 18441},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 534, col: 7, offset: 18483},
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 7, offset: 18483},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 538, col: 1, offset: 18522},
			expr: &actionExpr{
				pos: position{line: 538, col: 29, offset: 18550},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 538, col: 29, offset: 18550},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 538, col: 39, offset: 18560},
						expr: &ruleRefExpr{
							pos:  position{line: 538, col: 39, offset: 18560},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 545, col: 1, offset: 18876},
			expr: &actionExpr{
				pos: position{line: 545, col: 20, offset: 18895},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 545, col: 20, offset: 18895},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 545, col: 20, offset: 18895},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 545, col: 31, offset: 18906},
								expr: &ruleRefExpr{
									pos:  position{line: 545, col: 32, offset: 18907},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 52, offset: 18927},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 58, offset: 18933},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 79, offset: 18954},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 90, offset: 18965},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 116, offset: 18991},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 545, col: 128, offset: 19003},
								expr: &ruleRefExpr{
									pos:  position{line: 545, col: 129, offset: 19004},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 549, col: 1, offset: 19143},
			expr: &actionExpr{
				pos: position{line: 549, col: 24, offset: 19166},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 549, col: 24, offset: 19166},
					expr: &choiceExpr{
						pos: position{line: 549, col: 25, offset: 19167},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 549, col: 25, offset: 19167},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 549, col: 37, offset: 19179},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 549, col: 47, offset: 19189},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 549, col: 47, offset: 19189},
										expr: &ruleRefExpr{
											pos:  position{line: 549, col: 48, offset: 19190},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 549, col: 56, offset: 19198},
										expr: &litMatcher{
											pos:        position{line: 549, col: 57, offset: 19199},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 549, col: 62, offset: 19204,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 553, col: 1, offset: 19246},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 19279},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 554, col: 5, offset: 19279},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 5, offset: 19279},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 554, col: 16, offset: 19290},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 554, col: 16, offset: 19290},
									expr: &litMatcher{
										pos:        position{line: 554, col: 17, offset: 19291},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 557, col: 5, offset: 19349},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 561, col: 6, offset: 19525},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 561, col: 6, offset: 19525},
									expr: &choiceExpr{
										pos: position{line: 561, col: 7, offset: 19526},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 561, col: 7, offset: 19526},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 561, col: 12, offset: 19531},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 561, col: 24, offset: 19543},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 565, col: 1, offset: 19583},
			expr: &actionExpr{
				pos: position{line: 565, col: 31, offset: 19613},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 565, col: 31, offset: 19613},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 565, col: 40, offset: 19622},
						expr: &ruleRefExpr{
							pos:  position{line: 565, col: 41, offset: 19623},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 572, col: 1, offset: 19814},
			expr: &choiceExpr{
				pos: position{line: 572, col: 19, offset: 19832},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 572, col: 19, offset: 19832},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 572, col: 19, offset: 19832},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 9, offset: 19878},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 574, col: 9, offset: 19878},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 576, col: 9, offset: 19926},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 576, col: 9, offset: 19926},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 578, col: 9, offset: 19984},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 578, col: 9, offset: 19984},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 580, col: 9, offset: 20038},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 580, col: 9, offset: 20038},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 589, col: 1, offset: 20345},
			expr: &choiceExpr{
				pos: position{line: 591, col: 5, offset: 20392},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 591, col: 5, offset: 20392},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 591, col: 5, offset: 20392},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 591, col: 5, offset: 20392},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 591, col: 16, offset: 20403},
										expr: &ruleRefExpr{
											pos:  position{line: 591, col: 17, offset: 20404},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 591, col: 37, offset: 20424},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 591, col: 40, offset: 20427},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 591, col: 56, offset: 20443},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 591, col: 61, offset: 20448},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 591, col: 67, offset: 20454},
										expr: &ruleRefExpr{
											pos:  position{line: 591, col: 68, offset: 20455},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 595, col: 5, offset: 20647},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 595, col: 5, offset: 20647},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 595, col: 5, offset: 20647},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 595, col: 16, offset: 20658},
										expr: &ruleRefExpr{
											pos:  position{line: 595, col: 17, offset: 20659},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 595, col: 37, offset: 20679},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 595, col: 43, offset: 20685},
										expr: &ruleRefExpr{
											pos:  position{line: 595, col: 44, offset: 20686},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 600, col: 1, offset: 20851},
			expr: &actionExpr{
				pos: position{line: 600, col: 20, offset: 20870},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 600, col: 20, offset: 20870},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 600, col: 20, offset: 20870},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 600, col: 31, offset: 20881},
								expr: &ruleRefExpr{
									pos:  position{line: 600, col: 32, offset: 20882},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 601, col: 5, offset: 20907},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 21198},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 16, offset: 21209},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 5, offset: 21232},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 610, col: 16, offset: 21243},
								expr: &ruleRefExpr{
									pos:  position{line: 610, col: 17, offset: 21244},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 614, col: 1, offset: 21378},
			expr: &actionExpr{
				pos: position{line: 614, col: 19, offset: 21396},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 614, col: 19, offset: 21396},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 614, col: 19, offset: 21396},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 30, offset: 21407},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 614, col: 50, offset: 21427},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 614, col: 61, offset: 21438},
								expr: &ruleRefExpr{
									pos:  position{line: 614, col: 62, offset: 21439},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 618, col: 1, offset: 21545},
			expr: &actionExpr{
				pos: position{line: 618, col: 23, offset: 21567},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 618, col: 23, offset: 21567},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 618, col: 23, offset: 21567},
							expr: &seqExpr{
								pos: position{line: 618, col: 25, offset: 21569},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 618, col: 25, offset: 21569},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 618, col: 45, offset: 21589},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 619, col: 5, offset: 21619},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 619, col: 15, offset: 21629},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 619, col: 15, offset: 21629},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 619, col: 26, offset: 21640},
										expr: &ruleRefExpr{
											pos:  position{line: 619, col: 26, offset: 21640},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 619, col: 42, offset: 21656},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 619, col: 52, offset: 21666},
								expr: &ruleRefExpr{
									pos:  position{line: 619, col: 53, offset: 21667},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 65, offset: 21679},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 623, col: 1, offset: 21769},
			expr: &actionExpr{
				pos: position{line: 623, col: 23, offset: 21791},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 623, col: 23, offset: 21791},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 623, col: 33, offset: 21801},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 627, col: 1, offset: 21847},
			expr: &choiceExpr{
				pos: position{line: 629, col: 5, offset: 21899},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 629, col: 5, offset: 21899},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 629, col: 5, offset: 21899},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 629, col: 5, offset: 21899},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 629, col: 16, offset: 21910},
										expr: &ruleRefExpr{
											pos:  position{line: 629, col: 17, offset: 21911},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 630, col: 5, offset: 21935},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 637, col: 5, offset: 22147},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 637, col: 8, offset: 22150},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 637, col: 24, offset: 22166},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 637, col: 29, offset: 22171},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 637, col: 35, offset: 22177},
										expr: &ruleRefExpr{
											pos:  position{line: 637, col: 36, offset: 22178},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 22370},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 22370},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 641, col: 5, offset: 22370},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 641, col: 16, offset: 22381},
										expr: &ruleRefExpr{
											pos:  position{line: 641, col: 17, offset: 22382},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 642, col: 5, offset: 22406},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 649, col: 5, offset: 22618},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 649, col: 11, offset: 22624},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 12, offset: 22625},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 653, col: 1, offset: 22726},
			expr: &actionExpr{
				pos: position{line: 653, col: 19, offset: 22744},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 653, col: 19, offset: 22744},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 653, col: 19, offset: 22744},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 20, offset: 22745},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 653, col: 24, offset: 22749},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 25, offset: 22750},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 654, col: 5, offset: 22764},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 654, col: 15, offset: 22774},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 654, col: 15, offset: 22774},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 654, col: 15, offset: 22774},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 654, col: 24, offset: 22783},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 656, col: 9, offset: 22875},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 656, col: 9, offset: 22875},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 656, col: 9, offset: 22875},
													expr: &ruleRefExpr{
														pos:  position{line: 656, col: 10, offset: 22876},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 656, col: 25, offset: 22891},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 656, col: 34, offset: 22900},
														expr: &ruleRefExpr{
															pos:  position{line: 656, col: 35, offset: 22901},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 656, col: 51, offset: 22917},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 656, col: 61, offset: 22927},
														expr: &ruleRefExpr{
															pos:  position{line: 656, col: 62, offset: 22928},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 656, col: 74, offset: 22940},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 662, col: 1, offset: 23076},
			expr: &actionExpr{
				pos: position{line: 662, col: 18, offset: 23093},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 662, col: 18, offset: 23093},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 662, col: 18, offset: 23093},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 19, offset: 23094},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 662, col: 23, offset: 23098},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 24, offset: 23099},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 23114},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 663, col: 14, offset: 23123},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 663, col: 14, offset: 23123},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 23144},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 23162},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 23185},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 23201},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 23224},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 23250},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 670, col: 11, offset: 23277},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 23299},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 23325},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 23366},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 23393},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 681, col: 1, offset: 23653},
			expr: &actionExpr{
				pos: position{line: 681, col: 37, offset: 23689},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 681, col: 37, offset: 23689},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 681, col: 37, offset: 23689},
							expr: &ruleRefExpr{
								pos:  position{line: 681, col: 38, offset: 23690},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 681, col: 48, offset: 23700},
							expr: &ruleRefExpr{
								pos:  position{line: 681, col: 49, offset: 23701},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 681, col: 64, offset: 23716},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 681, col: 73, offset: 23725},
								expr: &ruleRefExpr{
									pos:  position{line: 681, col: 74, offset: 23726},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 681, col: 108, offset: 23760},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 681, col: 118, offset: 23770},
								expr: &ruleRefExpr{
									pos:  position{line: 681, col: 119, offset: 23771},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 681, col: 131, offset: 23783},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 685, col: 1, offset: 23874},
			expr: &actionExpr{
				pos: position{line: 685, col: 36, offset: 23909},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 685, col: 36, offset: 23909},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 685, col: 36, offset: 23909},
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 37, offset: 23910},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 685, col: 41, offset: 23914},
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 42, offset: 23915},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 686, col: 5, offset: 23930},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 686, col: 14, offset: 23939},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 686, col: 14, offset: 23939},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 23960},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 23978},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 24001},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 24017},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 691, col: 11, offset: 24040},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 24062},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 693, col: 11, offset: 24088},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 694, col: 11, offset: 24114},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 699, col: 1, offset: 24248},
			expr: &actionExpr{
				pos: position{line: 699, col: 18, offset: 24265},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 699, col: 18, offset: 24265},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 699, col: 18, offset: 24265},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 699, col: 27, offset: 24274},
								expr: &choiceExpr{
									pos: position{line: 699, col: 28, offset: 24275},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 699, col: 28, offset: 24275},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 699, col: 40, offset: 24287},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 699, col: 56, offset: 24303},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 699, col: 76, offset: 24323},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 703, col: 1, offset: 24357},
			expr: &actionExpr{
				pos: position{line: 703, col: 22, offset: 24378},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 703, col: 22, offset: 24378},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 703, col: 22, offset: 24378},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 703, col: 33, offset: 24389},
								expr: &ruleRefExpr{
									pos:  position{line: 703, col: 34, offset: 24390},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 703, col: 54, offset: 24410},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 703, col: 60, offset: 24416},
								expr: &actionExpr{
									pos: position{line: 703, col: 61, offset: 24417},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 703, col: 61, offset: 24417},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 703, col: 61, offset: 24417},
												expr: &ruleRefExpr{
													pos:  position{line: 703, col: 62, offset: 24418},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 703, col: 66, offset: 24422},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 703, col: 72, offset: 24428},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 709, col: 1, offset: 24548},
			expr: &actionExpr{
				pos: position{line: 709, col: 26, offset: 24573},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 709, col: 26, offset: 24573},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 709, col: 26, offset: 24573},
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 27, offset: 24574},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 709, col: 42, offset: 24589},
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 43, offset: 24590},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 709, col: 53, offset: 24600},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 709, col: 62, offset: 24609},
								expr: &ruleRefExpr{
									pos:  position{line: 709, col: 63, offset: 24610},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 709, col: 94, offset: 24641},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 709, col: 104, offset: 24651},
								expr: &ruleRefExpr{
									pos:  position{line: 709, col: 105, offset: 24652},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 709, col: 117, offset: 24664},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 713, col: 1, offset: 24755},
			expr: &actionExpr{
				pos: position{line: 713, col: 33, offset: 24787},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 713, col: 33, offset: 24787},
					expr: &seqExpr{
						pos: position{line: 713, col: 34, offset: 24788},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 713, col: 34, offset: 24788},
								expr: &ruleRefExpr{
									pos:  position{line: 713, col: 35, offset: 24789},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 713, col: 39, offset: 24793},
								expr: &ruleRefExpr{
									pos:  position{line: 713, col: 40, offset: 24794},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 713, col: 50, offset: 24804,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 720, col: 1, offset: 25028},
			expr: &actionExpr{
				pos: position{line: 720, col: 14, offset: 25041},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 720, col: 14, offset: 25041},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 720, col: 14, offset: 25041},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 720, col: 17, offset: 25044},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 720, col: 21, offset: 25048},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 21, offset: 25048},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 720, col: 25, offset: 25052},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 26, offset: 25053},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 727, col: 1, offset: 25337},
			expr: &actionExpr{
				pos: position{line: 727, col: 15, offset: 25351},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 727, col: 15, offset: 25351},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 727, col: 15, offset: 25351},
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 16, offset: 25352},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 727, col: 19, offset: 25355},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 727, col: 25, offset: 25361},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 727, col: 25, offset: 25361},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 15, offset: 25385},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 15, offset: 25411},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 730, col: 15, offset: 25440},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 731, col: 15, offset: 25469},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 732, col: 15, offset: 25500},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 733, col: 15, offset: 25531},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 15, offset: 25564},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 735, col: 15, offset: 25600},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 736, col: 15, offset: 25636},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 737, col: 15, offset: 25673},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 741, col: 1, offset: 25827},
			expr: &choiceExpr{
				pos: position{line: 741, col: 21, offset: 25847},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 741, col: 21, offset: 25847},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 28, offset: 25854},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 34, offset: 25860},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 41, offset: 25867},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 47, offset: 25873},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 54, offset: 25880},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 60, offset: 25886},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 66, offset: 25892},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 743, col: 1, offset: 25897},
			expr: &choiceExpr{
				pos: position{line: 743, col: 33, offset: 25929},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 743, col: 33, offset: 25929},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 743, col: 39, offset: 25935},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 743, col: 39, offset: 25935},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 747, col: 1, offset: 26068},
			expr: &actionExpr{
				pos: position{line: 747, col: 25, offset: 26092},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 747, col: 25, offset: 26092},
					expr: &litMatcher{
						pos:        position{line: 747, col: 25, offset: 26092},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 751, col: 1, offset: 26133},
			expr: &actionExpr{
				pos: position{line: 751, col: 25, offset: 26157},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 751, col: 25, offset: 26157},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 751, col: 25, offset: 26157},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 751, col: 30, offset: 26162},
							expr: &litMatcher{
								pos:        position{line: 751, col: 30, offset: 26162},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 759, col: 1, offset: 26259},
			expr: &choiceExpr{
				pos: position{line: 759, col: 13, offset: 26271},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 759, col: 13, offset: 26271},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 759, col: 35, offset: 26293},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 761, col: 1, offset: 26314},
			expr: &actionExpr{
				pos: position{line: 761, col: 24, offset: 26337},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 761, col: 24, offset: 26337},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 761, col: 24, offset: 26337},
							expr: &litMatcher{
								pos:        position{line: 761, col: 25, offset: 26338},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 761, col: 30, offset: 26343},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 761, col: 35, offset: 26348},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 44, offset: 26357},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 761, col: 72, offset: 26385},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 765, col: 1, offset: 26510},
			expr: &seqExpr{
				pos: position{line: 765, col: 31, offset: 26540},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 765, col: 31, offset: 26540},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 765, col: 58, offset: 26567},
						expr: &actionExpr{
							pos: position{line: 765, col: 59, offset: 26568},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 765, col: 59, offset: 26568},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 765, col: 59, offset: 26568},
										expr: &litMatcher{
											pos:        position{line: 765, col: 61, offset: 26570},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 765, col: 67, offset: 26576},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 765, col: 76, offset: 26585},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 765, col: 76, offset: 26585},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 765, col: 81, offset: 26590},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 769, col: 1, offset: 26682},
			expr: &actionExpr{
				pos: position{line: 769, col: 31, offset: 26712},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 769, col: 31, offset: 26712},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 769, col: 31, offset: 26712},
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 32, offset: 26713},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 40, offset: 26721},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 769, col: 49, offset: 26730},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 769, col: 49, offset: 26730},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 770, col: 11, offset: 26761},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 26783},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 26807},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 26831},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 26857},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 26880},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 26896},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 26919},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 781, col: 1, offset: 27075},
			expr: &actionExpr{
				pos: position{line: 781, col: 27, offset: 27101},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 781, col: 27, offset: 27101},
					exprs: []interface{}{
						&anyMatcher{
							line: 781, col: 28, offset: 27102,
						},
						&zeroOrMoreExpr{
							pos: position{line: 781, col: 31, offset: 27105},
							expr: &seqExpr{
								pos: position{line: 781, col: 32, offset: 27106},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 781, col: 32, offset: 27106},
										expr: &litMatcher{
											pos:        position{line: 781, col: 33, offset: 27107},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 781, col: 38, offset: 27112},
										expr: &ruleRefExpr{
											pos:  position{line: 781, col: 39, offset: 27113},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 781, col: 42, offset: 27116},
										expr: &litMatcher{
											pos:        position{line: 781, col: 43, offset: 27117},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 781, col: 47, offset: 27121},
										expr: &litMatcher{
											pos:        position{line: 781, col: 48, offset: 27122},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 781, col: 52, offset: 27126},
										expr: &ruleRefExpr{
											pos:  position{line: 781, col: 53, offset: 27127},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 781, col: 61, offset: 27135,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 785, col: 1, offset: 27195},
			expr: &choiceExpr{
				pos: position{line: 785, col: 24, offset: 27218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 785, col: 24, offset: 27218},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 785, col: 24, offset: 27218},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 785, col: 24, offset: 27218},
									expr: &litMatcher{
										pos:        position{line: 785, col: 25, offset: 27219},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 785, col: 29, offset: 27223},
									expr: &litMatcher{
										pos:        position{line: 785, col: 30, offset: 27224},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 785, col: 35, offset: 27229},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 785, col: 39, offset: 27233},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 48, offset: 27242},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 785, col: 76, offset: 27270},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 787, col: 5, offset: 27450},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 787, col: 5, offset: 27450},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 787, col: 5, offset: 27450},
									expr: &litMatcher{
										pos:        position{line: 787, col: 6, offset: 27451},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 787, col: 11, offset: 27456},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 787, col: 16, offset: 27461},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 787, col: 25, offset: 27470},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 787, col: 53, offset: 27498},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 791, col: 1, offset: 27756},
			expr: &seqExpr{
				pos: position{line: 791, col: 31, offset: 27786},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 791, col: 31, offset: 27786},
						expr: &ruleRefExpr{
							pos:  position{line: 791, col: 32, offset: 27787},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 791, col: 35, offset: 27790},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 791, col: 62, offset: 27817},
						expr: &actionExpr{
							pos: position{line: 791, col: 63, offset: 27818},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 791, col: 63, offset: 27818},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 791, col: 63, offset: 27818},
										expr: &seqExpr{
											pos: position{line: 791, col: 65, offset: 27820},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 791, col: 65, offset: 27820},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 791, col: 69, offset: 27824},
													expr: &ruleRefExpr{
														pos:  position{line: 791, col: 70, offset: 27825},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 791, col: 80, offset: 27835},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 791, col: 88, offset: 27843},
											expr: &ruleRefExpr{
												pos:  position{line: 791, col: 88, offset: 27843},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 791, col: 93, offset: 27848},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 791, col: 102, offset: 27857},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 795, col: 1, offset: 27948},
			expr: &actionExpr{
				pos: position{line: 795, col: 31, offset: 27978},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 795, col: 31, offset: 27978},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 795, col: 31, offset: 27978},
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 32, offset: 27979},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 40, offset: 27987},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 795, col: 49, offset: 27996},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 795, col: 49, offset: 27996},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 796, col: 11, offset: 28026},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 797, col: 11, offset: 28048},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 798, col: 11, offset: 28072},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 799, col: 11, offset: 28096},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 800, col: 11, offset: 28122},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 801, col: 11, offset: 28145},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 802, col: 11, offset: 28161},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 803, col: 11, offset: 28184},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 807, col: 1, offset: 28340},
			expr: &actionExpr{
				pos: position{line: 807, col: 27, offset: 28366},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 807, col: 27, offset: 28366},
					exprs: []interface{}{
						&anyMatcher{
							line: 807, col: 28, offset: 28367,
						},
						&zeroOrMoreExpr{
							pos: position{line: 807, col: 31, offset: 28370},
							expr: &seqExpr{
								pos: position{line: 807, col: 32, offset: 28371},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 807, col: 32, offset: 28371},
										expr: &litMatcher{
											pos:        position{line: 807, col: 33, offset: 28372},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 807, col: 37, offset: 28376},
										expr: &ruleRefExpr{
											pos:  position{line: 807, col: 38, offset: 28377},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 807, col: 41, offset: 28380},
										expr: &litMatcher{
											pos:        position{line: 807, col: 42, offset: 28381},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 807, col: 46, offset: 28385},
										expr: &litMatcher{
											pos:        position{line: 807, col: 47, offset: 28386},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 807, col: 51, offset: 28390},
										expr: &ruleRefExpr{
											pos:  position{line: 807, col: 52, offset: 28391},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 807, col: 60, offset: 28399,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 811, col: 1, offset: 28459},
			expr: &choiceExpr{
				pos: position{line: 812, col: 5, offset: 28483},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 812, col: 5, offset: 28483},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 812, col: 5, offset: 28483},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 812, col: 5, offset: 28483},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 18, offset: 28496},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 812, col: 40, offset: 28518},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 812, col: 45, offset: 28523},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 54, offset: 28532},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 812, col: 82, offset: 28560},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 814, col: 9, offset: 28716},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 814, col: 9, offset: 28716},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 814, col: 9, offset: 28716},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 814, col: 22, offset: 28729},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 814, col: 44, offset: 28751},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 814, col: 49, offset: 28756},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 814, col: 58, offset: 28765},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 814, col: 86, offset: 28793},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 817, col: 9, offset: 28992},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 817, col: 9, offset: 28992},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 817, col: 9, offset: 28992},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 22, offset: 29005},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 817, col: 44, offset: 29027},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 817, col: 48, offset: 29031},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 57, offset: 29040},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 817, col: 85, offset: 29068},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 825, col: 1, offset: 29275},
			expr: &choiceExpr{
				pos: position{line: 825, col: 15, offset: 29289},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 825, col: 15, offset: 29289},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 825, col: 39, offset: 29313},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 827, col: 1, offset: 29336},
			expr: &actionExpr{
				pos: position{line: 827, col: 26, offset: 29361},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 827, col: 26, offset: 29361},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 827, col: 26, offset: 29361},
							expr: &litMatcher{
								pos:        position{line: 827, col: 27, offset: 29362},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 827, col: 32, offset: 29367},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 827, col: 37, offset: 29372},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 46, offset: 29381},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 827, col: 76, offset: 29411},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 831, col: 1, offset: 29537},
			expr: &seqExpr{
				pos: position{line: 831, col: 33, offset: 29569},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 831, col: 33, offset: 29569},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 831, col: 62, offset: 29598},
						expr: &actionExpr{
							pos: position{line: 831, col: 63, offset: 29599},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 831, col: 63, offset: 29599},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 831, col: 63, offset: 29599},
										expr: &litMatcher{
											pos:        position{line: 831, col: 65, offset: 29601},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 831, col: 71, offset: 29607},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 831, col: 80, offset: 29616},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 831, col: 80, offset: 29616},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 831, col: 85, offset: 29621},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 835, col: 1, offset: 29715},
			expr: &actionExpr{
				pos: position{line: 835, col: 33, offset: 29747},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 835, col: 33, offset: 29747},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 835, col: 33, offset: 29747},
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 34, offset: 29748},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 835, col: 42, offset: 29756},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 835, col: 51, offset: 29765},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 835, col: 51, offset: 29765},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 836, col: 11, offset: 29798},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 837, col: 11, offset: 29818},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 838, col: 11, offset: 29842},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 839, col: 11, offset: 29866},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 840, col: 11, offset: 29892},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 841, col: 11, offset: 29915},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 842, col: 11, offset: 29931},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 843, col: 11, offset: 29954},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 847, col: 1, offset: 30112},
			expr: &actionExpr{
				pos: position{line: 847, col: 29, offset: 30140},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 847, col: 29, offset: 30140},
					exprs: []interface{}{
						&anyMatcher{
							line: 847, col: 30, offset: 30141,
						},
						&zeroOrMoreExpr{
							pos: position{line: 847, col: 33, offset: 30144},
							expr: &seqExpr{
								pos: position{line: 847, col: 34, offset: 30145},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 847, col: 34, offset: 30145},
										expr: &litMatcher{
											pos:        position{line: 847, col: 35, offset: 30146},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 847, col: 40, offset: 30151},
										expr: &litMatcher{
											pos:        position{line: 847, col: 41, offset: 30152},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 847, col: 45, offset: 30156},
										expr: &litMatcher{
											pos:        position{line: 847, col: 46, offset: 30157},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 847, col: 50, offset: 30161},
										expr: &ruleRefExpr{
											pos:  position{line: 847, col: 51, offset: 30162},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 847, col: 59, offset: 30170,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 851, col: 1, offset: 30230},
			expr: &choiceExpr{
				pos: position{line: 851, col: 26, offset: 30255},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 851, col: 26, offset: 30255},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 851, col: 26, offset: 30255},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 851, col: 26, offset: 30255},
									expr: &litMatcher{
										pos:        position{line: 851, col: 27, offset: 30256},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 851, col: 31, offset: 30260},
									expr: &litMatcher{
										pos:        position{line: 851, col: 32, offset: 30261},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 851, col: 37, offset: 30266},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 851, col: 41, offset: 30270},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 851, col: 50, offset: 30279},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 851, col: 80, offset: 30309},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 853, col: 5, offset: 30491},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 853, col: 5, offset: 30491},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 853, col: 5, offset: 30491},
									expr: &litMatcher{
										pos:        position{line: 853, col: 6, offset: 30492},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 853, col: 11, offset: 30497},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 853, col: 16, offset: 30502},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 853, col: 25, offset: 30511},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 853, col: 55, offset: 30541},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 857, col: 1, offset: 30803},
			expr: &seqExpr{
				pos: position{line: 857, col: 33, offset: 30835},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 857, col: 33, offset: 30835},
						expr: &ruleRefExpr{
							pos:  position{line: 857, col: 34, offset: 30836},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 857, col: 37, offset: 30839},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 857, col: 66, offset: 30868},
						expr: &actionExpr{
							pos: position{line: 857, col: 67, offset: 30869},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 857, col: 67, offset: 30869},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 857, col: 67, offset: 30869},
										expr: &seqExpr{
											pos: position{line: 857, col: 69, offset: 30871},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 857, col: 69, offset: 30871},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 857, col: 73, offset: 30875},
													expr: &ruleRefExpr{
														pos:  position{line: 857, col: 74, offset: 30876},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 857, col: 84, offset: 30886},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 857, col: 92, offset: 30894},
											expr: &ruleRefExpr{
												pos:  position{line: 857, col: 92, offset: 30894},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 857, col: 97, offset: 30899},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 857, col: 106, offset: 30908},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 861, col: 1, offset: 31001},
			expr: &actionExpr{
				pos: position{line: 861, col: 33, offset: 31033},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 861, col: 33, offset: 31033},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 861, col: 33, offset: 31033},
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 34, offset: 31034},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 861, col: 42, offset: 31042},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 861, col: 51, offset: 31051},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 861, col: 51, offset: 31051},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 862, col: 11, offset: 31083},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 863, col: 11, offset: 31103},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 864, col: 11, offset: 31127},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 865, col: 11, offset: 31151},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 866, col: 11, offset: 31177},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 867, col: 11, offset: 31200},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 868, col: 11, offset: 31216},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 869, col: 11, offset: 31239},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 873, col: 1, offset: 31397},
			expr: &actionExpr{
				pos: position{line: 873, col: 29, offset: 31425},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 873, col: 29, offset: 31425},
					exprs: []interface{}{
						&anyMatcher{
							line: 873, col: 30, offset: 31426,
						},
						&zeroOrMoreExpr{
							pos: position{line: 873, col: 33, offset: 31429},
							expr: &seqExpr{
								pos: position{line: 873, col: 34, offset: 31430},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 873, col: 34, offset: 31430},
										expr: &litMatcher{
											pos:        position{line: 873, col: 35, offset: 31431},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 873, col: 39, offset: 31435},
										expr: &ruleRefExpr{
											pos:  position{line: 873, col: 40, offset: 31436},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 873, col: 43, offset: 31439},
										expr: &litMatcher{
											pos:        position{line: 873, col: 44, offset: 31440},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 873, col: 48, offset: 31444},
										expr: &litMatcher{
											pos:        position{line: 873, col: 49, offset: 31445},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 873, col: 53, offset: 31449},
										expr: &ruleRefExpr{
											pos:  position{line: 873, col: 54, offset: 31450},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 873, col: 62, offset: 31458,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 877, col: 1, offset: 31518},
			expr: &choiceExpr{
				pos: position{line: 878, col: 5, offset: 31544},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 878, col: 5, offset: 31544},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 878, col: 5, offset: 31544},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 878, col: 5, offset: 31544},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 18, offset: 31557},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 878, col: 40, offset: 31579},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 878, col: 45, offset: 31584},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 54, offset: 31593},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 878, col: 84, offset: 31623},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 9, offset: 31779},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 880, col: 9, offset: 31779},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 880, col: 9, offset: 31779},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 880, col: 22, offset: 31792},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 880, col: 44, offset: 31814},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 880, col: 49, offset: 31819},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 880, col: 58, offset: 31828},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 880, col: 88, offset: 31858},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 883, col: 9, offset: 32057},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 883, col: 9, offset: 32057},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 883, col: 9, offset: 32057},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 883, col: 22, offset: 32070},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 883, col: 44, offset: 32092},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 883, col: 48, offset: 32096},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 883, col: 57, offset: 32105},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 883, col: 87, offset: 32135},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 890, col: 1, offset: 32344},
			expr: &choiceExpr{
				pos: position{line: 890, col: 18, offset: 32361},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 890, col: 18, offset: 32361},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 890, col: 45, offset: 32388},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 892, col: 1, offset: 32414},
			expr: &actionExpr{
				pos: position{line: 892, col: 29, offset: 32442},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 892, col: 29, offset: 32442},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 892, col: 29, offset: 32442},
							expr: &litMatcher{
								pos:        position{line: 892, col: 30, offset: 32443},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 892, col: 35, offset: 32448},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 892, col: 40, offset: 32453},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 892, col: 49, offset: 32462},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 892, col: 82, offset: 32495},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 896, col: 1, offset: 32624},
			expr: &seqExpr{
				pos: position{line: 896, col: 36, offset: 32659},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 896, col: 36, offset: 32659},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 896, col: 68, offset: 32691},
						expr: &actionExpr{
							pos: position{line: 896, col: 69, offset: 32692},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 896, col: 69, offset: 32692},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 896, col: 69, offset: 32692},
										expr: &litMatcher{
											pos:        position{line: 896, col: 71, offset: 32694},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 896, col: 77, offset: 32700},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 896, col: 86, offset: 32709},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 896, col: 86, offset: 32709},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 896, col: 91, offset: 32714},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 900, col: 1, offset: 32811},
			expr: &actionExpr{
				pos: position{line: 900, col: 36, offset: 32846},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 900, col: 36, offset: 32846},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 900, col: 36, offset: 32846},
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 37, offset: 32847},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 45, offset: 32855},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 900, col: 54, offset: 32864},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 900, col: 54, offset: 32864},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 901, col: 11, offset: 32900},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 902, col: 11, offset: 32919},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 903, col: 11, offset: 32941},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 32965},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 905, col: 11, offset: 32991},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 906, col: 11, offset: 33014},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 907, col: 11, offset: 33030},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 908, col: 11, offset: 33053},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 912, col: 1, offset: 33214},
			expr: &actionExpr{
				pos: position{line: 912, col: 32, offset: 33245},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 912, col: 32, offset: 33245},
					exprs: []interface{}{
						&anyMatcher{
							line: 912, col: 33, offset: 33246,
						},
						&zeroOrMoreExpr{
							pos: position{line: 912, col: 36, offset: 33249},
							expr: &seqExpr{
								pos: position{line: 912, col: 37, offset: 33250},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 912, col: 37, offset: 33250},
										expr: &litMatcher{
											pos:        position{line: 912, col: 38, offset: 33251},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 912, col: 43, offset: 33256},
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 44, offset: 33257},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 912, col: 47, offset: 33260},
										expr: &litMatcher{
											pos:        position{line: 912, col: 48, offset: 33261},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 912, col: 52, offset: 33265},
										expr: &litMatcher{
											pos:        position{line: 912, col: 53, offset: 33266},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 912, col: 57, offset: 33270},
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 58, offset: 33271},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 912, col: 66, offset: 33279,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 916, col: 1, offset: 33339},
			expr: &choiceExpr{
				pos: position{line: 916, col: 29, offset: 33367},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 916, col: 29, offset: 33367},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 916, col: 29, offset: 33367},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 916, col: 29, offset: 33367},
									expr: &litMatcher{
										pos:        position{line: 916, col: 30, offset: 33368},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 916, col: 34, offset: 33372},
									expr: &litMatcher{
										pos:        position{line: 916, col: 35, offset: 33373},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 40, offset: 33378},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 916, col: 44, offset: 33382},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 53, offset: 33391},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 86, offset: 33424},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 918, col: 5, offset: 33609},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 918, col: 5, offset: 33609},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 918, col: 5, offset: 33609},
									expr: &litMatcher{
										pos:        position{line: 918, col: 6, offset: 33610},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 918, col: 11, offset: 33615},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 918, col: 16, offset: 33620},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 918, col: 25, offset: 33629},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 918, col: 58, offset: 33662},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 922, col: 1, offset: 33930},
			expr: &seqExpr{
				pos: position{line: 922, col: 36, offset: 33965},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 922, col: 36, offset: 33965},
						expr: &ruleRefExpr{
							pos:  position{line: 922, col: 37, offset: 33966},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 40, offset: 33969},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 922, col: 72, offset: 34001},
						expr: &actionExpr{
							pos: position{line: 922, col: 73, offset: 34002},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 922, col: 73, offset: 34002},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 922, col: 73, offset: 34002},
										expr: &seqExpr{
											pos: position{line: 922, col: 75, offset: 34004},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 922, col: 75, offset: 34004},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 922, col: 79, offset: 34008},
													expr: &ruleRefExpr{
														pos:  position{line: 922, col: 80, offset: 34009},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 922, col: 90, offset: 34019},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 922, col: 98, offset: 34027},
											expr: &ruleRefExpr{
												pos:  position{line: 922, col: 98, offset: 34027},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 922, col: 103, offset: 34032},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 922, col: 112, offset: 34041},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 926, col: 1, offset: 34137},
			expr: &actionExpr{
				pos: position{line: 926, col: 37, offset: 34173},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 926, col: 37, offset: 34173},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 926, col: 46, offset: 34182},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 926, col: 46, offset: 34182},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 927, col: 11, offset: 34220},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 928, col: 11, offset: 34256},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 11, offset: 34276},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 930, col: 11, offset: 34297},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 931, col: 11, offset: 34321},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 932, col: 11, offset: 34347},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 933, col: 11, offset: 34370},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 934, col: 11, offset: 34386},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 935, col: 11, offset: 34409},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 939, col: 1, offset: 34570},
			expr: &actionExpr{
				pos: position{line: 939, col: 32, offset: 34601},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 939, col: 32, offset: 34601},
					exprs: []interface{}{
						&anyMatcher{
							line: 939, col: 33, offset: 34602,
						},
						&zeroOrMoreExpr{
							pos: position{line: 939, col: 36, offset: 34605},
							expr: &seqExpr{
								pos: position{line: 939, col: 37, offset: 34606},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 939, col: 37, offset: 34606},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 38, offset: 34607},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 939, col: 41, offset: 34610},
										expr: &litMatcher{
											pos:        position{line: 939, col: 42, offset: 34611},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 939, col: 46, offset: 34615},
										expr: &litMatcher{
											pos:        position{line: 939, col: 47, offset: 34616},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 939, col: 51, offset: 34620},
										expr: &litMatcher{
											pos:        position{line: 939, col: 52, offset: 34621},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 939, col: 56, offset: 34625},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 57, offset: 34626},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 939, col: 65, offset: 34634,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 943, col: 1, offset: 34715},
			expr: &choiceExpr{
				pos: position{line: 944, col: 5, offset: 34744},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 34744},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 944, col: 5, offset: 34744},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 944, col: 5, offset: 34744},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 18, offset: 34757},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 40, offset: 34779},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 944, col: 45, offset: 34784},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 54, offset: 34793},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 87, offset: 34826},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 946, col: 9, offset: 34982},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 946, col: 9, offset: 34982},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 946, col: 9, offset: 34982},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 22, offset: 34995},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 946, col: 44, offset: 35017},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 946, col: 49, offset: 35022},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 58, offset: 35031},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 946, col: 91, offset: 35064},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 949, col: 9, offset: 35263},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 949, col: 9, offset: 35263},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 949, col: 9, offset: 35263},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 22, offset: 35276},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 949, col: 44, offset: 35298},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 949, col: 48, offset: 35302},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 57, offset: 35311},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 949, col: 90, offset: 35344},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 953, col: 1, offset: 35493},
			expr: &actionExpr{
				pos: position{line: 953, col: 18, offset: 35510},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 953, col: 18, offset: 35510},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 953, col: 18, offset: 35510},
							expr: &litMatcher{
								pos:        position{line: 953, col: 19, offset: 35511},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 953, col: 23, offset: 35515},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 953, col: 27, offset: 35519},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 36, offset: 35528},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 953, col: 58, offset: 35550},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 957, col: 1, offset: 35639},
			expr: &choiceExpr{
				pos: position{line: 957, col: 25, offset: 35663},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 957, col: 25, offset: 35663},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 957, col: 38, offset: 35676},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 959, col: 1, offset: 35695},
			expr: &actionExpr{
				pos: position{line: 959, col: 21, offset: 35715},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 959, col: 21, offset: 35715},
					expr: &seqExpr{
						pos: position{line: 959, col: 22, offset: 35716},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 959, col: 22, offset: 35716},
								expr: &ruleRefExpr{
									pos:  position{line: 959, col: 23, offset: 35717},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 959, col: 31, offset: 35725},
								expr: &ruleRefExpr{
									pos:  position{line: 959, col: 32, offset: 35726},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 959, col: 35, offset: 35729},
								expr: &litMatcher{
									pos:        position{line: 959, col: 36, offset: 35730},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 959, col: 40, offset: 35734,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 963, col: 1, offset: 35767},
			expr: &actionExpr{
				pos: position{line: 963, col: 25, offset: 35791},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 963, col: 25, offset: 35791},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 963, col: 25, offset: 35791},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 963, col: 38, offset: 35804},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 963, col: 60, offset: 35826},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 963, col: 64, offset: 35830},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 963, col: 73, offset: 35839},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 963, col: 95, offset: 35861},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 967, col: 1, offset: 35990},
			expr: &actionExpr{
				pos: position{line: 967, col: 20, offset: 36009},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 967, col: 20, offset: 36009},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 967, col: 20, offset: 36009},
							expr: &litMatcher{
								pos:        position{line: 967, col: 21, offset: 36010},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 967, col: 25, offset: 36014},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 967, col: 29, offset: 36018},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 967, col: 38, offset: 36027},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 967, col: 62, offset: 36051},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 971, col: 1, offset: 36142},
			expr: &choiceExpr{
				pos: position{line: 971, col: 27, offset: 36168},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 971, col: 27, offset: 36168},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 40, offset: 36181},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 973, col: 1, offset: 36202},
			expr: &actionExpr{
				pos: position{line: 973, col: 23, offset: 36224},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 973, col: 23, offset: 36224},
					expr: &seqExpr{
						pos: position{line: 973, col: 24, offset: 36225},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 973, col: 24, offset: 36225},
								expr: &ruleRefExpr{
									pos:  position{line: 973, col: 25, offset: 36226},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 973, col: 33, offset: 36234},
								expr: &ruleRefExpr{
									pos:  position{line: 973, col: 34, offset: 36235},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 973, col: 37, offset: 36238},
								expr: &litMatcher{
									pos:        position{line: 973, col: 38, offset: 36239},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 973, col: 42, offset: 36243,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 977, col: 1, offset: 36276},
			expr: &actionExpr{
				pos: position{line: 977, col: 27, offset: 36302},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 977, col: 27, offset: 36302},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 977, col: 27, offset: 36302},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 977, col: 40, offset: 36315},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 977, col: 62, offset: 36337},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 977, col: 66, offset: 36341},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 977, col: 75, offset: 36350},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 977, col: 99, offset: 36374},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 984, col: 1, offset: 36610},
			expr: &choiceExpr{
				pos: position{line: 984, col: 16, offset: 36625},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 984, col: 16, offset: 36625},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 984, col: 40, offset: 36649},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 984, col: 64, offset: 36673},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 986, col: 1, offset: 36691},
			expr: &litMatcher{
				pos:        position{line: 986, col: 32, offset: 36722},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 988, col: 1, offset: 36727},
			expr: &actionExpr{
				pos: position{line: 988, col: 26, offset: 36752},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 988, col: 26, offset: 36752},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 988, col: 26, offset: 36752},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 988, col: 54, offset: 36780},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 63, offset: 36789},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 988, col: 93, offset: 36819},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 988, col: 121, offset: 36847},
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 122, offset: 36848},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 992, col: 1, offset: 36947},
			expr: &choiceExpr{
				pos: position{line: 992, col: 33, offset: 36979},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 992, col: 34, offset: 36980},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 992, col: 34, offset: 36980},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 992, col: 35, offset: 36981},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 992, col: 35, offset: 36981},
											expr: &ruleRefExpr{
												pos:  position{line: 992, col: 36, offset: 36982},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 992, col: 64, offset: 37010},
											expr: &ruleRefExpr{
												pos:  position{line: 992, col: 65, offset: 37011},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 992, col: 68, offset: 37014},
											expr: &ruleRefExpr{
												pos:  position{line: 992, col: 69, offset: 37015},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 992, col: 77, offset: 37023,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 992, col: 80, offset: 37026},
									expr: &seqExpr{
										pos: position{line: 992, col: 81, offset: 37027},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 992, col: 81, offset: 37027},
												expr: &seqExpr{
													pos: position{line: 992, col: 83, offset: 37029},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 992, col: 83, offset: 37029},
															expr: &ruleRefExpr{
																pos:  position{line: 992, col: 83, offset: 37029},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 992, col: 87, offset: 37033},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 992, col: 116, offset: 37062},
												expr: &ruleRefExpr{
													pos:  position{line: 992, col: 117, offset: 37063},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 992, col: 145, offset: 37091},
												expr: &ruleRefExpr{
													pos:  position{line: 992, col: 146, offset: 37092},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 992, col: 154, offset: 37100,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 994, col: 7, offset: 37242},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 994, col: 8, offset: 37243},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 994, col: 8, offset: 37243},
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 9, offset: 37244},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 994, col: 12, offset: 37247},
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 13, offset: 37248},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 994, col: 21, offset: 37256},
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 22, offset: 37257},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 994, col: 50, offset: 37285,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 998, col: 1, offset: 37367},
			expr: &litMatcher{
				pos:        position{line: 998, col: 32, offset: 37398},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1000, col: 1, offset: 37405},
			expr: &actionExpr{
				pos: position{line: 1000, col: 26, offset: 37430},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1000, col: 26, offset: 37430},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1000, col: 26, offset: 37430},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1000, col: 54, offset: 37458},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1000, col: 63, offset: 37467},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1000, col: 93, offset: 37497},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1000, col: 121, offset: 37525},
							expr: &ruleRefExpr{
								pos:  position{line: 1000, col: 122, offset: 37526},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1004, col: 1, offset: 37625},
			expr: &choiceExpr{
				pos: position{line: 1004, col: 33, offset: 37657},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1004, col: 34, offset: 37658},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1004, col: 34, offset: 37658},
							expr: &seqExpr{
								pos: position{line: 1004, col: 35, offset: 37659},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1004, col: 35, offset: 37659},
										expr: &ruleRefExpr{
											pos:  position{line: 1004, col: 36, offset: 37660},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1004, col: 64, offset: 37688,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1006, col: 7, offset: 37853},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1006, col: 7, offset: 37853},
							expr: &seqExpr{
								pos: position{line: 1006, col: 8, offset: 37854},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1006, col: 8, offset: 37854},
										expr: &ruleRefExpr{
											pos:  position{line: 1006, col: 9, offset: 37855},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1006, col: 12, offset: 37858},
										expr: &ruleRefExpr{
											pos:  position{line: 1006, col: 13, offset: 37859},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1006, col: 21, offset: 37867},
										expr: &ruleRefExpr{
											pos:  position{line: 1006, col: 22, offset: 37868},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1006, col: 50, offset: 37896,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1010, col: 1, offset: 37979},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 21, offset: 37999},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1010, col: 21, offset: 37999},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1010, col: 21, offset: 37999},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1010, col: 21, offset: 37999},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 30, offset: 38008},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1010, col: 38, offset: 38016},
										expr: &ruleRefExpr{
											pos:  position{line: 1010, col: 39, offset: 38017},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 67, offset: 38045},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 38135},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1012, col: 5, offset: 38135},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1012, col: 5, offset: 38135},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 15, offset: 38145},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1012, col: 23, offset: 38153},
										expr: &choiceExpr{
											pos: position{line: 1012, col: 24, offset: 38154},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1012, col: 24, offset: 38154},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1012, col: 37, offset: 38167},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 65, offset: 38195},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1016, col: 1, offset: 38285},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 31, offset: 38315},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1016, col: 31, offset: 38315},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 43, offset: 38327},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1016, col: 52, offset: 38336},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1016, col: 53, offset: 38337},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1016, col: 53, offset: 38337},
									expr: &litMatcher{
										pos:        position{line: 1016, col: 54, offset: 38338},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1016, col: 58, offset: 38342,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1023, col: 1, offset: 38512},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 19, offset: 38530},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1023, col: 19, offset: 38530},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1023, col: 19, offset: 38530},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1023, col: 19, offset: 38530},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1023, col: 24, offset: 38535},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 28, offset: 38539},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1023, col: 32, offset: 38543},
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 32, offset: 38543},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1023, col: 36, offset: 38547},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1023, col: 40, offset: 38551},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 47, offset: 38558},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1023, col: 68, offset: 38579},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 38654},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 38654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1025, col: 5, offset: 38654},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 10, offset: 38659},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 14, offset: 38663},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 18, offset: 38667},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1029, col: 1, offset: 38730},
			expr: &actionExpr{
				pos: position{line: 1029, col: 24, offset: 38753},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1029, col: 24, offset: 38753},
					expr: &choiceExpr{
						pos: position{line: 1029, col: 25, offset: 38754},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1029, col: 25, offset: 38754},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1029, col: 37, offset: 38766},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1029, col: 47, offset: 38776},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1029, col: 47, offset: 38776},
										expr: &litMatcher{
											pos:        position{line: 1029, col: 48, offset: 38777},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1029, col: 54, offset: 38783,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1036, col: 1, offset: 38925},
			expr: &actionExpr{
				pos: position{line: 1036, col: 9, offset: 38933},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1036, col: 9, offset: 38933},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1036, col: 15, offset: 38939},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1036, col: 15, offset: 38939},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1036, col: 30, offset: 38954},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1041, col: 1, offset: 39061},
			expr: &actionExpr{
				pos: position{line: 1041, col: 17, offset: 39077},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 17, offset: 39077},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1041, col: 17, offset: 39077},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 25, offset: 39085},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1041, col: 30, offset: 39090},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1041, col: 30, offset: 39090},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1041, col: 41, offset: 39101},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 55, offset: 39115},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 73, offset: 39133},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1045, col: 1, offset: 39251},
			expr: &actionExpr{
				pos: position{line: 1045, col: 17, offset: 39267},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1045, col: 17, offset: 39267},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1045, col: 17, offset: 39267},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1045, col: 22, offset: 39272},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1045, col: 32, offset: 39282},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1045, col: 49, offset: 39299},
								expr: &ruleRefExpr{
									pos:  position{line: 1045, col: 50, offset: 39300},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1049, col: 1, offset: 39393},
			expr: &actionExpr{
				pos: position{line: 1049, col: 19, offset: 39411},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 19, offset: 39411},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1049, col: 19, offset: 39411},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 23, offset: 39415},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1049, col: 28, offset: 39420},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 29, offset: 39421},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1049, col: 49, offset: 39441},
							expr: &litMatcher{
								pos:        position{line: 1049, col: 49, offset: 39441},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1049, col: 54, offset: 39446},
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 54, offset: 39446},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 58, offset: 39450},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1049, col: 69, offset: 39461},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 70, offset: 39462},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1049, col: 89, offset: 39481},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1053, col: 1, offset: 39566},
			expr: &actionExpr{
				pos: position{line: 1053, col: 22, offset: 39587},
				run: (*parser).callonLinkTextAttribute1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 22, offset: 39587},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1053, col: 22, offset: 39587},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1053, col: 31, offset: 39596},
								expr: &seqExpr{
									pos: position{line: 1053, col: 32, offset: 39597},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1053, col: 32, offset: 39597},
											expr: &litMatcher{
												pos:        position{line: 1053, col: 33, offset: 39598},
												val:        "=",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1053, col: 37, offset: 39602},
											expr: &litMatcher{
												pos:        position{line: 1053, col: 38, offset: 39603},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1053, col: 42, offset: 39607},
											expr: &litMatcher{
												pos:        position{line: 1053, col: 43, offset: 39608},
												val:        "]",
												ignoreCase: false,
											},
										},
										&choiceExpr{
											pos: position{line: 1053, col: 48, offset: 39613},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1053, col: 48, offset: 39613},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1053, col: 61, offset: 39626},
													name: "SimpleWord",
												},
												&ruleRefExpr{
													pos:  position{line: 1053, col: 74, offset: 39639},
													name: "Spaces",
												},
												&actionExpr{
													pos: position{line: 1053, col: 84, offset: 39649},
													run: (*parser).callonLinkTextAttribute16,
													expr: &seqExpr{
														pos: position{line: 1053, col: 85, offset: 39650},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1053, col: 85, offset: 39650},
																expr: &ruleRefExpr{
																	pos:  position{line: 1053, col: 86, offset: 39651},
																	name: "QuotedTextPrefix",
																},
															},
															&anyMatcher{
																line: 1053, col: 103, offset: 39668,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1055, col: 7, offset: 39729},
							expr: &notExpr{
								pos: position{line: 1055, col: 9, offset: 39731},
								expr: &litMatcher{
									pos:        position{line: 1055, col: 10, offset: 39732},
									val:        "=",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1062, col: 1, offset: 39905},
			expr: &actionExpr{
				pos: position{line: 1062, col: 15, offset: 39919},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1062, col: 15, offset: 39919},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1062, col: 15, offset: 39919},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1062, col: 26, offset: 39930},
								expr: &ruleRefExpr{
									pos:  position{line: 1062, col: 27, offset: 39931},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1062, col: 47, offset: 39951},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 57, offset: 39961},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 63, offset: 39967},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 68, offset: 39972},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 86, offset: 39990},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1062, col: 103, offset: 40007},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1066, col: 1, offset: 40119},
			expr: &actionExpr{
				pos: position{line: 1066, col: 16, offset: 40134},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1066, col: 16, offset: 40134},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1066, col: 16, offset: 40134},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1066, col: 25, offset: 40143},
							expr: &litMatcher{
								pos:        position{line: 1066, col: 26, offset: 40144},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1066, col: 30, offset: 40148},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1066, col: 36, offset: 40154},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1066, col: 41, offset: 40159},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1066, col: 59, offset: 40177},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1070, col: 1, offset: 40290},
			expr: &actionExpr{
				pos: position{line: 1070, col: 20, offset: 40309},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1070, col: 20, offset: 40309},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1070, col: 20, offset: 40309},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 24, offset: 40313},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1070, col: 28, offset: 40317},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 29, offset: 40318},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1070, col: 46, offset: 40335},
							expr: &litMatcher{
								pos:        position{line: 1070, col: 46, offset: 40335},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 51, offset: 40340},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1070, col: 57, offset: 40346},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 58, offset: 40347},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1070, col: 75, offset: 40364},
							expr: &litMatcher{
								pos:        position{line: 1070, col: 75, offset: 40364},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 80, offset: 40369},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1070, col: 87, offset: 40376},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 88, offset: 40377},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1070, col: 105, offset: 40394},
							expr: &litMatcher{
								pos:        position{line: 1070, col: 105, offset: 40394},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1070, col: 110, offset: 40399},
							expr: &ruleRefExpr{
								pos:  position{line: 1070, col: 110, offset: 40399},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 114, offset: 40403},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1070, col: 125, offset: 40414},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 126, offset: 40415},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1070, col: 145, offset: 40434},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1077, col: 1, offset: 40724},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 19, offset: 40742},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1077, col: 19, offset: 40742},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1077, col: 19, offset: 40742},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1077, col: 19, offset: 40742},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 32, offset: 40755},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1077, col: 41, offset: 40764},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1077, col: 58, offset: 40781},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 40856},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1079, col: 5, offset: 40856},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1079, col: 5, offset: 40856},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 21, offset: 40872},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1079, col: 26, offset: 40877},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1079, col: 39, offset: 40890},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 43, offset: 40894},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1079, col: 52, offset: 40903},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1079, col: 69, offset: 40920},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1081, col: 5, offset: 41005},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1081, col: 5, offset: 41005},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1081, col: 5, offset: 41005},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 21, offset: 41021},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 26, offset: 41026},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 39, offset: 41039},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1085, col: 1, offset: 41154},
			expr: &actionExpr{
				pos: position{line: 1085, col: 16, offset: 41169},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1085, col: 16, offset: 41169},
					expr: &choiceExpr{
						pos: position{line: 1085, col: 17, offset: 41170},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1085, col: 17, offset: 41170},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1085, col: 29, offset: 41182},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1085, col: 39, offset: 41192},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1085, col: 39, offset: 41192},
										expr: &litMatcher{
											pos:        position{line: 1085, col: 40, offset: 41193},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1085, col: 44, offset: 41197},
										expr: &litMatcher{
											pos:        position{line: 1085, col: 45, offset: 41198},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1085, col: 49, offset: 41202},
										expr: &ruleRefExpr{
											pos:  position{line: 1085, col: 50, offset: 41203},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1085, col: 55, offset: 41208,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1089, col: 1, offset: 41293},
			expr: &actionExpr{
				pos: position{line: 1089, col: 20, offset: 41312},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1089, col: 20, offset: 41312},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1089, col: 29, offset: 41321},
						expr: &seqExpr{
							pos: position{line: 1089, col: 30, offset: 41322},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1089, col: 30, offset: 41322},
									expr: &litMatcher{
										pos:        position{line: 1089, col: 31, offset: 41323},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1089, col: 35, offset: 41327},
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 36, offset: 41328},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1089, col: 40, offset: 41332},
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 40, offset: 41332},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1089, col: 44, offset: 41336},
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 45, offset: 41337},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1089, col: 61, offset: 41353},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1089, col: 75, offset: 41367},
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 75, offset: 41367},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1096, col: 1, offset: 41681},
			expr: &actionExpr{
				pos: position{line: 1096, col: 19, offset: 41699},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1096, col: 19, offset: 41699},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1096, col: 19, offset: 41699},
							expr: &ruleRefExpr{
								pos:  position{line: 1096, col: 20, offset: 41700},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1097, col: 5, offset: 41729},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1097, col: 12, offset: 41736},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1097, col: 12, offset: 41736},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 41759},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1099, col: 11, offset: 41783},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1100, col: 11, offset: 41807},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1101, col: 11, offset: 41829},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1102, col: 11, offset: 41851},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 41874},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1104, col: 11, offset: 41902},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1105, col: 11, offset: 41918},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1109, col: 1, offset: 41959},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 19, offset: 41977},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1109, col: 19, offset: 41977},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 19, offset: 42018},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 19, offset: 42058},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 19, offset: 42099},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1113, col: 19, offset: 42140},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1114, col: 19, offset: 42181},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 19, offset: 42219},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1121, col: 1, offset: 42438},
			expr: &seqExpr{
				pos: position{line: 1121, col: 25, offset: 42462},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1121, col: 25, offset: 42462},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1121, col: 31, offset: 42468},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1123, col: 1, offset: 42474},
			expr: &actionExpr{
				pos: position{line: 1123, col: 16, offset: 42489},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1123, col: 16, offset: 42489},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1123, col: 16, offset: 42489},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1123, col: 27, offset: 42500},
								expr: &ruleRefExpr{
									pos:  position{line: 1123, col: 28, offset: 42501},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1123, col: 48, offset: 42521},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1123, col: 69, offset: 42542},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1123, col: 77, offset: 42550},
								expr: &ruleRefExpr{
									pos:  position{line: 1123, col: 78, offset: 42551},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1123, col: 100, offset: 42573},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1123, col: 100, offset: 42573},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1123, col: 123, offset: 42596},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1127, col: 1, offset: 42704},
			expr: &choiceExpr{
				pos: position{line: 1127, col: 23, offset: 42726},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1127, col: 23, offset: 42726},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 35, offset: 42738},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 51, offset: 42754},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 62, offset: 42765},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1130, col: 1, offset: 42805},
			expr: &actionExpr{
				pos: position{line: 1130, col: 25, offset: 42829},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1130, col: 25, offset: 42829},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1130, col: 31, offset: 42835},
						expr: &ruleRefExpr{
							pos:  position{line: 1130, col: 32, offset: 42836},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1134, col: 1, offset: 42949},
			expr: &actionExpr{
				pos: position{line: 1134, col: 29, offset: 42977},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1134, col: 29, offset: 42977},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1134, col: 29, offset: 42977},
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 30, offset: 42978},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1134, col: 51, offset: 42999},
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 52, offset: 43000},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1134, col: 62, offset: 43010},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 68, offset: 43016},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1141, col: 1, offset: 43254},
			expr: &seqExpr{
				pos: position{line: 1141, col: 26, offset: 43279},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1141, col: 26, offset: 43279},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 33, offset: 43286},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1144, col: 1, offset: 43327},
			expr: &actionExpr{
				pos: position{line: 1144, col: 17, offset: 43343},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1144, col: 17, offset: 43343},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1144, col: 17, offset: 43343},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1144, col: 28, offset: 43354},
								expr: &ruleRefExpr{
									pos:  position{line: 1144, col: 29, offset: 43355},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1144, col: 49, offset: 43375},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1144, col: 71, offset: 43397},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1144, col: 79, offset: 43405},
								expr: &ruleRefExpr{
									pos:  position{line: 1144, col: 80, offset: 43406},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1144, col: 103, offset: 43429},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1144, col: 103, offset: 43429},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1144, col: 127, offset: 43453},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1148, col: 1, offset: 43562},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 24, offset: 43585},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1148, col: 24, offset: 43585},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 40, offset: 43601},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1150, col: 1, offset: 43624},
			expr: &actionExpr{
				pos: position{line: 1150, col: 26, offset: 43649},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1150, col: 26, offset: 43649},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1150, col: 32, offset: 43655},
						expr: &ruleRefExpr{
							pos:  position{line: 1150, col: 33, offset: 43656},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1154, col: 1, offset: 43775},
			expr: &actionExpr{
				pos: position{line: 1154, col: 30, offset: 43804},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1154, col: 30, offset: 43804},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1154, col: 30, offset: 43804},
							expr: &ruleRefExpr{
								pos:  position{line: 1154, col: 31, offset: 43805},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1154, col: 53, offset: 43827},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1154, col: 59, offset: 43833},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1154, col: 59, offset: 43833},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1154, col: 59, offset: 43833},
											expr: &ruleRefExpr{
												pos:  position{line: 1154, col: 60, offset: 43834},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1154, col: 64, offset: 43838},
											expr: &choiceExpr{
												pos: position{line: 1154, col: 65, offset: 43839},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1154, col: 65, offset: 43839},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1154, col: 77, offset: 43851},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1154, col: 87, offset: 43861},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1154, col: 87, offset: 43861},
																expr: &ruleRefExpr{
																	pos:  position{line: 1154, col: 88, offset: 43862},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1154, col: 92, offset: 43866,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1154, col: 128, offset: 43902},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1161, col: 1, offset: 44228},
			expr: &seqExpr{
				pos: position{line: 1161, col: 26, offset: 44253},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1161, col: 26, offset: 44253},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 33, offset: 44260},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1163, col: 1, offset: 44266},
			expr: &actionExpr{
				pos: position{line: 1163, col: 17, offset: 44282},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1163, col: 17, offset: 44282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1163, col: 17, offset: 44282},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1163, col: 28, offset: 44293},
								expr: &ruleRefExpr{
									pos:  position{line: 1163, col: 29, offset: 44294},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1163, col: 49, offset: 44314},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1163, col: 71, offset: 44336},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1163, col: 79, offset: 44344},
								expr: &choiceExpr{
									pos: position{line: 1163, col: 80, offset: 44345},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1163, col: 80, offset: 44345},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1163, col: 92, offset: 44357},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1163, col: 108, offset: 44373},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1163, col: 119, offset: 44384},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1163, col: 145, offset: 44410},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1163, col: 145, offset: 44410},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1163, col: 169, offset: 44434},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1168, col: 1, offset: 44561},
			expr: &actionExpr{
				pos: position{line: 1168, col: 26, offset: 44586},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1168, col: 26, offset: 44586},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1168, col: 32, offset: 44592},
						expr: &ruleRefExpr{
							pos:  position{line: 1168, col: 33, offset: 44593},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1172, col: 1, offset: 44707},
			expr: &actionExpr{
				pos: position{line: 1172, col: 30, offset: 44736},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1172, col: 30, offset: 44736},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1172, col: 30, offset: 44736},
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 31, offset: 44737},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1172, col: 53, offset: 44759},
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 54, offset: 44760},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 64, offset: 44770},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 70, offset: 44776},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1179, col: 1, offset: 45012},
			expr: &seqExpr{
				pos: position{line: 1179, col: 24, offset: 45035},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1179, col: 24, offset: 45035},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 31, offset: 45042},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1181, col: 1, offset: 45073},
			expr: &actionExpr{
				pos: position{line: 1181, col: 15, offset: 45087},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1181, col: 15, offset: 45087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1181, col: 15, offset: 45087},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1181, col: 26, offset: 45098},
								expr: &ruleRefExpr{
									pos:  position{line: 1181, col: 27, offset: 45099},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1181, col: 47, offset: 45119},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1181, col: 67, offset: 45139},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1181, col: 75, offset: 45147},
								expr: &ruleRefExpr{
									pos:  position{line: 1181, col: 76, offset: 45148},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1181, col: 97, offset: 45169},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1181, col: 97, offset: 45169},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1181, col: 119, offset: 45191},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1185, col: 1, offset: 45298},
			expr: &actionExpr{
				pos: position{line: 1186, col: 5, offset: 45324},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 5, offset: 45324},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1186, col: 5, offset: 45324},
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 6, offset: 45325},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1186, col: 26, offset: 45345},
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 27, offset: 45346},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 31, offset: 45350},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1186, col: 40, offset: 45359},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1186, col: 40, offset: 45359},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1187, col: 15, offset: 45384},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1188, col: 15, offset: 45412},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1189, col: 15, offset: 45438},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1190, col: 15, offset: 45461},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1191, col: 15, offset: 45487},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 15, offset: 45514},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1193, col: 15, offset: 45541},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1194, col: 15, offset: 45568},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1195, col: 15, offset: 45600},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1196, col: 15, offset: 45626},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1197, col: 15, offset: 45653},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1198, col: 15, offset: 45674},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 15, offset: 45702},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1200, col: 15, offset: 45746},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1201, col: 15, offset: 45784},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1202, col: 15, offset: 45819},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1206, col: 1, offset: 45878},
			expr: &actionExpr{
				pos: position{line: 1206, col: 24, offset: 45901},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1206, col: 24, offset: 45901},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1206, col: 30, offset: 45907},
						expr: &ruleRefExpr{
							pos:  position{line: 1206, col: 31, offset: 45908},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1215, col: 1, offset: 46254},
			expr: &actionExpr{
				pos: position{line: 1215, col: 15, offset: 46268},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 15, offset: 46268},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1215, col: 15, offset: 46268},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 27, offset: 46280},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1216, col: 5, offset: 46304},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1220, col: 5, offset: 46490},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1220, col: 25, offset: 46510},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1220, col: 33, offset: 46518},
								expr: &ruleRefExpr{
									pos:  position{line: 1220, col: 34, offset: 46519},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1220, col: 55, offset: 46540},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1220, col: 55, offset: 46540},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1220, col: 77, offset: 46562},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1224, col: 1, offset: 46677},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 22, offset: 46698},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1224, col: 22, offset: 46698},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 41, offset: 46717},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 53, offset: 46729},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1226, col: 1, offset: 46750},
			expr: &actionExpr{
				pos: position{line: 1226, col: 21, offset: 46770},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 21, offset: 46770},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1226, col: 21, offset: 46770},
							expr: &ruleRefExpr{
								pos:  position{line: 1226, col: 22, offset: 46771},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1226, col: 42, offset: 46791},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1226, col: 51, offset: 46800},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1231, col: 1, offset: 46862},
			expr: &actionExpr{
				pos: position{line: 1231, col: 24, offset: 46885},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1231, col: 24, offset: 46885},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1231, col: 30, offset: 46891},
						expr: &ruleRefExpr{
							pos:  position{line: 1231, col: 31, offset: 46892},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1235, col: 1, offset: 46982},
			expr: &actionExpr{
				pos: position{line: 1235, col: 28, offset: 47009},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 28, offset: 47009},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1235, col: 28, offset: 47009},
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 29, offset: 47010},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1235, col: 49, offset: 47030},
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 50, offset: 47031},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1235, col: 60, offset: 47041},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1235, col: 66, offset: 47047},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1235, col: 66, offset: 47047},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1235, col: 66, offset: 47047},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1235, col: 75, offset: 47056},
												expr: &ruleRefExpr{
													pos:  position{line: 1235, col: 76, offset: 47057},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1235, col: 109, offset: 47090},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1241, col: 1, offset: 47186},
			expr: &actionExpr{
				pos: position{line: 1241, col: 35, offset: 47220},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1241, col: 35, offset: 47220},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1241, col: 35, offset: 47220},
							expr: &ruleRefExpr{
								pos:  position{line: 1241, col: 36, offset: 47221},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1241, col: 40, offset: 47225},
							expr: &ruleRefExpr{
								pos:  position{line: 1241, col: 41, offset: 47226},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 5, offset: 47241},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1242, col: 14, offset: 47250},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1242, col: 14, offset: 47250},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 47268},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 11, offset: 47291},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 47307},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 47330},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 47356},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 11, offset: 47383},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 11, offset: 47405},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1250, col: 11, offset: 47431},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1251, col: 11, offset: 47472},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1252, col: 11, offset: 47499},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1259, col: 1, offset: 47729},
			expr: &seqExpr{
				pos: position{line: 1259, col: 26, offset: 47754},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1259, col: 26, offset: 47754},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 33, offset: 47761},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1261, col: 1, offset: 47767},
			expr: &actionExpr{
				pos: position{line: 1261, col: 17, offset: 47783},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 17, offset: 47783},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1261, col: 17, offset: 47783},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1261, col: 28, offset: 47794},
								expr: &ruleRefExpr{
									pos:  position{line: 1261, col: 29, offset: 47795},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1261, col: 49, offset: 47815},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1261, col: 71, offset: 47837},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1261, col: 79, offset: 47845},
								expr: &ruleRefExpr{
									pos:  position{line: 1261, col: 80, offset: 47846},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1261, col: 104, offset: 47870},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1261, col: 104, offset: 47870},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1261, col: 128, offset: 47894},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1265, col: 1, offset: 48003},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 24, offset: 48026},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1265, col: 24, offset: 48026},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 36, offset: 48038},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 52, offset: 48054},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 63, offset: 48065},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 81, offset: 48083},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1267, col: 1, offset: 48106},
			expr: &actionExpr{
				pos: position{line: 1267, col: 20, offset: 48125},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 20, offset: 48125},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1267, col: 20, offset: 48125},
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 21, offset: 48126},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 34, offset: 48139},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 43, offset: 48148},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1272, col: 1, offset: 48211},
			expr: &actionExpr{
				pos: position{line: 1272, col: 26, offset: 48236},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1272, col: 26, offset: 48236},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1272, col: 32, offset: 48242},
						expr: &ruleRefExpr{
							pos:  position{line: 1272, col: 33, offset: 48243},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1276, col: 1, offset: 48357},
			expr: &actionExpr{
				pos: position{line: 1276, col: 30, offset: 48386},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1276, col: 30, offset: 48386},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1276, col: 30, offset: 48386},
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 31, offset: 48387},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1276, col: 53, offset: 48409},
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 54, offset: 48410},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1276, col: 64, offset: 48420},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 70, offset: 48426},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1284, col: 1, offset: 48657},
			expr: &actionExpr{
				pos: position{line: 1284, col: 10, offset: 48666},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1284, col: 10, offset: 48666},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1284, col: 10, offset: 48666},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1284, col: 21, offset: 48677},
								expr: &ruleRefExpr{
									pos:  position{line: 1284, col: 22, offset: 48678},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1284, col: 42, offset: 48698},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 5, offset: 48717},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1285, col: 12, offset: 48724},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 13, offset: 48725},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1286, col: 5, offset: 48747},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1286, col: 11, offset: 48753},
								expr: &ruleRefExpr{
									pos:  position{line: 1286, col: 12, offset: 48754},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1287, col: 6, offset: 48771},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1287, col: 6, offset: 48771},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1287, col: 23, offset: 48788},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1291, col: 1, offset: 48903},
			expr: &seqExpr{
				pos: position{line: 1291, col: 23, offset: 48925},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1291, col: 23, offset: 48925},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1291, col: 27, offset: 48929},
						expr: &ruleRefExpr{
							pos:  position{line: 1291, col: 27, offset: 48929},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1293, col: 1, offset: 48934},
			expr: &seqExpr{
				pos: position{line: 1293, col: 19, offset: 48952},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1293, col: 19, offset: 48952},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 26, offset: 48959},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1296, col: 1, offset: 49028},
			expr: &actionExpr{
				pos: position{line: 1296, col: 20, offset: 49047},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1296, col: 20, offset: 49047},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1296, col: 20, offset: 49047},
							expr: &ruleRefExpr{
								pos:  position{line: 1296, col: 21, offset: 49048},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1296, col: 36, offset: 49063},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1296, col: 42, offset: 49069},
								expr: &ruleRefExpr{
									pos:  position{line: 1296, col: 43, offset: 49070},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1296, col: 55, offset: 49082},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1296, col: 59, offset: 49086},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1300, col: 1, offset: 49154},
			expr: &actionExpr{
				pos: position{line: 1300, col: 14, offset: 49167},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1300, col: 14, offset: 49167},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1300, col: 14, offset: 49167},
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 15, offset: 49168},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1300, col: 30, offset: 49183},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1300, col: 36, offset: 49189},
								expr: &ruleRefExpr{
									pos:  position{line: 1300, col: 37, offset: 49190},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1300, col: 49, offset: 49202},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1300, col: 53, offset: 49206},
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 53, offset: 49206},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1304, col: 1, offset: 49275},
			expr: &actionExpr{
				pos: position{line: 1304, col: 14, offset: 49288},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 14, offset: 49288},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1304, col: 14, offset: 49288},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 33, offset: 49307},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1304, col: 42, offset: 49316},
								expr: &seqExpr{
									pos: position{line: 1304, col: 43, offset: 49317},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1304, col: 43, offset: 49317},
											expr: &ruleRefExpr{
												pos:  position{line: 1304, col: 44, offset: 49318},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1304, col: 63, offset: 49337},
											expr: &ruleRefExpr{
												pos:  position{line: 1304, col: 64, offset: 49338},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1304, col: 68, offset: 49342},
											expr: &ruleRefExpr{
												pos:  position{line: 1304, col: 68, offset: 49342},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1304, col: 72, offset: 49346},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1304, col: 86, offset: 49360},
											expr: &ruleRefExpr{
												pos:  position{line: 1304, col: 86, offset: 49360},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1311, col: 1, offset: 49606},
			expr: &litMatcher{
				pos:        position{line: 1311, col: 26, offset: 49631},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1313, col: 1, offset: 49639},
			expr: &actionExpr{
				pos: position{line: 1313, col: 17, offset: 49655},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1313, col: 17, offset: 49655},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1313, col: 17, offset: 49655},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1313, col: 39, offset: 49677},
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 39, offset: 49677},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1313, col: 43, offset: 49681},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1313, col: 51, offset: 49689},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1313, col: 59, offset: 49697},
								expr: &ruleRefExpr{
									pos:  position{line: 1313, col: 60, offset: 49698},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1313, col: 81, offset: 49719},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1313, col: 82, offset: 49720},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1313, col: 82, offset: 49720},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1313, col: 104, offset: 49742},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1313, col: 112, offset: 49750},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1317, col: 1, offset: 49856},
			expr: &actionExpr{
				pos: position{line: 1317, col: 21, offset: 49876},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1317, col: 21, offset: 49876},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1317, col: 21, offset: 49876},
							expr: &choiceExpr{
								pos: position{line: 1317, col: 22, offset: 49877},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1317, col: 22, offset: 49877},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 34, offset: 49889},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1317, col: 44, offset: 49899},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1317, col: 44, offset: 49899},
												expr: &ruleRefExpr{
													pos:  position{line: 1317, col: 45, offset: 49900},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1317, col: 67, offset: 49922},
												expr: &ruleRefExpr{
													pos:  position{line: 1317, col: 68, offset: 49923},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1317, col: 73, offset: 49928,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1317, col: 78, offset: 49933},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1321, col: 1, offset: 49973},
			expr: &actionExpr{
				pos: position{line: 1321, col: 22, offset: 49994},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1321, col: 22, offset: 49994},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1321, col: 22, offset: 49994},
							expr: &ruleRefExpr{
								pos:  position{line: 1321, col: 23, offset: 49995},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1321, col: 45, offset: 50017},
							expr: &ruleRefExpr{
								pos:  position{line: 1321, col: 45, offset: 50017},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1321, col: 49, offset: 50021},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1321, col: 54, offset: 50026},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1321, col: 63, offset: 50035},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1321, col: 89, offset: 50061},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1325, col: 1, offset: 50126},
			expr: &actionExpr{
				pos: position{line: 1325, col: 29, offset: 50154},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1325, col: 29, offset: 50154},
					expr: &choiceExpr{
						pos: position{line: 1325, col: 30, offset: 50155},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1325, col: 30, offset: 50155},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1325, col: 42, offset: 50167},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1325, col: 52, offset: 50177},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1325, col: 52, offset: 50177},
										expr: &ruleRefExpr{
											pos:  position{line: 1325, col: 53, offset: 50178},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1325, col: 58, offset: 50183,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1333, col: 1, offset: 50492},
			expr: &choiceExpr{
				pos: position{line: 1333, col: 17, offset: 50508},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1333, col: 17, offset: 50508},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 49, offset: 50540},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 78, offset: 50569},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1335, col: 1, offset: 50605},
			expr: &litMatcher{
				pos:        position{line: 1335, col: 26, offset: 50630},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1338, col: 1, offset: 50702},
			expr: &actionExpr{
				pos: position{line: 1338, col: 31, offset: 50732},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 31, offset: 50732},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1338, col: 31, offset: 50732},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1338, col: 42, offset: 50743},
								expr: &ruleRefExpr{
									pos:  position{line: 1338, col: 43, offset: 50744},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 63, offset: 50764},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1338, col: 70, offset: 50771},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1343, col: 1, offset: 51001},
			expr: &actionExpr{
				pos: position{line: 1344, col: 5, offset: 51041},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1344, col: 5, offset: 51041},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1344, col: 5, offset: 51041},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1344, col: 16, offset: 51052},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1344, col: 16, offset: 51052},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1344, col: 16, offset: 51052},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1344, col: 19, offset: 51055},
											expr: &choiceExpr{
												pos: position{line: 1344, col: 20, offset: 51056},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1344, col: 20, offset: 51056},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1344, col: 32, offset: 51068},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1344, col: 41, offset: 51077},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1344, col: 42, offset: 51078},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1344, col: 42, offset: 51078},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1344, col: 43, offset: 51079},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1344, col: 48, offset: 51084,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1348, col: 8, offset: 51175},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 5, offset: 51238},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1349, col: 16, offset: 51249},
								expr: &actionExpr{
									pos: position{line: 1350, col: 9, offset: 51259},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1350, col: 9, offset: 51259},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1350, col: 9, offset: 51259},
												expr: &ruleRefExpr{
													pos:  position{line: 1350, col: 10, offset: 51260},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1351, col: 9, offset: 51279},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1351, col: 20, offset: 51290},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1351, col: 20, offset: 51290},
														expr: &choiceExpr{
															pos: position{line: 1351, col: 21, offset: 51291},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1351, col: 21, offset: 51291},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1351, col: 33, offset: 51303},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1351, col: 43, offset: 51313},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1351, col: 43, offset: 51313},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1351, col: 44, offset: 51314},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1351, col: 49, offset: 51319,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1353, col: 12, offset: 51376},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1360, col: 1, offset: 51606},
			expr: &actionExpr{
				pos: position{line: 1360, col: 39, offset: 51644},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 39, offset: 51644},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1360, col: 39, offset: 51644},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1360, col: 50, offset: 51655},
								expr: &ruleRefExpr{
									pos:  position{line: 1360, col: 51, offset: 51656},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 9, offset: 51684},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1361, col: 31, offset: 51706},
							expr: &ruleRefExpr{
								pos:  position{line: 1361, col: 31, offset: 51706},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 35, offset: 51710},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 43, offset: 51718},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1361, col: 50, offset: 51725},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1361, col: 92, offset: 51767},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1361, col: 93, offset: 51768},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1361, col: 93, offset: 51768},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1361, col: 115, offset: 51790},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1361, col: 123, offset: 51798},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1366, col: 1, offset: 51957},
			expr: &actionExpr{
				pos: position{line: 1366, col: 44, offset: 52000},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1366, col: 44, offset: 52000},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1366, col: 50, offset: 52006},
						expr: &ruleRefExpr{
							pos:  position{line: 1366, col: 51, offset: 52007},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1370, col: 1, offset: 52091},
			expr: &actionExpr{
				pos: position{line: 1371, col: 5, offset: 52146},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1371, col: 5, offset: 52146},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1371, col: 5, offset: 52146},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1371, col: 11, offset: 52152},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1371, col: 11, offset: 52152},
									expr: &choiceExpr{
										pos: position{line: 1371, col: 12, offset: 52153},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1371, col: 12, offset: 52153},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1371, col: 24, offset: 52165},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1371, col: 34, offset: 52175},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1371, col: 34, offset: 52175},
														expr: &ruleRefExpr{
															pos:  position{line: 1371, col: 35, offset: 52176},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1371, col: 57, offset: 52198},
														expr: &ruleRefExpr{
															pos:  position{line: 1371, col: 58, offset: 52199},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1371, col: 62, offset: 52203,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1373, col: 8, offset: 52252},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1378, col: 1, offset: 52378},
			expr: &actionExpr{
				pos: position{line: 1379, col: 5, offset: 52416},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1379, col: 5, offset: 52416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1379, col: 5, offset: 52416},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1379, col: 16, offset: 52427},
								expr: &ruleRefExpr{
									pos:  position{line: 1379, col: 17, offset: 52428},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1380, col: 5, offset: 52452},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 5, offset: 52666},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1387, col: 12, offset: 52673},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1391, col: 1, offset: 52823},
			expr: &actionExpr{
				pos: position{line: 1391, col: 16, offset: 52838},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1391, col: 16, offset: 52838},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1396, col: 1, offset: 52921},
			expr: &actionExpr{
				pos: position{line: 1396, col: 39, offset: 52959},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1396, col: 39, offset: 52959},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1396, col: 45, offset: 52965},
						expr: &ruleRefExpr{
							pos:  position{line: 1396, col: 46, offset: 52966},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1400, col: 1, offset: 53046},
			expr: &actionExpr{
				pos: position{line: 1400, col: 38, offset: 53083},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 38, offset: 53083},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1400, col: 38, offset: 53083},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1400, col: 44, offset: 53089},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1400, col: 44, offset: 53089},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1400, col: 44, offset: 53089},
											expr: &ruleRefExpr{
												pos:  position{line: 1400, col: 46, offset: 53091},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1400, col: 57, offset: 53102},
											expr: &choiceExpr{
												pos: position{line: 1400, col: 58, offset: 53103},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1400, col: 58, offset: 53103},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1400, col: 70, offset: 53115},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1400, col: 80, offset: 53125},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1400, col: 80, offset: 53125},
																expr: &ruleRefExpr{
																	pos:  position{line: 1400, col: 81, offset: 53126},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1400, col: 86, offset: 53131,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1402, col: 4, offset: 53172},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1409, col: 1, offset: 53344},
			expr: &actionExpr{
				pos: position{line: 1409, col: 14, offset: 53357},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 14, offset: 53357},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1409, col: 14, offset: 53357},
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 15, offset: 53358},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1409, col: 19, offset: 53362},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1416, col: 1, offset: 53510},
			expr: &charClassMatcher{
				pos:        position{line: 1416, col: 13, offset: 53522},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1418, col: 1, offset: 53532},
			expr: &choiceExpr{
				pos: position{line: 1418, col: 16, offset: 53547},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1418, col: 16, offset: 53547},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1418, col: 22, offset: 53553},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1418, col: 28, offset: 53559},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1418, col: 34, offset: 53565},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1420, col: 1, offset: 53570},
			expr: &oneOrMoreExpr{
				pos: position{line: 1420, col: 14, offset: 53583},
				expr: &charClassMatcher{
					pos:        position{line: 1420, col: 14, offset: 53583},
					val:        "[\\pL0-9]",
					ranges:     []rune{'0', '9'},
					classes:    []*unicode.RangeTable{rangeTable("L")},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1422, col: 1, offset: 53594},
			expr: &litMatcher{
				pos:        position{line: 1422, col: 8, offset: 53601},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1424, col: 1, offset: 53606},
			expr: &actionExpr{
				pos: position{line: 1424, col: 15, offset: 53620},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1424, col: 15, offset: 53620},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1424, col: 15, offset: 53620},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1424, col: 25, offset: 53630},
							expr: &choiceExpr{
								pos: position{line: 1424, col: 27, offset: 53632},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1424, col: 27, offset: 53632},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1424, col: 32, offset: 53637},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1429, col: 1, offset: 53902},
			expr: &actionExpr{
				pos: position{line: 1429, col: 14, offset: 53915},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1429, col: 15, offset: 53916},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1429, col: 15, offset: 53916},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1429, col: 27, offset: 53928},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1429, col: 46, offset: 53947},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1429, col: 60, offset: 53961},
							expr: &actionExpr{
								pos: position{line: 1429, col: 61, offset: 53962},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1429, col: 61, offset: 53962},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1429, col: 62, offset: 53963},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1429, col: 62, offset: 53963},
													expr: &ruleRefExpr{
														pos:  position{line: 1429, col: 63, offset: 53964},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1429, col: 71, offset: 53972},
													expr: &ruleRefExpr{
														pos:  position{line: 1429, col: 72, offset: 53973},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1429, col: 75, offset: 53976},
													expr: &ruleRefExpr{
														pos:  position{line: 1429, col: 76, offset: 53977},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1429, col: 80, offset: 53981},
													expr: &ruleRefExpr{
														pos:  position{line: 1429, col: 81, offset: 53982},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1429, col: 98, offset: 53999,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1429, col: 101, offset: 54002},
											expr: &ruleRefExpr{
												pos:  position{line: 1429, col: 101, offset: 54002},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1431, col: 7, offset: 54111},
							expr: &litMatcher{
								pos:        position{line: 1431, col: 7, offset: 54111},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1435, col: 1, offset: 54292},
			expr: &oneOrMoreExpr{
				pos: position{line: 1435, col: 11, offset: 54302},
				expr: &ruleRefExpr{
					pos:  position{line: 1435, col: 11, offset: 54302},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1437, col: 1, offset: 54308},
			expr: &actionExpr{
				pos: position{line: 1437, col: 17, offset: 54324},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1437, col: 17, offset: 54324},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1437, col: 26, offset: 54333},
						expr: &choiceExpr{
							pos: position{line: 1437, col: 27, offset: 54334},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1437, col: 27, offset: 54334},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1437, col: 38, offset: 54345},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1441, col: 1, offset: 54437},
			expr: &actionExpr{
				pos: position{line: 1441, col: 13, offset: 54449},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1441, col: 13, offset: 54449},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1441, col: 23, offset: 54459},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1441, col: 23, offset: 54459},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1441, col: 34, offset: 54470},
								expr: &choiceExpr{
									pos: position{line: 1441, col: 35, offset: 54471},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1441, col: 35, offset: 54471},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1441, col: 46, offset: 54482},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1441, col: 78, offset: 54514},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1441, col: 78, offset: 54514},
													expr: &ruleRefExpr{
														pos:  position{line: 1441, col: 79, offset: 54515},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1441, col: 83, offset: 54519},
													expr: &litMatcher{
														pos:        position{line: 1441, col: 84, offset: 54520},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1441, col: 88, offset: 54524,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1445, col: 1, offset: 54589},
			expr: &oneOrMoreExpr{
				pos: position{line: 1445, col: 13, offset: 54601},
				expr: &choiceExpr{
					pos: position{line: 1445, col: 14, offset: 54602},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1445, col: 14, offset: 54602},
							name: "Alphanums",
						},
						&litMatcher{
							pos:        position{line: 1445, col: 26, offset: 54614},
							val:        ".",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1445, col: 32, offset: 54620},
							val:        "_",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1445, col: 38, offset: 54626},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1445, col: 44, offset: 54632},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1447, col: 1, offset: 54639},
			expr: &actionExpr{
				pos: position{line: 1447, col: 8, offset: 54646},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1447, col: 8, offset: 54646},
					expr: &choiceExpr{
						pos: position{line: 1447, col: 9, offset: 54647},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1447, col: 9, offset: 54647},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1447, col: 22, offset: 54660},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1447, col: 22, offset: 54660},
										expr: &ruleRefExpr{
											pos:  position{line: 1447, col: 23, offset: 54661},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1447, col: 31, offset: 54669},
										expr: &ruleRefExpr{
											pos:  position{line: 1447, col: 32, offset: 54670},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1447, col: 35, offset: 54673},
										expr: &litMatcher{
											pos:        position{line: 1447, col: 36, offset: 54674},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1447, col: 40, offset: 54678},
										expr: &litMatcher{
											pos:        position{line: 1447, col: 41, offset: 54679},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1447, col: 46, offset: 54684,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1451, col: 1, offset: 54725},
			expr: &choiceExpr{
				pos: position{line: 1451, col: 15, offset: 54739},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1451, col: 15, offset: 54739},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1451, col: 27, offset: 54751},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1451, col: 40, offset: 54764},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1451, col: 51, offset: 54775},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1451, col: 62, offset: 54786},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1453, col: 1, offset: 54797},
			expr: &actionExpr{
				pos: position{line: 1453, col: 7, offset: 54803},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1453, col: 7, offset: 54803},
					expr: &choiceExpr{
						pos: position{line: 1453, col: 8, offset: 54804},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1453, col: 8, offset: 54804},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1453, col: 21, offset: 54817},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1453, col: 21, offset: 54817},
										expr: &ruleRefExpr{
											pos:  position{line: 1453, col: 22, offset: 54818},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 30, offset: 54826},
										expr: &ruleRefExpr{
											pos:  position{line: 1453, col: 31, offset: 54827},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 34, offset: 54830},
										expr: &litMatcher{
											pos:        position{line: 1453, col: 35, offset: 54831},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 39, offset: 54835},
										expr: &litMatcher{
											pos:        position{line: 1453, col: 40, offset: 54836},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 44, offset: 54840},
										expr: &litMatcher{
											pos:        position{line: 1453, col: 45, offset: 54841},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 50, offset: 54846},
										expr: &litMatcher{
											pos:        position{line: 1453, col: 51, offset: 54847},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 56, offset: 54852},
										expr: &litMatcher{
											pos:        position{line: 1453, col: 57, offset: 54853},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1453, col: 62, offset: 54858,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1457, col: 1, offset: 54899},
			expr: &actionExpr{
				pos: position{line: 1457, col: 10, offset: 54908},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1457, col: 10, offset: 54908},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1461, col: 1, offset: 54950},
			expr: &actionExpr{
				pos: position{line: 1461, col: 11, offset: 54960},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1461, col: 11, offset: 54960},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1461, col: 11, offset: 54960},
							expr: &litMatcher{
								pos:        position{line: 1461, col: 11, offset: 54960},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1461, col: 16, offset: 54965},
							expr: &ruleRefExpr{
								pos:  position{line: 1461, col: 16, offset: 54965},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1465, col: 1, offset: 55017},
			expr: &choiceExpr{
				pos: position{line: 1465, col: 7, offset: 55023},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1465, col: 7, offset: 55023},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1465, col: 13, offset: 55029},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1465, col: 13, offset: 55029},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1469, col: 1, offset: 55070},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 12, offset: 55081},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1469, col: 12, offset: 55081},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1469, col: 21, offset: 55090},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1469, col: 28, offset: 55097},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1471, col: 1, offset: 55103},
			expr: &notExpr{
				pos: position{line: 1471, col: 8, offset: 55110},
				expr: &anyMatcher{
					line: 1471, col: 9, offset: 55111,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1473, col: 1, offset: 55114},
			expr: &choiceExpr{
				pos: position{line: 1473, col: 8, offset: 55121},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1473, col: 8, offset: 55121},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1473, col: 18, offset: 55131},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1475, col: 1, offset: 55136},
			expr: &seqExpr{
				pos: position{line: 1475, col: 9, offset: 55144},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1475, col: 9, offset: 55144},
						expr: &ruleRefExpr{
							pos:  position{line: 1475, col: 9, offset: 55144},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 13, offset: 55148},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onPreflightDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute1(key, value interface{}) (interface{}, error) {
	// value is set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges9(stack["other"])
}

func (c *current) onMultipleRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges10(stack["other"])
}

func (c *current) onMultipleQuotedRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges1(stack["first"], stack["others"])
}

func (c *current) onMultilineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineRange1(stack["start"], stack["end"])
}

func (c *current) onMultilineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSinglelineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineRange1(stack["singleline"])
}

func (c *current) onSinglelineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute16() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonLinkTextAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute16()
}

func (c *current) onLinkTextAttribute1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLinkTextAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute1(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
