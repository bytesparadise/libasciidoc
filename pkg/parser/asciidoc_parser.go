// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

// *****************************************************************************************
// This file is generated after its sibling `asciidoc-grammar.peg` file. DO NOT MODIFY !
// *****************************************************************************************

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 18, col: 1, offset: 504},
			expr: &actionExpr{
				pos: position{line: 18, col: 13, offset: 516},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 18, col: 13, offset: 516},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 18, col: 13, offset: 516},
							label: "frontMatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 18, col: 26, offset: 529},
								expr: &ruleRefExpr{
									pos:  position{line: 18, col: 26, offset: 529},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 40, offset: 543},
							label: "documentHeader",
							expr: &zeroOrOneExpr{
								pos: position{line: 18, col: 56, offset: 559},
								expr: &ruleRefExpr{
									pos:  position{line: 18, col: 56, offset: 559},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 73, offset: 576},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 18, col: 80, offset: 583},
								expr: &ruleRefExpr{
									pos:  position{line: 18, col: 81, offset: 584},
									name: "DocumentBlock",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 18, col: 97, offset: 600},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 32, col: 1, offset: 1033},
			expr: &choiceExpr{
				pos: position{line: 32, col: 18, offset: 1050},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 32, col: 18, offset: 1050},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 28, offset: 1060},
						name: "DocumentAttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 59, offset: 1091},
						name: "DocumentAttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 84, offset: 1116},
						name: "TableOfContentsMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 107, offset: 1139},
						name: "BlockImage",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 120, offset: 1152},
						name: "List",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 127, offset: 1159},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 142, offset: 1174},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 159, offset: 1191},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 171, offset: 1203},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "Preamble",
			pos:  position{line: 34, col: 1, offset: 1276},
			expr: &actionExpr{
				pos: position{line: 34, col: 13, offset: 1288},
				run: (*parser).callonPreamble1,
				expr: &labeledExpr{
					pos:   position{line: 34, col: 13, offset: 1288},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 34, col: 23, offset: 1298},
						expr: &ruleRefExpr{
							pos:  position{line: 34, col: 23, offset: 1298},
							name: "DocumentBlock",
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 44, col: 1, offset: 1485},
			expr: &ruleRefExpr{
				pos:  position{line: 44, col: 16, offset: 1500},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 46, col: 1, offset: 1518},
			expr: &actionExpr{
				pos: position{line: 46, col: 16, offset: 1533},
				run: (*parser).callonFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 46, col: 16, offset: 1533},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 46, col: 16, offset: 1533},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 46, col: 37, offset: 1554},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 46, offset: 1563},
								name: "YamlFrontMatterContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 70, offset: 1587},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 50, col: 1, offset: 1667},
			expr: &seqExpr{
				pos: position{line: 50, col: 26, offset: 1692},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 50, col: 26, offset: 1692},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 32, offset: 1698},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 52, col: 1, offset: 1703},
			expr: &actionExpr{
				pos: position{line: 52, col: 27, offset: 1729},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 52, col: 27, offset: 1729},
					expr: &seqExpr{
						pos: position{line: 52, col: 28, offset: 1730},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 52, col: 28, offset: 1730},
								expr: &ruleRefExpr{
									pos:  position{line: 52, col: 29, offset: 1731},
									name: "YamlFrontMatterToken",
								},
							},
							&anyMatcher{
								line: 52, col: 50, offset: 1752,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 60, col: 1, offset: 1976},
			expr: &actionExpr{
				pos: position{line: 60, col: 19, offset: 1994},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 60, col: 19, offset: 1994},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 60, col: 19, offset: 1994},
							label: "header",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 27, offset: 2002},
								name: "DocumentTitle",
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 42, offset: 2017},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 60, col: 51, offset: 2026},
								expr: &ruleRefExpr{
									pos:  position{line: 60, col: 51, offset: 2026},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 69, offset: 2044},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 60, col: 79, offset: 2054},
								expr: &ruleRefExpr{
									pos:  position{line: 60, col: 79, offset: 2054},
									name: "DocumentRevision",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 60, col: 98, offset: 2073},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 60, col: 115, offset: 2090},
								expr: &ruleRefExpr{
									pos:  position{line: 60, col: 115, offset: 2090},
									name: "DocumentAttributeDeclaration",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 64, col: 1, offset: 2221},
			expr: &actionExpr{
				pos: position{line: 64, col: 18, offset: 2238},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 64, col: 18, offset: 2238},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 64, col: 18, offset: 2238},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 64, col: 29, offset: 2249},
								expr: &ruleRefExpr{
									pos:  position{line: 64, col: 30, offset: 2250},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 64, col: 49, offset: 2269},
							label: "level",
							expr: &litMatcher{
								pos:        position{line: 64, col: 56, offset: 2276},
								val:        "=",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 64, col: 61, offset: 2281},
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 61, offset: 2281},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 64, col: 65, offset: 2285},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 74, offset: 2294},
								name: "InlineElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 64, col: 90, offset: 2310},
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 90, offset: 2310},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 64, col: 94, offset: 2314},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 64, col: 97, offset: 2317},
								expr: &ruleRefExpr{
									pos:  position{line: 64, col: 98, offset: 2318},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 64, col: 116, offset: 2336},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 68, col: 1, offset: 2452},
			expr: &choiceExpr{
				pos: position{line: 68, col: 20, offset: 2471},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 68, col: 20, offset: 2471},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 48, offset: 2499},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 70, col: 1, offset: 2529},
			expr: &actionExpr{
				pos: position{line: 70, col: 30, offset: 2558},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 70, col: 30, offset: 2558},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 70, col: 30, offset: 2558},
							expr: &ruleRefExpr{
								pos:  position{line: 70, col: 30, offset: 2558},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 70, col: 34, offset: 2562},
							expr: &litMatcher{
								pos:        position{line: 70, col: 35, offset: 2563},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 70, col: 39, offset: 2567},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 70, col: 48, offset: 2576},
								expr: &ruleRefExpr{
									pos:  position{line: 70, col: 48, offset: 2576},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 70, col: 65, offset: 2593},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 74, col: 1, offset: 2663},
			expr: &actionExpr{
				pos: position{line: 74, col: 33, offset: 2695},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 74, col: 33, offset: 2695},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 74, col: 33, offset: 2695},
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 33, offset: 2695},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 74, col: 37, offset: 2699},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 74, col: 48, offset: 2710},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 56, offset: 2718},
								name: "DocumentAuthor",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 78, col: 1, offset: 2809},
			expr: &actionExpr{
				pos: position{line: 78, col: 19, offset: 2827},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 78, col: 19, offset: 2827},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 78, col: 19, offset: 2827},
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 19, offset: 2827},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 78, col: 23, offset: 2831},
							label: "namePart1",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 34, offset: 2842},
								name: "DocumentAuthorNamePart",
							},
						},
						&labeledExpr{
							pos:   position{line: 78, col: 58, offset: 2866},
							label: "namePart2",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 68, offset: 2876},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 69, offset: 2877},
									name: "DocumentAuthorNamePart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 78, col: 94, offset: 2902},
							label: "namePart3",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 104, offset: 2912},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 105, offset: 2913},
									name: "DocumentAuthorNamePart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 78, col: 130, offset: 2938},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 136, offset: 2944},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 137, offset: 2945},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 78, col: 159, offset: 2967},
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 159, offset: 2967},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 78, col: 163, offset: 2971},
							expr: &litMatcher{
								pos:        position{line: 78, col: 163, offset: 2971},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 78, col: 168, offset: 2976},
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 168, offset: 2976},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorNamePart",
			pos:  position{line: 83, col: 1, offset: 3141},
			expr: &seqExpr{
				pos: position{line: 83, col: 27, offset: 3167},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 83, col: 27, offset: 3167},
						expr: &litMatcher{
							pos:        position{line: 83, col: 28, offset: 3168},
							val:        "<",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 83, col: 32, offset: 3172},
						expr: &litMatcher{
							pos:        position{line: 83, col: 33, offset: 3173},
							val:        ";",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 83, col: 37, offset: 3177},
						name: "Word",
					},
					&zeroOrMoreExpr{
						pos: position{line: 83, col: 42, offset: 3182},
						expr: &ruleRefExpr{
							pos:  position{line: 83, col: 42, offset: 3182},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 85, col: 1, offset: 3187},
			expr: &seqExpr{
				pos: position{line: 85, col: 24, offset: 3210},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 85, col: 24, offset: 3210},
						val:        "<",
						ignoreCase: false,
					},
					&labeledExpr{
						pos:   position{line: 85, col: 28, offset: 3214},
						label: "email",
						expr: &oneOrMoreExpr{
							pos: position{line: 85, col: 34, offset: 3220},
							expr: &seqExpr{
								pos: position{line: 85, col: 35, offset: 3221},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 85, col: 35, offset: 3221},
										expr: &litMatcher{
											pos:        position{line: 85, col: 36, offset: 3222},
											val:        ">",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 85, col: 40, offset: 3226},
										expr: &ruleRefExpr{
											pos:  position{line: 85, col: 41, offset: 3227},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 85, col: 45, offset: 3231,
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 85, col: 49, offset: 3235},
						val:        ">",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 89, col: 1, offset: 3371},
			expr: &actionExpr{
				pos: position{line: 89, col: 21, offset: 3391},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 89, col: 21, offset: 3391},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 89, col: 21, offset: 3391},
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 21, offset: 3391},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 89, col: 25, offset: 3395},
							expr: &litMatcher{
								pos:        position{line: 89, col: 26, offset: 3396},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 30, offset: 3400},
							label: "revnumber",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 40, offset: 3410},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 41, offset: 3411},
									name: "DocumentRevisionNumber",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 89, col: 66, offset: 3436},
							expr: &litMatcher{
								pos:        position{line: 89, col: 66, offset: 3436},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 71, offset: 3441},
							label: "revdate",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 79, offset: 3449},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 80, offset: 3450},
									name: "DocumentRevisionDate",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 89, col: 103, offset: 3473},
							expr: &litMatcher{
								pos:        position{line: 89, col: 103, offset: 3473},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 108, offset: 3478},
							label: "revremark",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 118, offset: 3488},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 119, offset: 3489},
									name: "DocumentRevisionRemark",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 144, offset: 3514},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 94, col: 1, offset: 3687},
			expr: &choiceExpr{
				pos: position{line: 94, col: 27, offset: 3713},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 94, col: 27, offset: 3713},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 94, col: 27, offset: 3713},
								val:        "v",
								ignoreCase: true,
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 32, offset: 3718},
								name: "DIGIT",
							},
							&zeroOrMoreExpr{
								pos: position{line: 94, col: 39, offset: 3725},
								expr: &seqExpr{
									pos: position{line: 94, col: 40, offset: 3726},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 94, col: 40, offset: 3726},
											expr: &ruleRefExpr{
												pos:  position{line: 94, col: 41, offset: 3727},
												name: "EOL",
											},
										},
										&notExpr{
											pos: position{line: 94, col: 45, offset: 3731},
											expr: &litMatcher{
												pos:        position{line: 94, col: 46, offset: 3732},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 94, col: 50, offset: 3736},
											expr: &litMatcher{
												pos:        position{line: 94, col: 51, offset: 3737},
												val:        ":",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 94, col: 55, offset: 3741,
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 94, col: 61, offset: 3747},
						exprs: []interface{}{
							&zeroOrOneExpr{
								pos: position{line: 94, col: 61, offset: 3747},
								expr: &litMatcher{
									pos:        position{line: 94, col: 61, offset: 3747},
									val:        "v",
									ignoreCase: true,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 67, offset: 3753},
								name: "DIGIT",
							},
							&zeroOrMoreExpr{
								pos: position{line: 94, col: 74, offset: 3760},
								expr: &seqExpr{
									pos: position{line: 94, col: 75, offset: 3761},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 94, col: 75, offset: 3761},
											expr: &ruleRefExpr{
												pos:  position{line: 94, col: 76, offset: 3762},
												name: "EOL",
											},
										},
										&notExpr{
											pos: position{line: 94, col: 80, offset: 3766},
											expr: &litMatcher{
												pos:        position{line: 94, col: 81, offset: 3767},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 94, col: 85, offset: 3771},
											expr: &litMatcher{
												pos:        position{line: 94, col: 86, offset: 3772},
												val:        ":",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 94, col: 90, offset: 3776,
										},
									},
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 94, col: 94, offset: 3780},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 94, offset: 3780},
									name: "WS",
								},
							},
							&andExpr{
								pos: position{line: 94, col: 98, offset: 3784},
								expr: &litMatcher{
									pos:        position{line: 94, col: 99, offset: 3785},
									val:        ",",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 95, col: 1, offset: 3789},
			expr: &zeroOrMoreExpr{
				pos: position{line: 95, col: 25, offset: 3813},
				expr: &seqExpr{
					pos: position{line: 95, col: 26, offset: 3814},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 95, col: 26, offset: 3814},
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 27, offset: 3815},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 95, col: 31, offset: 3819},
							expr: &litMatcher{
								pos:        position{line: 95, col: 32, offset: 3820},
								val:        ":",
								ignoreCase: false,
							},
						},
						&anyMatcher{
							line: 95, col: 36, offset: 3824,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 96, col: 1, offset: 3829},
			expr: &zeroOrMoreExpr{
				pos: position{line: 96, col: 27, offset: 3855},
				expr: &seqExpr{
					pos: position{line: 96, col: 28, offset: 3856},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 96, col: 28, offset: 3856},
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 29, offset: 3857},
								name: "EOL",
							},
						},
						&anyMatcher{
							line: 96, col: 33, offset: 3861,
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 101, col: 1, offset: 3981},
			expr: &choiceExpr{
				pos: position{line: 101, col: 33, offset: 4013},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 101, col: 33, offset: 4013},
						name: "DocumentAttributeDeclarationWithNameOnly",
					},
					&ruleRefExpr{
						pos:  position{line: 101, col: 76, offset: 4056},
						name: "DocumentAttributeDeclarationWithNameAndValue",
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclarationWithNameOnly",
			pos:  position{line: 103, col: 1, offset: 4103},
			expr: &actionExpr{
				pos: position{line: 103, col: 45, offset: 4147},
				run: (*parser).callonDocumentAttributeDeclarationWithNameOnly1,
				expr: &seqExpr{
					pos: position{line: 103, col: 45, offset: 4147},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 103, col: 45, offset: 4147},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 103, col: 49, offset: 4151},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 55, offset: 4157},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 103, col: 70, offset: 4172},
							val:        ":",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 103, col: 74, offset: 4176},
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 74, offset: 4176},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 78, offset: 4180},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclarationWithNameAndValue",
			pos:  position{line: 107, col: 1, offset: 4265},
			expr: &actionExpr{
				pos: position{line: 107, col: 49, offset: 4313},
				run: (*parser).callonDocumentAttributeDeclarationWithNameAndValue1,
				expr: &seqExpr{
					pos: position{line: 107, col: 49, offset: 4313},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 107, col: 49, offset: 4313},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 107, col: 53, offset: 4317},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 59, offset: 4323},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 107, col: 74, offset: 4338},
							val:        ":",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 107, col: 78, offset: 4342},
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 78, offset: 4342},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 82, offset: 4346},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 88, offset: 4352},
								expr: &seqExpr{
									pos: position{line: 107, col: 89, offset: 4353},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 107, col: 89, offset: 4353},
											expr: &ruleRefExpr{
												pos:  position{line: 107, col: 90, offset: 4354},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 107, col: 98, offset: 4362,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 102, offset: 4366},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 111, col: 1, offset: 4469},
			expr: &choiceExpr{
				pos: position{line: 111, col: 27, offset: 4495},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 111, col: 27, offset: 4495},
						name: "DocumentAttributeResetWithSectionTitleBangSymbol",
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 78, offset: 4546},
						name: "DocumentAttributeResetWithTrailingBangSymbol",
					},
				},
			},
		},
		{
			name: "DocumentAttributeResetWithSectionTitleBangSymbol",
			pos:  position{line: 113, col: 1, offset: 4592},
			expr: &actionExpr{
				pos: position{line: 113, col: 53, offset: 4644},
				run: (*parser).callonDocumentAttributeResetWithSectionTitleBangSymbol1,
				expr: &seqExpr{
					pos: position{line: 113, col: 53, offset: 4644},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 113, col: 53, offset: 4644},
							val:        ":!",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 113, col: 58, offset: 4649},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 113, col: 64, offset: 4655},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 113, col: 79, offset: 4670},
							val:        ":",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 113, col: 83, offset: 4674},
							expr: &ruleRefExpr{
								pos:  position{line: 113, col: 83, offset: 4674},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 113, col: 87, offset: 4678},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeResetWithTrailingBangSymbol",
			pos:  position{line: 117, col: 1, offset: 4752},
			expr: &actionExpr{
				pos: position{line: 117, col: 49, offset: 4800},
				run: (*parser).callonDocumentAttributeResetWithTrailingBangSymbol1,
				expr: &seqExpr{
					pos: position{line: 117, col: 49, offset: 4800},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 117, col: 49, offset: 4800},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 117, col: 53, offset: 4804},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 59, offset: 4810},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 117, col: 74, offset: 4825},
							val:        "!:",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 117, col: 79, offset: 4830},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 79, offset: 4830},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 83, offset: 4834},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 121, col: 1, offset: 4908},
			expr: &actionExpr{
				pos: position{line: 121, col: 34, offset: 4941},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 121, col: 34, offset: 4941},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 121, col: 34, offset: 4941},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 121, col: 38, offset: 4945},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 44, offset: 4951},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 59, offset: 4966},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 128, col: 1, offset: 5214},
			expr: &seqExpr{
				pos: position{line: 128, col: 18, offset: 5231},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 128, col: 19, offset: 5232},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 128, col: 19, offset: 5232},
								val:        "[A-Z]",
								ranges:     []rune{'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
							&charClassMatcher{
								pos:        position{line: 128, col: 27, offset: 5240},
								val:        "[a-z]",
								ranges:     []rune{'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
							&charClassMatcher{
								pos:        position{line: 128, col: 35, offset: 5248},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 128, col: 43, offset: 5256},
								val:        "_",
								ignoreCase: false,
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 128, col: 48, offset: 5261},
						expr: &choiceExpr{
							pos: position{line: 128, col: 49, offset: 5262},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 128, col: 49, offset: 5262},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 128, col: 57, offset: 5270},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 128, col: 65, offset: 5278},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 128, col: 73, offset: 5286},
									val:        "-",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 133, col: 1, offset: 5406},
			expr: &seqExpr{
				pos: position{line: 133, col: 25, offset: 5430},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 133, col: 25, offset: 5430},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 35, offset: 5440},
						name: "NEWLINE",
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 138, col: 1, offset: 5563},
			expr: &actionExpr{
				pos: position{line: 138, col: 21, offset: 5583},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 138, col: 21, offset: 5583},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 138, col: 21, offset: 5583},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 138, col: 27, offset: 5589},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 138, col: 27, offset: 5589},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 138, col: 39, offset: 5601},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 138, col: 54, offset: 5616},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 138, col: 82, offset: 5644},
										name: "AttributeGroup",
									},
									&ruleRefExpr{
										pos:  position{line: 138, col: 99, offset: 5661},
										name: "InvalidElementAttribute",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 138, col: 124, offset: 5686},
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 124, offset: 5686},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 128, offset: 5690},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 142, col: 1, offset: 5781},
			expr: &choiceExpr{
				pos: position{line: 142, col: 14, offset: 5794},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 142, col: 14, offset: 5794},
						run: (*parser).callonElementID2,
						expr: &labeledExpr{
							pos:   position{line: 142, col: 14, offset: 5794},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 18, offset: 5798},
								name: "InlineElementID",
							},
						},
					},
					&actionExpr{
						pos: position{line: 144, col: 5, offset: 5840},
						run: (*parser).callonElementID5,
						expr: &seqExpr{
							pos: position{line: 144, col: 5, offset: 5840},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 144, col: 5, offset: 5840},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 144, col: 10, offset: 5845},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 14, offset: 5849},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 144, col: 18, offset: 5853},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 148, col: 1, offset: 5905},
			expr: &actionExpr{
				pos: position{line: 148, col: 20, offset: 5924},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 148, col: 20, offset: 5924},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 148, col: 20, offset: 5924},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 148, col: 25, offset: 5929},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 148, col: 29, offset: 5933},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 148, col: 33, offset: 5937},
							val:        "]]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 154, col: 1, offset: 6132},
			expr: &actionExpr{
				pos: position{line: 154, col: 17, offset: 6148},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 154, col: 17, offset: 6148},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 154, col: 17, offset: 6148},
							val:        ".",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 154, col: 21, offset: 6152},
							expr: &litMatcher{
								pos:        position{line: 154, col: 22, offset: 6153},
								val:        ".",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 154, col: 26, offset: 6157},
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 27, offset: 6158},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 30, offset: 6161},
							label: "title",
							expr: &oneOrMoreExpr{
								pos: position{line: 154, col: 36, offset: 6167},
								expr: &seqExpr{
									pos: position{line: 154, col: 37, offset: 6168},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 154, col: 37, offset: 6168},
											expr: &ruleRefExpr{
												pos:  position{line: 154, col: 38, offset: 6169},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 154, col: 46, offset: 6177,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 159, col: 1, offset: 6322},
			expr: &actionExpr{
				pos: position{line: 159, col: 30, offset: 6351},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 159, col: 30, offset: 6351},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 159, col: 30, offset: 6351},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 159, col: 34, offset: 6355},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 159, col: 37, offset: 6358},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 159, col: 53, offset: 6374},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 164, col: 1, offset: 6469},
			expr: &actionExpr{
				pos: position{line: 164, col: 19, offset: 6487},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 164, col: 19, offset: 6487},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 19, offset: 6487},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 23, offset: 6491},
							label: "attribute",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 34, offset: 6502},
								name: "GenericAttribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 52, offset: 6520},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 164, col: 63, offset: 6531},
								expr: &ruleRefExpr{
									pos:  position{line: 164, col: 64, offset: 6532},
									name: "OtherGenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 164, col: 89, offset: 6557},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 168, col: 1, offset: 6666},
			expr: &choiceExpr{
				pos: position{line: 168, col: 21, offset: 6686},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 168, col: 21, offset: 6686},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 168, col: 21, offset: 6686},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 168, col: 21, offset: 6686},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 26, offset: 6691},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 168, col: 40, offset: 6705},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 168, col: 44, offset: 6709},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 51, offset: 6716},
										name: "AttributeValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 170, col: 5, offset: 6835},
						run: (*parser).callonGenericAttribute9,
						expr: &labeledExpr{
							pos:   position{line: 170, col: 5, offset: 6835},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 10, offset: 6840},
								name: "AttributeKey",
							},
						},
					},
				},
			},
		},
		{
			name: "OtherGenericAttribute",
			pos:  position{line: 174, col: 1, offset: 6942},
			expr: &choiceExpr{
				pos: position{line: 174, col: 26, offset: 6967},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 174, col: 26, offset: 6967},
						run: (*parser).callonOtherGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 174, col: 26, offset: 6967},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 174, col: 26, offset: 6967},
									val:        ",",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 174, col: 30, offset: 6971},
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 30, offset: 6971},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 174, col: 34, offset: 6975},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 39, offset: 6980},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 174, col: 53, offset: 6994},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 174, col: 57, offset: 6998},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 64, offset: 7005},
										name: "AttributeValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 176, col: 5, offset: 7124},
						run: (*parser).callonOtherGenericAttribute12,
						expr: &seqExpr{
							pos: position{line: 176, col: 5, offset: 7124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 176, col: 5, offset: 7124},
									val:        ",",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 176, col: 9, offset: 7128},
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 9, offset: 7128},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 176, col: 13, offset: 7132},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 18, offset: 7137},
										name: "AttributeKey",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 182, col: 1, offset: 7241},
			expr: &actionExpr{
				pos: position{line: 182, col: 17, offset: 7257},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 182, col: 17, offset: 7257},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 182, col: 17, offset: 7257},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 182, col: 22, offset: 7262},
								expr: &seqExpr{
									pos: position{line: 182, col: 23, offset: 7263},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 182, col: 23, offset: 7263},
											expr: &ruleRefExpr{
												pos:  position{line: 182, col: 24, offset: 7264},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 182, col: 27, offset: 7267},
											expr: &litMatcher{
												pos:        position{line: 182, col: 28, offset: 7268},
												val:        "=",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 182, col: 32, offset: 7272},
											expr: &litMatcher{
												pos:        position{line: 182, col: 33, offset: 7273},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 182, col: 37, offset: 7277},
											expr: &litMatcher{
												pos:        position{line: 182, col: 38, offset: 7278},
												val:        "]",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 182, col: 42, offset: 7282,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 182, col: 46, offset: 7286},
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 46, offset: 7286},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 187, col: 1, offset: 7368},
			expr: &actionExpr{
				pos: position{line: 187, col: 19, offset: 7386},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 187, col: 19, offset: 7386},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 187, col: 19, offset: 7386},
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 19, offset: 7386},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 187, col: 23, offset: 7390},
							label: "value",
							expr: &zeroOrMoreExpr{
								pos: position{line: 187, col: 29, offset: 7396},
								expr: &seqExpr{
									pos: position{line: 187, col: 30, offset: 7397},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 187, col: 30, offset: 7397},
											expr: &ruleRefExpr{
												pos:  position{line: 187, col: 31, offset: 7398},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 187, col: 34, offset: 7401},
											expr: &litMatcher{
												pos:        position{line: 187, col: 35, offset: 7402},
												val:        "=",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 187, col: 39, offset: 7406},
											expr: &litMatcher{
												pos:        position{line: 187, col: 40, offset: 7407},
												val:        "]",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 187, col: 44, offset: 7411,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 187, col: 48, offset: 7415},
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 48, offset: 7415},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "InvalidElementAttribute",
			pos:  position{line: 192, col: 1, offset: 7502},
			expr: &actionExpr{
				pos: position{line: 192, col: 28, offset: 7529},
				run: (*parser).callonInvalidElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 192, col: 28, offset: 7529},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 192, col: 28, offset: 7529},
							val:        "[",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 192, col: 32, offset: 7533},
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 32, offset: 7533},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 192, col: 36, offset: 7537},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 192, col: 44, offset: 7545},
								expr: &seqExpr{
									pos: position{line: 192, col: 45, offset: 7546},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 192, col: 45, offset: 7546},
											expr: &litMatcher{
												pos:        position{line: 192, col: 46, offset: 7547},
												val:        "]",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 192, col: 50, offset: 7551,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 192, col: 54, offset: 7555},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 192, col: 58, offset: 7559},
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 58, offset: 7559},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 199, col: 1, offset: 7724},
			expr: &choiceExpr{
				pos: position{line: 199, col: 12, offset: 7735},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 12, offset: 7735},
						name: "Section0",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 23, offset: 7746},
						name: "Section1",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 34, offset: 7757},
						name: "Section2",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 45, offset: 7768},
						name: "Section3",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 56, offset: 7779},
						name: "Section4",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 67, offset: 7790},
						name: "Section5",
					},
				},
			},
		},
		{
			name: "Section0",
			pos:  position{line: 202, col: 1, offset: 7801},
			expr: &actionExpr{
				pos: position{line: 202, col: 13, offset: 7813},
				run: (*parser).callonSection01,
				expr: &seqExpr{
					pos: position{line: 202, col: 13, offset: 7813},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 202, col: 13, offset: 7813},
							label: "header",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 21, offset: 7821},
								name: "Section0Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 202, col: 36, offset: 7836},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 202, col: 46, offset: 7846},
								expr: &ruleRefExpr{
									pos:  position{line: 202, col: 46, offset: 7846},
									name: "Section0Block",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section0Title",
			pos:  position{line: 206, col: 1, offset: 7953},
			expr: &actionExpr{
				pos: position{line: 206, col: 18, offset: 7970},
				run: (*parser).callonSection0Title1,
				expr: &seqExpr{
					pos: position{line: 206, col: 18, offset: 7970},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 206, col: 18, offset: 7970},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 206, col: 29, offset: 7981},
								expr: &ruleRefExpr{
									pos:  position{line: 206, col: 30, offset: 7982},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 49, offset: 8001},
							label: "level",
							expr: &litMatcher{
								pos:        position{line: 206, col: 56, offset: 8008},
								val:        "=",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 206, col: 61, offset: 8013},
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 61, offset: 8013},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 65, offset: 8017},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 74, offset: 8026},
								name: "InlineElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 206, col: 90, offset: 8042},
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 90, offset: 8042},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 94, offset: 8046},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 206, col: 97, offset: 8049},
								expr: &ruleRefExpr{
									pos:  position{line: 206, col: 98, offset: 8050},
									name: "InlineElementID",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 206, col: 116, offset: 8068},
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 116, offset: 8068},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 206, col: 120, offset: 8072},
							name: "EOL",
						},
						&choiceExpr{
							pos: position{line: 206, col: 125, offset: 8077},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 206, col: 125, offset: 8077},
									expr: &zeroOrOneExpr{
										pos: position{line: 206, col: 126, offset: 8078},
										expr: &ruleRefExpr{
											pos:  position{line: 206, col: 126, offset: 8078},
											name: "BlankLine",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 206, col: 139, offset: 8091},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section0Block",
			pos:  position{line: 210, col: 1, offset: 8207},
			expr: &actionExpr{
				pos: position{line: 210, col: 18, offset: 8224},
				run: (*parser).callonSection0Block1,
				expr: &seqExpr{
					pos: position{line: 210, col: 18, offset: 8224},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 210, col: 18, offset: 8224},
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 19, offset: 8225},
								name: "Section0",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 28, offset: 8234},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 210, col: 37, offset: 8243},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 210, col: 37, offset: 8243},
										name: "Section1",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 48, offset: 8254},
										name: "Section2",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 59, offset: 8265},
										name: "Section3",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 70, offset: 8276},
										name: "Section4",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 81, offset: 8287},
										name: "Section5",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 92, offset: 8298},
										name: "DocumentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section1",
			pos:  position{line: 214, col: 1, offset: 8342},
			expr: &actionExpr{
				pos: position{line: 214, col: 13, offset: 8354},
				run: (*parser).callonSection11,
				expr: &seqExpr{
					pos: position{line: 214, col: 13, offset: 8354},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 214, col: 13, offset: 8354},
							label: "header",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 21, offset: 8362},
								name: "Section1Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 36, offset: 8377},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 214, col: 46, offset: 8387},
								expr: &ruleRefExpr{
									pos:  position{line: 214, col: 46, offset: 8387},
									name: "Section1Block",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section1Title",
			pos:  position{line: 218, col: 1, offset: 8494},
			expr: &actionExpr{
				pos: position{line: 218, col: 18, offset: 8511},
				run: (*parser).callonSection1Title1,
				expr: &seqExpr{
					pos: position{line: 218, col: 18, offset: 8511},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 218, col: 18, offset: 8511},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 218, col: 29, offset: 8522},
								expr: &ruleRefExpr{
									pos:  position{line: 218, col: 30, offset: 8523},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 49, offset: 8542},
							label: "level",
							expr: &litMatcher{
								pos:        position{line: 218, col: 56, offset: 8549},
								val:        "==",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 218, col: 62, offset: 8555},
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 62, offset: 8555},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 66, offset: 8559},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 75, offset: 8568},
								name: "InlineElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 218, col: 91, offset: 8584},
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 91, offset: 8584},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 95, offset: 8588},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 218, col: 98, offset: 8591},
								expr: &ruleRefExpr{
									pos:  position{line: 218, col: 99, offset: 8592},
									name: "InlineElementID",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 218, col: 117, offset: 8610},
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 117, offset: 8610},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 121, offset: 8614},
							name: "EOL",
						},
						&choiceExpr{
							pos: position{line: 218, col: 126, offset: 8619},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 218, col: 126, offset: 8619},
									expr: &zeroOrOneExpr{
										pos: position{line: 218, col: 127, offset: 8620},
										expr: &ruleRefExpr{
											pos:  position{line: 218, col: 127, offset: 8620},
											name: "BlankLine",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 218, col: 140, offset: 8633},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section1Block",
			pos:  position{line: 222, col: 1, offset: 8749},
			expr: &actionExpr{
				pos: position{line: 222, col: 18, offset: 8766},
				run: (*parser).callonSection1Block1,
				expr: &seqExpr{
					pos: position{line: 222, col: 18, offset: 8766},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 222, col: 18, offset: 8766},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 19, offset: 8767},
								name: "Section1",
							},
						},
						&labeledExpr{
							pos:   position{line: 222, col: 28, offset: 8776},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 222, col: 37, offset: 8785},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 222, col: 37, offset: 8785},
										name: "Section2",
									},
									&ruleRefExpr{
										pos:  position{line: 222, col: 48, offset: 8796},
										name: "Section3",
									},
									&ruleRefExpr{
										pos:  position{line: 222, col: 59, offset: 8807},
										name: "Section4",
									},
									&ruleRefExpr{
										pos:  position{line: 222, col: 70, offset: 8818},
										name: "Section5",
									},
									&ruleRefExpr{
										pos:  position{line: 222, col: 81, offset: 8829},
										name: "DocumentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section2",
			pos:  position{line: 226, col: 1, offset: 8873},
			expr: &actionExpr{
				pos: position{line: 226, col: 13, offset: 8885},
				run: (*parser).callonSection21,
				expr: &seqExpr{
					pos: position{line: 226, col: 13, offset: 8885},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 226, col: 13, offset: 8885},
							label: "header",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 21, offset: 8893},
								name: "Section2Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 36, offset: 8908},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 46, offset: 8918},
								expr: &ruleRefExpr{
									pos:  position{line: 226, col: 46, offset: 8918},
									name: "Section2Block",
								},
							},
						},
						&andExpr{
							pos: position{line: 226, col: 62, offset: 8934},
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 63, offset: 8935},
								expr: &ruleRefExpr{
									pos:  position{line: 226, col: 64, offset: 8936},
									name: "Section2",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section2Title",
			pos:  position{line: 230, col: 1, offset: 9038},
			expr: &actionExpr{
				pos: position{line: 230, col: 18, offset: 9055},
				run: (*parser).callonSection2Title1,
				expr: &seqExpr{
					pos: position{line: 230, col: 18, offset: 9055},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 230, col: 18, offset: 9055},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 230, col: 29, offset: 9066},
								expr: &ruleRefExpr{
									pos:  position{line: 230, col: 30, offset: 9067},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 230, col: 49, offset: 9086},
							label: "level",
							expr: &litMatcher{
								pos:        position{line: 230, col: 56, offset: 9093},
								val:        "===",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 230, col: 63, offset: 9100},
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 63, offset: 9100},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 230, col: 67, offset: 9104},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 76, offset: 9113},
								name: "InlineElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 230, col: 92, offset: 9129},
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 92, offset: 9129},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 230, col: 96, offset: 9133},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 230, col: 99, offset: 9136},
								expr: &ruleRefExpr{
									pos:  position{line: 230, col: 100, offset: 9137},
									name: "InlineElementID",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 230, col: 118, offset: 9155},
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 118, offset: 9155},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 122, offset: 9159},
							name: "EOL",
						},
						&choiceExpr{
							pos: position{line: 230, col: 127, offset: 9164},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 230, col: 127, offset: 9164},
									expr: &zeroOrOneExpr{
										pos: position{line: 230, col: 128, offset: 9165},
										expr: &ruleRefExpr{
											pos:  position{line: 230, col: 128, offset: 9165},
											name: "BlankLine",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 230, col: 141, offset: 9178},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section2Block",
			pos:  position{line: 234, col: 1, offset: 9293},
			expr: &actionExpr{
				pos: position{line: 234, col: 18, offset: 9310},
				run: (*parser).callonSection2Block1,
				expr: &seqExpr{
					pos: position{line: 234, col: 18, offset: 9310},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 234, col: 18, offset: 9310},
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 19, offset: 9311},
								name: "Section1",
							},
						},
						&notExpr{
							pos: position{line: 234, col: 28, offset: 9320},
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 29, offset: 9321},
								name: "Section2",
							},
						},
						&labeledExpr{
							pos:   position{line: 234, col: 38, offset: 9330},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 234, col: 47, offset: 9339},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 234, col: 47, offset: 9339},
										name: "Section3",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 58, offset: 9350},
										name: "Section4",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 69, offset: 9361},
										name: "Section5",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 80, offset: 9372},
										name: "DocumentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section3",
			pos:  position{line: 238, col: 1, offset: 9416},
			expr: &actionExpr{
				pos: position{line: 238, col: 13, offset: 9428},
				run: (*parser).callonSection31,
				expr: &seqExpr{
					pos: position{line: 238, col: 13, offset: 9428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 238, col: 13, offset: 9428},
							label: "header",
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 21, offset: 9436},
								name: "Section3Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 238, col: 36, offset: 9451},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 238, col: 46, offset: 9461},
								expr: &ruleRefExpr{
									pos:  position{line: 238, col: 46, offset: 9461},
									name: "Section3Block",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section3Title",
			pos:  position{line: 242, col: 1, offset: 9568},
			expr: &actionExpr{
				pos: position{line: 242, col: 18, offset: 9585},
				run: (*parser).callonSection3Title1,
				expr: &seqExpr{
					pos: position{line: 242, col: 18, offset: 9585},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 242, col: 18, offset: 9585},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 242, col: 29, offset: 9596},
								expr: &ruleRefExpr{
									pos:  position{line: 242, col: 30, offset: 9597},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 242, col: 49, offset: 9616},
							label: "level",
							expr: &litMatcher{
								pos:        position{line: 242, col: 56, offset: 9623},
								val:        "====",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 242, col: 64, offset: 9631},
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 64, offset: 9631},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 242, col: 68, offset: 9635},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 77, offset: 9644},
								name: "InlineElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 242, col: 93, offset: 9660},
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 93, offset: 9660},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 242, col: 97, offset: 9664},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 242, col: 100, offset: 9667},
								expr: &ruleRefExpr{
									pos:  position{line: 242, col: 101, offset: 9668},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 119, offset: 9686},
							name: "EOL",
						},
						&choiceExpr{
							pos: position{line: 242, col: 124, offset: 9691},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 242, col: 124, offset: 9691},
									expr: &zeroOrOneExpr{
										pos: position{line: 242, col: 125, offset: 9692},
										expr: &ruleRefExpr{
											pos:  position{line: 242, col: 125, offset: 9692},
											name: "BlankLine",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 242, col: 138, offset: 9705},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section3Block",
			pos:  position{line: 246, col: 1, offset: 9820},
			expr: &actionExpr{
				pos: position{line: 246, col: 18, offset: 9837},
				run: (*parser).callonSection3Block1,
				expr: &seqExpr{
					pos: position{line: 246, col: 18, offset: 9837},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 246, col: 18, offset: 9837},
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 19, offset: 9838},
								name: "Section1",
							},
						},
						&notExpr{
							pos: position{line: 246, col: 28, offset: 9847},
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 29, offset: 9848},
								name: "Section2",
							},
						},
						&notExpr{
							pos: position{line: 246, col: 38, offset: 9857},
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 39, offset: 9858},
								name: "Section3",
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 48, offset: 9867},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 246, col: 57, offset: 9876},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 246, col: 57, offset: 9876},
										name: "Section4",
									},
									&ruleRefExpr{
										pos:  position{line: 246, col: 68, offset: 9887},
										name: "Section5",
									},
									&ruleRefExpr{
										pos:  position{line: 246, col: 79, offset: 9898},
										name: "DocumentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section4",
			pos:  position{line: 250, col: 1, offset: 9942},
			expr: &actionExpr{
				pos: position{line: 250, col: 13, offset: 9954},
				run: (*parser).callonSection41,
				expr: &seqExpr{
					pos: position{line: 250, col: 13, offset: 9954},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 250, col: 13, offset: 9954},
							label: "header",
							expr: &ruleRefExpr{
								pos:  position{line: 250, col: 21, offset: 9962},
								name: "Section4Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 250, col: 36, offset: 9977},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 250, col: 46, offset: 9987},
								expr: &ruleRefExpr{
									pos:  position{line: 250, col: 46, offset: 9987},
									name: "Section4Block",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section4Title",
			pos:  position{line: 254, col: 1, offset: 10094},
			expr: &actionExpr{
				pos: position{line: 254, col: 18, offset: 10111},
				run: (*parser).callonSection4Title1,
				expr: &seqExpr{
					pos: position{line: 254, col: 18, offset: 10111},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 254, col: 18, offset: 10111},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 254, col: 29, offset: 10122},
								expr: &ruleRefExpr{
									pos:  position{line: 254, col: 30, offset: 10123},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 254, col: 49, offset: 10142},
							label: "level",
							expr: &litMatcher{
								pos:        position{line: 254, col: 56, offset: 10149},
								val:        "=====",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 254, col: 65, offset: 10158},
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 65, offset: 10158},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 254, col: 69, offset: 10162},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 78, offset: 10171},
								name: "InlineElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 94, offset: 10187},
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 94, offset: 10187},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 254, col: 98, offset: 10191},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 254, col: 101, offset: 10194},
								expr: &ruleRefExpr{
									pos:  position{line: 254, col: 102, offset: 10195},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 120, offset: 10213},
							name: "EOL",
						},
						&choiceExpr{
							pos: position{line: 254, col: 125, offset: 10218},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 254, col: 125, offset: 10218},
									expr: &zeroOrOneExpr{
										pos: position{line: 254, col: 126, offset: 10219},
										expr: &ruleRefExpr{
											pos:  position{line: 254, col: 126, offset: 10219},
											name: "BlankLine",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 254, col: 139, offset: 10232},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section4Block",
			pos:  position{line: 258, col: 1, offset: 10347},
			expr: &actionExpr{
				pos: position{line: 258, col: 18, offset: 10364},
				run: (*parser).callonSection4Block1,
				expr: &seqExpr{
					pos: position{line: 258, col: 18, offset: 10364},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 258, col: 18, offset: 10364},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 19, offset: 10365},
								name: "Section1",
							},
						},
						&notExpr{
							pos: position{line: 258, col: 28, offset: 10374},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 29, offset: 10375},
								name: "Section2",
							},
						},
						&notExpr{
							pos: position{line: 258, col: 38, offset: 10384},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 39, offset: 10385},
								name: "Section3",
							},
						},
						&notExpr{
							pos: position{line: 258, col: 48, offset: 10394},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 49, offset: 10395},
								name: "Section4",
							},
						},
						&labeledExpr{
							pos:   position{line: 258, col: 58, offset: 10404},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 258, col: 67, offset: 10413},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 258, col: 67, offset: 10413},
										name: "Section5",
									},
									&ruleRefExpr{
										pos:  position{line: 258, col: 78, offset: 10424},
										name: "DocumentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section5",
			pos:  position{line: 262, col: 1, offset: 10468},
			expr: &actionExpr{
				pos: position{line: 262, col: 13, offset: 10480},
				run: (*parser).callonSection51,
				expr: &seqExpr{
					pos: position{line: 262, col: 13, offset: 10480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 262, col: 13, offset: 10480},
							label: "header",
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 21, offset: 10488},
								name: "Section5Title",
							},
						},
						&labeledExpr{
							pos:   position{line: 262, col: 36, offset: 10503},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 262, col: 46, offset: 10513},
								expr: &ruleRefExpr{
									pos:  position{line: 262, col: 46, offset: 10513},
									name: "Section5Block",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section5Title",
			pos:  position{line: 266, col: 1, offset: 10620},
			expr: &actionExpr{
				pos: position{line: 266, col: 18, offset: 10637},
				run: (*parser).callonSection5Title1,
				expr: &seqExpr{
					pos: position{line: 266, col: 18, offset: 10637},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 266, col: 18, offset: 10637},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 266, col: 29, offset: 10648},
								expr: &ruleRefExpr{
									pos:  position{line: 266, col: 30, offset: 10649},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 49, offset: 10668},
							label: "level",
							expr: &litMatcher{
								pos:        position{line: 266, col: 56, offset: 10675},
								val:        "======",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 266, col: 66, offset: 10685},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 66, offset: 10685},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 70, offset: 10689},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 79, offset: 10698},
								name: "InlineElements",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 95, offset: 10714},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 95, offset: 10714},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 99, offset: 10718},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 102, offset: 10721},
								expr: &ruleRefExpr{
									pos:  position{line: 266, col: 103, offset: 10722},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 121, offset: 10740},
							name: "EOL",
						},
						&choiceExpr{
							pos: position{line: 266, col: 126, offset: 10745},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 266, col: 126, offset: 10745},
									expr: &zeroOrOneExpr{
										pos: position{line: 266, col: 127, offset: 10746},
										expr: &ruleRefExpr{
											pos:  position{line: 266, col: 127, offset: 10746},
											name: "BlankLine",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 266, col: 140, offset: 10759},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section5Block",
			pos:  position{line: 270, col: 1, offset: 10874},
			expr: &actionExpr{
				pos: position{line: 270, col: 18, offset: 10891},
				run: (*parser).callonSection5Block1,
				expr: &seqExpr{
					pos: position{line: 270, col: 18, offset: 10891},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 270, col: 18, offset: 10891},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 19, offset: 10892},
								name: "Section1",
							},
						},
						&notExpr{
							pos: position{line: 270, col: 28, offset: 10901},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 29, offset: 10902},
								name: "Section2",
							},
						},
						&notExpr{
							pos: position{line: 270, col: 38, offset: 10911},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 39, offset: 10912},
								name: "Section3",
							},
						},
						&notExpr{
							pos: position{line: 270, col: 48, offset: 10921},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 49, offset: 10922},
								name: "Section4",
							},
						},
						&notExpr{
							pos: position{line: 270, col: 58, offset: 10931},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 59, offset: 10932},
								name: "Section5",
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 68, offset: 10941},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 77, offset: 10950},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "List",
			pos:  position{line: 277, col: 1, offset: 11095},
			expr: &actionExpr{
				pos: position{line: 277, col: 9, offset: 11103},
				run: (*parser).callonList1,
				expr: &seqExpr{
					pos: position{line: 277, col: 9, offset: 11103},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 277, col: 9, offset: 11103},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 277, col: 20, offset: 11114},
								expr: &ruleRefExpr{
									pos:  position{line: 277, col: 21, offset: 11115},
									name: "ListAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 5, offset: 11204},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 14, offset: 11213},
								name: "ListItems",
							},
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 283, col: 1, offset: 11307},
			expr: &oneOrMoreExpr{
				pos: position{line: 283, col: 14, offset: 11320},
				expr: &choiceExpr{
					pos: position{line: 283, col: 15, offset: 11321},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 283, col: 15, offset: 11321},
							name: "OrderedListItem",
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 33, offset: 11339},
							name: "UnorderedListItem",
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 53, offset: 11359},
							name: "LabeledListItem",
						},
					},
				},
			},
		},
		{
			name: "ListAttribute",
			pos:  position{line: 285, col: 1, offset: 11378},
			expr: &actionExpr{
				pos: position{line: 285, col: 18, offset: 11395},
				run: (*parser).callonListAttribute1,
				expr: &seqExpr{
					pos: position{line: 285, col: 18, offset: 11395},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 285, col: 18, offset: 11395},
							label: "attribute",
							expr: &choiceExpr{
								pos: position{line: 285, col: 29, offset: 11406},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 285, col: 29, offset: 11406},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 285, col: 48, offset: 11425},
										name: "ListID",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 56, offset: 11433},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "ListID",
			pos:  position{line: 289, col: 1, offset: 11472},
			expr: &actionExpr{
				pos: position{line: 289, col: 11, offset: 11482},
				run: (*parser).callonListID1,
				expr: &seqExpr{
					pos: position{line: 289, col: 11, offset: 11482},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 289, col: 11, offset: 11482},
							val:        "[#",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 289, col: 16, offset: 11487},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 20, offset: 11491},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 289, col: 24, offset: 11495},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 293, col: 1, offset: 11561},
			expr: &actionExpr{
				pos: position{line: 293, col: 21, offset: 11581},
				run: (*parser).callonHorizontalLayout1,
				expr: &litMatcher{
					pos:        position{line: 293, col: 21, offset: 11581},
					val:        "[horizontal]",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 297, col: 1, offset: 11664},
			expr: &actionExpr{
				pos: position{line: 297, col: 19, offset: 11682},
				run: (*parser).callonListParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 297, col: 19, offset: 11682},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 297, col: 25, offset: 11688},
						expr: &seqExpr{
							pos: position{line: 298, col: 5, offset: 11694},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 298, col: 5, offset: 11694},
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 7, offset: 11696},
										name: "OrderedListItemPrefix",
									},
								},
								&notExpr{
									pos: position{line: 299, col: 5, offset: 11724},
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 7, offset: 11726},
										name: "UnorderedListItemPrefix",
									},
								},
								&notExpr{
									pos: position{line: 300, col: 5, offset: 11756},
									expr: &seqExpr{
										pos: position{line: 300, col: 7, offset: 11758},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 300, col: 7, offset: 11758},
												name: "LabeledListItemTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 300, col: 27, offset: 11778},
												name: "LabeledListItemSeparator",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 301, col: 5, offset: 11809},
									expr: &ruleRefExpr{
										pos:  position{line: 301, col: 7, offset: 11811},
										name: "ListItemContinuation",
									},
								},
								&notExpr{
									pos: position{line: 302, col: 5, offset: 11838},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 7, offset: 11840},
										name: "ElementAttribute",
									},
								},
								&notExpr{
									pos: position{line: 303, col: 5, offset: 11862},
									expr: &ruleRefExpr{
										pos:  position{line: 303, col: 7, offset: 11864},
										name: "BlockDelimiter",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 304, col: 5, offset: 11884},
									name: "InlineElements",
								},
								&ruleRefExpr{
									pos:  position{line: 304, col: 20, offset: 11899},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 308, col: 1, offset: 11969},
			expr: &actionExpr{
				pos: position{line: 308, col: 25, offset: 11993},
				run: (*parser).callonListItemContinuation1,
				expr: &seqExpr{
					pos: position{line: 308, col: 25, offset: 11993},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 308, col: 25, offset: 11993},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 308, col: 29, offset: 11997},
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 29, offset: 11997},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 308, col: 33, offset: 12001},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedDocumentBlock",
			pos:  position{line: 312, col: 1, offset: 12053},
			expr: &actionExpr{
				pos: position{line: 312, col: 27, offset: 12079},
				run: (*parser).callonContinuedDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 312, col: 27, offset: 12079},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 312, col: 27, offset: 12079},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 48, offset: 12100},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 312, col: 56, offset: 12108},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 319, col: 1, offset: 12265},
			expr: &actionExpr{
				pos: position{line: 319, col: 20, offset: 12284},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 319, col: 20, offset: 12284},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 319, col: 20, offset: 12284},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 319, col: 31, offset: 12295},
								expr: &ruleRefExpr{
									pos:  position{line: 319, col: 32, offset: 12296},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 319, col: 51, offset: 12315},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 59, offset: 12323},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 319, col: 82, offset: 12346},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 91, offset: 12355},
								name: "OrderedListItemContent",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 319, col: 115, offset: 12379},
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 115, offset: 12379},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 323, col: 1, offset: 12522},
			expr: &choiceExpr{
				pos: position{line: 325, col: 1, offset: 12586},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 325, col: 1, offset: 12586},
						run: (*parser).callonOrderedListItemPrefix2,
						expr: &seqExpr{
							pos: position{line: 325, col: 1, offset: 12586},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 325, col: 1, offset: 12586},
									expr: &ruleRefExpr{
										pos:  position{line: 325, col: 1, offset: 12586},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 325, col: 5, offset: 12590},
									label: "style",
									expr: &litMatcher{
										pos:        position{line: 325, col: 12, offset: 12597},
										val:        ".",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 325, col: 17, offset: 12602},
									expr: &ruleRefExpr{
										pos:  position{line: 325, col: 17, offset: 12602},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 12695},
						run: (*parser).callonOrderedListItemPrefix10,
						expr: &seqExpr{
							pos: position{line: 327, col: 5, offset: 12695},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 327, col: 5, offset: 12695},
									expr: &ruleRefExpr{
										pos:  position{line: 327, col: 5, offset: 12695},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 327, col: 9, offset: 12699},
									label: "style",
									expr: &litMatcher{
										pos:        position{line: 327, col: 16, offset: 12706},
										val:        "..",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 327, col: 22, offset: 12712},
									expr: &ruleRefExpr{
										pos:  position{line: 327, col: 22, offset: 12712},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 329, col: 5, offset: 12810},
						run: (*parser).callonOrderedListItemPrefix18,
						expr: &seqExpr{
							pos: position{line: 329, col: 5, offset: 12810},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 329, col: 5, offset: 12810},
									expr: &ruleRefExpr{
										pos:  position{line: 329, col: 5, offset: 12810},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 329, col: 9, offset: 12814},
									label: "style",
									expr: &litMatcher{
										pos:        position{line: 329, col: 16, offset: 12821},
										val:        "...",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 329, col: 23, offset: 12828},
									expr: &ruleRefExpr{
										pos:  position{line: 329, col: 23, offset: 12828},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 331, col: 5, offset: 12927},
						run: (*parser).callonOrderedListItemPrefix26,
						expr: &seqExpr{
							pos: position{line: 331, col: 5, offset: 12927},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 331, col: 5, offset: 12927},
									expr: &ruleRefExpr{
										pos:  position{line: 331, col: 5, offset: 12927},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 331, col: 9, offset: 12931},
									label: "style",
									expr: &litMatcher{
										pos:        position{line: 331, col: 16, offset: 12938},
										val:        "....",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 331, col: 24, offset: 12946},
									expr: &ruleRefExpr{
										pos:  position{line: 331, col: 24, offset: 12946},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 333, col: 5, offset: 13046},
						run: (*parser).callonOrderedListItemPrefix34,
						expr: &seqExpr{
							pos: position{line: 333, col: 5, offset: 13046},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 333, col: 5, offset: 13046},
									expr: &ruleRefExpr{
										pos:  position{line: 333, col: 5, offset: 13046},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 333, col: 9, offset: 13050},
									label: "style",
									expr: &litMatcher{
										pos:        position{line: 333, col: 16, offset: 13057},
										val:        ".....",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 333, col: 25, offset: 13066},
									expr: &ruleRefExpr{
										pos:  position{line: 333, col: 25, offset: 13066},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 336, col: 5, offset: 13189},
						run: (*parser).callonOrderedListItemPrefix42,
						expr: &seqExpr{
							pos: position{line: 336, col: 5, offset: 13189},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 336, col: 5, offset: 13189},
									expr: &ruleRefExpr{
										pos:  position{line: 336, col: 5, offset: 13189},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 336, col: 9, offset: 13193},
									label: "style",
									expr: &seqExpr{
										pos: position{line: 336, col: 16, offset: 13200},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 336, col: 16, offset: 13200},
												expr: &seqExpr{
													pos: position{line: 336, col: 17, offset: 13201},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 336, col: 17, offset: 13201},
															expr: &litMatcher{
																pos:        position{line: 336, col: 18, offset: 13202},
																val:        ".",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 336, col: 22, offset: 13206},
															expr: &ruleRefExpr{
																pos:  position{line: 336, col: 23, offset: 13207},
																name: "WS",
															},
														},
														&notExpr{
															pos: position{line: 336, col: 26, offset: 13210},
															expr: &ruleRefExpr{
																pos:  position{line: 336, col: 27, offset: 13211},
																name: "NEWLINE",
															},
														},
														&charClassMatcher{
															pos:        position{line: 336, col: 35, offset: 13219},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 336, col: 43, offset: 13227},
												val:        ".",
												ignoreCase: false,
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 336, col: 48, offset: 13232},
									expr: &ruleRefExpr{
										pos:  position{line: 336, col: 48, offset: 13232},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 338, col: 5, offset: 13327},
						run: (*parser).callonOrderedListItemPrefix60,
						expr: &seqExpr{
							pos: position{line: 338, col: 5, offset: 13327},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 338, col: 5, offset: 13327},
									expr: &ruleRefExpr{
										pos:  position{line: 338, col: 5, offset: 13327},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 338, col: 9, offset: 13331},
									label: "style",
									expr: &seqExpr{
										pos: position{line: 338, col: 16, offset: 13338},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 338, col: 16, offset: 13338},
												expr: &seqExpr{
													pos: position{line: 338, col: 17, offset: 13339},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 338, col: 17, offset: 13339},
															expr: &litMatcher{
																pos:        position{line: 338, col: 18, offset: 13340},
																val:        ".",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 338, col: 22, offset: 13344},
															expr: &ruleRefExpr{
																pos:  position{line: 338, col: 23, offset: 13345},
																name: "WS",
															},
														},
														&notExpr{
															pos: position{line: 338, col: 26, offset: 13348},
															expr: &ruleRefExpr{
																pos:  position{line: 338, col: 27, offset: 13349},
																name: "NEWLINE",
															},
														},
														&charClassMatcher{
															pos:        position{line: 338, col: 35, offset: 13357},
															val:        "[a-z]",
															ranges:     []rune{'a', 'z'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 338, col: 43, offset: 13365},
												val:        ".",
												ignoreCase: false,
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 338, col: 48, offset: 13370},
									expr: &ruleRefExpr{
										pos:  position{line: 338, col: 48, offset: 13370},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 340, col: 5, offset: 13468},
						run: (*parser).callonOrderedListItemPrefix78,
						expr: &seqExpr{
							pos: position{line: 340, col: 5, offset: 13468},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 340, col: 5, offset: 13468},
									expr: &ruleRefExpr{
										pos:  position{line: 340, col: 5, offset: 13468},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 340, col: 9, offset: 13472},
									label: "style",
									expr: &seqExpr{
										pos: position{line: 340, col: 16, offset: 13479},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 340, col: 16, offset: 13479},
												expr: &seqExpr{
													pos: position{line: 340, col: 17, offset: 13480},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 340, col: 17, offset: 13480},
															expr: &litMatcher{
																pos:        position{line: 340, col: 18, offset: 13481},
																val:        ".",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 340, col: 22, offset: 13485},
															expr: &ruleRefExpr{
																pos:  position{line: 340, col: 23, offset: 13486},
																name: "WS",
															},
														},
														&notExpr{
															pos: position{line: 340, col: 26, offset: 13489},
															expr: &ruleRefExpr{
																pos:  position{line: 340, col: 27, offset: 13490},
																name: "NEWLINE",
															},
														},
														&charClassMatcher{
															pos:        position{line: 340, col: 35, offset: 13498},
															val:        "[A-Z]",
															ranges:     []rune{'A', 'Z'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 340, col: 43, offset: 13506},
												val:        ".",
												ignoreCase: false,
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 340, col: 48, offset: 13511},
									expr: &ruleRefExpr{
										pos:  position{line: 340, col: 48, offset: 13511},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 342, col: 5, offset: 13609},
						run: (*parser).callonOrderedListItemPrefix96,
						expr: &seqExpr{
							pos: position{line: 342, col: 5, offset: 13609},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 342, col: 5, offset: 13609},
									expr: &ruleRefExpr{
										pos:  position{line: 342, col: 5, offset: 13609},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 342, col: 9, offset: 13613},
									label: "style",
									expr: &seqExpr{
										pos: position{line: 342, col: 16, offset: 13620},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 342, col: 16, offset: 13620},
												expr: &seqExpr{
													pos: position{line: 342, col: 17, offset: 13621},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 342, col: 17, offset: 13621},
															expr: &litMatcher{
																pos:        position{line: 342, col: 18, offset: 13622},
																val:        ")",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 342, col: 22, offset: 13626},
															expr: &ruleRefExpr{
																pos:  position{line: 342, col: 23, offset: 13627},
																name: "WS",
															},
														},
														&notExpr{
															pos: position{line: 342, col: 26, offset: 13630},
															expr: &ruleRefExpr{
																pos:  position{line: 342, col: 27, offset: 13631},
																name: "NEWLINE",
															},
														},
														&charClassMatcher{
															pos:        position{line: 342, col: 35, offset: 13639},
															val:        "[a-z]",
															ranges:     []rune{'a', 'z'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 342, col: 43, offset: 13647},
												val:        ")",
												ignoreCase: false,
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 342, col: 48, offset: 13652},
									expr: &ruleRefExpr{
										pos:  position{line: 342, col: 48, offset: 13652},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 344, col: 5, offset: 13750},
						run: (*parser).callonOrderedListItemPrefix114,
						expr: &seqExpr{
							pos: position{line: 344, col: 5, offset: 13750},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 344, col: 5, offset: 13750},
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 5, offset: 13750},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 344, col: 9, offset: 13754},
									label: "style",
									expr: &seqExpr{
										pos: position{line: 344, col: 16, offset: 13761},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 344, col: 16, offset: 13761},
												expr: &seqExpr{
													pos: position{line: 344, col: 17, offset: 13762},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 344, col: 17, offset: 13762},
															expr: &litMatcher{
																pos:        position{line: 344, col: 18, offset: 13763},
																val:        ")",
																ignoreCase: false,
															},
														},
														&notExpr{
															pos: position{line: 344, col: 22, offset: 13767},
															expr: &ruleRefExpr{
																pos:  position{line: 344, col: 23, offset: 13768},
																name: "WS",
															},
														},
														&notExpr{
															pos: position{line: 344, col: 26, offset: 13771},
															expr: &ruleRefExpr{
																pos:  position{line: 344, col: 27, offset: 13772},
																name: "NEWLINE",
															},
														},
														&charClassMatcher{
															pos:        position{line: 344, col: 35, offset: 13780},
															val:        "[A-Z]",
															ranges:     []rune{'A', 'Z'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 344, col: 43, offset: 13788},
												val:        ")",
												ignoreCase: false,
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 344, col: 48, offset: 13793},
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 48, offset: 13793},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 348, col: 1, offset: 13891},
			expr: &actionExpr{
				pos: position{line: 348, col: 27, offset: 13917},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 348, col: 27, offset: 13917},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 348, col: 37, offset: 13927},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 348, col: 37, offset: 13927},
								expr: &ruleRefExpr{
									pos:  position{line: 348, col: 37, offset: 13927},
									name: "ListParagraph",
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 348, col: 52, offset: 13942},
								expr: &ruleRefExpr{
									pos:  position{line: 348, col: 52, offset: 13942},
									name: "ContinuedDocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 355, col: 1, offset: 14269},
			expr: &actionExpr{
				pos: position{line: 355, col: 22, offset: 14290},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 355, col: 22, offset: 14290},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 355, col: 22, offset: 14290},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 30, offset: 14298},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 55, offset: 14323},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 64, offset: 14332},
								name: "UnorderedListItemContent",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 355, col: 90, offset: 14358},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 90, offset: 14358},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 359, col: 1, offset: 14477},
			expr: &choiceExpr{
				pos: position{line: 359, col: 28, offset: 14504},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 359, col: 28, offset: 14504},
						run: (*parser).callonUnorderedListItemPrefix2,
						expr: &seqExpr{
							pos: position{line: 359, col: 28, offset: 14504},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 359, col: 28, offset: 14504},
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 28, offset: 14504},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 359, col: 32, offset: 14508},
									label: "level",
									expr: &litMatcher{
										pos:        position{line: 359, col: 39, offset: 14515},
										val:        "*****",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 359, col: 48, offset: 14524},
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 48, offset: 14524},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 14663},
						run: (*parser).callonUnorderedListItemPrefix10,
						expr: &seqExpr{
							pos: position{line: 361, col: 5, offset: 14663},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 361, col: 5, offset: 14663},
									expr: &ruleRefExpr{
										pos:  position{line: 361, col: 5, offset: 14663},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 361, col: 9, offset: 14667},
									label: "level",
									expr: &litMatcher{
										pos:        position{line: 361, col: 16, offset: 14674},
										val:        "****",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 361, col: 24, offset: 14682},
									expr: &ruleRefExpr{
										pos:  position{line: 361, col: 24, offset: 14682},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 14821},
						run: (*parser).callonUnorderedListItemPrefix18,
						expr: &seqExpr{
							pos: position{line: 363, col: 5, offset: 14821},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 363, col: 5, offset: 14821},
									expr: &ruleRefExpr{
										pos:  position{line: 363, col: 5, offset: 14821},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 363, col: 9, offset: 14825},
									label: "level",
									expr: &litMatcher{
										pos:        position{line: 363, col: 16, offset: 14832},
										val:        "***",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 363, col: 23, offset: 14839},
									expr: &ruleRefExpr{
										pos:  position{line: 363, col: 23, offset: 14839},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 14979},
						run: (*parser).callonUnorderedListItemPrefix26,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 14979},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 365, col: 5, offset: 14979},
									expr: &ruleRefExpr{
										pos:  position{line: 365, col: 5, offset: 14979},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 365, col: 9, offset: 14983},
									label: "level",
									expr: &litMatcher{
										pos:        position{line: 365, col: 16, offset: 14990},
										val:        "**",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 365, col: 22, offset: 14996},
									expr: &ruleRefExpr{
										pos:  position{line: 365, col: 22, offset: 14996},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 15134},
						run: (*parser).callonUnorderedListItemPrefix34,
						expr: &seqExpr{
							pos: position{line: 367, col: 5, offset: 15134},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 367, col: 5, offset: 15134},
									expr: &ruleRefExpr{
										pos:  position{line: 367, col: 5, offset: 15134},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 367, col: 9, offset: 15138},
									label: "level",
									expr: &litMatcher{
										pos:        position{line: 367, col: 16, offset: 15145},
										val:        "*",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 367, col: 21, offset: 15150},
									expr: &ruleRefExpr{
										pos:  position{line: 367, col: 21, offset: 15150},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 369, col: 5, offset: 15287},
						run: (*parser).callonUnorderedListItemPrefix42,
						expr: &seqExpr{
							pos: position{line: 369, col: 5, offset: 15287},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 369, col: 5, offset: 15287},
									expr: &ruleRefExpr{
										pos:  position{line: 369, col: 5, offset: 15287},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 369, col: 9, offset: 15291},
									label: "level",
									expr: &litMatcher{
										pos:        position{line: 369, col: 16, offset: 15298},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 369, col: 21, offset: 15303},
									expr: &ruleRefExpr{
										pos:  position{line: 369, col: 21, offset: 15303},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 373, col: 1, offset: 15433},
			expr: &actionExpr{
				pos: position{line: 373, col: 29, offset: 15461},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 373, col: 29, offset: 15461},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 373, col: 39, offset: 15471},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 373, col: 39, offset: 15471},
								expr: &ruleRefExpr{
									pos:  position{line: 373, col: 39, offset: 15471},
									name: "ListParagraph",
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 373, col: 54, offset: 15486},
								expr: &ruleRefExpr{
									pos:  position{line: 373, col: 54, offset: 15486},
									name: "ContinuedDocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 380, col: 1, offset: 15811},
			expr: &choiceExpr{
				pos: position{line: 380, col: 20, offset: 15830},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 380, col: 20, offset: 15830},
						run: (*parser).callonLabeledListItem2,
						expr: &seqExpr{
							pos: position{line: 380, col: 20, offset: 15830},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 380, col: 20, offset: 15830},
									label: "term",
									expr: &ruleRefExpr{
										pos:  position{line: 380, col: 26, offset: 15836},
										name: "LabeledListItemTerm",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 380, col: 47, offset: 15857},
									name: "LabeledListItemSeparator",
								},
								&labeledExpr{
									pos:   position{line: 380, col: 72, offset: 15882},
									label: "description",
									expr: &ruleRefExpr{
										pos:  position{line: 380, col: 85, offset: 15895},
										name: "LabeledListItemDescription",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 382, col: 6, offset: 16017},
						run: (*parser).callonLabeledListItem9,
						expr: &seqExpr{
							pos: position{line: 382, col: 6, offset: 16017},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 382, col: 6, offset: 16017},
									label: "term",
									expr: &ruleRefExpr{
										pos:  position{line: 382, col: 12, offset: 16023},
										name: "LabeledListItemTerm",
									},
								},
								&litMatcher{
									pos:        position{line: 382, col: 33, offset: 16044},
									val:        "::",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 382, col: 38, offset: 16049},
									expr: &ruleRefExpr{
										pos:  position{line: 382, col: 38, offset: 16049},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 382, col: 42, offset: 16053},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 386, col: 1, offset: 16190},
			expr: &actionExpr{
				pos: position{line: 386, col: 24, offset: 16213},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 386, col: 24, offset: 16213},
					label: "term",
					expr: &zeroOrMoreExpr{
						pos: position{line: 386, col: 29, offset: 16218},
						expr: &seqExpr{
							pos: position{line: 386, col: 30, offset: 16219},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 386, col: 30, offset: 16219},
									expr: &ruleRefExpr{
										pos:  position{line: 386, col: 31, offset: 16220},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 386, col: 39, offset: 16228},
									expr: &litMatcher{
										pos:        position{line: 386, col: 40, offset: 16229},
										val:        "::",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 386, col: 45, offset: 16234,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 391, col: 1, offset: 16325},
			expr: &seqExpr{
				pos: position{line: 391, col: 30, offset: 16354},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 391, col: 30, offset: 16354},
						val:        "::",
						ignoreCase: false,
					},
					&oneOrMoreExpr{
						pos: position{line: 391, col: 35, offset: 16359},
						expr: &choiceExpr{
							pos: position{line: 391, col: 36, offset: 16360},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 391, col: 36, offset: 16360},
									name: "WS",
								},
								&ruleRefExpr{
									pos:  position{line: 391, col: 41, offset: 16365},
									name: "NEWLINE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 393, col: 1, offset: 16376},
			expr: &actionExpr{
				pos: position{line: 393, col: 31, offset: 16406},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 393, col: 31, offset: 16406},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 393, col: 40, offset: 16415},
						expr: &choiceExpr{
							pos: position{line: 393, col: 41, offset: 16416},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 393, col: 41, offset: 16416},
									name: "ListParagraph",
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 57, offset: 16432},
									name: "ContinuedDocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 401, col: 1, offset: 16741},
			expr: &choiceExpr{
				pos: position{line: 401, col: 19, offset: 16759},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 401, col: 19, offset: 16759},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 401, col: 19, offset: 16759},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 16797},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 403, col: 5, offset: 16797},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 405, col: 5, offset: 16837},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 405, col: 5, offset: 16837},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 407, col: 5, offset: 16887},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 407, col: 5, offset: 16887},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 409, col: 5, offset: 16933},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 409, col: 5, offset: 16933},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 418, col: 1, offset: 17236},
			expr: &choiceExpr{
				pos: position{line: 420, col: 5, offset: 17283},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 420, col: 5, offset: 17283},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 420, col: 5, offset: 17283},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 420, col: 5, offset: 17283},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 420, col: 16, offset: 17294},
										expr: &ruleRefExpr{
											pos:  position{line: 420, col: 17, offset: 17295},
											name: "ElementAttribute",
										},
									},
								},
								&notExpr{
									pos: position{line: 420, col: 36, offset: 17314},
									expr: &seqExpr{
										pos: position{line: 420, col: 38, offset: 17316},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 420, col: 38, offset: 17316},
												expr: &litMatcher{
													pos:        position{line: 420, col: 38, offset: 17316},
													val:        "=",
													ignoreCase: false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 420, col: 43, offset: 17321},
												expr: &ruleRefExpr{
													pos:  position{line: 420, col: 43, offset: 17321},
													name: "WS",
												},
											},
											&notExpr{
												pos: position{line: 420, col: 47, offset: 17325},
												expr: &ruleRefExpr{
													pos:  position{line: 420, col: 48, offset: 17326},
													name: "NEWLINE",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 420, col: 57, offset: 17335},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 420, col: 60, offset: 17338},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 420, col: 76, offset: 17354},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 420, col: 81, offset: 17359},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 420, col: 87, offset: 17365},
										expr: &seqExpr{
											pos: position{line: 420, col: 88, offset: 17366},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 420, col: 88, offset: 17366},
													name: "InlineElements",
												},
												&ruleRefExpr{
													pos:  position{line: 420, col: 103, offset: 17381},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 424, col: 5, offset: 17547},
						run: (*parser).callonParagraph23,
						expr: &seqExpr{
							pos: position{line: 424, col: 5, offset: 17547},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 424, col: 5, offset: 17547},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 424, col: 16, offset: 17558},
										expr: &ruleRefExpr{
											pos:  position{line: 424, col: 17, offset: 17559},
											name: "ElementAttribute",
										},
									},
								},
								&notExpr{
									pos: position{line: 424, col: 36, offset: 17578},
									expr: &seqExpr{
										pos: position{line: 424, col: 38, offset: 17580},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 424, col: 38, offset: 17580},
												expr: &litMatcher{
													pos:        position{line: 424, col: 38, offset: 17580},
													val:        "=",
													ignoreCase: false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 424, col: 43, offset: 17585},
												expr: &ruleRefExpr{
													pos:  position{line: 424, col: 43, offset: 17585},
													name: "WS",
												},
											},
											&notExpr{
												pos: position{line: 424, col: 47, offset: 17589},
												expr: &ruleRefExpr{
													pos:  position{line: 424, col: 48, offset: 17590},
													name: "NEWLINE",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 424, col: 57, offset: 17599},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 424, col: 63, offset: 17605},
										expr: &seqExpr{
											pos: position{line: 424, col: 64, offset: 17606},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 424, col: 64, offset: 17606},
													name: "InlineElements",
												},
												&ruleRefExpr{
													pos:  position{line: 424, col: 79, offset: 17621},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 428, col: 1, offset: 17723},
			expr: &actionExpr{
				pos: position{line: 428, col: 19, offset: 17741},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 428, col: 19, offset: 17741},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 428, col: 19, offset: 17741},
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 20, offset: 17742},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 35, offset: 17757},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 428, col: 44, offset: 17766},
								expr: &seqExpr{
									pos: position{line: 428, col: 45, offset: 17767},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 428, col: 45, offset: 17767},
											expr: &ruleRefExpr{
												pos:  position{line: 428, col: 45, offset: 17767},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 428, col: 49, offset: 17771},
											expr: &ruleRefExpr{
												pos:  position{line: 428, col: 50, offset: 17772},
												name: "InlineElementID",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 428, col: 66, offset: 17788},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 428, col: 80, offset: 17802},
											expr: &ruleRefExpr{
												pos:  position{line: 428, col: 80, offset: 17802},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 432, col: 1, offset: 17914},
			expr: &choiceExpr{
				pos: position{line: 432, col: 18, offset: 17931},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 432, col: 18, offset: 17931},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 35, offset: 17948},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 49, offset: 17962},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 63, offset: 17976},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 76, offset: 17989},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 83, offset: 17996},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 115, offset: 18028},
						name: "Word",
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 437, col: 1, offset: 18273},
			expr: &choiceExpr{
				pos: position{line: 437, col: 15, offset: 18287},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 437, col: 15, offset: 18287},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 437, col: 26, offset: 18298},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 437, col: 39, offset: 18311},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 438, col: 13, offset: 18339},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 438, col: 31, offset: 18357},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 438, col: 51, offset: 18377},
						name: "EscapedMonospaceText",
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 440, col: 1, offset: 18399},
			expr: &choiceExpr{
				pos: position{line: 440, col: 13, offset: 18411},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 440, col: 13, offset: 18411},
						run: (*parser).callonBoldText2,
						expr: &seqExpr{
							pos: position{line: 440, col: 13, offset: 18411},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 440, col: 13, offset: 18411},
									expr: &litMatcher{
										pos:        position{line: 440, col: 14, offset: 18412},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 440, col: 19, offset: 18417},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 440, col: 24, offset: 18422},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 33, offset: 18431},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 440, col: 52, offset: 18450},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 442, col: 5, offset: 18575},
						run: (*parser).callonBoldText10,
						expr: &seqExpr{
							pos: position{line: 442, col: 5, offset: 18575},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 442, col: 5, offset: 18575},
									expr: &litMatcher{
										pos:        position{line: 442, col: 6, offset: 18576},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 442, col: 11, offset: 18581},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 442, col: 16, offset: 18586},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 442, col: 25, offset: 18595},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 442, col: 44, offset: 18614},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 445, col: 5, offset: 18779},
						run: (*parser).callonBoldText18,
						expr: &seqExpr{
							pos: position{line: 445, col: 5, offset: 18779},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 445, col: 5, offset: 18779},
									expr: &litMatcher{
										pos:        position{line: 445, col: 6, offset: 18780},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 445, col: 10, offset: 18784},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 445, col: 14, offset: 18788},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 445, col: 23, offset: 18797},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 445, col: 42, offset: 18816},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 449, col: 1, offset: 18916},
			expr: &choiceExpr{
				pos: position{line: 449, col: 20, offset: 18935},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 449, col: 20, offset: 18935},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 449, col: 20, offset: 18935},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 449, col: 20, offset: 18935},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 449, col: 33, offset: 18948},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 449, col: 33, offset: 18948},
												val:        "\\\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 449, col: 38, offset: 18953},
												expr: &litMatcher{
													pos:        position{line: 449, col: 38, offset: 18953},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 449, col: 44, offset: 18959},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 449, col: 49, offset: 18964},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 58, offset: 18973},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 449, col: 77, offset: 18992},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 451, col: 5, offset: 19147},
						run: (*parser).callonEscapedBoldText13,
						expr: &seqExpr{
							pos: position{line: 451, col: 5, offset: 19147},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 451, col: 5, offset: 19147},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 451, col: 18, offset: 19160},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 451, col: 18, offset: 19160},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 451, col: 22, offset: 19164},
												expr: &litMatcher{
													pos:        position{line: 451, col: 22, offset: 19164},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 451, col: 28, offset: 19170},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 451, col: 33, offset: 19175},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 451, col: 42, offset: 19184},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 451, col: 61, offset: 19203},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 454, col: 5, offset: 19397},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 454, col: 5, offset: 19397},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 454, col: 5, offset: 19397},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 454, col: 18, offset: 19410},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 454, col: 18, offset: 19410},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 454, col: 22, offset: 19414},
												expr: &litMatcher{
													pos:        position{line: 454, col: 22, offset: 19414},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 454, col: 28, offset: 19420},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 454, col: 32, offset: 19424},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 454, col: 41, offset: 19433},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 454, col: 60, offset: 19452},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 458, col: 1, offset: 19604},
			expr: &choiceExpr{
				pos: position{line: 458, col: 15, offset: 19618},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 458, col: 15, offset: 19618},
						run: (*parser).callonItalicText2,
						expr: &seqExpr{
							pos: position{line: 458, col: 15, offset: 19618},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 458, col: 15, offset: 19618},
									expr: &litMatcher{
										pos:        position{line: 458, col: 16, offset: 19619},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 458, col: 21, offset: 19624},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 458, col: 26, offset: 19629},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 458, col: 35, offset: 19638},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 458, col: 54, offset: 19657},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 460, col: 5, offset: 19738},
						run: (*parser).callonItalicText10,
						expr: &seqExpr{
							pos: position{line: 460, col: 5, offset: 19738},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 460, col: 5, offset: 19738},
									expr: &litMatcher{
										pos:        position{line: 460, col: 6, offset: 19739},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 460, col: 11, offset: 19744},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 460, col: 16, offset: 19749},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 460, col: 25, offset: 19758},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 460, col: 44, offset: 19777},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 463, col: 5, offset: 19944},
						run: (*parser).callonItalicText18,
						expr: &seqExpr{
							pos: position{line: 463, col: 5, offset: 19944},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 463, col: 5, offset: 19944},
									expr: &litMatcher{
										pos:        position{line: 463, col: 6, offset: 19945},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 463, col: 10, offset: 19949},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 463, col: 14, offset: 19953},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 463, col: 23, offset: 19962},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 463, col: 42, offset: 19981},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 467, col: 1, offset: 20060},
			expr: &choiceExpr{
				pos: position{line: 467, col: 22, offset: 20081},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 467, col: 22, offset: 20081},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 467, col: 22, offset: 20081},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 467, col: 22, offset: 20081},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 467, col: 35, offset: 20094},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 467, col: 35, offset: 20094},
												val:        "\\\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 467, col: 40, offset: 20099},
												expr: &litMatcher{
													pos:        position{line: 467, col: 40, offset: 20099},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 467, col: 46, offset: 20105},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 467, col: 51, offset: 20110},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 467, col: 60, offset: 20119},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 467, col: 79, offset: 20138},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 469, col: 5, offset: 20293},
						run: (*parser).callonEscapedItalicText13,
						expr: &seqExpr{
							pos: position{line: 469, col: 5, offset: 20293},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 469, col: 5, offset: 20293},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 469, col: 18, offset: 20306},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 469, col: 18, offset: 20306},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 469, col: 22, offset: 20310},
												expr: &litMatcher{
													pos:        position{line: 469, col: 22, offset: 20310},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 469, col: 28, offset: 20316},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 469, col: 33, offset: 20321},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 469, col: 42, offset: 20330},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 469, col: 61, offset: 20349},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 20543},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 472, col: 5, offset: 20543},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 472, col: 5, offset: 20543},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 472, col: 18, offset: 20556},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 472, col: 18, offset: 20556},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 472, col: 22, offset: 20560},
												expr: &litMatcher{
													pos:        position{line: 472, col: 22, offset: 20560},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 472, col: 28, offset: 20566},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 472, col: 32, offset: 20570},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 472, col: 41, offset: 20579},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 472, col: 60, offset: 20598},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 476, col: 1, offset: 20750},
			expr: &choiceExpr{
				pos: position{line: 476, col: 18, offset: 20767},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 476, col: 18, offset: 20767},
						run: (*parser).callonMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 476, col: 18, offset: 20767},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 476, col: 18, offset: 20767},
									expr: &litMatcher{
										pos:        position{line: 476, col: 19, offset: 20768},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 476, col: 24, offset: 20773},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 476, col: 29, offset: 20778},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 476, col: 38, offset: 20787},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 476, col: 57, offset: 20806},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 478, col: 5, offset: 20936},
						run: (*parser).callonMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 478, col: 5, offset: 20936},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 478, col: 5, offset: 20936},
									expr: &litMatcher{
										pos:        position{line: 478, col: 6, offset: 20937},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 478, col: 11, offset: 20942},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 478, col: 16, offset: 20947},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 478, col: 25, offset: 20956},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 478, col: 44, offset: 20975},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 481, col: 5, offset: 21145},
						run: (*parser).callonMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 481, col: 5, offset: 21145},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 481, col: 5, offset: 21145},
									expr: &litMatcher{
										pos:        position{line: 481, col: 6, offset: 21146},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 481, col: 10, offset: 21150},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 481, col: 14, offset: 21154},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 481, col: 23, offset: 21163},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 481, col: 42, offset: 21182},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 485, col: 1, offset: 21309},
			expr: &choiceExpr{
				pos: position{line: 485, col: 25, offset: 21333},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 485, col: 25, offset: 21333},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 485, col: 25, offset: 21333},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 485, col: 25, offset: 21333},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 485, col: 38, offset: 21346},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 485, col: 38, offset: 21346},
												val:        "\\\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 485, col: 43, offset: 21351},
												expr: &litMatcher{
													pos:        position{line: 485, col: 43, offset: 21351},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 485, col: 49, offset: 21357},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 485, col: 54, offset: 21362},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 485, col: 63, offset: 21371},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 485, col: 82, offset: 21390},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 487, col: 5, offset: 21545},
						run: (*parser).callonEscapedMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 487, col: 5, offset: 21545},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 487, col: 5, offset: 21545},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 487, col: 18, offset: 21558},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 487, col: 18, offset: 21558},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 487, col: 22, offset: 21562},
												expr: &litMatcher{
													pos:        position{line: 487, col: 22, offset: 21562},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 487, col: 28, offset: 21568},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 487, col: 33, offset: 21573},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 42, offset: 21582},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 487, col: 61, offset: 21601},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 490, col: 5, offset: 21795},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 490, col: 5, offset: 21795},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 490, col: 5, offset: 21795},
									label: "backslashes",
									expr: &seqExpr{
										pos: position{line: 490, col: 18, offset: 21808},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 490, col: 18, offset: 21808},
												val:        "\\",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 490, col: 22, offset: 21812},
												expr: &litMatcher{
													pos:        position{line: 490, col: 22, offset: 21812},
													val:        "\\",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 490, col: 28, offset: 21818},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 490, col: 32, offset: 21822},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 490, col: 41, offset: 21831},
										name: "QuotedTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 490, col: 60, offset: 21850},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextContent",
			pos:  position{line: 494, col: 1, offset: 22002},
			expr: &seqExpr{
				pos: position{line: 494, col: 22, offset: 22023},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 494, col: 22, offset: 22023},
						name: "QuotedTextContentElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 494, col: 47, offset: 22048},
						expr: &seqExpr{
							pos: position{line: 494, col: 48, offset: 22049},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 494, col: 48, offset: 22049},
									expr: &ruleRefExpr{
										pos:  position{line: 494, col: 48, offset: 22049},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 494, col: 52, offset: 22053},
									name: "QuotedTextContentElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextContentElement",
			pos:  position{line: 496, col: 1, offset: 22081},
			expr: &choiceExpr{
				pos: position{line: 496, col: 29, offset: 22109},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 496, col: 29, offset: 22109},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 496, col: 42, offset: 22122},
						name: "QuotedTextWord",
					},
					&ruleRefExpr{
						pos:  position{line: 496, col: 59, offset: 22139},
						name: "WordWithQuotePunctuation",
					},
				},
			},
		},
		{
			name: "QuotedTextWord",
			pos:  position{line: 498, col: 1, offset: 22268},
			expr: &oneOrMoreExpr{
				pos: position{line: 498, col: 19, offset: 22286},
				expr: &seqExpr{
					pos: position{line: 498, col: 20, offset: 22287},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 498, col: 20, offset: 22287},
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 21, offset: 22288},
								name: "NEWLINE",
							},
						},
						&notExpr{
							pos: position{line: 498, col: 29, offset: 22296},
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 30, offset: 22297},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 498, col: 33, offset: 22300},
							expr: &litMatcher{
								pos:        position{line: 498, col: 34, offset: 22301},
								val:        "*",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 498, col: 38, offset: 22305},
							expr: &litMatcher{
								pos:        position{line: 498, col: 39, offset: 22306},
								val:        "_",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 498, col: 43, offset: 22310},
							expr: &litMatcher{
								pos:        position{line: 498, col: 44, offset: 22311},
								val:        "`",
								ignoreCase: false,
							},
						},
						&anyMatcher{
							line: 498, col: 48, offset: 22315,
						},
					},
				},
			},
		},
		{
			name: "WordWithQuotePunctuation",
			pos:  position{line: 500, col: 1, offset: 22358},
			expr: &actionExpr{
				pos: position{line: 500, col: 29, offset: 22386},
				run: (*parser).callonWordWithQuotePunctuation1,
				expr: &oneOrMoreExpr{
					pos: position{line: 500, col: 29, offset: 22386},
					expr: &seqExpr{
						pos: position{line: 500, col: 30, offset: 22387},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 500, col: 30, offset: 22387},
								expr: &ruleRefExpr{
									pos:  position{line: 500, col: 31, offset: 22388},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 500, col: 39, offset: 22396},
								expr: &ruleRefExpr{
									pos:  position{line: 500, col: 40, offset: 22397},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 500, col: 44, offset: 22401,
							},
						},
					},
				},
			},
		},
		{
			name: "UnbalancedQuotePunctuation",
			pos:  position{line: 505, col: 1, offset: 22646},
			expr: &choiceExpr{
				pos: position{line: 505, col: 31, offset: 22676},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 505, col: 31, offset: 22676},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 505, col: 37, offset: 22682},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 505, col: 43, offset: 22688},
						val:        "`",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 510, col: 1, offset: 22800},
			expr: &choiceExpr{
				pos: position{line: 510, col: 16, offset: 22815},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 510, col: 16, offset: 22815},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 510, col: 40, offset: 22839},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 510, col: 64, offset: 22863},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 512, col: 1, offset: 22881},
			expr: &actionExpr{
				pos: position{line: 512, col: 26, offset: 22906},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 512, col: 26, offset: 22906},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 512, col: 26, offset: 22906},
							val:        "+",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 512, col: 30, offset: 22910},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 512, col: 38, offset: 22918},
								expr: &seqExpr{
									pos: position{line: 512, col: 39, offset: 22919},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 512, col: 39, offset: 22919},
											expr: &ruleRefExpr{
												pos:  position{line: 512, col: 40, offset: 22920},
												name: "NEWLINE",
											},
										},
										&notExpr{
											pos: position{line: 512, col: 48, offset: 22928},
											expr: &litMatcher{
												pos:        position{line: 512, col: 49, offset: 22929},
												val:        "+",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 512, col: 53, offset: 22933,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 512, col: 57, offset: 22937},
							val:        "+",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 516, col: 1, offset: 23032},
			expr: &actionExpr{
				pos: position{line: 516, col: 26, offset: 23057},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 516, col: 26, offset: 23057},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 516, col: 26, offset: 23057},
							val:        "+++",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 516, col: 32, offset: 23063},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 516, col: 40, offset: 23071},
								expr: &seqExpr{
									pos: position{line: 516, col: 41, offset: 23072},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 516, col: 41, offset: 23072},
											expr: &litMatcher{
												pos:        position{line: 516, col: 42, offset: 23073},
												val:        "+++",
												ignoreCase: false,
											},
										},
										&anyMatcher{
											line: 516, col: 48, offset: 23079,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 516, col: 52, offset: 23083},
							val:        "+++",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 520, col: 1, offset: 23180},
			expr: &choiceExpr{
				pos: position{line: 520, col: 21, offset: 23200},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 520, col: 21, offset: 23200},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 520, col: 21, offset: 23200},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 520, col: 21, offset: 23200},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 520, col: 30, offset: 23209},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 520, col: 38, offset: 23217},
										expr: &ruleRefExpr{
											pos:  position{line: 520, col: 39, offset: 23218},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 520, col: 67, offset: 23246},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 522, col: 5, offset: 23337},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 522, col: 5, offset: 23337},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 522, col: 5, offset: 23337},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 522, col: 15, offset: 23347},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 522, col: 23, offset: 23355},
										expr: &choiceExpr{
											pos: position{line: 522, col: 24, offset: 23356},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 522, col: 24, offset: 23356},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 522, col: 37, offset: 23369},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 522, col: 65, offset: 23397},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 526, col: 1, offset: 23487},
			expr: &seqExpr{
				pos: position{line: 526, col: 31, offset: 23517},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 526, col: 31, offset: 23517},
						expr: &litMatcher{
							pos:        position{line: 526, col: 32, offset: 23518},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 526, col: 36, offset: 23522,
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 531, col: 1, offset: 23638},
			expr: &actionExpr{
				pos: position{line: 531, col: 19, offset: 23656},
				run: (*parser).callonCrossReference1,
				expr: &seqExpr{
					pos: position{line: 531, col: 19, offset: 23656},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 531, col: 19, offset: 23656},
							val:        "<<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 531, col: 24, offset: 23661},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 28, offset: 23665},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 531, col: 32, offset: 23669},
							val:        ">>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 538, col: 1, offset: 23828},
			expr: &choiceExpr{
				pos: position{line: 538, col: 9, offset: 23836},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 538, col: 9, offset: 23836},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 538, col: 24, offset: 23851},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 540, col: 1, offset: 23866},
			expr: &actionExpr{
				pos: position{line: 540, col: 17, offset: 23882},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 540, col: 17, offset: 23882},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 540, col: 17, offset: 23882},
							label: "url",
							expr: &seqExpr{
								pos: position{line: 540, col: 22, offset: 23887},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 540, col: 22, offset: 23887},
										name: "URL_SCHEME",
									},
									&ruleRefExpr{
										pos:  position{line: 540, col: 33, offset: 23898},
										name: "URL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 38, offset: 23903},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 540, col: 43, offset: 23908},
								expr: &seqExpr{
									pos: position{line: 540, col: 44, offset: 23909},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 540, col: 44, offset: 23909},
											val:        "[",
											ignoreCase: false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 540, col: 48, offset: 23913},
											expr: &ruleRefExpr{
												pos:  position{line: 540, col: 49, offset: 23914},
												name: "URL_TEXT",
											},
										},
										&litMatcher{
											pos:        position{line: 540, col: 60, offset: 23925},
											val:        "]",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 547, col: 1, offset: 24086},
			expr: &actionExpr{
				pos: position{line: 547, col: 17, offset: 24102},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 547, col: 17, offset: 24102},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 547, col: 17, offset: 24102},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 547, col: 25, offset: 24110},
							label: "url",
							expr: &seqExpr{
								pos: position{line: 547, col: 30, offset: 24115},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 547, col: 30, offset: 24115},
										expr: &ruleRefExpr{
											pos:  position{line: 547, col: 30, offset: 24115},
											name: "URL_SCHEME",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 547, col: 42, offset: 24127},
										name: "URL",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 547, col: 47, offset: 24132},
							label: "text",
							expr: &seqExpr{
								pos: position{line: 547, col: 53, offset: 24138},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 547, col: 53, offset: 24138},
										val:        "[",
										ignoreCase: false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 547, col: 57, offset: 24142},
										expr: &ruleRefExpr{
											pos:  position{line: 547, col: 58, offset: 24143},
											name: "URL_TEXT",
										},
									},
									&litMatcher{
										pos:        position{line: 547, col: 69, offset: 24154},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockImage",
			pos:  position{line: 557, col: 1, offset: 24416},
			expr: &actionExpr{
				pos: position{line: 557, col: 15, offset: 24430},
				run: (*parser).callonBlockImage1,
				expr: &seqExpr{
					pos: position{line: 557, col: 15, offset: 24430},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 15, offset: 24430},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 557, col: 26, offset: 24441},
								expr: &ruleRefExpr{
									pos:  position{line: 557, col: 27, offset: 24442},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 557, col: 46, offset: 24461},
							label: "image",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 52, offset: 24467},
								name: "BlockImageMacro",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 557, col: 69, offset: 24484},
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 69, offset: 24484},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 557, col: 73, offset: 24488},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockImageMacro",
			pos:  position{line: 562, col: 1, offset: 24647},
			expr: &actionExpr{
				pos: position{line: 562, col: 20, offset: 24666},
				run: (*parser).callonBlockImageMacro1,
				expr: &seqExpr{
					pos: position{line: 562, col: 20, offset: 24666},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 562, col: 20, offset: 24666},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 562, col: 30, offset: 24676},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 36, offset: 24682},
								name: "URL",
							},
						},
						&litMatcher{
							pos:        position{line: 562, col: 41, offset: 24687},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 562, col: 45, offset: 24691},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 562, col: 57, offset: 24703},
								expr: &ruleRefExpr{
									pos:  position{line: 562, col: 57, offset: 24703},
									name: "URL_TEXT",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 562, col: 68, offset: 24714},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 566, col: 1, offset: 24781},
			expr: &actionExpr{
				pos: position{line: 566, col: 16, offset: 24796},
				run: (*parser).callonInlineImage1,
				expr: &labeledExpr{
					pos:   position{line: 566, col: 16, offset: 24796},
					label: "image",
					expr: &ruleRefExpr{
						pos:  position{line: 566, col: 22, offset: 24802},
						name: "InlineImageMacro",
					},
				},
			},
		},
		{
			name: "InlineImageMacro",
			pos:  position{line: 571, col: 1, offset: 24947},
			expr: &actionExpr{
				pos: position{line: 571, col: 21, offset: 24967},
				run: (*parser).callonInlineImageMacro1,
				expr: &seqExpr{
					pos: position{line: 571, col: 21, offset: 24967},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 571, col: 21, offset: 24967},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 571, col: 30, offset: 24976},
							expr: &litMatcher{
								pos:        position{line: 571, col: 31, offset: 24977},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 35, offset: 24981},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 41, offset: 24987},
								name: "URL",
							},
						},
						&litMatcher{
							pos:        position{line: 571, col: 46, offset: 24992},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 571, col: 50, offset: 24996},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 571, col: 62, offset: 25008},
								expr: &ruleRefExpr{
									pos:  position{line: 571, col: 62, offset: 25008},
									name: "URL_TEXT",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 571, col: 73, offset: 25019},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 578, col: 1, offset: 25349},
			expr: &choiceExpr{
				pos: position{line: 578, col: 19, offset: 25367},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 578, col: 19, offset: 25367},
						name: "FencedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 33, offset: 25381},
						name: "ListingBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 48, offset: 25396},
						name: "ExampleBlock",
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 580, col: 1, offset: 25410},
			expr: &choiceExpr{
				pos: position{line: 580, col: 19, offset: 25428},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 580, col: 19, offset: 25428},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 580, col: 43, offset: 25452},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 580, col: 66, offset: 25475},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 580, col: 90, offset: 25499},
						name: "ExampleBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 582, col: 1, offset: 25522},
			expr: &litMatcher{
				pos:        position{line: 582, col: 25, offset: 25546},
				val:        "```",
				ignoreCase: false,
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 584, col: 1, offset: 25553},
			expr: &actionExpr{
				pos: position{line: 584, col: 16, offset: 25568},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 584, col: 16, offset: 25568},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 584, col: 16, offset: 25568},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 584, col: 27, offset: 25579},
								expr: &ruleRefExpr{
									pos:  position{line: 584, col: 28, offset: 25580},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 47, offset: 25599},
							name: "FencedBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 584, col: 68, offset: 25620},
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 68, offset: 25620},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 72, offset: 25624},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 584, col: 80, offset: 25632},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 584, col: 88, offset: 25640},
								expr: &choiceExpr{
									pos: position{line: 584, col: 89, offset: 25641},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 584, col: 89, offset: 25641},
											name: "List",
										},
										&ruleRefExpr{
											pos:  position{line: 584, col: 96, offset: 25648},
											name: "BlockParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 584, col: 113, offset: 25665},
											name: "BlankLine",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 584, col: 126, offset: 25678},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 584, col: 127, offset: 25679},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 584, col: 127, offset: 25679},
											name: "FencedBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 584, col: 148, offset: 25700},
											expr: &ruleRefExpr{
												pos:  position{line: 584, col: 148, offset: 25700},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 584, col: 152, offset: 25704},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 584, col: 159, offset: 25711},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 588, col: 1, offset: 25828},
			expr: &litMatcher{
				pos:        position{line: 588, col: 26, offset: 25853},
				val:        "----",
				ignoreCase: false,
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 590, col: 1, offset: 25861},
			expr: &actionExpr{
				pos: position{line: 590, col: 17, offset: 25877},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 590, col: 17, offset: 25877},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 17, offset: 25877},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 590, col: 28, offset: 25888},
								expr: &ruleRefExpr{
									pos:  position{line: 590, col: 29, offset: 25889},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 590, col: 48, offset: 25908},
							name: "ListingBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 590, col: 70, offset: 25930},
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 70, offset: 25930},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 590, col: 74, offset: 25934},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 590, col: 82, offset: 25942},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 590, col: 90, offset: 25950},
								expr: &choiceExpr{
									pos: position{line: 590, col: 91, offset: 25951},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 590, col: 91, offset: 25951},
											name: "List",
										},
										&ruleRefExpr{
											pos:  position{line: 590, col: 98, offset: 25958},
											name: "BlockParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 590, col: 115, offset: 25975},
											name: "BlankLine",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 590, col: 128, offset: 25988},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 590, col: 129, offset: 25989},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 590, col: 129, offset: 25989},
											name: "ListingBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 590, col: 151, offset: 26011},
											expr: &ruleRefExpr{
												pos:  position{line: 590, col: 151, offset: 26011},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 590, col: 155, offset: 26015},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 590, col: 162, offset: 26022},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 594, col: 1, offset: 26140},
			expr: &litMatcher{
				pos:        position{line: 594, col: 26, offset: 26165},
				val:        "====",
				ignoreCase: false,
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 596, col: 1, offset: 26173},
			expr: &actionExpr{
				pos: position{line: 596, col: 17, offset: 26189},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 596, col: 17, offset: 26189},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 596, col: 17, offset: 26189},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 596, col: 28, offset: 26200},
								expr: &ruleRefExpr{
									pos:  position{line: 596, col: 29, offset: 26201},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 48, offset: 26220},
							name: "ExampleBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 596, col: 70, offset: 26242},
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 70, offset: 26242},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 74, offset: 26246},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 596, col: 82, offset: 26254},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 596, col: 90, offset: 26262},
								expr: &choiceExpr{
									pos: position{line: 596, col: 91, offset: 26263},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 596, col: 91, offset: 26263},
											name: "List",
										},
										&ruleRefExpr{
											pos:  position{line: 596, col: 98, offset: 26270},
											name: "BlockParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 596, col: 115, offset: 26287},
											name: "BlankLine",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 596, col: 129, offset: 26301},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 596, col: 130, offset: 26302},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 596, col: 130, offset: 26302},
											name: "ExampleBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 596, col: 152, offset: 26324},
											expr: &ruleRefExpr{
												pos:  position{line: 596, col: 152, offset: 26324},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 596, col: 156, offset: 26328},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 596, col: 163, offset: 26335},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockParagraph",
			pos:  position{line: 600, col: 1, offset: 26453},
			expr: &actionExpr{
				pos: position{line: 600, col: 20, offset: 26472},
				run: (*parser).callonBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 600, col: 20, offset: 26472},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 600, col: 26, offset: 26478},
						expr: &seqExpr{
							pos: position{line: 601, col: 5, offset: 26484},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 601, col: 5, offset: 26484},
									expr: &ruleRefExpr{
										pos:  position{line: 601, col: 7, offset: 26486},
										name: "OrderedListItemPrefix",
									},
								},
								&notExpr{
									pos: position{line: 602, col: 5, offset: 26514},
									expr: &ruleRefExpr{
										pos:  position{line: 602, col: 7, offset: 26516},
										name: "UnorderedListItemPrefix",
									},
								},
								&notExpr{
									pos: position{line: 603, col: 5, offset: 26546},
									expr: &seqExpr{
										pos: position{line: 603, col: 7, offset: 26548},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 603, col: 7, offset: 26548},
												name: "LabeledListItemTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 603, col: 27, offset: 26568},
												name: "LabeledListItemSeparator",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 604, col: 5, offset: 26599},
									expr: &ruleRefExpr{
										pos:  position{line: 604, col: 7, offset: 26601},
										name: "ListItemContinuation",
									},
								},
								&notExpr{
									pos: position{line: 606, col: 5, offset: 26654},
									expr: &ruleRefExpr{
										pos:  position{line: 606, col: 7, offset: 26656},
										name: "BlockDelimiter",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 607, col: 5, offset: 26676},
									name: "InlineElements",
								},
								&ruleRefExpr{
									pos:  position{line: 607, col: 20, offset: 26691},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 614, col: 1, offset: 27028},
			expr: &choiceExpr{
				pos: position{line: 614, col: 17, offset: 27044},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 614, col: 17, offset: 27044},
						name: "ParagraphWithSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 39, offset: 27066},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 76, offset: 27103},
						name: "ParagraphWithLiteralAttribute",
					},
				},
			},
		},
		{
			name: "ParagraphWithSpaces",
			pos:  position{line: 617, col: 1, offset: 27198},
			expr: &actionExpr{
				pos: position{line: 617, col: 24, offset: 27221},
				run: (*parser).callonParagraphWithSpaces1,
				expr: &seqExpr{
					pos: position{line: 617, col: 24, offset: 27221},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 617, col: 24, offset: 27221},
							label: "spaces",
							expr: &oneOrMoreExpr{
								pos: position{line: 617, col: 32, offset: 27229},
								expr: &ruleRefExpr{
									pos:  position{line: 617, col: 32, offset: 27229},
									name: "WS",
								},
							},
						},
						&notExpr{
							pos: position{line: 617, col: 37, offset: 27234},
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 38, offset: 27235},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 46, offset: 27243},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 55, offset: 27252},
								name: "LiteralBlockContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 76, offset: 27273},
							name: "EndOfLiteralBlock",
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockContent",
			pos:  position{line: 622, col: 1, offset: 27454},
			expr: &actionExpr{
				pos: position{line: 622, col: 24, offset: 27477},
				run: (*parser).callonLiteralBlockContent1,
				expr: &labeledExpr{
					pos:   position{line: 622, col: 24, offset: 27477},
					label: "content",
					expr: &oneOrMoreExpr{
						pos: position{line: 622, col: 32, offset: 27485},
						expr: &seqExpr{
							pos: position{line: 622, col: 33, offset: 27486},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 622, col: 33, offset: 27486},
									expr: &seqExpr{
										pos: position{line: 622, col: 35, offset: 27488},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 622, col: 35, offset: 27488},
												name: "NEWLINE",
											},
											&ruleRefExpr{
												pos:  position{line: 622, col: 43, offset: 27496},
												name: "BlankLine",
											},
										},
									},
								},
								&anyMatcher{
									line: 622, col: 54, offset: 27507,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfLiteralBlock",
			pos:  position{line: 627, col: 1, offset: 27592},
			expr: &choiceExpr{
				pos: position{line: 627, col: 22, offset: 27613},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 627, col: 22, offset: 27613},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 627, col: 22, offset: 27613},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 627, col: 30, offset: 27621},
								name: "BlankLine",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 627, col: 42, offset: 27633},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 627, col: 52, offset: 27643},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 630, col: 1, offset: 27703},
			expr: &actionExpr{
				pos: position{line: 630, col: 39, offset: 27741},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 630, col: 39, offset: 27741},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 630, col: 39, offset: 27741},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 630, col: 61, offset: 27763},
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 61, offset: 27763},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 65, offset: 27767},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 73, offset: 27775},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 630, col: 81, offset: 27783},
								expr: &seqExpr{
									pos: position{line: 630, col: 82, offset: 27784},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 630, col: 82, offset: 27784},
											expr: &ruleRefExpr{
												pos:  position{line: 630, col: 83, offset: 27785},
												name: "LiteralBlockDelimiter",
											},
										},
										&anyMatcher{
											line: 630, col: 105, offset: 27807,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 630, col: 110, offset: 27812},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 630, col: 111, offset: 27813},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 630, col: 111, offset: 27813},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 630, col: 133, offset: 27835},
											expr: &ruleRefExpr{
												pos:  position{line: 630, col: 133, offset: 27835},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 630, col: 137, offset: 27839},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 630, col: 144, offset: 27846},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 634, col: 1, offset: 27931},
			expr: &litMatcher{
				pos:        position{line: 634, col: 26, offset: 27956},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 637, col: 1, offset: 28018},
			expr: &actionExpr{
				pos: position{line: 637, col: 34, offset: 28051},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 637, col: 34, offset: 28051},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 637, col: 34, offset: 28051},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 637, col: 46, offset: 28063},
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 46, offset: 28063},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 50, offset: 28067},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 637, col: 58, offset: 28075},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 67, offset: 28084},
								name: "LiteralBlockContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 88, offset: 28105},
							name: "EndOfLiteralBlock",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 644, col: 1, offset: 28308},
			expr: &actionExpr{
				pos: position{line: 644, col: 14, offset: 28321},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 644, col: 14, offset: 28321},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 644, col: 14, offset: 28321},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 15, offset: 28322},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 644, col: 19, offset: 28326},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 19, offset: 28326},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 23, offset: 28330},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 651, col: 1, offset: 28477},
			expr: &actionExpr{
				pos: position{line: 651, col: 9, offset: 28485},
				run: (*parser).callonWord1,
				expr: &oneOrMoreExpr{
					pos: position{line: 651, col: 9, offset: 28485},
					expr: &seqExpr{
						pos: position{line: 651, col: 10, offset: 28486},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 651, col: 10, offset: 28486},
								expr: &ruleRefExpr{
									pos:  position{line: 651, col: 11, offset: 28487},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 651, col: 19, offset: 28495},
								expr: &ruleRefExpr{
									pos:  position{line: 651, col: 20, offset: 28496},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 651, col: 23, offset: 28499,
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 655, col: 1, offset: 28539},
			expr: &actionExpr{
				pos: position{line: 655, col: 8, offset: 28546},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 655, col: 8, offset: 28546},
					expr: &seqExpr{
						pos: position{line: 655, col: 9, offset: 28547},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 655, col: 9, offset: 28547},
								expr: &ruleRefExpr{
									pos:  position{line: 655, col: 10, offset: 28548},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 655, col: 18, offset: 28556},
								expr: &ruleRefExpr{
									pos:  position{line: 655, col: 19, offset: 28557},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 655, col: 22, offset: 28560},
								expr: &litMatcher{
									pos:        position{line: 655, col: 23, offset: 28561},
									val:        "[",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 655, col: 27, offset: 28565},
								expr: &litMatcher{
									pos:        position{line: 655, col: 28, offset: 28566},
									val:        "]",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 655, col: 32, offset: 28570,
							},
						},
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 659, col: 1, offset: 28610},
			expr: &actionExpr{
				pos: position{line: 659, col: 7, offset: 28616},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 659, col: 7, offset: 28616},
					expr: &seqExpr{
						pos: position{line: 659, col: 8, offset: 28617},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 659, col: 8, offset: 28617},
								expr: &ruleRefExpr{
									pos:  position{line: 659, col: 9, offset: 28618},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 659, col: 17, offset: 28626},
								expr: &ruleRefExpr{
									pos:  position{line: 659, col: 18, offset: 28627},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 659, col: 21, offset: 28630},
								expr: &litMatcher{
									pos:        position{line: 659, col: 22, offset: 28631},
									val:        "[",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 659, col: 26, offset: 28635},
								expr: &litMatcher{
									pos:        position{line: 659, col: 27, offset: 28636},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 659, col: 31, offset: 28640},
								expr: &litMatcher{
									pos:        position{line: 659, col: 32, offset: 28641},
									val:        "<<",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 659, col: 37, offset: 28646},
								expr: &litMatcher{
									pos:        position{line: 659, col: 38, offset: 28647},
									val:        ">>",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 659, col: 42, offset: 28651,
							},
						},
					},
				},
			},
		},
		{
			name: "URL_TEXT",
			pos:  position{line: 663, col: 1, offset: 28691},
			expr: &actionExpr{
				pos: position{line: 663, col: 13, offset: 28703},
				run: (*parser).callonURL_TEXT1,
				expr: &oneOrMoreExpr{
					pos: position{line: 663, col: 13, offset: 28703},
					expr: &seqExpr{
						pos: position{line: 663, col: 14, offset: 28704},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 663, col: 14, offset: 28704},
								expr: &ruleRefExpr{
									pos:  position{line: 663, col: 15, offset: 28705},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 663, col: 23, offset: 28713},
								expr: &litMatcher{
									pos:        position{line: 663, col: 24, offset: 28714},
									val:        "[",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 663, col: 28, offset: 28718},
								expr: &litMatcher{
									pos:        position{line: 663, col: 29, offset: 28719},
									val:        "]",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 663, col: 33, offset: 28723,
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 667, col: 1, offset: 28763},
			expr: &choiceExpr{
				pos: position{line: 667, col: 15, offset: 28777},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 667, col: 15, offset: 28777},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 667, col: 27, offset: 28789},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 667, col: 40, offset: 28802},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 667, col: 51, offset: 28813},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 667, col: 62, offset: 28824},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 669, col: 1, offset: 28835},
			expr: &charClassMatcher{
				pos:        position{line: 669, col: 10, offset: 28844},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 671, col: 1, offset: 28851},
			expr: &choiceExpr{
				pos: position{line: 671, col: 12, offset: 28862},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 671, col: 12, offset: 28862},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 671, col: 21, offset: 28871},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 671, col: 28, offset: 28878},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 673, col: 1, offset: 28884},
			expr: &choiceExpr{
				pos: position{line: 673, col: 7, offset: 28890},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 673, col: 7, offset: 28890},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 673, col: 13, offset: 28896},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 673, col: 13, offset: 28896},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 677, col: 1, offset: 28941},
			expr: &notExpr{
				pos: position{line: 677, col: 8, offset: 28948},
				expr: &anyMatcher{
					line: 677, col: 9, offset: 28949,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 679, col: 1, offset: 28952},
			expr: &choiceExpr{
				pos: position{line: 679, col: 8, offset: 28959},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 679, col: 8, offset: 28959},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 679, col: 18, offset: 28969},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onDocument1(frontMatter, documentHeader, blocks interface{}) (interface{}, error) {
	return types.NewDocument(frontMatter, documentHeader, blocks.([]interface{}))
}

func (p *parser) callonDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["frontMatter"], stack["documentHeader"], stack["blocks"])
}

func (c *current) onPreamble1(elements interface{}) (interface{}, error) {
	return types.NewPreamble(elements.([]interface{}))
}

func (p *parser) callonPreamble1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreamble1(stack["elements"])
}

func (c *current) onFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(header, authors, revision, otherAttributes interface{}) (interface{}, error) {

	return types.NewDocumentHeader(header, authors, revision, otherAttributes.([]interface{}))
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["header"], stack["authors"], stack["revision"], stack["otherAttributes"])
}

func (c *current) onDocumentTitle1(attributes, level, content, id interface{}) (interface{}, error) {

	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["attributes"], stack["level"], stack["content"], stack["id"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(namePart1, namePart2, namePart3, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(namePart1, namePart2, namePart3, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["namePart1"], stack["namePart2"], stack["namePart3"], stack["email"])
}

func (c *current) onDocumentRevision1(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentAttributeDeclarationWithNameOnly1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.([]interface{}), nil)
}

func (p *parser) callonDocumentAttributeDeclarationWithNameOnly1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclarationWithNameOnly1(stack["name"])
}

func (c *current) onDocumentAttributeDeclarationWithNameAndValue1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.([]interface{}), value.([]interface{}))
}

func (p *parser) callonDocumentAttributeDeclarationWithNameAndValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclarationWithNameAndValue1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeResetWithSectionTitleBangSymbol1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.([]interface{}))
}

func (p *parser) callonDocumentAttributeResetWithSectionTitleBangSymbol1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeResetWithSectionTitleBangSymbol1(stack["name"])
}

func (c *current) onDocumentAttributeResetWithTrailingBangSymbol1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.([]interface{}))
}

func (p *parser) callonDocumentAttributeResetWithTrailingBangSymbol1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeResetWithTrailingBangSymbol1(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.([]interface{}))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID5(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID5(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.([]interface{}))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return k, nil
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onAttributeGroup1(attribute, attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(append([]interface{}{attribute}, attributes.([]interface{})...))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attribute"], stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is set
	return types.NewGenericAttribute(key.([]interface{}), value.([]interface{}))
}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute9(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.([]interface{}), nil)
}

func (p *parser) callonGenericAttribute9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute9(stack["key"])
}

func (c *current) onOtherGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is set
	return types.NewGenericAttribute(key.([]interface{}), value.([]interface{}))
}

func (p *parser) callonOtherGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onOtherGenericAttribute12(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.([]interface{}), nil)
}

func (p *parser) callonOtherGenericAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherGenericAttribute12(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	// fmt.Printf("found attribute key: %v\n", key)
	return key, nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// fmt.Printf("found attribute value: %v\n", value)
	return value, nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onInvalidElementAttribute1(content interface{}) (interface{}, error) {
	return types.NewInvalidElementAttribute(c.text)
}

func (p *parser) callonInvalidElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInvalidElementAttribute1(stack["content"])
}

func (c *current) onSection01(header, elements interface{}) (interface{}, error) {
	return types.NewSection(0, header.(types.SectionTitle), elements.([]interface{}))
}

func (p *parser) callonSection01() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection01(stack["header"], stack["elements"])
}

func (c *current) onSection0Title1(attributes, level, content, id interface{}) (interface{}, error) {

	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection0Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection0Title1(stack["attributes"], stack["level"], stack["content"], stack["id"])
}

func (c *current) onSection0Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection0Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection0Block1(stack["content"])
}

func (c *current) onSection11(header, elements interface{}) (interface{}, error) {
	return types.NewSection(1, header.(types.SectionTitle), elements.([]interface{}))
}

func (p *parser) callonSection11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection11(stack["header"], stack["elements"])
}

func (c *current) onSection1Title1(attributes, level, content, id interface{}) (interface{}, error) {

	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection1Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1Title1(stack["attributes"], stack["level"], stack["content"], stack["id"])
}

func (c *current) onSection1Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection1Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1Block1(stack["content"])
}

func (c *current) onSection21(header, elements interface{}) (interface{}, error) {
	return types.NewSection(2, header.(types.SectionTitle), elements.([]interface{}))
}

func (p *parser) callonSection21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection21(stack["header"], stack["elements"])
}

func (c *current) onSection2Title1(attributes, level, content, id interface{}) (interface{}, error) {
	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection2Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection2Title1(stack["attributes"], stack["level"], stack["content"], stack["id"])
}

func (c *current) onSection2Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection2Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection2Block1(stack["content"])
}

func (c *current) onSection31(header, elements interface{}) (interface{}, error) {
	return types.NewSection(3, header.(types.SectionTitle), elements.([]interface{}))
}

func (p *parser) callonSection31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection31(stack["header"], stack["elements"])
}

func (c *current) onSection3Title1(attributes, level, content, id interface{}) (interface{}, error) {
	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection3Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3Title1(stack["attributes"], stack["level"], stack["content"], stack["id"])
}

func (c *current) onSection3Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection3Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3Block1(stack["content"])
}

func (c *current) onSection41(header, elements interface{}) (interface{}, error) {
	return types.NewSection(4, header.(types.SectionTitle), elements.([]interface{}))
}

func (p *parser) callonSection41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection41(stack["header"], stack["elements"])
}

func (c *current) onSection4Title1(attributes, level, content, id interface{}) (interface{}, error) {
	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection4Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4Title1(stack["attributes"], stack["level"], stack["content"], stack["id"])
}

func (c *current) onSection4Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection4Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection4Block1(stack["content"])
}

func (c *current) onSection51(header, elements interface{}) (interface{}, error) {
	return types.NewSection(5, header.(types.SectionTitle), elements.([]interface{}))
}

func (p *parser) callonSection51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection51(stack["header"], stack["elements"])
}

func (c *current) onSection5Title1(attributes, level, content, id interface{}) (interface{}, error) {
	return types.NewSectionTitle(content.(types.InlineElements), append(attributes.([]interface{}), id))
}

func (p *parser) callonSection5Title1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5Title1(stack["attributes"], stack["level"], stack["content"], stack["id"])
}

func (c *current) onSection5Block1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonSection5Block1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5Block1(stack["content"])
}

func (c *current) onList1(attributes, elements interface{}) (interface{}, error) {
	return types.NewList(elements.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList1(stack["attributes"], stack["elements"])
}

func (c *current) onListAttribute1(attribute interface{}) (interface{}, error) {
	return attribute, nil
}

func (p *parser) callonListAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListAttribute1(stack["attribute"])
}

func (c *current) onListID1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"ID": id.(string)}, nil
}

func (p *parser) callonListID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListID1(stack["id"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return map[string]interface{}{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onListParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonListParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph1(stack["lines"])
}

func (c *current) onListItemContinuation1() (interface{}, error) {
	return types.NewListItemContinuation()
}

func (p *parser) callonListItemContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListItemContinuation1()
}

func (c *current) onContinuedDocumentBlock1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonContinuedDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedDocumentBlock1(stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix2(style interface{}) (interface{}, error) {
	// numbering style: "."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)
}

func (p *parser) callonOrderedListItemPrefix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix2(stack["style"])
}

func (c *current) onOrderedListItemPrefix10(style interface{}) (interface{}, error) {
	// numbering style: ".."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10(stack["style"])
}

func (c *current) onOrderedListItemPrefix18(style interface{}) (interface{}, error) {
	// numbering style: "..."
	return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
}

func (p *parser) callonOrderedListItemPrefix18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix18(stack["style"])
}

func (c *current) onOrderedListItemPrefix26(style interface{}) (interface{}, error) {
	// numbering style: "...."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
}

func (p *parser) callonOrderedListItemPrefix26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix26(stack["style"])
}

func (c *current) onOrderedListItemPrefix34(style interface{}) (interface{}, error) {
	// numbering style: "....."
	return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	// explicit numbering
}

func (p *parser) callonOrderedListItemPrefix34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix34(stack["style"])
}

func (c *current) onOrderedListItemPrefix42(style interface{}) (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)
}

func (p *parser) callonOrderedListItemPrefix42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix42(stack["style"])
}

func (c *current) onOrderedListItemPrefix60(style interface{}) (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)
}

func (p *parser) callonOrderedListItemPrefix60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix60(stack["style"])
}

func (c *current) onOrderedListItemPrefix78(style interface{}) (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)
}

func (p *parser) callonOrderedListItemPrefix78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix78(stack["style"])
}

func (c *current) onOrderedListItemPrefix96(style interface{}) (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)
}

func (p *parser) callonOrderedListItemPrefix96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix96(stack["style"])
}

func (c *current) onOrderedListItemPrefix114(style interface{}) (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)
}

func (p *parser) callonOrderedListItemPrefix114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix114(stack["style"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(prefix, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), content.([]interface{}))
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["prefix"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix2(level interface{}) (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
}

func (p *parser) callonUnorderedListItemPrefix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix2(stack["level"])
}

func (c *current) onUnorderedListItemPrefix10(level interface{}) (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10(stack["level"])
}

func (c *current) onUnorderedListItemPrefix18(level interface{}) (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
}

func (p *parser) callonUnorderedListItemPrefix18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix18(stack["level"])
}

func (c *current) onUnorderedListItemPrefix26(level interface{}) (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
}

func (p *parser) callonUnorderedListItemPrefix26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix26(stack["level"])
}

func (c *current) onUnorderedListItemPrefix34(level interface{}) (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
}

func (p *parser) callonUnorderedListItemPrefix34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix34(stack["level"])
}

func (c *current) onUnorderedListItemPrefix42(level interface{}) (interface{}, error) {
	// ignore whitespaces, only return the relevant "*"/"-" Word
	return types.NewUnorderedListItemPrefix(types.Dash, 1)
}

func (p *parser) callonUnorderedListItemPrefix42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix42(stack["level"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem2(term, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(term.([]interface{}), description.([]interface{}))
}

func (p *parser) callonLabeledListItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem2(stack["term"], stack["description"])
}

func (c *current) onLabeledListItem9(term interface{}) (interface{}, error) {
	// here, WS is optional since there is no description afterwards
	return types.NewLabeledListItem(term.([]interface{}), nil)
}

func (p *parser) callonLabeledListItem9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem9(stack["term"])
}

func (c *current) onLabeledListItemTerm1(term interface{}) (interface{}, error) {
	return term, nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["term"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {
	// TODO: replace with (ListParagraph+ ContinuedDocumentBlock*) and use a single rule for all item contents ?
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), append(attributes.([]interface{}), t.(types.AdmonitionKind)))

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph23(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph23(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onBoldText2(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoldText2(stack["content"])
}

func (c *current) onBoldText10(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewQuotedText(types.Bold, result)
}

func (p *parser) callonBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoldText10(stack["content"])
}

func (c *current) onBoldText18(content interface{}) (interface{}, error) {
	// single punctuation
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoldText18(stack["content"])
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "**", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText13(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "*", result)
}

func (p *parser) callonEscapedBoldText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText13(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText24(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["content"])
}

func (c *current) onItalicText2(content interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicText2(stack["content"])
}

func (c *current) onItalicText10(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewQuotedText(types.Italic, result)
}

func (p *parser) callonItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicText10(stack["content"])
}

func (c *current) onItalicText18(content interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onItalicText18(stack["content"])
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "__", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText13(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "_", result)
}

func (p *parser) callonEscapedItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText13(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText24(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["content"])
}

func (c *current) onMonospaceText2(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonospaceText2(stack["content"])
}

func (c *current) onMonospaceText10(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewQuotedText(types.Monospace, result)
}

func (p *parser) callonMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonospaceText10(stack["content"])
}

func (c *current) onMonospaceText18(content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonospaceText18(stack["content"])
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "``", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText13(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "`", result)
}

func (p *parser) callonEscapedMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText13(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText24(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.([]interface{}), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["content"])
}

func (c *current) onWordWithQuotePunctuation1() (interface{}, error) {
	// can have "*", "_" or "`" within, maybe because the user inserted another quote, or made an error (extra or missing space, for example)
	return c.text, nil
}

func (p *parser) callonWordWithQuotePunctuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWordWithQuotePunctuation1()
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, content.([]interface{}))
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, content.([]interface{}))
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onCrossReference1(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string))
}

func (p *parser) callonCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference1(stack["id"])
}

func (c *current) onExternalLink1(url, text interface{}) (interface{}, error) {
	if text != nil {
		return types.NewLink(url.([]interface{}), text.([]interface{}))
	}
	return types.NewLink(url.([]interface{}), nil)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["text"])
}

func (c *current) onRelativeLink1(url, text interface{}) (interface{}, error) {
	if text != nil {
		return types.NewLink(url.([]interface{}), text.([]interface{}))
	}
	return types.NewLink(url.([]interface{}), nil)
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["text"])
}

func (c *current) onBlockImage1(attributes, image interface{}) (interface{}, error) {
	// here we can ignore the blank line in the returned element
	return types.NewBlockImage(image.(types.ImageMacro), attributes.([]interface{}))
}

func (p *parser) callonBlockImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImage1(stack["attributes"], stack["image"])
}

func (c *current) onBlockImageMacro1(path, attributes interface{}) (interface{}, error) {
	return types.NewImageMacro(path.(string), attributes)
}

func (p *parser) callonBlockImageMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockImageMacro1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage1(image interface{}) (interface{}, error) {
	// here we can ignore the blank line in the returned element
	return types.NewInlineImage(image.(types.ImageMacro))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["image"])
}

func (c *current) onInlineImageMacro1(path, attributes interface{}) (interface{}, error) {
	return types.NewImageMacro(path.(string), attributes)
}

func (p *parser) callonInlineImageMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageMacro1(stack["path"], stack["attributes"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.FencedBlock, content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.ListingBlock, content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.ExampleBlock, content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockParagraph1(stack["lines"])
}

func (c *current) onParagraphWithSpaces1(spaces, content interface{}) (interface{}, error) {
	return types.NewLiteralBlock(spaces.([]interface{}), content.([]interface{}))
}

func (p *parser) callonParagraphWithSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithSpaces1(stack["spaces"], stack["content"])
}

func (c *current) onLiteralBlockContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonLiteralBlockContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockContent1(stack["content"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(content interface{}) (interface{}, error) {
	return types.NewLiteralBlock([]interface{}{}, content.([]interface{}))
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["content"])
}

func (c *current) onParagraphWithLiteralAttribute1(content interface{}) (interface{}, error) {
	return types.NewLiteralBlock([]interface{}{}, content.([]interface{}))
}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["content"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onWord1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord1()
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onURL_TEXT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL_TEXT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL_TEXT1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
		emptyState: make(storeDict),
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}

	// emptyState contains an empty storeDict, which is used to optimize cloneState if global "state" store is not used.
	emptyState storeDict
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	if len(p.cur.state) == 0 {
		if len(p.emptyState) > 0 {
			p.emptyState = make(storeDict)
		}
		return p.emptyState
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
