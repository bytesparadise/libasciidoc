// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 26, offset: 1015},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 42, offset: 1031},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 43, col: 1, offset: 1111},
			expr: &actionExpr{
				pos: position{line: 43, col: 19, offset: 1129},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 43, col: 19, offset: 1129},
					expr: &charClassMatcher{
						pos:        position{line: 43, col: 19, offset: 1129},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 51, col: 1, offset: 1368},
			expr: &actionExpr{
				pos: position{line: 51, col: 16, offset: 1383},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 51, col: 16, offset: 1383},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 51, col: 16, offset: 1383},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 51, col: 29, offset: 1396},
								expr: &ruleRefExpr{
									pos:  position{line: 51, col: 29, offset: 1396},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 51, col: 43, offset: 1410},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 51, offset: 1418},
								name: "RawDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 51, col: 70, offset: 1437},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawDocumentBlocks",
			pos:  position{line: 58, col: 1, offset: 1626},
			expr: &actionExpr{
				pos: position{line: 58, col: 22, offset: 1647},
				run: (*parser).callonRawDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 58, col: 22, offset: 1647},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 58, col: 22, offset: 1647},
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 22, offset: 1647},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 31, offset: 1656},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 58, col: 39, offset: 1664},
								expr: &ruleRefExpr{
									pos:  position{line: 58, col: 39, offset: 1664},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 56, offset: 1681},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 64, offset: 1689},
								expr: &ruleRefExpr{
									pos:  position{line: 58, col: 64, offset: 1689},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 67, col: 1, offset: 1941},
			expr: &choiceExpr{
				pos: position{line: 68, col: 9, offset: 1970},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 68, col: 9, offset: 1970},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2035},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 70, col: 11, offset: 2056},
						name: "SimpleRawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 71, col: 11, offset: 2085},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 11, offset: 2137},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 11, offset: 2155},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 11, offset: 2180},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 75, col: 11, offset: 2208},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 76, col: 11, offset: 2232},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 77, col: 11, offset: 2258},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 11, offset: 2287},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 11, offset: 2313},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 11, offset: 2348},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 11, offset: 2372},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 11, offset: 2404},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 83, col: 11, offset: 2430},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 84, col: 11, offset: 2467},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 85, col: 11, offset: 2492},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 11, offset: 2523},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 91, col: 1, offset: 2645},
			expr: &ruleRefExpr{
				pos:  position{line: 91, col: 16, offset: 2660},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 93, col: 1, offset: 2678},
			expr: &actionExpr{
				pos: position{line: 93, col: 20, offset: 2697},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 93, col: 20, offset: 2697},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 93, col: 20, offset: 2697},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 93, col: 41, offset: 2718},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 93, col: 49, offset: 2726},
								expr: &ruleRefExpr{
									pos:  position{line: 93, col: 50, offset: 2727},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 75, offset: 2752},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 97, col: 1, offset: 2832},
			expr: &seqExpr{
				pos: position{line: 97, col: 26, offset: 2857},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 97, col: 26, offset: 2857},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 97, col: 32, offset: 2863},
						expr: &ruleRefExpr{
							pos:  position{line: 97, col: 32, offset: 2863},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 39, offset: 2870},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 99, col: 1, offset: 2875},
			expr: &actionExpr{
				pos: position{line: 99, col: 27, offset: 2901},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 99, col: 27, offset: 2901},
					expr: &oneOrMoreExpr{
						pos: position{line: 99, col: 28, offset: 2902},
						expr: &seqExpr{
							pos: position{line: 99, col: 29, offset: 2903},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 99, col: 29, offset: 2903},
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 30, offset: 2904},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 99, col: 51, offset: 2925,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 106, col: 1, offset: 3091},
			expr: &actionExpr{
				pos: position{line: 106, col: 19, offset: 3109},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 106, col: 19, offset: 3109},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 106, col: 19, offset: 3109},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 106, col: 23, offset: 3113},
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 23, offset: 3113},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 30, offset: 3120},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 37, offset: 3127},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 52, offset: 3142},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 106, col: 56, offset: 3146},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 56, offset: 3146},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 74, offset: 3164},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 107, col: 9, offset: 3176},
							expr: &choiceExpr{
								pos: position{line: 107, col: 10, offset: 3177},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 107, col: 10, offset: 3177},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 107, col: 10, offset: 3177},
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 10, offset: 3177},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 17, offset: 3184},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 107, col: 37, offset: 3204},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 9, offset: 3227},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 18, offset: 3236},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 18, offset: 3236},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 109, col: 9, offset: 3263},
							expr: &choiceExpr{
								pos: position{line: 109, col: 10, offset: 3264},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 109, col: 10, offset: 3264},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 109, col: 10, offset: 3264},
												expr: &ruleRefExpr{
													pos:  position{line: 109, col: 10, offset: 3264},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 109, col: 17, offset: 3271},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 109, col: 37, offset: 3291},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 9, offset: 3314},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 19, offset: 3324},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 19, offset: 3324},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 114, col: 1, offset: 3425},
			expr: &choiceExpr{
				pos: position{line: 114, col: 20, offset: 3444},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 114, col: 20, offset: 3444},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 114, col: 48, offset: 3472},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 116, col: 1, offset: 3502},
			expr: &actionExpr{
				pos: position{line: 116, col: 30, offset: 3531},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 116, col: 30, offset: 3531},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 116, col: 30, offset: 3531},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 30, offset: 3531},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 116, col: 37, offset: 3538},
							expr: &litMatcher{
								pos:        position{line: 116, col: 38, offset: 3539},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 116, col: 42, offset: 3543},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 116, col: 51, offset: 3552},
								expr: &ruleRefExpr{
									pos:  position{line: 116, col: 51, offset: 3552},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 116, col: 68, offset: 3569},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 120, col: 1, offset: 3639},
			expr: &actionExpr{
				pos: position{line: 120, col: 33, offset: 3671},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 120, col: 33, offset: 3671},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 33, offset: 3671},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 33, offset: 3671},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 120, col: 40, offset: 3678},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 120, col: 51, offset: 3689},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 59, offset: 3697},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 75, offset: 3713},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 124, col: 1, offset: 3792},
			expr: &actionExpr{
				pos: position{line: 124, col: 19, offset: 3810},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 124, col: 19, offset: 3810},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 124, col: 19, offset: 3810},
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 19, offset: 3810},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 124, col: 26, offset: 3817},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 36, offset: 3827},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 124, col: 56, offset: 3847},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 124, col: 62, offset: 3853},
								expr: &ruleRefExpr{
									pos:  position{line: 124, col: 63, offset: 3854},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 124, col: 85, offset: 3876},
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 85, offset: 3876},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 124, col: 92, offset: 3883},
							expr: &litMatcher{
								pos:        position{line: 124, col: 92, offset: 3883},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 124, col: 97, offset: 3888},
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 97, offset: 3888},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 129, col: 1, offset: 4033},
			expr: &actionExpr{
				pos: position{line: 129, col: 23, offset: 4055},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 129, col: 23, offset: 4055},
					expr: &charClassMatcher{
						pos:        position{line: 129, col: 23, offset: 4055},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 133, col: 1, offset: 4102},
			expr: &actionExpr{
				pos: position{line: 133, col: 24, offset: 4125},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 133, col: 24, offset: 4125},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 133, col: 24, offset: 4125},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 28, offset: 4129},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 133, col: 35, offset: 4136},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 133, col: 36, offset: 4137},
									expr: &charClassMatcher{
										pos:        position{line: 133, col: 36, offset: 4137},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 135, col: 4, offset: 4184},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 141, col: 1, offset: 4345},
			expr: &actionExpr{
				pos: position{line: 141, col: 21, offset: 4365},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 141, col: 21, offset: 4365},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 141, col: 21, offset: 4365},
							expr: &ruleRefExpr{
								pos:  position{line: 141, col: 21, offset: 4365},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 141, col: 28, offset: 4372},
							expr: &litMatcher{
								pos:        position{line: 141, col: 29, offset: 4373},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 141, col: 33, offset: 4377},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 142, col: 9, offset: 4396},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 142, col: 10, offset: 4397},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 142, col: 10, offset: 4397},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 142, col: 10, offset: 4397},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 142, col: 21, offset: 4408},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 142, col: 45, offset: 4432},
													expr: &litMatcher{
														pos:        position{line: 142, col: 45, offset: 4432},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 142, col: 50, offset: 4437},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 142, col: 58, offset: 4445},
														expr: &ruleRefExpr{
															pos:  position{line: 142, col: 59, offset: 4446},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 142, col: 82, offset: 4469},
													expr: &litMatcher{
														pos:        position{line: 142, col: 82, offset: 4469},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 142, col: 87, offset: 4474},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 142, col: 97, offset: 4484},
														expr: &ruleRefExpr{
															pos:  position{line: 142, col: 98, offset: 4485},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 144, col: 15, offset: 4602},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 144, col: 15, offset: 4602},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 144, col: 15, offset: 4602},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 144, col: 24, offset: 4611},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 46, offset: 4633},
													expr: &litMatcher{
														pos:        position{line: 144, col: 46, offset: 4633},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 51, offset: 4638},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 61, offset: 4648},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 62, offset: 4649},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 13, offset: 4758},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 151, col: 1, offset: 4888},
			expr: &choiceExpr{
				pos: position{line: 151, col: 27, offset: 4914},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 151, col: 27, offset: 4914},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 151, col: 27, offset: 4914},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 151, col: 27, offset: 4914},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 151, col: 32, offset: 4919},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 151, col: 39, offset: 4926},
									expr: &charClassMatcher{
										pos:        position{line: 151, col: 39, offset: 4926},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4974},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 153, col: 5, offset: 4974},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 153, col: 5, offset: 4974},
									expr: &litMatcher{
										pos:        position{line: 153, col: 5, offset: 4974},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 11, offset: 4980},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 153, col: 18, offset: 4987},
									expr: &charClassMatcher{
										pos:        position{line: 153, col: 18, offset: 4987},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 153, col: 29, offset: 4998},
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 29, offset: 4998},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 153, col: 36, offset: 5005},
									expr: &litMatcher{
										pos:        position{line: 153, col: 37, offset: 5006},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 157, col: 1, offset: 5046},
			expr: &actionExpr{
				pos: position{line: 157, col: 25, offset: 5070},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 157, col: 25, offset: 5070},
					expr: &charClassMatcher{
						pos:        position{line: 157, col: 25, offset: 5070},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 161, col: 1, offset: 5116},
			expr: &actionExpr{
				pos: position{line: 161, col: 27, offset: 5142},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 161, col: 27, offset: 5142},
					expr: &charClassMatcher{
						pos:        position{line: 161, col: 27, offset: 5142},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 168, col: 1, offset: 5295},
			expr: &actionExpr{
				pos: position{line: 168, col: 25, offset: 5319},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 168, col: 25, offset: 5319},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 168, col: 25, offset: 5319},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 168, col: 29, offset: 5323},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 168, col: 35, offset: 5329},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 168, col: 50, offset: 5344},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 9, offset: 5357},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 169, col: 15, offset: 5363},
								expr: &actionExpr{
									pos: position{line: 169, col: 16, offset: 5364},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 169, col: 17, offset: 5365},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 169, col: 17, offset: 5365},
												expr: &ruleRefExpr{
													pos:  position{line: 169, col: 17, offset: 5365},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 169, col: 24, offset: 5372},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 169, col: 31, offset: 5379},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 171, col: 13, offset: 5453},
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 13, offset: 5453},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 20, offset: 5460},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 178, col: 1, offset: 5700},
			expr: &actionExpr{
				pos: position{line: 178, col: 18, offset: 5717},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 178, col: 18, offset: 5717},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 178, col: 18, offset: 5717},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 178, col: 28, offset: 5727},
							expr: &charClassMatcher{
								pos:        position{line: 178, col: 29, offset: 5728},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 182, col: 1, offset: 5776},
			expr: &actionExpr{
				pos: position{line: 182, col: 30, offset: 5805},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 182, col: 30, offset: 5805},
					expr: &charClassMatcher{
						pos:        position{line: 182, col: 30, offset: 5805},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 186, col: 1, offset: 5850},
			expr: &choiceExpr{
				pos: position{line: 186, col: 19, offset: 5868},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 186, col: 19, offset: 5868},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 186, col: 19, offset: 5868},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 186, col: 19, offset: 5868},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 24, offset: 5873},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 30, offset: 5879},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 186, col: 45, offset: 5894},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 186, col: 49, offset: 5898},
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 49, offset: 5898},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 56, offset: 5905},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 188, col: 5, offset: 5965},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 188, col: 5, offset: 5965},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 188, col: 5, offset: 5965},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 188, col: 9, offset: 5969},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 15, offset: 5975},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 188, col: 30, offset: 5990},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 188, col: 35, offset: 5995},
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 35, offset: 5995},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 42, offset: 6002},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 192, col: 1, offset: 6061},
			expr: &choiceExpr{
				pos: position{line: 192, col: 26, offset: 6086},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 192, col: 26, offset: 6086},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 39, offset: 6099},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 194, col: 1, offset: 6108},
			expr: &actionExpr{
				pos: position{line: 194, col: 12, offset: 6119},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 194, col: 12, offset: 6119},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 194, col: 12, offset: 6119},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 16, offset: 6123},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 21, offset: 6128},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 194, col: 35, offset: 6142},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 198, col: 1, offset: 6208},
			expr: &choiceExpr{
				pos: position{line: 198, col: 15, offset: 6222},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 198, col: 15, offset: 6222},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 29, offset: 6236},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 43, offset: 6250},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 61, offset: 6268},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 80, offset: 6287},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 98, offset: 6305},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 200, col: 1, offset: 6323},
			expr: &actionExpr{
				pos: position{line: 200, col: 16, offset: 6338},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 200, col: 16, offset: 6338},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 200, col: 16, offset: 6338},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 200, col: 28, offset: 6350},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 200, col: 33, offset: 6355},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 200, col: 47, offset: 6369},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 204, col: 1, offset: 6445},
			expr: &actionExpr{
				pos: position{line: 204, col: 16, offset: 6460},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 204, col: 16, offset: 6460},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 204, col: 16, offset: 6460},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 204, col: 29, offset: 6473},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 34, offset: 6478},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 204, col: 48, offset: 6492},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 208, col: 1, offset: 6567},
			expr: &actionExpr{
				pos: position{line: 208, col: 20, offset: 6586},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 208, col: 20, offset: 6586},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 208, col: 20, offset: 6586},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 208, col: 32, offset: 6598},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 37, offset: 6603},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 208, col: 51, offset: 6617},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 208, col: 55, offset: 6621},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 208, col: 61, offset: 6627},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 208, col: 70, offset: 6636},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 212, col: 1, offset: 6714},
			expr: &actionExpr{
				pos: position{line: 212, col: 21, offset: 6734},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 212, col: 21, offset: 6734},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 212, col: 21, offset: 6734},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 34, offset: 6747},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 39, offset: 6752},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 212, col: 53, offset: 6766},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 57, offset: 6770},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 212, col: 63, offset: 6776},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 212, col: 72, offset: 6785},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 216, col: 1, offset: 6862},
			expr: &actionExpr{
				pos: position{line: 216, col: 20, offset: 6881},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 216, col: 20, offset: 6881},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 216, col: 20, offset: 6881},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 32, offset: 6893},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 37, offset: 6898},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 216, col: 51, offset: 6912},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 55, offset: 6916},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 216, col: 60, offset: 6921},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 216, col: 60, offset: 6921},
									expr: &charClassMatcher{
										pos:        position{line: 216, col: 60, offset: 6921},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 216, col: 108, offset: 6969},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 220, col: 1, offset: 7051},
			expr: &actionExpr{
				pos: position{line: 220, col: 21, offset: 7071},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 220, col: 21, offset: 7071},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 220, col: 21, offset: 7071},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 34, offset: 7084},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 39, offset: 7089},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 220, col: 53, offset: 7103},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 57, offset: 7107},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 220, col: 62, offset: 7112},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 220, col: 62, offset: 7112},
									expr: &charClassMatcher{
										pos:        position{line: 220, col: 62, offset: 7112},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 220, col: 110, offset: 7160},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 224, col: 1, offset: 7241},
			expr: &actionExpr{
				pos: position{line: 224, col: 15, offset: 7255},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 224, col: 15, offset: 7255},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 224, col: 15, offset: 7255},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 224, col: 21, offset: 7261},
								expr: &ruleRefExpr{
									pos:  position{line: 224, col: 22, offset: 7262},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 224, col: 41, offset: 7281},
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 41, offset: 7281},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 228, col: 1, offset: 7351},
			expr: &actionExpr{
				pos: position{line: 228, col: 21, offset: 7371},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 228, col: 21, offset: 7371},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 228, col: 21, offset: 7371},
							expr: &choiceExpr{
								pos: position{line: 228, col: 23, offset: 7373},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 228, col: 23, offset: 7373},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 228, col: 29, offset: 7379},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 229, col: 5, offset: 7456},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 229, col: 11, offset: 7462},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 229, col: 11, offset: 7462},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 230, col: 9, offset: 7483},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 231, col: 9, offset: 7507},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 232, col: 9, offset: 7544},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 233, col: 9, offset: 7572},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7600},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7627},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7654},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7691},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 238, col: 9, offset: 7727},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 242, col: 1, offset: 7830},
			expr: &actionExpr{
				pos: position{line: 242, col: 14, offset: 7843},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 242, col: 14, offset: 7843},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 14, offset: 7843},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 19, offset: 7848},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 23, offset: 7852},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 242, col: 27, offset: 7856},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 242, col: 32, offset: 7861},
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 32, offset: 7861},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 39, offset: 7868},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 246, col: 1, offset: 7911},
			expr: &actionExpr{
				pos: position{line: 246, col: 20, offset: 7930},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 246, col: 20, offset: 7930},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 246, col: 20, offset: 7930},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 25, offset: 7935},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 29, offset: 7939},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 246, col: 33, offset: 7943},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 246, col: 38, offset: 7948},
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 38, offset: 7948},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 252, col: 1, offset: 8225},
			expr: &actionExpr{
				pos: position{line: 252, col: 17, offset: 8241},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 252, col: 17, offset: 8241},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 252, col: 17, offset: 8241},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 252, col: 21, offset: 8245},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 28, offset: 8252},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 49, offset: 8273},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 49, offset: 8273},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 56, offset: 8280},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 256, col: 1, offset: 8338},
			expr: &actionExpr{
				pos: position{line: 256, col: 24, offset: 8361},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 256, col: 24, offset: 8361},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 256, col: 24, offset: 8361},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 256, col: 32, offset: 8369},
							expr: &charClassMatcher{
								pos:        position{line: 256, col: 32, offset: 8369},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 262, col: 1, offset: 8623},
			expr: &actionExpr{
				pos: position{line: 262, col: 31, offset: 8653},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 262, col: 31, offset: 8653},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 31, offset: 8653},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 262, col: 35, offset: 8657},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 262, col: 42, offset: 8664},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 262, col: 42, offset: 8664},
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 42, offset: 8664},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 262, col: 57, offset: 8679},
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 57, offset: 8679},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 262, col: 69, offset: 8691},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 262, col: 73, offset: 8695},
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 73, offset: 8695},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 262, col: 80, offset: 8702},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 266, col: 1, offset: 8756},
			expr: &choiceExpr{
				pos: position{line: 266, col: 15, offset: 8770},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 266, col: 15, offset: 8770},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 31, offset: 8786},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 46, offset: 8801},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 270, col: 1, offset: 9029},
			expr: &actionExpr{
				pos: position{line: 270, col: 18, offset: 9046},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 270, col: 18, offset: 9046},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 18, offset: 9046},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 22, offset: 9050},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 270, col: 29, offset: 9057},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 270, col: 29, offset: 9057},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 29, offset: 9057},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 270, col: 45, offset: 9073},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 45, offset: 9073},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 270, col: 60, offset: 9088},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 60, offset: 9088},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 270, col: 82, offset: 9110},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 82, offset: 9110},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 270, col: 104, offset: 9132},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 104, offset: 9132},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 116, offset: 9144},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 120, offset: 9148},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 274, col: 1, offset: 9202},
			expr: &actionExpr{
				pos: position{line: 274, col: 19, offset: 9220},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 274, col: 19, offset: 9220},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 274, col: 25, offset: 9226},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 278, col: 1, offset: 9287},
			expr: &actionExpr{
				pos: position{line: 278, col: 25, offset: 9311},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 278, col: 25, offset: 9311},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 278, col: 25, offset: 9311},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 25, offset: 9311},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 32, offset: 9318},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 278, col: 36, offset: 9322},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 36, offset: 9322},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 278, col: 43, offset: 9329},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 278, col: 49, offset: 9335},
								expr: &ruleRefExpr{
									pos:  position{line: 278, col: 49, offset: 9335},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 285, col: 1, offset: 9476},
			expr: &actionExpr{
				pos: position{line: 285, col: 25, offset: 9500},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 285, col: 25, offset: 9500},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 25, offset: 9500},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 25, offset: 9500},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 285, col: 32, offset: 9507},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 36, offset: 9511},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 36, offset: 9511},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 43, offset: 9518},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 49, offset: 9524},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 49, offset: 9524},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 292, col: 1, offset: 9665},
			expr: &actionExpr{
				pos: position{line: 292, col: 21, offset: 9685},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 292, col: 21, offset: 9685},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 292, col: 21, offset: 9685},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 292, col: 33, offset: 9697},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 33, offset: 9697},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 292, col: 40, offset: 9704},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 296, col: 1, offset: 9756},
			expr: &actionExpr{
				pos: position{line: 296, col: 30, offset: 9785},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 296, col: 30, offset: 9785},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 30, offset: 9785},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 296, col: 39, offset: 9794},
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 39, offset: 9794},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 46, offset: 9801},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 301, col: 1, offset: 9942},
			expr: &actionExpr{
				pos: position{line: 301, col: 30, offset: 9971},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 301, col: 30, offset: 9971},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 30, offset: 9971},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 34, offset: 9975},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 37, offset: 9978},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 53, offset: 9994},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 57, offset: 9998},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 57, offset: 9998},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 64, offset: 10005},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 306, col: 1, offset: 10160},
			expr: &actionExpr{
				pos: position{line: 306, col: 21, offset: 10180},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 306, col: 21, offset: 10180},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 306, col: 21, offset: 10180},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 307, col: 5, offset: 10195},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 14, offset: 10204},
								expr: &actionExpr{
									pos: position{line: 307, col: 15, offset: 10205},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 307, col: 15, offset: 10205},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 307, col: 15, offset: 10205},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 307, col: 19, offset: 10209},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 307, col: 24, offset: 10214},
													expr: &ruleRefExpr{
														pos:  position{line: 307, col: 25, offset: 10215},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 308, col: 5, offset: 10270},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 308, col: 12, offset: 10277},
								expr: &actionExpr{
									pos: position{line: 308, col: 13, offset: 10278},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 308, col: 13, offset: 10278},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 308, col: 13, offset: 10278},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 308, col: 17, offset: 10282},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 308, col: 22, offset: 10287},
													expr: &ruleRefExpr{
														pos:  position{line: 308, col: 23, offset: 10288},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 309, col: 5, offset: 10335},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 9, offset: 10339},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 9, offset: 10339},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 16, offset: 10346},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 314, col: 1, offset: 10497},
			expr: &actionExpr{
				pos: position{line: 314, col: 19, offset: 10515},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 314, col: 19, offset: 10515},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 19, offset: 10515},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 23, offset: 10519},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 314, col: 34, offset: 10530},
								expr: &ruleRefExpr{
									pos:  position{line: 314, col: 35, offset: 10531},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 54, offset: 10550},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 58, offset: 10554},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 58, offset: 10554},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 65, offset: 10561},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 318, col: 1, offset: 10633},
			expr: &choiceExpr{
				pos: position{line: 318, col: 21, offset: 10653},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 318, col: 21, offset: 10653},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 318, col: 49, offset: 10681},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 320, col: 1, offset: 10711},
			expr: &actionExpr{
				pos: position{line: 320, col: 30, offset: 10740},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 320, col: 30, offset: 10740},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 320, col: 30, offset: 10740},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 35, offset: 10745},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 320, col: 49, offset: 10759},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 53, offset: 10763},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 320, col: 59, offset: 10769},
								expr: &ruleRefExpr{
									pos:  position{line: 320, col: 60, offset: 10770},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 320, col: 77, offset: 10787},
							expr: &litMatcher{
								pos:        position{line: 320, col: 77, offset: 10787},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 320, col: 82, offset: 10792},
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 82, offset: 10792},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 324, col: 1, offset: 10891},
			expr: &actionExpr{
				pos: position{line: 324, col: 33, offset: 10923},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 324, col: 33, offset: 10923},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 324, col: 33, offset: 10923},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 38, offset: 10928},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 324, col: 52, offset: 10942},
							expr: &litMatcher{
								pos:        position{line: 324, col: 52, offset: 10942},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 324, col: 57, offset: 10947},
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 57, offset: 10947},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 328, col: 1, offset: 11035},
			expr: &actionExpr{
				pos: position{line: 328, col: 17, offset: 11051},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 328, col: 17, offset: 11051},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 328, col: 17, offset: 11051},
							expr: &litMatcher{
								pos:        position{line: 328, col: 18, offset: 11052},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 328, col: 26, offset: 11060},
							expr: &litMatcher{
								pos:        position{line: 328, col: 27, offset: 11061},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 328, col: 35, offset: 11069},
							expr: &litMatcher{
								pos:        position{line: 328, col: 36, offset: 11070},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 328, col: 46, offset: 11080},
							expr: &oneOrMoreExpr{
								pos: position{line: 328, col: 48, offset: 11082},
								expr: &ruleRefExpr{
									pos:  position{line: 328, col: 48, offset: 11082},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 328, col: 56, offset: 11090},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 328, col: 61, offset: 11095},
								expr: &charClassMatcher{
									pos:        position{line: 328, col: 61, offset: 11095},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 328, col: 75, offset: 11109},
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 75, offset: 11109},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 332, col: 1, offset: 11152},
			expr: &actionExpr{
				pos: position{line: 332, col: 19, offset: 11170},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 332, col: 19, offset: 11170},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 332, col: 26, offset: 11177},
						expr: &charClassMatcher{
							pos:        position{line: 332, col: 26, offset: 11177},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 336, col: 1, offset: 11228},
			expr: &actionExpr{
				pos: position{line: 336, col: 29, offset: 11256},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 336, col: 29, offset: 11256},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 336, col: 29, offset: 11256},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 336, col: 36, offset: 11263},
								expr: &charClassMatcher{
									pos:        position{line: 336, col: 36, offset: 11263},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 336, col: 50, offset: 11277},
							expr: &litMatcher{
								pos:        position{line: 336, col: 51, offset: 11278},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 340, col: 1, offset: 11444},
			expr: &actionExpr{
				pos: position{line: 340, col: 20, offset: 11463},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 340, col: 20, offset: 11463},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 340, col: 20, offset: 11463},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 340, col: 29, offset: 11472},
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 29, offset: 11472},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 340, col: 36, offset: 11479},
							expr: &litMatcher{
								pos:        position{line: 340, col: 36, offset: 11479},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 340, col: 41, offset: 11484},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 340, col: 48, offset: 11491},
								expr: &ruleRefExpr{
									pos:  position{line: 340, col: 49, offset: 11492},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 340, col: 66, offset: 11509},
							expr: &litMatcher{
								pos:        position{line: 340, col: 66, offset: 11509},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 340, col: 71, offset: 11514},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 340, col: 77, offset: 11520},
								expr: &ruleRefExpr{
									pos:  position{line: 340, col: 78, offset: 11521},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 340, col: 95, offset: 11538},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 340, col: 99, offset: 11542},
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 99, offset: 11542},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 340, col: 106, offset: 11549},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 344, col: 1, offset: 11618},
			expr: &actionExpr{
				pos: position{line: 344, col: 20, offset: 11637},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 344, col: 20, offset: 11637},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 20, offset: 11637},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 344, col: 29, offset: 11646},
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 29, offset: 11646},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 344, col: 36, offset: 11653},
							expr: &litMatcher{
								pos:        position{line: 344, col: 36, offset: 11653},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 41, offset: 11658},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 344, col: 48, offset: 11665},
								expr: &ruleRefExpr{
									pos:  position{line: 344, col: 49, offset: 11666},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 344, col: 66, offset: 11683},
							expr: &litMatcher{
								pos:        position{line: 344, col: 66, offset: 11683},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 71, offset: 11688},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 344, col: 77, offset: 11694},
								expr: &ruleRefExpr{
									pos:  position{line: 344, col: 78, offset: 11695},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 95, offset: 11712},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 344, col: 99, offset: 11716},
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 99, offset: 11716},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 106, offset: 11723},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 348, col: 1, offset: 11810},
			expr: &actionExpr{
				pos: position{line: 348, col: 19, offset: 11828},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 348, col: 20, offset: 11829},
					expr: &charClassMatcher{
						pos:        position{line: 348, col: 20, offset: 11829},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 352, col: 1, offset: 11878},
			expr: &actionExpr{
				pos: position{line: 352, col: 20, offset: 11897},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 352, col: 20, offset: 11897},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 20, offset: 11897},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 24, offset: 11901},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 352, col: 31, offset: 11908},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 352, col: 31, offset: 11908},
										expr: &ruleRefExpr{
											pos:  position{line: 352, col: 31, offset: 11908},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 352, col: 51, offset: 11928},
										expr: &ruleRefExpr{
											pos:  position{line: 352, col: 51, offset: 11928},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 352, col: 66, offset: 11943},
										expr: &ruleRefExpr{
											pos:  position{line: 352, col: 66, offset: 11943},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 352, col: 78, offset: 11955},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 356, col: 1, offset: 12009},
			expr: &actionExpr{
				pos: position{line: 356, col: 23, offset: 12031},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 356, col: 23, offset: 12031},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 356, col: 28, offset: 12036},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 360, col: 1, offset: 12095},
			expr: &actionExpr{
				pos: position{line: 360, col: 25, offset: 12119},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 360, col: 25, offset: 12119},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 360, col: 25, offset: 12119},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 360, col: 36, offset: 12130},
								expr: &ruleRefExpr{
									pos:  position{line: 360, col: 37, offset: 12131},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 360, col: 56, offset: 12150},
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 56, offset: 12150},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 67, offset: 12161},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 364, col: 1, offset: 12269},
			expr: &choiceExpr{
				pos: position{line: 364, col: 18, offset: 12286},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 364, col: 18, offset: 12286},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 36, offset: 12304},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 58, offset: 12326},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 366, col: 1, offset: 12345},
			expr: &actionExpr{
				pos: position{line: 366, col: 24, offset: 12368},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 366, col: 24, offset: 12368},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 366, col: 24, offset: 12368},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 366, col: 28, offset: 12372},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 35, offset: 12379},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 366, col: 50, offset: 12394},
							expr: &charClassMatcher{
								pos:        position{line: 366, col: 51, offset: 12395},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 370, col: 1, offset: 12455},
			expr: &actionExpr{
				pos: position{line: 370, col: 20, offset: 12474},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 370, col: 20, offset: 12474},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 370, col: 20, offset: 12474},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 370, col: 24, offset: 12478},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 27, offset: 12481},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 370, col: 42, offset: 12496},
							expr: &charClassMatcher{
								pos:        position{line: 370, col: 43, offset: 12497},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 374, col: 1, offset: 12549},
			expr: &actionExpr{
				pos: position{line: 374, col: 22, offset: 12570},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 374, col: 22, offset: 12570},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 22, offset: 12570},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 26, offset: 12574},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 31, offset: 12579},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 374, col: 46, offset: 12594},
							expr: &charClassMatcher{
								pos:        position{line: 374, col: 47, offset: 12595},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 379, col: 1, offset: 12695},
			expr: &actionExpr{
				pos: position{line: 379, col: 20, offset: 12714},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 379, col: 20, offset: 12714},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 379, col: 20, offset: 12714},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 26, offset: 12720},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 379, col: 41, offset: 12735},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 42, offset: 12736},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 383, col: 1, offset: 12772},
			expr: &choiceExpr{
				pos: position{line: 383, col: 14, offset: 12785},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 383, col: 14, offset: 12785},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 26, offset: 12797},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 38, offset: 12809},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 50, offset: 12821},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 385, col: 1, offset: 12835},
			expr: &actionExpr{
				pos: position{line: 385, col: 15, offset: 12849},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 385, col: 15, offset: 12849},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 385, col: 21, offset: 12855},
						expr: &ruleRefExpr{
							pos:  position{line: 385, col: 21, offset: 12855},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 389, col: 1, offset: 12920},
			expr: &actionExpr{
				pos: position{line: 389, col: 18, offset: 12937},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 389, col: 18, offset: 12937},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 389, col: 18, offset: 12937},
							expr: &litMatcher{
								pos:        position{line: 389, col: 18, offset: 12937},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 389, col: 23, offset: 12942},
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 23, offset: 12942},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 389, col: 30, offset: 12949},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 32, offset: 12951},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 389, col: 45, offset: 12964},
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 45, offset: 12964},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 389, col: 52, offset: 12971},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 389, col: 56, offset: 12975},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 389, col: 59, offset: 12978},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 389, col: 59, offset: 12978},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 389, col: 71, offset: 12990},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 389, col: 83, offset: 13002},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 394, col: 1, offset: 13191},
			expr: &actionExpr{
				pos: position{line: 394, col: 14, offset: 13204},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 394, col: 14, offset: 13204},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 394, col: 14, offset: 13204},
							expr: &charClassMatcher{
								pos:        position{line: 394, col: 14, offset: 13204},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 394, col: 21, offset: 13211},
							expr: &charClassMatcher{
								pos:        position{line: 394, col: 22, offset: 13212},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 400, col: 1, offset: 13348},
			expr: &actionExpr{
				pos: position{line: 400, col: 14, offset: 13361},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 400, col: 14, offset: 13361},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 400, col: 14, offset: 13361},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 14, offset: 13361},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 21, offset: 13368},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 25, offset: 13372},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 29, offset: 13376},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 41, offset: 13388},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 400, col: 45, offset: 13392},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 45, offset: 13392},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 400, col: 52, offset: 13399},
							expr: &charClassMatcher{
								pos:        position{line: 400, col: 53, offset: 13400},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 402, col: 1, offset: 13427},
			expr: &actionExpr{
				pos: position{line: 402, col: 16, offset: 13442},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 402, col: 16, offset: 13442},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 402, col: 20, offset: 13446},
						expr: &choiceExpr{
							pos: position{line: 402, col: 22, offset: 13448},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 402, col: 22, offset: 13448},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 402, col: 37, offset: 13463},
									expr: &charClassMatcher{
										pos:        position{line: 402, col: 37, offset: 13463},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 402, col: 51, offset: 13477},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 404, col: 1, offset: 13517},
			expr: &actionExpr{
				pos: position{line: 404, col: 17, offset: 13533},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 404, col: 17, offset: 13533},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 407, col: 1, offset: 13593},
			expr: &actionExpr{
				pos: position{line: 407, col: 14, offset: 13606},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 407, col: 14, offset: 13606},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 407, col: 14, offset: 13606},
							expr: &ruleRefExpr{
								pos:  position{line: 407, col: 14, offset: 13606},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 407, col: 21, offset: 13613},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 407, col: 25, offset: 13617},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 407, col: 29, offset: 13621},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 407, col: 41, offset: 13633},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 407, col: 45, offset: 13637},
							expr: &ruleRefExpr{
								pos:  position{line: 407, col: 45, offset: 13637},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 409, col: 1, offset: 13665},
			expr: &actionExpr{
				pos: position{line: 409, col: 16, offset: 13680},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 409, col: 16, offset: 13680},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 409, col: 20, offset: 13684},
						expr: &choiceExpr{
							pos: position{line: 409, col: 22, offset: 13686},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 409, col: 22, offset: 13686},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 409, col: 37, offset: 13701},
									expr: &charClassMatcher{
										pos:        position{line: 409, col: 37, offset: 13701},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 409, col: 51, offset: 13715},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 411, col: 1, offset: 13755},
			expr: &actionExpr{
				pos: position{line: 411, col: 17, offset: 13771},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 411, col: 17, offset: 13771},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 414, col: 1, offset: 13862},
			expr: &actionExpr{
				pos: position{line: 414, col: 17, offset: 13878},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 414, col: 17, offset: 13878},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 414, col: 17, offset: 13878},
							expr: &charClassMatcher{
								pos:        position{line: 414, col: 17, offset: 13878},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 414, col: 30, offset: 13891},
							expr: &charClassMatcher{
								pos:        position{line: 414, col: 31, offset: 13892},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 417, col: 1, offset: 14003},
			expr: &actionExpr{
				pos: position{line: 417, col: 19, offset: 14021},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 417, col: 19, offset: 14021},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 417, col: 19, offset: 14021},
							expr: &charClassMatcher{
								pos:        position{line: 417, col: 19, offset: 14021},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 417, col: 31, offset: 14033},
							expr: &charClassMatcher{
								pos:        position{line: 417, col: 32, offset: 14034},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 419, col: 1, offset: 14091},
			expr: &choiceExpr{
				pos: position{line: 419, col: 19, offset: 14109},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 419, col: 19, offset: 14109},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 419, col: 41, offset: 14131},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 419, col: 65, offset: 14155},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 423, col: 1, offset: 14353},
			expr: &actionExpr{
				pos: position{line: 423, col: 24, offset: 14376},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 423, col: 24, offset: 14376},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 24, offset: 14376},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 423, col: 31, offset: 14383},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 423, col: 31, offset: 14383},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 426, col: 5, offset: 14469},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 426, col: 13, offset: 14477},
								expr: &choiceExpr{
									pos: position{line: 426, col: 14, offset: 14478},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 426, col: 14, offset: 14478},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 427, col: 12, offset: 14509},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 427, col: 12, offset: 14509},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 427, col: 34, offset: 14531},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 427, col: 34, offset: 14531},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 427, col: 34, offset: 14531},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 427, col: 39, offset: 14536},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 434, col: 1, offset: 14719},
			expr: &actionExpr{
				pos: position{line: 434, col: 13, offset: 14731},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 434, col: 13, offset: 14731},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 434, col: 13, offset: 14731},
							expr: &seqExpr{
								pos: position{line: 434, col: 15, offset: 14733},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 434, col: 15, offset: 14733},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 434, col: 19, offset: 14737},
										expr: &ruleRefExpr{
											pos:  position{line: 434, col: 19, offset: 14737},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 434, col: 29, offset: 14747},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 33, offset: 14751},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 434, col: 46, offset: 14764},
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 46, offset: 14764},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 434, col: 53, offset: 14771},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 434, col: 57, offset: 14775},
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 57, offset: 14775},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 434, col: 64, offset: 14782},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 70, offset: 14788},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 434, col: 85, offset: 14803},
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 85, offset: 14803},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 439, col: 1, offset: 14984},
			expr: &actionExpr{
				pos: position{line: 439, col: 17, offset: 15000},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 439, col: 17, offset: 15000},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 439, col: 17, offset: 15000},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 26, offset: 15009},
							expr: &charClassMatcher{
								pos:        position{line: 439, col: 26, offset: 15009},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 443, col: 1, offset: 15057},
			expr: &choiceExpr{
				pos: position{line: 443, col: 19, offset: 15075},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 443, col: 19, offset: 15075},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 443, col: 35, offset: 15091},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 443, col: 59, offset: 15115},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 443, col: 83, offset: 15139},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 445, col: 1, offset: 15155},
			expr: &actionExpr{
				pos: position{line: 445, col: 19, offset: 15173},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 445, col: 19, offset: 15173},
					expr: &charClassMatcher{
						pos:        position{line: 445, col: 19, offset: 15173},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 449, col: 1, offset: 15226},
			expr: &actionExpr{
				pos: position{line: 449, col: 26, offset: 15251},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 449, col: 26, offset: 15251},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 449, col: 26, offset: 15251},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 449, col: 30, offset: 15255},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 449, col: 39, offset: 15264},
								expr: &choiceExpr{
									pos: position{line: 450, col: 5, offset: 15270},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 450, col: 6, offset: 15271},
											run: (*parser).callonAttrValueSingleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 450, col: 6, offset: 15271},
												expr: &charClassMatcher{
													pos:        position{line: 450, col: 6, offset: 15271},
													val:        "[^'\\r\\n\\uFFFD]",
													chars:      []rune{'\'', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 452, col: 10, offset: 15353},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 452, col: 31, offset: 15374},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 456, col: 1, offset: 15416},
			expr: &actionExpr{
				pos: position{line: 456, col: 26, offset: 15441},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 456, col: 26, offset: 15441},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 456, col: 26, offset: 15441},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 456, col: 31, offset: 15446},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 456, col: 40, offset: 15455},
								expr: &choiceExpr{
									pos: position{line: 457, col: 5, offset: 15461},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 457, col: 6, offset: 15462},
											run: (*parser).callonAttrValueDoubleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 457, col: 6, offset: 15462},
												expr: &charClassMatcher{
													pos:        position{line: 457, col: 6, offset: 15462},
													val:        "[^\"\\r\\n\\uFFFD]",
													chars:      []rune{'"', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 459, col: 10, offset: 15544},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 459, col: 31, offset: 15565},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 465, col: 1, offset: 15805},
			expr: &actionExpr{
				pos: position{line: 465, col: 18, offset: 15822},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 465, col: 18, offset: 15822},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 472, col: 1, offset: 15957},
			expr: &actionExpr{
				pos: position{line: 472, col: 12, offset: 15968},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 472, col: 12, offset: 15968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 472, col: 12, offset: 15968},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 472, col: 23, offset: 15979},
								expr: &ruleRefExpr{
									pos:  position{line: 472, col: 24, offset: 15980},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 473, col: 5, offset: 15997},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 473, col: 12, offset: 16004},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 473, col: 12, offset: 16004},
									expr: &litMatcher{
										pos:        position{line: 473, col: 13, offset: 16005},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 477, col: 5, offset: 16096},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 481, col: 5, offset: 16248},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 5, offset: 16248},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 12, offset: 16255},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 19, offset: 16262},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 34, offset: 16277},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 481, col: 38, offset: 16281},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 38, offset: 16281},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 481, col: 56, offset: 16299},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 485, col: 1, offset: 16405},
			expr: &actionExpr{
				pos: position{line: 485, col: 18, offset: 16422},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 485, col: 18, offset: 16422},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 485, col: 27, offset: 16431},
						expr: &seqExpr{
							pos: position{line: 485, col: 28, offset: 16432},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 485, col: 28, offset: 16432},
									expr: &ruleRefExpr{
										pos:  position{line: 485, col: 29, offset: 16433},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 485, col: 37, offset: 16441},
									expr: &ruleRefExpr{
										pos:  position{line: 485, col: 38, offset: 16442},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 485, col: 54, offset: 16458},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 489, col: 1, offset: 16579},
			expr: &actionExpr{
				pos: position{line: 489, col: 17, offset: 16595},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 489, col: 17, offset: 16595},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 489, col: 26, offset: 16604},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 489, col: 26, offset: 16604},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 490, col: 11, offset: 16619},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 491, col: 11, offset: 16664},
								expr: &ruleRefExpr{
									pos:  position{line: 491, col: 11, offset: 16664},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 11, offset: 16682},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 11, offset: 16711},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 500, col: 1, offset: 16862},
			expr: &seqExpr{
				pos: position{line: 500, col: 31, offset: 16892},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 500, col: 31, offset: 16892},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 500, col: 41, offset: 16902},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 505, col: 1, offset: 17013},
			expr: &actionExpr{
				pos: position{line: 505, col: 19, offset: 17031},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 505, col: 19, offset: 17031},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 505, col: 19, offset: 17031},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 25, offset: 17037},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 505, col: 40, offset: 17052},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 505, col: 45, offset: 17057},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 52, offset: 17064},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 68, offset: 17080},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 75, offset: 17087},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 509, col: 1, offset: 17202},
			expr: &actionExpr{
				pos: position{line: 509, col: 20, offset: 17221},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 509, col: 20, offset: 17221},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 509, col: 20, offset: 17221},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 26, offset: 17227},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 509, col: 41, offset: 17242},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 509, col: 45, offset: 17246},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 52, offset: 17253},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 68, offset: 17269},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 75, offset: 17276},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 513, col: 1, offset: 17392},
			expr: &actionExpr{
				pos: position{line: 513, col: 18, offset: 17409},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 513, col: 18, offset: 17409},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 513, col: 18, offset: 17409},
							expr: &litMatcher{
								pos:        position{line: 513, col: 19, offset: 17410},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 513, col: 30, offset: 17421},
							expr: &charClassMatcher{
								pos:        position{line: 513, col: 30, offset: 17421},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 517, col: 1, offset: 17470},
			expr: &actionExpr{
				pos: position{line: 517, col: 19, offset: 17488},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 517, col: 19, offset: 17488},
					expr: &charClassMatcher{
						pos:        position{line: 517, col: 19, offset: 17488},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 521, col: 1, offset: 17536},
			expr: &actionExpr{
				pos: position{line: 521, col: 24, offset: 17559},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 521, col: 24, offset: 17559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 521, col: 24, offset: 17559},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 521, col: 28, offset: 17563},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 521, col: 34, offset: 17569},
								expr: &ruleRefExpr{
									pos:  position{line: 521, col: 35, offset: 17570},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 521, col: 54, offset: 17589},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 528, col: 1, offset: 17771},
			expr: &actionExpr{
				pos: position{line: 528, col: 18, offset: 17788},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 528, col: 18, offset: 17788},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 528, col: 18, offset: 17788},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 528, col: 24, offset: 17794},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 528, col: 24, offset: 17794},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 528, col: 24, offset: 17794},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 528, col: 36, offset: 17806},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 528, col: 42, offset: 17812},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 528, col: 56, offset: 17826},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 528, col: 74, offset: 17844},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 530, col: 8, offset: 17991},
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 8, offset: 17991},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 15, offset: 17998},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 534, col: 1, offset: 18050},
			expr: &actionExpr{
				pos: position{line: 534, col: 26, offset: 18075},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 534, col: 26, offset: 18075},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 534, col: 26, offset: 18075},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 534, col: 30, offset: 18079},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 534, col: 36, offset: 18085},
								expr: &choiceExpr{
									pos: position{line: 534, col: 37, offset: 18086},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 534, col: 37, offset: 18086},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 534, col: 59, offset: 18108},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 534, col: 80, offset: 18129},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 534, col: 99, offset: 18148},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 538, col: 1, offset: 18220},
			expr: &actionExpr{
				pos: position{line: 538, col: 24, offset: 18243},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 538, col: 24, offset: 18243},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 538, col: 24, offset: 18243},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 33, offset: 18252},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 40, offset: 18259},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 538, col: 66, offset: 18285},
							expr: &litMatcher{
								pos:        position{line: 538, col: 66, offset: 18285},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 542, col: 1, offset: 18344},
			expr: &actionExpr{
				pos: position{line: 542, col: 29, offset: 18372},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 542, col: 29, offset: 18372},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 542, col: 29, offset: 18372},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 542, col: 36, offset: 18379},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 542, col: 36, offset: 18379},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 543, col: 11, offset: 18496},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 544, col: 11, offset: 18532},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 545, col: 11, offset: 18558},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 546, col: 11, offset: 18590},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 547, col: 11, offset: 18622},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 548, col: 11, offset: 18649},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 548, col: 31, offset: 18669},
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 31, offset: 18669},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 548, col: 39, offset: 18677},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 548, col: 39, offset: 18677},
									expr: &litMatcher{
										pos:        position{line: 548, col: 40, offset: 18678},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 548, col: 46, offset: 18684},
									expr: &litMatcher{
										pos:        position{line: 548, col: 47, offset: 18685},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 552, col: 1, offset: 18717},
			expr: &actionExpr{
				pos: position{line: 552, col: 23, offset: 18739},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 552, col: 23, offset: 18739},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 552, col: 23, offset: 18739},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 552, col: 30, offset: 18746},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 552, col: 30, offset: 18746},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 552, col: 47, offset: 18763},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 553, col: 5, offset: 18785},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 553, col: 12, offset: 18792},
								expr: &actionExpr{
									pos: position{line: 553, col: 13, offset: 18793},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 553, col: 13, offset: 18793},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 553, col: 13, offset: 18793},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 553, col: 17, offset: 18797},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 553, col: 24, offset: 18804},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 553, col: 24, offset: 18804},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 553, col: 41, offset: 18821},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 559, col: 1, offset: 18959},
			expr: &actionExpr{
				pos: position{line: 559, col: 29, offset: 18987},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 559, col: 29, offset: 18987},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 559, col: 29, offset: 18987},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 34, offset: 18992},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 559, col: 41, offset: 18999},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 559, col: 41, offset: 18999},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 559, col: 58, offset: 19016},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 5, offset: 19038},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 560, col: 12, offset: 19045},
								expr: &actionExpr{
									pos: position{line: 560, col: 13, offset: 19046},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 560, col: 13, offset: 19046},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 560, col: 13, offset: 19046},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 560, col: 17, offset: 19050},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 560, col: 24, offset: 19057},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 560, col: 24, offset: 19057},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 560, col: 41, offset: 19074},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 562, col: 9, offset: 19127},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 566, col: 1, offset: 19217},
			expr: &actionExpr{
				pos: position{line: 566, col: 19, offset: 19235},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 566, col: 19, offset: 19235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 566, col: 19, offset: 19235},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 26, offset: 19242},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 566, col: 34, offset: 19250},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 566, col: 39, offset: 19255},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 44, offset: 19260},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 570, col: 1, offset: 19348},
			expr: &actionExpr{
				pos: position{line: 570, col: 25, offset: 19372},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 570, col: 25, offset: 19372},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 570, col: 25, offset: 19372},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 570, col: 30, offset: 19377},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 37, offset: 19384},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 570, col: 45, offset: 19392},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 570, col: 50, offset: 19397},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 55, offset: 19402},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 570, col: 63, offset: 19410},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 574, col: 1, offset: 19495},
			expr: &actionExpr{
				pos: position{line: 574, col: 20, offset: 19514},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 574, col: 20, offset: 19514},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 574, col: 32, offset: 19526},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 578, col: 1, offset: 19621},
			expr: &actionExpr{
				pos: position{line: 578, col: 26, offset: 19646},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 578, col: 26, offset: 19646},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 578, col: 26, offset: 19646},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 31, offset: 19651},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 43, offset: 19663},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 578, col: 51, offset: 19671},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 582, col: 1, offset: 19763},
			expr: &actionExpr{
				pos: position{line: 582, col: 23, offset: 19785},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 582, col: 23, offset: 19785},
					expr: &charClassMatcher{
						pos:        position{line: 582, col: 23, offset: 19785},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 586, col: 1, offset: 19830},
			expr: &actionExpr{
				pos: position{line: 586, col: 23, offset: 19852},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 586, col: 23, offset: 19852},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 586, col: 24, offset: 19853},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 586, col: 24, offset: 19853},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 586, col: 34, offset: 19863},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 586, col: 42, offset: 19871},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 48, offset: 19877},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 586, col: 73, offset: 19902},
							expr: &litMatcher{
								pos:        position{line: 586, col: 73, offset: 19902},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 590, col: 1, offset: 20051},
			expr: &actionExpr{
				pos: position{line: 590, col: 28, offset: 20078},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 590, col: 28, offset: 20078},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 28, offset: 20078},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 35, offset: 20085},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 590, col: 54, offset: 20104},
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 54, offset: 20104},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 590, col: 62, offset: 20112},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 590, col: 62, offset: 20112},
									expr: &litMatcher{
										pos:        position{line: 590, col: 63, offset: 20113},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 590, col: 69, offset: 20119},
									expr: &litMatcher{
										pos:        position{line: 590, col: 70, offset: 20120},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 594, col: 1, offset: 20152},
			expr: &actionExpr{
				pos: position{line: 594, col: 22, offset: 20173},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 594, col: 22, offset: 20173},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 594, col: 22, offset: 20173},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 29, offset: 20180},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 595, col: 5, offset: 20194},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 595, col: 12, offset: 20201},
								expr: &actionExpr{
									pos: position{line: 595, col: 13, offset: 20202},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 595, col: 13, offset: 20202},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 595, col: 13, offset: 20202},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 595, col: 17, offset: 20206},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 595, col: 24, offset: 20213},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 601, col: 1, offset: 20344},
			expr: &choiceExpr{
				pos: position{line: 601, col: 13, offset: 20356},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 601, col: 13, offset: 20356},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 601, col: 13, offset: 20356},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 601, col: 18, offset: 20361},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 601, col: 18, offset: 20361},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 601, col: 30, offset: 20373},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 603, col: 5, offset: 20441},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 603, col: 5, offset: 20441},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 603, col: 5, offset: 20441},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 603, col: 9, offset: 20445},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 603, col: 14, offset: 20450},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 603, col: 14, offset: 20450},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 603, col: 26, offset: 20462},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 607, col: 1, offset: 20530},
			expr: &actionExpr{
				pos: position{line: 607, col: 16, offset: 20545},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 607, col: 16, offset: 20545},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 607, col: 16, offset: 20545},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 607, col: 23, offset: 20552},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 607, col: 23, offset: 20552},
									expr: &litMatcher{
										pos:        position{line: 607, col: 24, offset: 20553},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 610, col: 5, offset: 20607},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 620, col: 1, offset: 20901},
			expr: &actionExpr{
				pos: position{line: 620, col: 21, offset: 20921},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 620, col: 21, offset: 20921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 620, col: 21, offset: 20921},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 620, col: 29, offset: 20929},
								expr: &choiceExpr{
									pos: position{line: 620, col: 30, offset: 20930},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 620, col: 30, offset: 20930},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 620, col: 53, offset: 20953},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 620, col: 74, offset: 20974},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 620, col: 74, offset: 20974,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 107, offset: 21007},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 624, col: 1, offset: 21078},
			expr: &actionExpr{
				pos: position{line: 624, col: 25, offset: 21102},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 624, col: 25, offset: 21102},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 624, col: 25, offset: 21102},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 624, col: 33, offset: 21110},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 624, col: 38, offset: 21115},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 624, col: 38, offset: 21115},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 624, col: 78, offset: 21155},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 628, col: 1, offset: 21220},
			expr: &actionExpr{
				pos: position{line: 628, col: 23, offset: 21242},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 628, col: 23, offset: 21242},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 628, col: 23, offset: 21242},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 628, col: 31, offset: 21250},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 628, col: 36, offset: 21255},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 628, col: 36, offset: 21255},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 628, col: 76, offset: 21295},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 635, col: 1, offset: 21459},
			expr: &choiceExpr{
				pos: position{line: 635, col: 18, offset: 21476},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 635, col: 18, offset: 21476},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 635, col: 18, offset: 21476},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 27, offset: 21485},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 637, col: 9, offset: 21542},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 637, col: 9, offset: 21542},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 637, col: 15, offset: 21548},
								expr: &ruleRefExpr{
									pos:  position{line: 637, col: 16, offset: 21549},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 641, col: 1, offset: 21641},
			expr: &actionExpr{
				pos: position{line: 641, col: 22, offset: 21662},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 641, col: 22, offset: 21662},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 641, col: 22, offset: 21662},
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 23, offset: 21663},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 642, col: 5, offset: 21671},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 6, offset: 21672},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 643, col: 5, offset: 21687},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 6, offset: 21688},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 644, col: 5, offset: 21710},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 6, offset: 21711},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 645, col: 5, offset: 21737},
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 6, offset: 21738},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 646, col: 5, offset: 21766},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 6, offset: 21767},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 647, col: 5, offset: 21793},
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 6, offset: 21794},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 648, col: 5, offset: 21819},
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 6, offset: 21820},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 649, col: 5, offset: 21841},
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 6, offset: 21842},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 650, col: 5, offset: 21861},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 6, offset: 21862},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 21889},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 651, col: 11, offset: 21895},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 651, col: 11, offset: 21895},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 651, col: 20, offset: 21904},
										expr: &ruleRefExpr{
											pos:  position{line: 651, col: 21, offset: 21905},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 653, col: 12, offset: 22004},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 657, col: 1, offset: 22043},
			expr: &seqExpr{
				pos: position{line: 657, col: 25, offset: 22067},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 657, col: 25, offset: 22067},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 657, col: 29, offset: 22071},
						expr: &ruleRefExpr{
							pos:  position{line: 657, col: 29, offset: 22071},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 657, col: 36, offset: 22078},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 659, col: 1, offset: 22150},
			expr: &actionExpr{
				pos: position{line: 659, col: 29, offset: 22178},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 659, col: 29, offset: 22178},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 659, col: 29, offset: 22178},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 659, col: 50, offset: 22199},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 58, offset: 22207},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 663, col: 1, offset: 22313},
			expr: &actionExpr{
				pos: position{line: 663, col: 29, offset: 22341},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 663, col: 29, offset: 22341},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 663, col: 29, offset: 22341},
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 30, offset: 22342},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 5, offset: 22351},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 664, col: 14, offset: 22360},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 664, col: 14, offset: 22360},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 22385},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 22406},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 22434},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 22458},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 22485},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 670, col: 11, offset: 22514},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 22579},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 22630},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 22654},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 22686},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 22712},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 22749},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 22774},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 685, col: 1, offset: 22940},
			expr: &actionExpr{
				pos: position{line: 685, col: 20, offset: 22959},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 685, col: 20, offset: 22959},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 685, col: 20, offset: 22959},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 685, col: 26, offset: 22965},
								expr: &ruleRefExpr{
									pos:  position{line: 685, col: 27, offset: 22966},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 685, col: 40, offset: 22979},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 48, offset: 22987},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 685, col: 71, offset: 23010},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 80, offset: 23019},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 689, col: 1, offset: 23154},
			expr: &actionExpr{
				pos: position{line: 690, col: 5, offset: 23184},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 690, col: 5, offset: 23184},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 690, col: 5, offset: 23184},
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 5, offset: 23184},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 12, offset: 23191},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 692, col: 9, offset: 23254},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 692, col: 9, offset: 23254},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 692, col: 9, offset: 23254},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 692, col: 9, offset: 23254},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 692, col: 16, offset: 23261},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 692, col: 16, offset: 23261},
															expr: &litMatcher{
																pos:        position{line: 692, col: 17, offset: 23262},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 696, col: 9, offset: 23362},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 715, col: 11, offset: 24079},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 715, col: 11, offset: 24079},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 715, col: 11, offset: 24079},
													expr: &charClassMatcher{
														pos:        position{line: 715, col: 12, offset: 24080},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 715, col: 20, offset: 24088},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 717, col: 13, offset: 24199},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 717, col: 13, offset: 24199},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 717, col: 14, offset: 24200},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 717, col: 21, offset: 24207},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 719, col: 13, offset: 24321},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 719, col: 13, offset: 24321},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 719, col: 14, offset: 24322},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 719, col: 21, offset: 24329},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 721, col: 13, offset: 24443},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 721, col: 13, offset: 24443},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 721, col: 13, offset: 24443},
													expr: &charClassMatcher{
														pos:        position{line: 721, col: 14, offset: 24444},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 721, col: 22, offset: 24452},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 723, col: 13, offset: 24566},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 723, col: 13, offset: 24566},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 723, col: 13, offset: 24566},
													expr: &charClassMatcher{
														pos:        position{line: 723, col: 14, offset: 24567},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 723, col: 22, offset: 24575},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 725, col: 12, offset: 24688},
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 12, offset: 24688},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 729, col: 1, offset: 24723},
			expr: &actionExpr{
				pos: position{line: 729, col: 27, offset: 24749},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 729, col: 27, offset: 24749},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 729, col: 37, offset: 24759},
						expr: &ruleRefExpr{
							pos:  position{line: 729, col: 37, offset: 24759},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 736, col: 1, offset: 24959},
			expr: &actionExpr{
				pos: position{line: 736, col: 22, offset: 24980},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 736, col: 22, offset: 24980},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 736, col: 22, offset: 24980},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 736, col: 28, offset: 24986},
								expr: &ruleRefExpr{
									pos:  position{line: 736, col: 29, offset: 24987},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 736, col: 42, offset: 25000},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 50, offset: 25008},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 736, col: 75, offset: 25033},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 736, col: 86, offset: 25044},
								expr: &ruleRefExpr{
									pos:  position{line: 736, col: 87, offset: 25045},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 736, col: 117, offset: 25075},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 126, offset: 25084},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 740, col: 1, offset: 25237},
			expr: &actionExpr{
				pos: position{line: 741, col: 5, offset: 25269},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 741, col: 5, offset: 25269},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 741, col: 5, offset: 25269},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 5, offset: 25269},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 12, offset: 25276},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 741, col: 20, offset: 25284},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 743, col: 9, offset: 25341},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 743, col: 9, offset: 25341},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 743, col: 9, offset: 25341},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 743, col: 16, offset: 25348},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 743, col: 16, offset: 25348},
															expr: &litMatcher{
																pos:        position{line: 743, col: 17, offset: 25349},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 747, col: 9, offset: 25449},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 764, col: 14, offset: 26156},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 764, col: 21, offset: 26163},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 764, col: 22, offset: 26164},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 766, col: 13, offset: 26250},
							expr: &ruleRefExpr{
								pos:  position{line: 766, col: 13, offset: 26250},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 770, col: 1, offset: 26286},
			expr: &actionExpr{
				pos: position{line: 770, col: 32, offset: 26317},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 770, col: 32, offset: 26317},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 770, col: 32, offset: 26317},
							expr: &litMatcher{
								pos:        position{line: 770, col: 33, offset: 26318},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 37, offset: 26322},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 771, col: 7, offset: 26336},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 771, col: 7, offset: 26336},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 771, col: 7, offset: 26336},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 772, col: 7, offset: 26381},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 772, col: 7, offset: 26381},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 773, col: 7, offset: 26424},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 773, col: 7, offset: 26424},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 774, col: 7, offset: 26466},
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 7, offset: 26466},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 778, col: 1, offset: 26508},
			expr: &actionExpr{
				pos: position{line: 778, col: 29, offset: 26536},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 778, col: 29, offset: 26536},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 778, col: 39, offset: 26546},
						expr: &ruleRefExpr{
							pos:  position{line: 778, col: 39, offset: 26546},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 785, col: 1, offset: 26862},
			expr: &actionExpr{
				pos: position{line: 785, col: 20, offset: 26881},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 785, col: 20, offset: 26881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 785, col: 20, offset: 26881},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 785, col: 26, offset: 26887},
								expr: &ruleRefExpr{
									pos:  position{line: 785, col: 27, offset: 26888},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 785, col: 40, offset: 26901},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 46, offset: 26907},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 785, col: 75, offset: 26936},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 86, offset: 26947},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 785, col: 112, offset: 26973},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 785, col: 124, offset: 26985},
								expr: &ruleRefExpr{
									pos:  position{line: 785, col: 125, offset: 26986},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 789, col: 1, offset: 27127},
			expr: &seqExpr{
				pos: position{line: 789, col: 26, offset: 27152},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 789, col: 26, offset: 27152},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 789, col: 54, offset: 27180},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 791, col: 1, offset: 27206},
			expr: &choiceExpr{
				pos: position{line: 791, col: 33, offset: 27238},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 791, col: 33, offset: 27238},
						expr: &charClassMatcher{
							pos:        position{line: 791, col: 33, offset: 27238},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 791, col: 45, offset: 27250},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 791, col: 45, offset: 27250},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 791, col: 49, offset: 27254},
								expr: &litMatcher{
									pos:        position{line: 791, col: 50, offset: 27255},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 792, col: 1, offset: 27259},
			expr: &actionExpr{
				pos: position{line: 792, col: 32, offset: 27290},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 792, col: 32, offset: 27290},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 792, col: 42, offset: 27300},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 792, col: 42, offset: 27300},
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 42, offset: 27300},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 798, col: 1, offset: 27455},
			expr: &actionExpr{
				pos: position{line: 798, col: 24, offset: 27478},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 798, col: 24, offset: 27478},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 798, col: 33, offset: 27487},
						expr: &seqExpr{
							pos: position{line: 798, col: 34, offset: 27488},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 798, col: 34, offset: 27488},
									expr: &ruleRefExpr{
										pos:  position{line: 798, col: 35, offset: 27489},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 798, col: 43, offset: 27497},
									expr: &litMatcher{
										pos:        position{line: 798, col: 44, offset: 27498},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 798, col: 49, offset: 27503},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 802, col: 1, offset: 27630},
			expr: &actionExpr{
				pos: position{line: 802, col: 31, offset: 27660},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 802, col: 31, offset: 27660},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 802, col: 40, offset: 27669},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 802, col: 40, offset: 27669},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 803, col: 11, offset: 27684},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 804, col: 11, offset: 27733},
								expr: &ruleRefExpr{
									pos:  position{line: 804, col: 11, offset: 27733},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 805, col: 11, offset: 27751},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 806, col: 11, offset: 27776},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 807, col: 11, offset: 27805},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 808, col: 11, offset: 27825},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 809, col: 11, offset: 27914},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 810, col: 11, offset: 27935},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 811, col: 11, offset: 27958},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 812, col: 11, offset: 27973},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 813, col: 11, offset: 27998},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 814, col: 11, offset: 28021},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 815, col: 11, offset: 28042},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 816, col: 11, offset: 28069},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 28086},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 818, col: 11, offset: 28118},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 822, col: 1, offset: 28157},
			expr: &actionExpr{
				pos: position{line: 823, col: 5, offset: 28190},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 823, col: 5, offset: 28190},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 823, col: 5, offset: 28190},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 823, col: 16, offset: 28201},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 823, col: 16, offset: 28201},
									expr: &litMatcher{
										pos:        position{line: 823, col: 17, offset: 28202},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 826, col: 5, offset: 28260},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 830, col: 6, offset: 28436},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 830, col: 6, offset: 28436},
									expr: &choiceExpr{
										pos: position{line: 830, col: 7, offset: 28437},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 830, col: 7, offset: 28437},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 830, col: 15, offset: 28445},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 830, col: 27, offset: 28457},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 834, col: 1, offset: 28497},
			expr: &actionExpr{
				pos: position{line: 834, col: 31, offset: 28527},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 834, col: 31, offset: 28527},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 834, col: 40, offset: 28536},
						expr: &ruleRefExpr{
							pos:  position{line: 834, col: 41, offset: 28537},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 841, col: 1, offset: 28728},
			expr: &choiceExpr{
				pos: position{line: 841, col: 19, offset: 28746},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 841, col: 19, offset: 28746},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 841, col: 19, offset: 28746},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 843, col: 9, offset: 28792},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 843, col: 9, offset: 28792},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 845, col: 9, offset: 28840},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 845, col: 9, offset: 28840},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 847, col: 9, offset: 28898},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 847, col: 9, offset: 28898},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 849, col: 9, offset: 28952},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 849, col: 9, offset: 28952},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 860, col: 1, offset: 29268},
			expr: &choiceExpr{
				pos: position{line: 862, col: 5, offset: 29318},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 862, col: 5, offset: 29318},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 862, col: 5, offset: 29318},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 862, col: 5, offset: 29318},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 862, col: 16, offset: 29329},
										expr: &ruleRefExpr{
											pos:  position{line: 862, col: 17, offset: 29330},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 862, col: 30, offset: 29343},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 862, col: 33, offset: 29346},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 862, col: 49, offset: 29362},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 862, col: 54, offset: 29367},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 862, col: 60, offset: 29373},
										expr: &choiceExpr{
											pos: position{line: 862, col: 61, offset: 29374},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 862, col: 61, offset: 29374},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 862, col: 81, offset: 29394},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 29577},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 29577},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 866, col: 5, offset: 29577},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 866, col: 16, offset: 29588},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 17, offset: 29589},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 866, col: 30, offset: 29602},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 866, col: 35, offset: 29607},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 44, offset: 29616},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 870, col: 5, offset: 29806},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 870, col: 5, offset: 29806},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 870, col: 5, offset: 29806},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 870, col: 16, offset: 29817},
										expr: &ruleRefExpr{
											pos:  position{line: 870, col: 17, offset: 29818},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 870, col: 30, offset: 29831},
									run: (*parser).callonRawParagraph28,
								},
								&notExpr{
									pos: position{line: 877, col: 7, offset: 30110},
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 8, offset: 30111},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 877, col: 23, offset: 30126},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 877, col: 31, offset: 30134},
										expr: &ruleRefExpr{
											pos:  position{line: 877, col: 32, offset: 30135},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 30318},
						run: (*parser).callonRawParagraph34,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 30318},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 5, offset: 30318},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 881, col: 16, offset: 30329},
										expr: &ruleRefExpr{
											pos:  position{line: 881, col: 17, offset: 30330},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 881, col: 30, offset: 30343},
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 31, offset: 30344},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 881, col: 46, offset: 30359},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 881, col: 52, offset: 30365},
										expr: &choiceExpr{
											pos: position{line: 881, col: 53, offset: 30366},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 881, col: 53, offset: 30366},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 881, col: 73, offset: 30386},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 885, col: 1, offset: 30484},
			expr: &oneOrMoreExpr{
				pos: position{line: 885, col: 33, offset: 30516},
				expr: &actionExpr{
					pos: position{line: 885, col: 34, offset: 30517},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 885, col: 34, offset: 30517},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 885, col: 34, offset: 30517},
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 35, offset: 30518},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 885, col: 45, offset: 30528},
								expr: &litMatcher{
									pos:        position{line: 885, col: 45, offset: 30528},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 885, col: 51, offset: 30534},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 60, offset: 30543},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 889, col: 1, offset: 30676},
			expr: &actionExpr{
				pos: position{line: 890, col: 5, offset: 30701},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 890, col: 5, offset: 30701},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 890, col: 5, offset: 30701},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 14, offset: 30710},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 890, col: 39, offset: 30735},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 890, col: 43, offset: 30739},
							run: (*parser).callonRawParagraphLine6,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 900, col: 1, offset: 30974},
			expr: &actionExpr{
				pos: position{line: 900, col: 28, offset: 31001},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 900, col: 28, offset: 31001},
					expr: &charClassMatcher{
						pos:        position{line: 900, col: 28, offset: 31001},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 905, col: 1, offset: 31118},
			expr: &actionExpr{
				pos: position{line: 905, col: 23, offset: 31140},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 905, col: 23, offset: 31140},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 905, col: 23, offset: 31140},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 905, col: 34, offset: 31151},
								expr: &ruleRefExpr{
									pos:  position{line: 905, col: 35, offset: 31152},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 906, col: 5, offset: 31170},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 914, col: 5, offset: 31456},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 16, offset: 31467},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 915, col: 5, offset: 31493},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 915, col: 16, offset: 31504},
								expr: &choiceExpr{
									pos: position{line: 915, col: 17, offset: 31505},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 915, col: 17, offset: 31505},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 915, col: 37, offset: 31525},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 919, col: 1, offset: 31657},
			expr: &actionExpr{
				pos: position{line: 920, col: 5, offset: 31687},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 920, col: 5, offset: 31687},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 920, col: 5, offset: 31687},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 920, col: 14, offset: 31696},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 920, col: 14, offset: 31696},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 920, col: 14, offset: 31696},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 920, col: 23, offset: 31705},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 920, col: 28, offset: 31710},
											expr: &charClassMatcher{
												pos:        position{line: 920, col: 28, offset: 31710},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 920, col: 68, offset: 31750},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 926, col: 1, offset: 31958},
			expr: &choiceExpr{
				pos: position{line: 928, col: 5, offset: 32005},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 928, col: 5, offset: 32005},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 928, col: 5, offset: 32005},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 928, col: 5, offset: 32005},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 928, col: 16, offset: 32016},
										expr: &ruleRefExpr{
											pos:  position{line: 928, col: 17, offset: 32017},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 928, col: 30, offset: 32030},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 33, offset: 32033},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 928, col: 49, offset: 32049},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 928, col: 54, offset: 32054},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 928, col: 60, offset: 32060},
										expr: &ruleRefExpr{
											pos:  position{line: 928, col: 61, offset: 32061},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 32247},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 932, col: 5, offset: 32247},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 932, col: 5, offset: 32247},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 932, col: 16, offset: 32258},
										expr: &ruleRefExpr{
											pos:  position{line: 932, col: 17, offset: 32259},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 932, col: 30, offset: 32272},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 939, col: 7, offset: 32551},
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 8, offset: 32552},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 939, col: 23, offset: 32567},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 939, col: 31, offset: 32575},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 32, offset: 32576},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 32756},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 32756},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 943, col: 5, offset: 32756},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 943, col: 16, offset: 32767},
										expr: &ruleRefExpr{
											pos:  position{line: 943, col: 17, offset: 32768},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 943, col: 30, offset: 32781},
									expr: &ruleRefExpr{
										pos:  position{line: 943, col: 31, offset: 32782},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 943, col: 46, offset: 32797},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 943, col: 52, offset: 32803},
										expr: &ruleRefExpr{
											pos:  position{line: 943, col: 53, offset: 32804},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 947, col: 1, offset: 32899},
			expr: &ruleRefExpr{
				pos:  position{line: 947, col: 18, offset: 32916},
				name: "InlineElements",
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 954, col: 1, offset: 33126},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 33185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 33185},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 956, col: 5, offset: 33185},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 956, col: 5, offset: 33185},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 956, col: 16, offset: 33196},
										expr: &ruleRefExpr{
											pos:  position{line: 956, col: 17, offset: 33197},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 956, col: 30, offset: 33210},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 33, offset: 33213},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 956, col: 49, offset: 33229},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 956, col: 54, offset: 33234},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 61, offset: 33241},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 960, col: 5, offset: 33444},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 960, col: 5, offset: 33444},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 960, col: 5, offset: 33444},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 960, col: 16, offset: 33455},
										expr: &ruleRefExpr{
											pos:  position{line: 960, col: 17, offset: 33456},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 960, col: 30, offset: 33469},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 37, offset: 33476},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 964, col: 1, offset: 33580},
			expr: &actionExpr{
				pos: position{line: 964, col: 31, offset: 33610},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 964, col: 31, offset: 33610},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 964, col: 31, offset: 33610},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 964, col: 42, offset: 33621},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 964, col: 65, offset: 33644},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 964, col: 76, offset: 33655},
								expr: &actionExpr{
									pos: position{line: 964, col: 77, offset: 33656},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 964, col: 77, offset: 33656},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 964, col: 77, offset: 33656},
												expr: &ruleRefExpr{
													pos:  position{line: 964, col: 78, offset: 33657},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 964, col: 99, offset: 33678},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 964, col: 105, offset: 33684},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 964, col: 105, offset: 33684},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 964, col: 125, offset: 33704},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 972, col: 1, offset: 33943},
			expr: &actionExpr{
				pos: position{line: 973, col: 5, offset: 33969},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 973, col: 5, offset: 33969},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 973, col: 5, offset: 33969},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 973, col: 16, offset: 33980},
								expr: &ruleRefExpr{
									pos:  position{line: 973, col: 17, offset: 33981},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 974, col: 5, offset: 33998},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 981, col: 5, offset: 34203},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 981, col: 11, offset: 34209},
								expr: &ruleRefExpr{
									pos:  position{line: 981, col: 12, offset: 34210},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 989, col: 1, offset: 34416},
			expr: &actionExpr{
				pos: position{line: 989, col: 19, offset: 34434},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 989, col: 19, offset: 34434},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 989, col: 19, offset: 34434},
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 20, offset: 34435},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 990, col: 5, offset: 34449},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 990, col: 15, offset: 34459},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 990, col: 15, offset: 34459},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 990, col: 15, offset: 34459},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 990, col: 24, offset: 34468},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 992, col: 9, offset: 34560},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 992, col: 9, offset: 34560},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 992, col: 9, offset: 34560},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 992, col: 18, offset: 34569},
														expr: &ruleRefExpr{
															pos:  position{line: 992, col: 19, offset: 34570},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 992, col: 35, offset: 34586},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 998, col: 1, offset: 34703},
			expr: &actionExpr{
				pos: position{line: 999, col: 5, offset: 34726},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 999, col: 5, offset: 34726},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 999, col: 14, offset: 34735},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 999, col: 14, offset: 34735},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1000, col: 11, offset: 34796},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1001, col: 11, offset: 34841},
								expr: &ruleRefExpr{
									pos:  position{line: 1001, col: 11, offset: 34841},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1002, col: 11, offset: 34859},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1002, col: 11, offset: 34859},
										expr: &ruleRefExpr{
											pos:  position{line: 1002, col: 12, offset: 34860},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1003, col: 13, offset: 34878},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1003, col: 13, offset: 34878},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1004, col: 15, offset: 34905},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1005, col: 15, offset: 34930},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1006, col: 15, offset: 34955},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1007, col: 15, offset: 34982},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1008, col: 15, offset: 35002},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1009, col: 15, offset: 35095},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1010, col: 15, offset: 35125},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1011, col: 15, offset: 35193},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 1012, col: 15, offset: 35224},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1013, col: 15, offset: 35245},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1014, col: 15, offset: 35276},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1015, col: 15, offset: 35313},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1016, col: 15, offset: 35343},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1017, col: 15, offset: 35376},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1018, col: 15, offset: 35400},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 1019, col: 15, offset: 35433},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1026, col: 1, offset: 35656},
			expr: &actionExpr{
				pos: position{line: 1026, col: 14, offset: 35669},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1026, col: 14, offset: 35669},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1026, col: 14, offset: 35669},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1026, col: 20, offset: 35675},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1026, col: 24, offset: 35679},
							expr: &ruleRefExpr{
								pos:  position{line: 1026, col: 24, offset: 35679},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1026, col: 31, offset: 35686},
							expr: &ruleRefExpr{
								pos:  position{line: 1026, col: 32, offset: 35687},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1033, col: 1, offset: 35971},
			expr: &choiceExpr{
				pos: position{line: 1033, col: 15, offset: 35985},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1033, col: 15, offset: 35985},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1033, col: 41, offset: 36011},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1033, col: 65, offset: 36035},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1035, col: 1, offset: 36054},
			expr: &choiceExpr{
				pos: position{line: 1035, col: 32, offset: 36085},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1035, col: 32, offset: 36085},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1035, col: 32, offset: 36085},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1035, col: 36, offset: 36089},
								expr: &litMatcher{
									pos:        position{line: 1035, col: 37, offset: 36090},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1035, col: 43, offset: 36096},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1035, col: 43, offset: 36096},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1035, col: 47, offset: 36100},
								expr: &litMatcher{
									pos:        position{line: 1035, col: 48, offset: 36101},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1035, col: 54, offset: 36107},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1035, col: 54, offset: 36107},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1035, col: 58, offset: 36111},
								expr: &litMatcher{
									pos:        position{line: 1035, col: 59, offset: 36112},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1035, col: 65, offset: 36118},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1035, col: 65, offset: 36118},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1035, col: 69, offset: 36122},
								expr: &litMatcher{
									pos:        position{line: 1035, col: 70, offset: 36123},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1037, col: 1, offset: 36128},
			expr: &choiceExpr{
				pos: position{line: 1037, col: 34, offset: 36161},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1037, col: 34, offset: 36161},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1037, col: 41, offset: 36168},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1037, col: 48, offset: 36175},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1037, col: 55, offset: 36182},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1037, col: 62, offset: 36189},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1037, col: 68, offset: 36195},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1039, col: 1, offset: 36200},
			expr: &actionExpr{
				pos: position{line: 1039, col: 26, offset: 36225},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1039, col: 26, offset: 36225},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1039, col: 32, offset: 36231},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1039, col: 32, offset: 36231},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1040, col: 15, offset: 36266},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1041, col: 15, offset: 36302},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1042, col: 15, offset: 36338},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1043, col: 15, offset: 36378},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1044, col: 15, offset: 36407},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1045, col: 15, offset: 36438},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1049, col: 1, offset: 36592},
			expr: &choiceExpr{
				pos: position{line: 1049, col: 28, offset: 36619},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1049, col: 28, offset: 36619},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 15, offset: 36653},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 15, offset: 36689},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 15, offset: 36725},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1054, col: 1, offset: 36751},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 22, offset: 36772},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1054, col: 22, offset: 36772},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1055, col: 15, offset: 36803},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1056, col: 15, offset: 36835},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1057, col: 15, offset: 36867},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 15, offset: 36903},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 15, offset: 36939},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1061, col: 1, offset: 36963},
			expr: &choiceExpr{
				pos: position{line: 1061, col: 33, offset: 36995},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1061, col: 33, offset: 36995},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1061, col: 39, offset: 37001},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1061, col: 39, offset: 37001},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1065, col: 1, offset: 37134},
			expr: &actionExpr{
				pos: position{line: 1065, col: 25, offset: 37158},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1065, col: 25, offset: 37158},
					expr: &litMatcher{
						pos:        position{line: 1065, col: 25, offset: 37158},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1069, col: 1, offset: 37199},
			expr: &actionExpr{
				pos: position{line: 1069, col: 25, offset: 37223},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 25, offset: 37223},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1069, col: 25, offset: 37223},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1069, col: 30, offset: 37228},
							expr: &litMatcher{
								pos:        position{line: 1069, col: 30, offset: 37228},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1077, col: 1, offset: 37325},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 13, offset: 37337},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1077, col: 13, offset: 37337},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 35, offset: 37359},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1079, col: 1, offset: 37426},
			expr: &actionExpr{
				pos: position{line: 1079, col: 24, offset: 37449},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1079, col: 24, offset: 37449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1079, col: 24, offset: 37449},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1079, col: 30, offset: 37455},
								expr: &ruleRefExpr{
									pos:  position{line: 1079, col: 31, offset: 37456},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1079, col: 49, offset: 37474},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1079, col: 54, offset: 37479},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1079, col: 64, offset: 37489},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1079, col: 93, offset: 37518},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1083, col: 1, offset: 37605},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1083, col: 32, offset: 37636},
				expr: &ruleRefExpr{
					pos:  position{line: 1083, col: 32, offset: 37636},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1085, col: 1, offset: 37667},
			expr: &actionExpr{
				pos: position{line: 1085, col: 31, offset: 37697},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1085, col: 31, offset: 37697},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1085, col: 31, offset: 37697},
							expr: &litMatcher{
								pos:        position{line: 1085, col: 33, offset: 37699},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1085, col: 39, offset: 37705},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1085, col: 48, offset: 37714},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1085, col: 48, offset: 37714},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1086, col: 11, offset: 37729},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1087, col: 11, offset: 37778},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1087, col: 11, offset: 37778},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1087, col: 19, offset: 37786},
												expr: &ruleRefExpr{
													pos:  position{line: 1087, col: 20, offset: 37787},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1088, col: 11, offset: 37805},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1089, col: 11, offset: 37835},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1090, col: 11, offset: 37858},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1091, col: 11, offset: 37879},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1092, col: 11, offset: 37900},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1093, col: 11, offset: 37924},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1094, col: 11, offset: 37948},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1095, col: 11, offset: 37974},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1096, col: 11, offset: 38003},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1100, col: 1, offset: 38070},
			expr: &choiceExpr{
				pos: position{line: 1101, col: 5, offset: 38114},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1101, col: 5, offset: 38114},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1102, col: 7, offset: 38211},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1102, col: 7, offset: 38211},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1102, col: 7, offset: 38211},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1102, col: 12, offset: 38216},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1106, col: 1, offset: 38379},
			expr: &choiceExpr{
				pos: position{line: 1106, col: 24, offset: 38402},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1106, col: 24, offset: 38402},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1106, col: 24, offset: 38402},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1106, col: 24, offset: 38402},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1106, col: 30, offset: 38408},
										expr: &ruleRefExpr{
											pos:  position{line: 1106, col: 31, offset: 38409},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1106, col: 51, offset: 38429},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1106, col: 51, offset: 38429},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1106, col: 55, offset: 38433},
											expr: &litMatcher{
												pos:        position{line: 1106, col: 56, offset: 38434},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 61, offset: 38439},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 71, offset: 38449},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 100, offset: 38478},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1106, col: 104, offset: 38482},
									expr: &notExpr{
										pos: position{line: 1106, col: 106, offset: 38484},
										expr: &ruleRefExpr{
											pos:  position{line: 1106, col: 107, offset: 38485},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 38679},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1108, col: 5, offset: 38679},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1108, col: 5, offset: 38679},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1108, col: 11, offset: 38685},
										expr: &ruleRefExpr{
											pos:  position{line: 1108, col: 12, offset: 38686},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1108, col: 30, offset: 38704},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1108, col: 34, offset: 38708},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1108, col: 44, offset: 38718},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1108, col: 44, offset: 38718},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1108, col: 48, offset: 38722},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1108, col: 77, offset: 38751},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1112, col: 1, offset: 38957},
			expr: &seqExpr{
				pos: position{line: 1112, col: 32, offset: 38988},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1112, col: 32, offset: 38988},
						expr: &ruleRefExpr{
							pos:  position{line: 1112, col: 33, offset: 38989},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1112, col: 39, offset: 38995},
						expr: &ruleRefExpr{
							pos:  position{line: 1112, col: 39, offset: 38995},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1114, col: 1, offset: 39024},
			expr: &choiceExpr{
				pos: position{line: 1114, col: 31, offset: 39054},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1114, col: 31, offset: 39054},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1115, col: 11, offset: 39069},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1115, col: 11, offset: 39069},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1115, col: 19, offset: 39077},
								expr: &ruleRefExpr{
									pos:  position{line: 1115, col: 20, offset: 39078},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1116, col: 11, offset: 39096},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 11, offset: 39126},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1118, col: 11, offset: 39149},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1118, col: 11, offset: 39149},
								expr: &ruleRefExpr{
									pos:  position{line: 1118, col: 11, offset: 39149},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1118, col: 18, offset: 39156},
								expr: &seqExpr{
									pos: position{line: 1118, col: 19, offset: 39157},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1118, col: 19, offset: 39157},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1118, col: 23, offset: 39161},
											expr: &litMatcher{
												pos:        position{line: 1118, col: 24, offset: 39162},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1119, col: 11, offset: 39178},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1120, col: 11, offset: 39199},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1121, col: 11, offset: 39220},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1122, col: 11, offset: 39244},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 11, offset: 39268},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1124, col: 11, offset: 39294},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 11, offset: 39323},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1127, col: 1, offset: 39361},
			expr: &choiceExpr{
				pos: position{line: 1128, col: 5, offset: 39405},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1128, col: 5, offset: 39405},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1129, col: 7, offset: 39502},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1129, col: 7, offset: 39502},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1129, col: 7, offset: 39502},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1129, col: 11, offset: 39506},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1133, col: 1, offset: 39669},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 5, offset: 39693},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 39693},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1134, col: 5, offset: 39693},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1134, col: 5, offset: 39693},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1134, col: 18, offset: 39706},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1134, col: 40, offset: 39728},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1134, col: 45, offset: 39733},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1134, col: 55, offset: 39743},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1134, col: 84, offset: 39772},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1136, col: 9, offset: 39929},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1136, col: 9, offset: 39929},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1136, col: 9, offset: 39929},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 22, offset: 39942},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1136, col: 44, offset: 39964},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 49, offset: 39969},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 59, offset: 39979},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1136, col: 88, offset: 40008},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1139, col: 9, offset: 40208},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1139, col: 9, offset: 40208},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1139, col: 9, offset: 40208},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 22, offset: 40221},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 44, offset: 40243},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1139, col: 48, offset: 40247},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 58, offset: 40257},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 87, offset: 40286},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1147, col: 1, offset: 40494},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 15, offset: 40508},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1147, col: 15, offset: 40508},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 39, offset: 40532},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1149, col: 1, offset: 40555},
			expr: &actionExpr{
				pos: position{line: 1149, col: 26, offset: 40580},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1149, col: 26, offset: 40580},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1149, col: 26, offset: 40580},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1149, col: 32, offset: 40586},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 33, offset: 40587},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1149, col: 51, offset: 40605},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 56, offset: 40610},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 66, offset: 40620},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1149, col: 97, offset: 40651},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1153, col: 1, offset: 40785},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1153, col: 34, offset: 40818},
				expr: &ruleRefExpr{
					pos:  position{line: 1153, col: 34, offset: 40818},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1155, col: 1, offset: 40850},
			expr: &actionExpr{
				pos: position{line: 1155, col: 33, offset: 40882},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 33, offset: 40882},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1155, col: 33, offset: 40882},
							expr: &litMatcher{
								pos:        position{line: 1155, col: 35, offset: 40884},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 41, offset: 40890},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1155, col: 50, offset: 40899},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1155, col: 50, offset: 40899},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 11, offset: 40914},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1157, col: 11, offset: 40963},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1157, col: 11, offset: 40963},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1157, col: 19, offset: 40971},
												expr: &ruleRefExpr{
													pos:  position{line: 1157, col: 20, offset: 40972},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1158, col: 11, offset: 40990},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1159, col: 11, offset: 41022},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1160, col: 11, offset: 41045},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1161, col: 11, offset: 41064},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1162, col: 11, offset: 41085},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1163, col: 11, offset: 41109},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1164, col: 11, offset: 41133},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1165, col: 11, offset: 41159},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1166, col: 11, offset: 41188},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1170, col: 1, offset: 41257},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 5, offset: 41303},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1171, col: 5, offset: 41303},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1172, col: 7, offset: 41402},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1172, col: 7, offset: 41402},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1172, col: 7, offset: 41402},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1172, col: 12, offset: 41407},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1176, col: 1, offset: 41572},
			expr: &choiceExpr{
				pos: position{line: 1176, col: 26, offset: 41597},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1176, col: 26, offset: 41597},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1176, col: 26, offset: 41597},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1176, col: 26, offset: 41597},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1176, col: 32, offset: 41603},
										expr: &ruleRefExpr{
											pos:  position{line: 1176, col: 33, offset: 41604},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1176, col: 52, offset: 41623},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1176, col: 52, offset: 41623},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1176, col: 56, offset: 41627},
											expr: &litMatcher{
												pos:        position{line: 1176, col: 57, offset: 41628},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1176, col: 62, offset: 41633},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 72, offset: 41643},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1176, col: 103, offset: 41674},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1178, col: 5, offset: 41864},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1178, col: 5, offset: 41864},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1178, col: 5, offset: 41864},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1178, col: 11, offset: 41870},
										expr: &ruleRefExpr{
											pos:  position{line: 1178, col: 12, offset: 41871},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1178, col: 30, offset: 41889},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1178, col: 34, offset: 41893},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1178, col: 44, offset: 41903},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1178, col: 44, offset: 41903},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1178, col: 48, offset: 41907},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1178, col: 79, offset: 41938},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1182, col: 1, offset: 42148},
			expr: &seqExpr{
				pos: position{line: 1182, col: 34, offset: 42181},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1182, col: 34, offset: 42181},
						expr: &ruleRefExpr{
							pos:  position{line: 1182, col: 35, offset: 42182},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1182, col: 41, offset: 42188},
						expr: &ruleRefExpr{
							pos:  position{line: 1182, col: 41, offset: 42188},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1184, col: 1, offset: 42219},
			expr: &choiceExpr{
				pos: position{line: 1184, col: 33, offset: 42251},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1184, col: 33, offset: 42251},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1185, col: 11, offset: 42266},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1185, col: 11, offset: 42266},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1185, col: 19, offset: 42274},
								expr: &ruleRefExpr{
									pos:  position{line: 1185, col: 20, offset: 42275},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 11, offset: 42293},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1187, col: 11, offset: 42325},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1188, col: 11, offset: 42348},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1188, col: 11, offset: 42348},
								expr: &ruleRefExpr{
									pos:  position{line: 1188, col: 11, offset: 42348},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1188, col: 18, offset: 42355},
								expr: &seqExpr{
									pos: position{line: 1188, col: 19, offset: 42356},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1188, col: 19, offset: 42356},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1188, col: 23, offset: 42360},
											expr: &litMatcher{
												pos:        position{line: 1188, col: 24, offset: 42361},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1189, col: 11, offset: 42377},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 11, offset: 42396},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1191, col: 11, offset: 42417},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 11, offset: 42441},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 11, offset: 42465},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 11, offset: 42491},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 11, offset: 42520},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1197, col: 1, offset: 42560},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 5, offset: 42606},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1198, col: 5, offset: 42606},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1199, col: 7, offset: 42705},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1199, col: 7, offset: 42705},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1199, col: 7, offset: 42705},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1199, col: 11, offset: 42709},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1203, col: 1, offset: 42875},
			expr: &choiceExpr{
				pos: position{line: 1204, col: 5, offset: 42901},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1204, col: 5, offset: 42901},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1204, col: 5, offset: 42901},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1204, col: 5, offset: 42901},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1204, col: 18, offset: 42914},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1204, col: 40, offset: 42936},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1204, col: 45, offset: 42941},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1204, col: 55, offset: 42951},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1204, col: 86, offset: 42982},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1206, col: 9, offset: 43139},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1206, col: 9, offset: 43139},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1206, col: 9, offset: 43139},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1206, col: 22, offset: 43152},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1206, col: 44, offset: 43174},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1206, col: 49, offset: 43179},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1206, col: 59, offset: 43189},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1206, col: 90, offset: 43220},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1209, col: 9, offset: 43420},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1209, col: 9, offset: 43420},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1209, col: 9, offset: 43420},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1209, col: 22, offset: 43433},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1209, col: 44, offset: 43455},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1209, col: 48, offset: 43459},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1209, col: 58, offset: 43469},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1209, col: 89, offset: 43500},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1216, col: 1, offset: 43710},
			expr: &choiceExpr{
				pos: position{line: 1216, col: 18, offset: 43727},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1216, col: 18, offset: 43727},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 45, offset: 43754},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1218, col: 1, offset: 43780},
			expr: &actionExpr{
				pos: position{line: 1218, col: 29, offset: 43808},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 29, offset: 43808},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1218, col: 29, offset: 43808},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1218, col: 35, offset: 43814},
								expr: &ruleRefExpr{
									pos:  position{line: 1218, col: 36, offset: 43815},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1218, col: 54, offset: 43833},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 59, offset: 43838},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 69, offset: 43848},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1218, col: 103, offset: 43882},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1222, col: 1, offset: 44019},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1222, col: 37, offset: 44055},
				expr: &ruleRefExpr{
					pos:  position{line: 1222, col: 37, offset: 44055},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1224, col: 1, offset: 44122},
			expr: &actionExpr{
				pos: position{line: 1224, col: 36, offset: 44157},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1224, col: 36, offset: 44157},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1224, col: 36, offset: 44157},
							expr: &litMatcher{
								pos:        position{line: 1224, col: 38, offset: 44159},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1224, col: 44, offset: 44165},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1224, col: 53, offset: 44174},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1224, col: 53, offset: 44174},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1225, col: 11, offset: 44189},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1226, col: 11, offset: 44238},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1226, col: 11, offset: 44238},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1226, col: 19, offset: 44246},
												expr: &ruleRefExpr{
													pos:  position{line: 1226, col: 20, offset: 44247},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1227, col: 11, offset: 44265},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1228, col: 11, offset: 44288},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1228, col: 11, offset: 44288},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1232, col: 11, offset: 44472},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1233, col: 11, offset: 44507},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1234, col: 11, offset: 44526},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1235, col: 11, offset: 44547},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1236, col: 11, offset: 44568},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1237, col: 11, offset: 44592},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1238, col: 11, offset: 44618},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1239, col: 11, offset: 44647},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1243, col: 1, offset: 44719},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 5, offset: 44768},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1244, col: 5, offset: 44768},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1245, col: 7, offset: 44870},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1245, col: 7, offset: 44870},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1245, col: 7, offset: 44870},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1245, col: 12, offset: 44875},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1249, col: 1, offset: 45043},
			expr: &choiceExpr{
				pos: position{line: 1249, col: 29, offset: 45071},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1249, col: 29, offset: 45071},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1249, col: 29, offset: 45071},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1249, col: 29, offset: 45071},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1249, col: 35, offset: 45077},
										expr: &ruleRefExpr{
											pos:  position{line: 1249, col: 36, offset: 45078},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1249, col: 55, offset: 45097},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1249, col: 55, offset: 45097},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1249, col: 59, offset: 45101},
											expr: &litMatcher{
												pos:        position{line: 1249, col: 60, offset: 45102},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1249, col: 65, offset: 45107},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1249, col: 75, offset: 45117},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1249, col: 109, offset: 45151},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 45344},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1251, col: 5, offset: 45344},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1251, col: 5, offset: 45344},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1251, col: 11, offset: 45350},
										expr: &ruleRefExpr{
											pos:  position{line: 1251, col: 12, offset: 45351},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 30, offset: 45369},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 34, offset: 45373},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1251, col: 44, offset: 45383},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1251, col: 44, offset: 45383},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1251, col: 48, offset: 45387},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 82, offset: 45421},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1255, col: 1, offset: 45635},
			expr: &seqExpr{
				pos: position{line: 1255, col: 37, offset: 45671},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1255, col: 37, offset: 45671},
						expr: &ruleRefExpr{
							pos:  position{line: 1255, col: 38, offset: 45672},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1255, col: 44, offset: 45678},
						expr: &ruleRefExpr{
							pos:  position{line: 1255, col: 44, offset: 45678},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1257, col: 1, offset: 45712},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 37, offset: 45748},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1257, col: 37, offset: 45748},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1258, col: 11, offset: 45763},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1258, col: 11, offset: 45763},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1258, col: 19, offset: 45771},
								expr: &ruleRefExpr{
									pos:  position{line: 1258, col: 20, offset: 45772},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 11, offset: 45790},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 11, offset: 45825},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1261, col: 11, offset: 45848},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1261, col: 11, offset: 45848},
								expr: &ruleRefExpr{
									pos:  position{line: 1261, col: 11, offset: 45848},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1261, col: 18, offset: 45855},
								expr: &seqExpr{
									pos: position{line: 1261, col: 19, offset: 45856},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1261, col: 19, offset: 45856},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1261, col: 23, offset: 45860},
											expr: &litMatcher{
												pos:        position{line: 1261, col: 24, offset: 45861},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 11, offset: 45989},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 11, offset: 46008},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 11, offset: 46029},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 11, offset: 46050},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 11, offset: 46074},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1267, col: 11, offset: 46100},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1267, col: 11, offset: 46100},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1271, col: 11, offset: 46241},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 11, offset: 46270},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1274, col: 1, offset: 46313},
			expr: &choiceExpr{
				pos: position{line: 1275, col: 5, offset: 46362},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1275, col: 5, offset: 46362},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1276, col: 7, offset: 46464},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1276, col: 7, offset: 46464},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1276, col: 7, offset: 46464},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1276, col: 11, offset: 46468},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1280, col: 1, offset: 46637},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 5, offset: 46666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1281, col: 5, offset: 46666},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1281, col: 5, offset: 46666},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1281, col: 5, offset: 46666},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 18, offset: 46679},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1281, col: 40, offset: 46701},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1281, col: 45, offset: 46706},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 55, offset: 46716},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1281, col: 89, offset: 46750},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1283, col: 9, offset: 46907},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1283, col: 9, offset: 46907},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1283, col: 9, offset: 46907},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1283, col: 22, offset: 46920},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1283, col: 44, offset: 46942},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1283, col: 49, offset: 46947},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1283, col: 59, offset: 46957},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1283, col: 93, offset: 46991},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1286, col: 9, offset: 47191},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1286, col: 9, offset: 47191},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1286, col: 9, offset: 47191},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1286, col: 22, offset: 47204},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1286, col: 44, offset: 47226},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1286, col: 48, offset: 47230},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1286, col: 58, offset: 47240},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1286, col: 92, offset: 47274},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1294, col: 1, offset: 47599},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 17, offset: 47615},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1294, col: 17, offset: 47615},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 38, offset: 47636},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1296, col: 1, offset: 47656},
			expr: &actionExpr{
				pos: position{line: 1296, col: 23, offset: 47678},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1296, col: 23, offset: 47678},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1296, col: 23, offset: 47678},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1296, col: 46, offset: 47701},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1296, col: 55, offset: 47710},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1296, col: 82, offset: 47737},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1300, col: 1, offset: 47841},
			expr: &actionExpr{
				pos: position{line: 1300, col: 31, offset: 47871},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1300, col: 31, offset: 47871},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1300, col: 41, offset: 47881},
						expr: &ruleRefExpr{
							pos:  position{line: 1300, col: 41, offset: 47881},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1304, col: 1, offset: 47959},
			expr: &seqExpr{
				pos: position{line: 1304, col: 27, offset: 47985},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1304, col: 27, offset: 47985},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1304, col: 32, offset: 47990},
						expr: &charClassMatcher{
							pos:        position{line: 1304, col: 33, offset: 47991},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1306, col: 1, offset: 48002},
			expr: &litMatcher{
				pos:        position{line: 1306, col: 25, offset: 48026},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1309, col: 1, offset: 48114},
			expr: &actionExpr{
				pos: position{line: 1309, col: 30, offset: 48143},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1309, col: 30, offset: 48143},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1310, col: 9, offset: 48161},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1310, col: 9, offset: 48161},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1310, col: 9, offset: 48161},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1310, col: 19, offset: 48171},
										expr: &ruleRefExpr{
											pos:  position{line: 1310, col: 20, offset: 48172},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1311, col: 11, offset: 48228},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1311, col: 11, offset: 48228},
										expr: &ruleRefExpr{
											pos:  position{line: 1311, col: 11, offset: 48228},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1311, col: 18, offset: 48235},
										expr: &ruleRefExpr{
											pos:  position{line: 1311, col: 19, offset: 48236},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1312, col: 11, offset: 48267},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1312, col: 11, offset: 48267},
										expr: &litMatcher{
											pos:        position{line: 1312, col: 12, offset: 48268},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1312, col: 16, offset: 48272},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1313, col: 11, offset: 48320},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1314, col: 11, offset: 48339},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1315, col: 11, offset: 48360},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1316, col: 11, offset: 48381},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1317, col: 11, offset: 48405},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1318, col: 11, offset: 48431},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1318, col: 11, offset: 48431},
										expr: &litMatcher{
											pos:        position{line: 1318, col: 12, offset: 48432},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1318, col: 17, offset: 48437},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1319, col: 11, offset: 48461},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1320, col: 11, offset: 48490},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1324, col: 1, offset: 48556},
			expr: &choiceExpr{
				pos: position{line: 1324, col: 41, offset: 48596},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1324, col: 41, offset: 48596},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1324, col: 55, offset: 48610},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1324, col: 55, offset: 48610},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1324, col: 55, offset: 48610},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1324, col: 59, offset: 48614},
									expr: &litMatcher{
										pos:        position{line: 1324, col: 60, offset: 48615},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1328, col: 1, offset: 48674},
			expr: &actionExpr{
				pos: position{line: 1328, col: 23, offset: 48696},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1328, col: 23, offset: 48696},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1328, col: 23, offset: 48696},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1328, col: 46, offset: 48719},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1328, col: 55, offset: 48728},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1328, col: 82, offset: 48755},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1332, col: 1, offset: 48859},
			expr: &actionExpr{
				pos: position{line: 1332, col: 31, offset: 48889},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1332, col: 31, offset: 48889},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1332, col: 41, offset: 48899},
						expr: &ruleRefExpr{
							pos:  position{line: 1332, col: 41, offset: 48899},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1337, col: 1, offset: 49059},
			expr: &actionExpr{
				pos: position{line: 1337, col: 30, offset: 49088},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1337, col: 30, offset: 49088},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1338, col: 9, offset: 49106},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1338, col: 9, offset: 49106},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1338, col: 9, offset: 49106},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1338, col: 19, offset: 49116},
										expr: &ruleRefExpr{
											pos:  position{line: 1338, col: 20, offset: 49117},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1339, col: 11, offset: 49173},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1339, col: 11, offset: 49173},
										expr: &ruleRefExpr{
											pos:  position{line: 1339, col: 11, offset: 49173},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1339, col: 18, offset: 49180},
										expr: &ruleRefExpr{
											pos:  position{line: 1339, col: 19, offset: 49181},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1340, col: 11, offset: 49212},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1341, col: 11, offset: 49231},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1342, col: 11, offset: 49252},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1343, col: 11, offset: 49273},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1344, col: 11, offset: 49297},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1345, col: 11, offset: 49323},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1345, col: 11, offset: 49323},
										expr: &litMatcher{
											pos:        position{line: 1345, col: 12, offset: 49324},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1345, col: 18, offset: 49330},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1346, col: 10, offset: 49353},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1347, col: 11, offset: 49382},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1351, col: 1, offset: 49456},
			expr: &seqExpr{
				pos: position{line: 1351, col: 27, offset: 49482},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1351, col: 27, offset: 49482},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1351, col: 33, offset: 49488},
						expr: &charClassMatcher{
							pos:        position{line: 1351, col: 34, offset: 49489},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1353, col: 1, offset: 49500},
			expr: &litMatcher{
				pos:        position{line: 1353, col: 25, offset: 49524},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1355, col: 1, offset: 49531},
			expr: &actionExpr{
				pos: position{line: 1355, col: 41, offset: 49571},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1355, col: 42, offset: 49572},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1355, col: 42, offset: 49572},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1355, col: 56, offset: 49586},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1355, col: 56, offset: 49586},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1355, col: 60, offset: 49590},
									expr: &litMatcher{
										pos:        position{line: 1355, col: 61, offset: 49591},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1364, col: 1, offset: 49711},
			expr: &choiceExpr{
				pos: position{line: 1364, col: 15, offset: 49725},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1364, col: 15, offset: 49725},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 39, offset: 49749},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1366, col: 1, offset: 49772},
			expr: &actionExpr{
				pos: position{line: 1366, col: 26, offset: 49797},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1366, col: 26, offset: 49797},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1366, col: 26, offset: 49797},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1366, col: 32, offset: 49803},
								expr: &ruleRefExpr{
									pos:  position{line: 1366, col: 33, offset: 49804},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1366, col: 51, offset: 49822},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1366, col: 56, offset: 49827},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1366, col: 66, offset: 49837},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1366, col: 97, offset: 49868},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1370, col: 1, offset: 50002},
			expr: &seqExpr{
				pos: position{line: 1370, col: 34, offset: 50035},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1370, col: 34, offset: 50035},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1370, col: 63, offset: 50064},
						expr: &seqExpr{
							pos: position{line: 1370, col: 64, offset: 50065},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1370, col: 64, offset: 50065},
									expr: &litMatcher{
										pos:        position{line: 1370, col: 66, offset: 50067},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1370, col: 73, offset: 50074},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1370, col: 73, offset: 50074},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1370, col: 81, offset: 50082},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1372, col: 1, offset: 50149},
			expr: &choiceExpr{
				pos: position{line: 1372, col: 33, offset: 50181},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1372, col: 33, offset: 50181},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 50196},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1374, col: 11, offset: 50228},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1374, col: 11, offset: 50228},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1374, col: 19, offset: 50236},
								expr: &ruleRefExpr{
									pos:  position{line: 1374, col: 20, offset: 50237},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 50255},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 50278},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 50297},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 11, offset: 50318},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 11, offset: 50342},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 50366},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 11, offset: 50392},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 11, offset: 50421},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1384, col: 1, offset: 50461},
			expr: &choiceExpr{
				pos: position{line: 1385, col: 5, offset: 50507},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1385, col: 5, offset: 50507},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1386, col: 7, offset: 50606},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1386, col: 7, offset: 50606},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1386, col: 7, offset: 50606},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1386, col: 12, offset: 50611},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1390, col: 1, offset: 50776},
			expr: &choiceExpr{
				pos: position{line: 1390, col: 26, offset: 50801},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1390, col: 26, offset: 50801},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1390, col: 26, offset: 50801},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1390, col: 26, offset: 50801},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1390, col: 32, offset: 50807},
										expr: &ruleRefExpr{
											pos:  position{line: 1390, col: 33, offset: 50808},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1390, col: 52, offset: 50827},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1390, col: 52, offset: 50827},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1390, col: 56, offset: 50831},
											expr: &litMatcher{
												pos:        position{line: 1390, col: 57, offset: 50832},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1390, col: 62, offset: 50837},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1390, col: 72, offset: 50847},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1390, col: 103, offset: 50878},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1392, col: 5, offset: 51068},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1392, col: 5, offset: 51068},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1392, col: 5, offset: 51068},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1392, col: 11, offset: 51074},
										expr: &ruleRefExpr{
											pos:  position{line: 1392, col: 12, offset: 51075},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1392, col: 30, offset: 51093},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1392, col: 34, offset: 51097},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1392, col: 44, offset: 51107},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1392, col: 44, offset: 51107},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1392, col: 48, offset: 51111},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1392, col: 79, offset: 51142},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1396, col: 1, offset: 51351},
			expr: &seqExpr{
				pos: position{line: 1396, col: 34, offset: 51384},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1396, col: 34, offset: 51384},
						expr: &ruleRefExpr{
							pos:  position{line: 1396, col: 35, offset: 51385},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1396, col: 41, offset: 51391},
						expr: &ruleRefExpr{
							pos:  position{line: 1396, col: 41, offset: 51391},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1398, col: 1, offset: 51422},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 33, offset: 51454},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1398, col: 33, offset: 51454},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 11, offset: 51469},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1400, col: 11, offset: 51501},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1400, col: 11, offset: 51501},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1400, col: 19, offset: 51509},
								expr: &ruleRefExpr{
									pos:  position{line: 1400, col: 20, offset: 51510},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 11, offset: 51528},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1402, col: 11, offset: 51551},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1402, col: 11, offset: 51551},
								expr: &ruleRefExpr{
									pos:  position{line: 1402, col: 11, offset: 51551},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1402, col: 18, offset: 51558},
								expr: &seqExpr{
									pos: position{line: 1402, col: 19, offset: 51559},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1402, col: 19, offset: 51559},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1402, col: 23, offset: 51563},
											expr: &litMatcher{
												pos:        position{line: 1402, col: 24, offset: 51564},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 11, offset: 51580},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1404, col: 11, offset: 51599},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 11, offset: 51620},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 11, offset: 51644},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 11, offset: 51668},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 11, offset: 51694},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1409, col: 11, offset: 51723},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1411, col: 1, offset: 51763},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 5, offset: 51809},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1412, col: 5, offset: 51809},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1413, col: 7, offset: 51906},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1413, col: 7, offset: 51906},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1413, col: 7, offset: 51906},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1413, col: 11, offset: 51910},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1417, col: 1, offset: 52073},
			expr: &choiceExpr{
				pos: position{line: 1418, col: 5, offset: 52098},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1418, col: 5, offset: 52098},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1418, col: 5, offset: 52098},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1418, col: 5, offset: 52098},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1418, col: 18, offset: 52111},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 40, offset: 52133},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1418, col: 45, offset: 52138},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1418, col: 55, offset: 52148},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 86, offset: 52179},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1420, col: 9, offset: 52336},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1420, col: 9, offset: 52336},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1420, col: 9, offset: 52336},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1420, col: 22, offset: 52349},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1420, col: 44, offset: 52371},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1420, col: 49, offset: 52376},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1420, col: 59, offset: 52386},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1420, col: 90, offset: 52417},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1423, col: 9, offset: 52617},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1423, col: 9, offset: 52617},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1423, col: 9, offset: 52617},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1423, col: 22, offset: 52630},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1423, col: 44, offset: 52652},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1423, col: 48, offset: 52656},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1423, col: 58, offset: 52666},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1423, col: 89, offset: 52697},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1428, col: 1, offset: 52847},
			expr: &actionExpr{
				pos: position{line: 1428, col: 18, offset: 52864},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1428, col: 18, offset: 52864},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1428, col: 18, offset: 52864},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1428, col: 24, offset: 52870},
								expr: &ruleRefExpr{
									pos:  position{line: 1428, col: 25, offset: 52871},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1428, col: 43, offset: 52889},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1428, col: 47, offset: 52893},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1428, col: 56, offset: 52902},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1428, col: 78, offset: 52924},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1432, col: 1, offset: 53020},
			expr: &choiceExpr{
				pos: position{line: 1432, col: 25, offset: 53044},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1432, col: 25, offset: 53044},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1432, col: 38, offset: 53057},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1434, col: 1, offset: 53076},
			expr: &actionExpr{
				pos: position{line: 1434, col: 21, offset: 53096},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1434, col: 21, offset: 53096},
					expr: &charClassMatcher{
						pos:        position{line: 1434, col: 21, offset: 53096},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1438, col: 1, offset: 53173},
			expr: &actionExpr{
				pos: position{line: 1438, col: 25, offset: 53197},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1438, col: 25, offset: 53197},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1438, col: 25, offset: 53197},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1438, col: 38, offset: 53210},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1438, col: 60, offset: 53232},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 64, offset: 53236},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1438, col: 73, offset: 53245},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1438, col: 95, offset: 53267},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1442, col: 1, offset: 53396},
			expr: &actionExpr{
				pos: position{line: 1442, col: 20, offset: 53415},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1442, col: 20, offset: 53415},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1442, col: 20, offset: 53415},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1442, col: 26, offset: 53421},
								expr: &ruleRefExpr{
									pos:  position{line: 1442, col: 27, offset: 53422},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1442, col: 45, offset: 53440},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1442, col: 49, offset: 53444},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 58, offset: 53453},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1442, col: 82, offset: 53477},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1446, col: 1, offset: 53575},
			expr: &choiceExpr{
				pos: position{line: 1446, col: 27, offset: 53601},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1446, col: 27, offset: 53601},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 40, offset: 53614},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1448, col: 1, offset: 53635},
			expr: &actionExpr{
				pos: position{line: 1448, col: 23, offset: 53657},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1448, col: 23, offset: 53657},
					expr: &charClassMatcher{
						pos:        position{line: 1448, col: 23, offset: 53657},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1452, col: 1, offset: 53734},
			expr: &actionExpr{
				pos: position{line: 1452, col: 27, offset: 53760},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 27, offset: 53760},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1452, col: 27, offset: 53760},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 40, offset: 53773},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1452, col: 62, offset: 53795},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 66, offset: 53799},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 75, offset: 53808},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1452, col: 99, offset: 53832},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1459, col: 1, offset: 54074},
			expr: &choiceExpr{
				pos: position{line: 1459, col: 22, offset: 54095},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1459, col: 22, offset: 54095},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1459, col: 46, offset: 54119},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1459, col: 70, offset: 54143},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1461, col: 1, offset: 54161},
			expr: &litMatcher{
				pos:        position{line: 1461, col: 32, offset: 54192},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1463, col: 1, offset: 54197},
			expr: &actionExpr{
				pos: position{line: 1463, col: 26, offset: 54222},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1463, col: 26, offset: 54222},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1463, col: 26, offset: 54222},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 54, offset: 54250},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 63, offset: 54259},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1463, col: 93, offset: 54289},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1463, col: 121, offset: 54317},
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 122, offset: 54318},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1467, col: 1, offset: 54423},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 33, offset: 54455},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1467, col: 34, offset: 54456},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1467, col: 34, offset: 54456},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1467, col: 35, offset: 54457},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1467, col: 35, offset: 54457},
											expr: &ruleRefExpr{
												pos:  position{line: 1467, col: 36, offset: 54458},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1467, col: 64, offset: 54486},
											expr: &ruleRefExpr{
												pos:  position{line: 1467, col: 65, offset: 54487},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1467, col: 71, offset: 54493},
											expr: &ruleRefExpr{
												pos:  position{line: 1467, col: 72, offset: 54494},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1467, col: 80, offset: 54502,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1467, col: 83, offset: 54505},
									expr: &seqExpr{
										pos: position{line: 1467, col: 84, offset: 54506},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1467, col: 84, offset: 54506},
												expr: &seqExpr{
													pos: position{line: 1467, col: 86, offset: 54508},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1467, col: 86, offset: 54508},
															expr: &ruleRefExpr{
																pos:  position{line: 1467, col: 86, offset: 54508},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1467, col: 93, offset: 54515},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1467, col: 122, offset: 54544},
												expr: &ruleRefExpr{
													pos:  position{line: 1467, col: 123, offset: 54545},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1467, col: 151, offset: 54573},
												expr: &ruleRefExpr{
													pos:  position{line: 1467, col: 152, offset: 54574},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1467, col: 160, offset: 54582,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1469, col: 7, offset: 54724},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1469, col: 8, offset: 54725},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1469, col: 8, offset: 54725},
									expr: &ruleRefExpr{
										pos:  position{line: 1469, col: 9, offset: 54726},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1469, col: 15, offset: 54732},
									expr: &ruleRefExpr{
										pos:  position{line: 1469, col: 16, offset: 54733},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1469, col: 24, offset: 54741},
									expr: &ruleRefExpr{
										pos:  position{line: 1469, col: 25, offset: 54742},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1469, col: 53, offset: 54770,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1473, col: 1, offset: 54852},
			expr: &litMatcher{
				pos:        position{line: 1473, col: 32, offset: 54883},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1475, col: 1, offset: 54890},
			expr: &actionExpr{
				pos: position{line: 1475, col: 26, offset: 54915},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1475, col: 26, offset: 54915},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1475, col: 26, offset: 54915},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1475, col: 54, offset: 54943},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1475, col: 63, offset: 54952},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1475, col: 93, offset: 54982},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1475, col: 121, offset: 55010},
							expr: &ruleRefExpr{
								pos:  position{line: 1475, col: 122, offset: 55011},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1479, col: 1, offset: 55116},
			expr: &choiceExpr{
				pos: position{line: 1479, col: 33, offset: 55148},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1479, col: 34, offset: 55149},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1479, col: 34, offset: 55149},
							expr: &seqExpr{
								pos: position{line: 1479, col: 35, offset: 55150},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1479, col: 35, offset: 55150},
										expr: &ruleRefExpr{
											pos:  position{line: 1479, col: 36, offset: 55151},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1479, col: 64, offset: 55179,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1481, col: 7, offset: 55344},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1481, col: 7, offset: 55344},
							expr: &seqExpr{
								pos: position{line: 1481, col: 8, offset: 55345},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1481, col: 8, offset: 55345},
										expr: &ruleRefExpr{
											pos:  position{line: 1481, col: 9, offset: 55346},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1481, col: 15, offset: 55352},
										expr: &ruleRefExpr{
											pos:  position{line: 1481, col: 16, offset: 55353},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1481, col: 24, offset: 55361},
										expr: &ruleRefExpr{
											pos:  position{line: 1481, col: 25, offset: 55362},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1481, col: 53, offset: 55390,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1485, col: 1, offset: 55473},
			expr: &choiceExpr{
				pos: position{line: 1485, col: 21, offset: 55493},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1485, col: 21, offset: 55493},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1485, col: 21, offset: 55493},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1485, col: 21, offset: 55493},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1485, col: 30, offset: 55502},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1485, col: 38, offset: 55510},
										expr: &ruleRefExpr{
											pos:  position{line: 1485, col: 39, offset: 55511},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1485, col: 67, offset: 55539},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1487, col: 5, offset: 55635},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1487, col: 5, offset: 55635},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1487, col: 5, offset: 55635},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1487, col: 15, offset: 55645},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1487, col: 23, offset: 55653},
										expr: &choiceExpr{
											pos: position{line: 1487, col: 24, offset: 55654},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1487, col: 24, offset: 55654},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1487, col: 37, offset: 55667},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1487, col: 65, offset: 55695},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1491, col: 1, offset: 55791},
			expr: &actionExpr{
				pos: position{line: 1491, col: 30, offset: 55820},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1491, col: 30, offset: 55820},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1498, col: 1, offset: 55993},
			expr: &choiceExpr{
				pos: position{line: 1498, col: 19, offset: 56011},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1498, col: 19, offset: 56011},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1498, col: 44, offset: 56036},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1500, col: 1, offset: 56061},
			expr: &choiceExpr{
				pos: position{line: 1500, col: 27, offset: 56087},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1500, col: 27, offset: 56087},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1500, col: 27, offset: 56087},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1500, col: 27, offset: 56087},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1500, col: 32, offset: 56092},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1500, col: 36, offset: 56096},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1500, col: 40, offset: 56100},
									expr: &ruleRefExpr{
										pos:  position{line: 1500, col: 40, offset: 56100},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1500, col: 47, offset: 56107},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1500, col: 51, offset: 56111},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1500, col: 58, offset: 56118},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1500, col: 79, offset: 56139},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1502, col: 5, offset: 56222},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1502, col: 5, offset: 56222},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1502, col: 5, offset: 56222},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1502, col: 10, offset: 56227},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1502, col: 14, offset: 56231},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1502, col: 18, offset: 56235},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1506, col: 1, offset: 56307},
			expr: &actionExpr{
				pos: position{line: 1506, col: 27, offset: 56333},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1506, col: 27, offset: 56333},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1506, col: 27, offset: 56333},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 35, offset: 56341},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 40, offset: 56346},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 54, offset: 56360},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 72, offset: 56378},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1510, col: 1, offset: 56501},
			expr: &ruleRefExpr{
				pos:  position{line: 1510, col: 24, offset: 56524},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1515, col: 1, offset: 56646},
			expr: &choiceExpr{
				pos: position{line: 1515, col: 9, offset: 56654},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1515, col: 9, offset: 56654},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1515, col: 24, offset: 56669},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1518, col: 1, offset: 56750},
			expr: &actionExpr{
				pos: position{line: 1518, col: 17, offset: 56766},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 17, offset: 56766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1518, col: 17, offset: 56766},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 25, offset: 56774},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 30, offset: 56779},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 40, offset: 56789},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 58, offset: 56807},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1522, col: 1, offset: 56918},
			expr: &actionExpr{
				pos: position{line: 1522, col: 17, offset: 56934},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1522, col: 17, offset: 56934},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1522, col: 17, offset: 56934},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1522, col: 22, offset: 56939},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1522, col: 42, offset: 56959},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1522, col: 59, offset: 56976},
								expr: &ruleRefExpr{
									pos:  position{line: 1522, col: 60, offset: 56977},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1526, col: 1, offset: 57070},
			expr: &actionExpr{
				pos: position{line: 1526, col: 19, offset: 57088},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1526, col: 19, offset: 57088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1526, col: 19, offset: 57088},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1526, col: 23, offset: 57092},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1526, col: 33, offset: 57102},
								expr: &ruleRefExpr{
									pos:  position{line: 1526, col: 34, offset: 57103},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1527, col: 5, offset: 57135},
							expr: &ruleRefExpr{
								pos:  position{line: 1527, col: 5, offset: 57135},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1527, col: 12, offset: 57142},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1527, col: 23, offset: 57153},
								expr: &ruleRefExpr{
									pos:  position{line: 1527, col: 24, offset: 57154},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1527, col: 43, offset: 57173},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1531, col: 1, offset: 57290},
			expr: &actionExpr{
				pos: position{line: 1531, col: 30, offset: 57319},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1531, col: 30, offset: 57319},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1533, col: 5, offset: 57370},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1533, col: 6, offset: 57371},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1533, col: 6, offset: 57371},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1533, col: 6, offset: 57371},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1533, col: 11, offset: 57376},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1533, col: 20, offset: 57385},
												expr: &choiceExpr{
													pos: position{line: 1533, col: 21, offset: 57386},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1533, col: 21, offset: 57386},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1533, col: 36, offset: 57401},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1533, col: 49, offset: 57414},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1533, col: 70, offset: 57435},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1533, col: 92, offset: 57457},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1533, col: 97, offset: 57462},
											expr: &notExpr{
												pos: position{line: 1533, col: 99, offset: 57464},
												expr: &litMatcher{
													pos:        position{line: 1533, col: 100, offset: 57465},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1533, col: 105, offset: 57470},
											expr: &litMatcher{
												pos:        position{line: 1533, col: 105, offset: 57470},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1537, col: 6, offset: 57597},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1537, col: 6, offset: 57597},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1537, col: 6, offset: 57597},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1537, col: 15, offset: 57606},
												expr: &choiceExpr{
													pos: position{line: 1537, col: 16, offset: 57607},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1537, col: 16, offset: 57607},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1537, col: 31, offset: 57622},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1537, col: 44, offset: 57635},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1537, col: 65, offset: 57656},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1537, col: 89, offset: 57680},
											expr: &notExpr{
												pos: position{line: 1537, col: 91, offset: 57682},
												expr: &litMatcher{
													pos:        position{line: 1537, col: 92, offset: 57683},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1537, col: 97, offset: 57688},
											expr: &litMatcher{
												pos:        position{line: 1537, col: 97, offset: 57688},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1543, col: 1, offset: 57802},
			expr: &actionExpr{
				pos: position{line: 1543, col: 18, offset: 57819},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1543, col: 18, offset: 57819},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1547, col: 1, offset: 57905},
			expr: &actionExpr{
				pos: position{line: 1547, col: 24, offset: 57928},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1547, col: 24, offset: 57928},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1551, col: 1, offset: 58021},
			expr: &actionExpr{
				pos: position{line: 1551, col: 26, offset: 58046},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1551, col: 26, offset: 58046},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1556, col: 1, offset: 58202},
			expr: &actionExpr{
				pos: position{line: 1557, col: 5, offset: 58221},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1557, col: 5, offset: 58221},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1557, col: 5, offset: 58221},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1557, col: 14, offset: 58230},
								expr: &choiceExpr{
									pos: position{line: 1557, col: 15, offset: 58231},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1557, col: 15, offset: 58231},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1558, col: 11, offset: 58246},
											name: "SpecialCharacter",
										},
										&oneOrMoreExpr{
											pos: position{line: 1559, col: 11, offset: 58273},
											expr: &ruleRefExpr{
												pos:  position{line: 1559, col: 11, offset: 58273},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1560, col: 11, offset: 58291},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1561, col: 11, offset: 58315},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1562, col: 11, offset: 58333},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1562, col: 21, offset: 58343},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1566, col: 1, offset: 58413},
			expr: &choiceExpr{
				pos: position{line: 1566, col: 17, offset: 58429},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1566, col: 17, offset: 58429},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1566, col: 40, offset: 58452},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1569, col: 1, offset: 58580},
			expr: &actionExpr{
				pos: position{line: 1569, col: 25, offset: 58604},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1569, col: 25, offset: 58604},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1569, col: 25, offset: 58604},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1569, col: 33, offset: 58612},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1569, col: 38, offset: 58617},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1569, col: 38, offset: 58617},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1569, col: 57, offset: 58636},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1569, col: 79, offset: 58658},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1569, col: 97, offset: 58676},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1573, col: 1, offset: 58787},
			expr: &actionExpr{
				pos: position{line: 1573, col: 25, offset: 58811},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1573, col: 25, offset: 58811},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1573, col: 25, offset: 58811},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1573, col: 30, offset: 58816},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1573, col: 48, offset: 58834},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1573, col: 65, offset: 58851},
								expr: &ruleRefExpr{
									pos:  position{line: 1573, col: 66, offset: 58852},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1580, col: 1, offset: 59047},
			expr: &actionExpr{
				pos: position{line: 1580, col: 15, offset: 59061},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1580, col: 15, offset: 59061},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1580, col: 15, offset: 59061},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1580, col: 26, offset: 59072},
								expr: &ruleRefExpr{
									pos:  position{line: 1580, col: 27, offset: 59073},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1580, col: 45, offset: 59091},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1580, col: 55, offset: 59101},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1580, col: 61, offset: 59107},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1580, col: 71, offset: 59117},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1580, col: 84, offset: 59130},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1580, col: 102, offset: 59148},
							expr: &ruleRefExpr{
								pos:  position{line: 1580, col: 102, offset: 59148},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1580, col: 109, offset: 59155},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1585, col: 1, offset: 59365},
			expr: &actionExpr{
				pos: position{line: 1585, col: 16, offset: 59380},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1585, col: 16, offset: 59380},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1585, col: 16, offset: 59380},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1585, col: 25, offset: 59389},
							expr: &litMatcher{
								pos:        position{line: 1585, col: 26, offset: 59390},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1585, col: 30, offset: 59394},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 36, offset: 59400},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1585, col: 46, offset: 59410},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 59, offset: 59423},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1589, col: 1, offset: 59561},
			expr: &actionExpr{
				pos: position{line: 1589, col: 21, offset: 59581},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1589, col: 21, offset: 59581},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1589, col: 21, offset: 59581},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1589, col: 25, offset: 59585},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1589, col: 29, offset: 59589},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1589, col: 44, offset: 59604},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1589, col: 46, offset: 59606},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1589, col: 57, offset: 59617},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1589, col: 59, offset: 59619},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1589, col: 71, offset: 59631},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1589, col: 74, offset: 59634},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1589, col: 85, offset: 59645},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1593, col: 1, offset: 59707},
			expr: &choiceExpr{
				pos: position{line: 1593, col: 20, offset: 59726},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1593, col: 20, offset: 59726},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1593, col: 36, offset: 59742},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1593, col: 51, offset: 59757},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1595, col: 1, offset: 59768},
			expr: &actionExpr{
				pos: position{line: 1595, col: 18, offset: 59785},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1595, col: 18, offset: 59785},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1595, col: 18, offset: 59785},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1595, col: 22, offset: 59789},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1595, col: 29, offset: 59796},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1595, col: 29, offset: 59796},
										expr: &ruleRefExpr{
											pos:  position{line: 1595, col: 29, offset: 59796},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1595, col: 43, offset: 59810},
										expr: &ruleRefExpr{
											pos:  position{line: 1595, col: 43, offset: 59810},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1595, col: 58, offset: 59825},
										expr: &ruleRefExpr{
											pos:  position{line: 1595, col: 58, offset: 59825},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1595, col: 74, offset: 59841},
										expr: &ruleRefExpr{
											pos:  position{line: 1595, col: 74, offset: 59841},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1595, col: 91, offset: 59858},
										expr: &ruleRefExpr{
											pos:  position{line: 1595, col: 91, offset: 59858},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1595, col: 103, offset: 59870},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1595, col: 107, offset: 59874},
							expr: &ruleRefExpr{
								pos:  position{line: 1595, col: 107, offset: 59874},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1595, col: 114, offset: 59881},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1599, col: 1, offset: 59935},
			expr: &actionExpr{
				pos: position{line: 1599, col: 19, offset: 59953},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1599, col: 19, offset: 59953},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1599, col: 25, offset: 59959},
						expr: &ruleRefExpr{
							pos:  position{line: 1599, col: 25, offset: 59959},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1603, col: 1, offset: 60038},
			expr: &actionExpr{
				pos: position{line: 1603, col: 15, offset: 60052},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1603, col: 15, offset: 60052},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1603, col: 15, offset: 60052},
							expr: &litMatcher{
								pos:        position{line: 1603, col: 15, offset: 60052},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1603, col: 20, offset: 60057},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1603, col: 26, offset: 60063},
								expr: &ruleRefExpr{
									pos:  position{line: 1603, col: 26, offset: 60063},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1607, col: 1, offset: 60139},
			expr: &actionExpr{
				pos: position{line: 1607, col: 16, offset: 60154},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1607, col: 16, offset: 60154},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1607, col: 16, offset: 60154},
							expr: &litMatcher{
								pos:        position{line: 1607, col: 16, offset: 60154},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1607, col: 21, offset: 60159},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1607, col: 27, offset: 60165},
								expr: &ruleRefExpr{
									pos:  position{line: 1607, col: 27, offset: 60165},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1611, col: 1, offset: 60247},
			expr: &actionExpr{
				pos: position{line: 1611, col: 17, offset: 60263},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1611, col: 17, offset: 60263},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1611, col: 17, offset: 60263},
							expr: &ruleRefExpr{
								pos:  position{line: 1611, col: 17, offset: 60263},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 24, offset: 60270},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1611, col: 30, offset: 60276},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1611, col: 46, offset: 60292},
							expr: &ruleRefExpr{
								pos:  position{line: 1611, col: 46, offset: 60292},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1615, col: 1, offset: 60368},
			expr: &actionExpr{
				pos: position{line: 1615, col: 19, offset: 60386},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 19, offset: 60386},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1615, col: 19, offset: 60386},
							expr: &ruleRefExpr{
								pos:  position{line: 1615, col: 19, offset: 60386},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1615, col: 26, offset: 60393},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1615, col: 30, offset: 60397},
							expr: &ruleRefExpr{
								pos:  position{line: 1615, col: 30, offset: 60397},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 37, offset: 60404},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1615, col: 43, offset: 60410},
								expr: &ruleRefExpr{
									pos:  position{line: 1615, col: 43, offset: 60410},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1622, col: 1, offset: 60545},
			expr: &actionExpr{
				pos: position{line: 1622, col: 20, offset: 60564},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1622, col: 20, offset: 60564},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1622, col: 20, offset: 60564},
							expr: &ruleRefExpr{
								pos:  position{line: 1622, col: 20, offset: 60564},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1622, col: 27, offset: 60571},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1622, col: 31, offset: 60575},
							expr: &ruleRefExpr{
								pos:  position{line: 1622, col: 31, offset: 60575},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1622, col: 38, offset: 60582},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1622, col: 44, offset: 60588},
								expr: &ruleRefExpr{
									pos:  position{line: 1622, col: 44, offset: 60588},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1633, col: 1, offset: 60922},
			expr: &actionExpr{
				pos: position{line: 1633, col: 15, offset: 60936},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1633, col: 15, offset: 60936},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1633, col: 15, offset: 60936},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1633, col: 23, offset: 60944},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1633, col: 29, offset: 60950},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1633, col: 29, offset: 60950},
									expr: &charClassMatcher{
										pos:        position{line: 1633, col: 29, offset: 60950},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1633, col: 73, offset: 60994},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1633, col: 80, offset: 61001},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1637, col: 1, offset: 61083},
			expr: &actionExpr{
				pos: position{line: 1637, col: 14, offset: 61096},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1637, col: 14, offset: 61096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1637, col: 14, offset: 61096},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1637, col: 18, offset: 61100},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1637, col: 23, offset: 61105},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1637, col: 32, offset: 61114},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1637, col: 35, offset: 61117},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1637, col: 46, offset: 61128},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1641, col: 1, offset: 61185},
			expr: &actionExpr{
				pos: position{line: 1641, col: 13, offset: 61197},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1641, col: 13, offset: 61197},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1641, col: 19, offset: 61203},
						expr: &ruleRefExpr{
							pos:  position{line: 1641, col: 19, offset: 61203},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1648, col: 1, offset: 61479},
			expr: &choiceExpr{
				pos: position{line: 1648, col: 19, offset: 61497},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1648, col: 19, offset: 61497},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1648, col: 19, offset: 61497},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1648, col: 19, offset: 61497},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1648, col: 32, offset: 61510},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1648, col: 41, offset: 61519},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1648, col: 58, offset: 61536},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1650, col: 5, offset: 61604},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1650, col: 5, offset: 61604},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1650, col: 5, offset: 61604},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1650, col: 17, offset: 61616},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1650, col: 22, offset: 61621},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1650, col: 35, offset: 61634},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1650, col: 39, offset: 61638},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1650, col: 47, offset: 61646},
										expr: &ruleRefExpr{
											pos:  position{line: 1650, col: 48, offset: 61647},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1650, col: 66, offset: 61665},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1654, col: 1, offset: 61726},
			expr: &ruleRefExpr{
				pos:  position{line: 1654, col: 16, offset: 61741},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1656, col: 1, offset: 61752},
			expr: &actionExpr{
				pos: position{line: 1656, col: 20, offset: 61771},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1656, col: 20, offset: 61771},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1656, col: 29, offset: 61780},
						expr: &seqExpr{
							pos: position{line: 1656, col: 30, offset: 61781},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1656, col: 30, offset: 61781},
									expr: &litMatcher{
										pos:        position{line: 1656, col: 31, offset: 61782},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1656, col: 35, offset: 61786},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1663, col: 1, offset: 62110},
			expr: &actionExpr{
				pos: position{line: 1663, col: 19, offset: 62128},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1663, col: 19, offset: 62128},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1663, col: 19, offset: 62128},
							expr: &ruleRefExpr{
								pos:  position{line: 1663, col: 20, offset: 62129},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1664, col: 5, offset: 62217},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1664, col: 12, offset: 62224},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1664, col: 12, offset: 62224},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1665, col: 11, offset: 62247},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1666, col: 11, offset: 62271},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1667, col: 11, offset: 62295},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1668, col: 11, offset: 62316},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1669, col: 11, offset: 62339},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1670, col: 11, offset: 62367},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1671, col: 11, offset: 62394},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1672, col: 11, offset: 62410},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1676, col: 1, offset: 62451},
			expr: &choiceExpr{
				pos: position{line: 1676, col: 19, offset: 62469},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1676, col: 19, offset: 62469},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1676, col: 19, offset: 62469},
								expr: &ruleRefExpr{
									pos:  position{line: 1676, col: 21, offset: 62471},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1676, col: 31, offset: 62481},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1677, col: 19, offset: 62552},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1678, col: 19, offset: 62592},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1679, col: 19, offset: 62633},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1680, col: 19, offset: 62674},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1681, col: 19, offset: 62715},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1682, col: 19, offset: 62753},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1683, col: 19, offset: 62793},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1685, col: 1, offset: 62820},
			expr: &ruleRefExpr{
				pos:  position{line: 1685, col: 26, offset: 62845},
				name: "RawLine",
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1687, col: 1, offset: 62854},
			expr: &actionExpr{
				pos: position{line: 1687, col: 20, offset: 62873},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1687, col: 20, offset: 62873},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1687, col: 20, offset: 62873},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1687, col: 25, offset: 62878},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1687, col: 48, offset: 62901},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1687, col: 61, offset: 62914},
								expr: &ruleRefExpr{
									pos:  position{line: 1687, col: 61, offset: 62914},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1691, col: 1, offset: 63011},
			expr: &actionExpr{
				pos: position{line: 1691, col: 26, offset: 63036},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1691, col: 26, offset: 63036},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1691, col: 26, offset: 63036},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1691, col: 30, offset: 63040},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1691, col: 35, offset: 63045},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1691, col: 35, offset: 63045},
									expr: &charClassMatcher{
										pos:        position{line: 1691, col: 35, offset: 63045},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1691, col: 83, offset: 63093},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1691, col: 87, offset: 63097},
							expr: &ruleRefExpr{
								pos:  position{line: 1691, col: 87, offset: 63097},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1698, col: 1, offset: 63324},
			expr: &seqExpr{
				pos: position{line: 1698, col: 25, offset: 63348},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1698, col: 25, offset: 63348},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1698, col: 31, offset: 63354},
						expr: &ruleRefExpr{
							pos:  position{line: 1698, col: 31, offset: 63354},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1698, col: 38, offset: 63361},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1700, col: 1, offset: 63421},
			expr: &seqExpr{
				pos: position{line: 1700, col: 30, offset: 63450},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1700, col: 30, offset: 63450},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1700, col: 36, offset: 63456},
						expr: &ruleRefExpr{
							pos:  position{line: 1700, col: 36, offset: 63456},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1700, col: 43, offset: 63463},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1702, col: 1, offset: 63468},
			expr: &choiceExpr{
				pos: position{line: 1702, col: 28, offset: 63495},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1702, col: 29, offset: 63496},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1702, col: 29, offset: 63496},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1702, col: 35, offset: 63502},
								expr: &ruleRefExpr{
									pos:  position{line: 1702, col: 35, offset: 63502},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1702, col: 42, offset: 63509},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1702, col: 49, offset: 63516},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1704, col: 1, offset: 63521},
			expr: &actionExpr{
				pos: position{line: 1704, col: 16, offset: 63536},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1704, col: 16, offset: 63536},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1704, col: 16, offset: 63536},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1704, col: 27, offset: 63547},
								expr: &ruleRefExpr{
									pos:  position{line: 1704, col: 28, offset: 63548},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1704, col: 41, offset: 63561},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1704, col: 67, offset: 63587},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1704, col: 76, offset: 63596},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1704, col: 99, offset: 63619},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1708, col: 1, offset: 63734},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1708, col: 26, offset: 63759},
				expr: &actionExpr{
					pos: position{line: 1708, col: 27, offset: 63760},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1708, col: 27, offset: 63760},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1708, col: 27, offset: 63760},
								expr: &ruleRefExpr{
									pos:  position{line: 1708, col: 28, offset: 63761},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1708, col: 52, offset: 63785},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1708, col: 58, offset: 63791},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1715, col: 1, offset: 64131},
			expr: &seqExpr{
				pos: position{line: 1715, col: 26, offset: 64156},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1715, col: 26, offset: 64156},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1715, col: 33, offset: 64163},
						expr: &ruleRefExpr{
							pos:  position{line: 1715, col: 33, offset: 64163},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1715, col: 40, offset: 64170},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1717, col: 1, offset: 64175},
			expr: &seqExpr{
				pos: position{line: 1717, col: 31, offset: 64205},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1717, col: 31, offset: 64205},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1717, col: 38, offset: 64212},
						expr: &ruleRefExpr{
							pos:  position{line: 1717, col: 38, offset: 64212},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1717, col: 45, offset: 64219},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1719, col: 1, offset: 64224},
			expr: &choiceExpr{
				pos: position{line: 1719, col: 29, offset: 64252},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1719, col: 30, offset: 64253},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1719, col: 30, offset: 64253},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1719, col: 37, offset: 64260},
								expr: &ruleRefExpr{
									pos:  position{line: 1719, col: 37, offset: 64260},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1719, col: 44, offset: 64267},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1719, col: 51, offset: 64274},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1721, col: 1, offset: 64279},
			expr: &actionExpr{
				pos: position{line: 1721, col: 17, offset: 64295},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1721, col: 17, offset: 64295},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1721, col: 17, offset: 64295},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1721, col: 28, offset: 64306},
								expr: &ruleRefExpr{
									pos:  position{line: 1721, col: 29, offset: 64307},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1721, col: 42, offset: 64320},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1721, col: 69, offset: 64347},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1721, col: 78, offset: 64356},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1721, col: 102, offset: 64380},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1725, col: 1, offset: 64497},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1725, col: 27, offset: 64523},
				expr: &actionExpr{
					pos: position{line: 1725, col: 28, offset: 64524},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1725, col: 28, offset: 64524},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1725, col: 28, offset: 64524},
								expr: &ruleRefExpr{
									pos:  position{line: 1725, col: 29, offset: 64525},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1725, col: 54, offset: 64550},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1725, col: 60, offset: 64556},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1732, col: 1, offset: 64896},
			expr: &seqExpr{
				pos: position{line: 1732, col: 26, offset: 64921},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1732, col: 26, offset: 64921},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1732, col: 33, offset: 64928},
						expr: &ruleRefExpr{
							pos:  position{line: 1732, col: 33, offset: 64928},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1732, col: 40, offset: 64935},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1734, col: 1, offset: 64940},
			expr: &seqExpr{
				pos: position{line: 1734, col: 31, offset: 64970},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1734, col: 31, offset: 64970},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1734, col: 38, offset: 64977},
						expr: &ruleRefExpr{
							pos:  position{line: 1734, col: 38, offset: 64977},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1734, col: 45, offset: 64984},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1736, col: 1, offset: 64989},
			expr: &choiceExpr{
				pos: position{line: 1736, col: 29, offset: 65017},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1736, col: 30, offset: 65018},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1736, col: 30, offset: 65018},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1736, col: 37, offset: 65025},
								expr: &ruleRefExpr{
									pos:  position{line: 1736, col: 37, offset: 65025},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1736, col: 44, offset: 65032},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1736, col: 51, offset: 65039},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1738, col: 1, offset: 65044},
			expr: &actionExpr{
				pos: position{line: 1738, col: 17, offset: 65060},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1738, col: 17, offset: 65060},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1738, col: 17, offset: 65060},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1738, col: 28, offset: 65071},
								expr: &ruleRefExpr{
									pos:  position{line: 1738, col: 29, offset: 65072},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1738, col: 42, offset: 65085},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1738, col: 69, offset: 65112},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1738, col: 78, offset: 65121},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1738, col: 102, offset: 65145},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1742, col: 1, offset: 65262},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1742, col: 27, offset: 65288},
				expr: &actionExpr{
					pos: position{line: 1742, col: 28, offset: 65289},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1742, col: 28, offset: 65289},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1742, col: 28, offset: 65289},
								expr: &ruleRefExpr{
									pos:  position{line: 1742, col: 29, offset: 65290},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1742, col: 54, offset: 65315},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1742, col: 60, offset: 65321},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1749, col: 1, offset: 65659},
			expr: &seqExpr{
				pos: position{line: 1749, col: 24, offset: 65682},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1749, col: 24, offset: 65682},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1749, col: 31, offset: 65689},
						expr: &ruleRefExpr{
							pos:  position{line: 1749, col: 31, offset: 65689},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1749, col: 38, offset: 65696},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1751, col: 1, offset: 65726},
			expr: &seqExpr{
				pos: position{line: 1751, col: 29, offset: 65754},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1751, col: 29, offset: 65754},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1751, col: 36, offset: 65761},
						expr: &ruleRefExpr{
							pos:  position{line: 1751, col: 36, offset: 65761},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1751, col: 43, offset: 65768},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1753, col: 1, offset: 65798},
			expr: &choiceExpr{
				pos: position{line: 1753, col: 27, offset: 65824},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1753, col: 28, offset: 65825},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1753, col: 28, offset: 65825},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1753, col: 35, offset: 65832},
								expr: &ruleRefExpr{
									pos:  position{line: 1753, col: 35, offset: 65832},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1753, col: 42, offset: 65839},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1753, col: 49, offset: 65846},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1755, col: 1, offset: 65876},
			expr: &actionExpr{
				pos: position{line: 1755, col: 15, offset: 65890},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1755, col: 15, offset: 65890},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1755, col: 15, offset: 65890},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1755, col: 26, offset: 65901},
								expr: &ruleRefExpr{
									pos:  position{line: 1755, col: 27, offset: 65902},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1755, col: 40, offset: 65915},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1755, col: 65, offset: 65940},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1755, col: 74, offset: 65949},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1755, col: 101, offset: 65976},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1759, col: 1, offset: 66089},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1759, col: 30, offset: 66118},
				expr: &actionExpr{
					pos: position{line: 1759, col: 31, offset: 66119},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1759, col: 31, offset: 66119},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1759, col: 31, offset: 66119},
								expr: &ruleRefExpr{
									pos:  position{line: 1759, col: 32, offset: 66120},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1759, col: 55, offset: 66143},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1759, col: 61, offset: 66149},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1766, col: 1, offset: 66489},
			expr: &seqExpr{
				pos: position{line: 1766, col: 26, offset: 66514},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1766, col: 26, offset: 66514},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1766, col: 33, offset: 66521},
						expr: &ruleRefExpr{
							pos:  position{line: 1766, col: 33, offset: 66521},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1766, col: 40, offset: 66528},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1768, col: 1, offset: 66533},
			expr: &seqExpr{
				pos: position{line: 1768, col: 31, offset: 66563},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1768, col: 31, offset: 66563},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1768, col: 38, offset: 66570},
						expr: &ruleRefExpr{
							pos:  position{line: 1768, col: 38, offset: 66570},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1768, col: 45, offset: 66577},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1770, col: 1, offset: 66582},
			expr: &choiceExpr{
				pos: position{line: 1770, col: 29, offset: 66610},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1770, col: 30, offset: 66611},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1770, col: 30, offset: 66611},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1770, col: 37, offset: 66618},
								expr: &ruleRefExpr{
									pos:  position{line: 1770, col: 37, offset: 66618},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1770, col: 44, offset: 66625},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1770, col: 51, offset: 66632},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1772, col: 1, offset: 66637},
			expr: &actionExpr{
				pos: position{line: 1772, col: 17, offset: 66653},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1772, col: 17, offset: 66653},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1772, col: 17, offset: 66653},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1772, col: 28, offset: 66664},
								expr: &ruleRefExpr{
									pos:  position{line: 1772, col: 29, offset: 66665},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1772, col: 42, offset: 66678},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1772, col: 69, offset: 66705},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1772, col: 78, offset: 66714},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1772, col: 102, offset: 66738},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1776, col: 1, offset: 66855},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1776, col: 27, offset: 66881},
				expr: &actionExpr{
					pos: position{line: 1776, col: 28, offset: 66882},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1776, col: 28, offset: 66882},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1776, col: 28, offset: 66882},
								expr: &ruleRefExpr{
									pos:  position{line: 1776, col: 29, offset: 66883},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1776, col: 54, offset: 66908},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1776, col: 60, offset: 66914},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1783, col: 1, offset: 67258},
			expr: &seqExpr{
				pos: position{line: 1783, col: 30, offset: 67287},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1783, col: 30, offset: 67287},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1783, col: 37, offset: 67294},
						expr: &ruleRefExpr{
							pos:  position{line: 1783, col: 37, offset: 67294},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1783, col: 44, offset: 67301},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1785, col: 1, offset: 67306},
			expr: &seqExpr{
				pos: position{line: 1785, col: 35, offset: 67340},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1785, col: 35, offset: 67340},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1785, col: 42, offset: 67347},
						expr: &ruleRefExpr{
							pos:  position{line: 1785, col: 42, offset: 67347},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1785, col: 49, offset: 67354},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1787, col: 1, offset: 67359},
			expr: &choiceExpr{
				pos: position{line: 1787, col: 33, offset: 67391},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1787, col: 34, offset: 67392},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1787, col: 34, offset: 67392},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1787, col: 41, offset: 67399},
								expr: &ruleRefExpr{
									pos:  position{line: 1787, col: 41, offset: 67399},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1787, col: 48, offset: 67406},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1787, col: 55, offset: 67413},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1789, col: 1, offset: 67418},
			expr: &actionExpr{
				pos: position{line: 1789, col: 21, offset: 67438},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1789, col: 21, offset: 67438},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1789, col: 21, offset: 67438},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1789, col: 32, offset: 67449},
								expr: &ruleRefExpr{
									pos:  position{line: 1789, col: 33, offset: 67450},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1789, col: 46, offset: 67463},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1789, col: 77, offset: 67494},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1789, col: 86, offset: 67503},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1789, col: 114, offset: 67531},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1793, col: 1, offset: 67656},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1793, col: 31, offset: 67686},
				expr: &actionExpr{
					pos: position{line: 1793, col: 32, offset: 67687},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1793, col: 32, offset: 67687},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1793, col: 32, offset: 67687},
								expr: &ruleRefExpr{
									pos:  position{line: 1793, col: 33, offset: 67688},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1793, col: 62, offset: 67717},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1793, col: 68, offset: 67723},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1798, col: 1, offset: 67885},
			expr: &actionExpr{
				pos: position{line: 1798, col: 18, offset: 67902},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1798, col: 18, offset: 67902},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1798, col: 19, offset: 67903},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1798, col: 19, offset: 67903},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1798, col: 27, offset: 67911},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1798, col: 37, offset: 67921},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1798, col: 45, offset: 67929},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1798, col: 55, offset: 67939},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1798, col: 63, offset: 67947},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1798, col: 72, offset: 67956},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1807, col: 1, offset: 68246},
			expr: &choiceExpr{
				pos: position{line: 1807, col: 17, offset: 68262},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1807, col: 17, offset: 68262},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1808, col: 19, offset: 68291},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1809, col: 19, offset: 68322},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1810, col: 19, offset: 68346},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 19, offset: 68383},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1812, col: 19, offset: 68417},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1813, col: 19, offset: 68451},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 19, offset: 68486},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1815, col: 19, offset: 68520},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 19, offset: 68557},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1818, col: 1, offset: 68568},
			expr: &actionExpr{
				pos: position{line: 1818, col: 23, offset: 68590},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1818, col: 23, offset: 68590},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1818, col: 23, offset: 68590},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1818, col: 32, offset: 68599},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1818, col: 37, offset: 68604},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1818, col: 37, offset: 68604},
									expr: &charClassMatcher{
										pos:        position{line: 1818, col: 37, offset: 68604},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1818, col: 76, offset: 68643},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1823, col: 1, offset: 68795},
			expr: &seqExpr{
				pos: position{line: 1824, col: 5, offset: 68825},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1824, col: 5, offset: 68825},
						expr: &choiceExpr{
							pos: position{line: 1824, col: 6, offset: 68826},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1824, col: 6, offset: 68826},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1825, col: 11, offset: 68855},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1826, col: 11, offset: 68916},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1827, col: 11, offset: 68945},
									expr: &ruleRefExpr{
										pos:  position{line: 1827, col: 11, offset: 68945},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1828, col: 11, offset: 68963},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1829, col: 11, offset: 68981},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 21, offset: 68991},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1832, col: 1, offset: 69112},
			expr: &seqExpr{
				pos: position{line: 1833, col: 5, offset: 69141},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1833, col: 5, offset: 69141},
						expr: &choiceExpr{
							pos: position{line: 1833, col: 6, offset: 69142},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1833, col: 6, offset: 69142},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1834, col: 11, offset: 69203},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1835, col: 11, offset: 69230},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1836, col: 11, offset: 69259},
									expr: &ruleRefExpr{
										pos:  position{line: 1836, col: 11, offset: 69259},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1837, col: 11, offset: 69276},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1838, col: 11, offset: 69294},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1838, col: 21, offset: 69304},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1841, col: 1, offset: 69358},
			expr: &seqExpr{
				pos: position{line: 1842, col: 5, offset: 69381},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1842, col: 5, offset: 69381},
						expr: &choiceExpr{
							pos: position{line: 1842, col: 6, offset: 69382},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1842, col: 6, offset: 69382},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1843, col: 11, offset: 69443},
									expr: &ruleRefExpr{
										pos:  position{line: 1843, col: 11, offset: 69443},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1844, col: 11, offset: 69461},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1845, col: 11, offset: 69483},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1846, col: 11, offset: 69506},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1847, col: 11, offset: 69535},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1848, col: 11, offset: 69553},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1848, col: 21, offset: 69563},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1851, col: 1, offset: 69621},
			expr: &seqExpr{
				pos: position{line: 1852, col: 5, offset: 69643},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1852, col: 5, offset: 69643},
						expr: &choiceExpr{
							pos: position{line: 1852, col: 6, offset: 69644},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1852, col: 6, offset: 69644},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1853, col: 11, offset: 69705},
									expr: &ruleRefExpr{
										pos:  position{line: 1853, col: 11, offset: 69705},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1854, col: 11, offset: 69723},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1855, col: 11, offset: 69755},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1856, col: 11, offset: 69784},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1857, col: 11, offset: 69802},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1857, col: 21, offset: 69812},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1860, col: 1, offset: 69866},
			expr: &seqExpr{
				pos: position{line: 1861, col: 5, offset: 69890},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1861, col: 5, offset: 69890},
						expr: &choiceExpr{
							pos: position{line: 1861, col: 6, offset: 69891},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1861, col: 6, offset: 69891},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1862, col: 11, offset: 69952},
									expr: &ruleRefExpr{
										pos:  position{line: 1862, col: 11, offset: 69952},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1863, col: 11, offset: 69970},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1864, col: 11, offset: 69993},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1865, col: 11, offset: 70022},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1866, col: 11, offset: 70040},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1866, col: 21, offset: 70050},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NormalBlocks",
			pos:  position{line: 1868, col: 1, offset: 70055},
			expr: &actionExpr{
				pos: position{line: 1868, col: 17, offset: 70071},
				run: (*parser).callonNormalBlocks1,
				expr: &seqExpr{
					pos: position{line: 1868, col: 17, offset: 70071},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1868, col: 17, offset: 70071},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1868, col: 26, offset: 70080},
								expr: &choiceExpr{
									pos: position{line: 1868, col: 27, offset: 70081},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1868, col: 27, offset: 70081},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1869, col: 15, offset: 70106},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1870, col: 15, offset: 70131},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1871, col: 15, offset: 70159},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1872, col: 15, offset: 70190},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1873, col: 15, offset: 70223},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1874, col: 15, offset: 70254},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1875, col: 15, offset: 70293},
											name: "DelimitedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1876, col: 15, offset: 70322},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1877, col: 15, offset: 70350},
											name: "StandaloneAttributes",
										},
										&ruleRefExpr{
											pos:  position{line: 1878, col: 15, offset: 70385},
											name: "RawParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1878, col: 30, offset: 70400},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerseMacroSubs",
			pos:  position{line: 1883, col: 1, offset: 70509},
			expr: &seqExpr{
				pos: position{line: 1883, col: 19, offset: 70527},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1883, col: 19, offset: 70527},
						expr: &choiceExpr{
							pos: position{line: 1884, col: 9, offset: 70537},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1884, col: 9, offset: 70537},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1885, col: 11, offset: 70598},
									name: "InlineMacros",
								},
								&oneOrMoreExpr{
									pos: position{line: 1886, col: 11, offset: 70621},
									expr: &ruleRefExpr{
										pos:  position{line: 1886, col: 11, offset: 70621},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1887, col: 11, offset: 70639},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1888, col: 11, offset: 70668},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1889, col: 11, offset: 70686},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1889, col: 21, offset: 70696},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1892, col: 1, offset: 70777},
			expr: &actionExpr{
				pos: position{line: 1892, col: 27, offset: 70803},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1892, col: 27, offset: 70803},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1892, col: 27, offset: 70803},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1892, col: 33, offset: 70809},
								expr: &ruleRefExpr{
									pos:  position{line: 1892, col: 34, offset: 70810},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1892, col: 54, offset: 70830},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1896, col: 1, offset: 70897},
			expr: &actionExpr{
				pos: position{line: 1897, col: 5, offset: 70923},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1897, col: 5, offset: 70923},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1897, col: 5, offset: 70923},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1897, col: 14, offset: 70932},
								expr: &choiceExpr{
									pos: position{line: 1897, col: 15, offset: 70933},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1897, col: 15, offset: 70933},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1898, col: 11, offset: 70994},
											expr: &ruleRefExpr{
												pos:  position{line: 1898, col: 11, offset: 70994},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1899, col: 11, offset: 71012},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1900, col: 11, offset: 71035},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1901, col: 11, offset: 71064},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1901, col: 21, offset: 71074},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1905, col: 1, offset: 71145},
			expr: &actionExpr{
				pos: position{line: 1905, col: 29, offset: 71173},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1905, col: 29, offset: 71173},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1905, col: 29, offset: 71173},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1905, col: 35, offset: 71179},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1905, col: 43, offset: 71187},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1905, col: 44, offset: 71188},
									expr: &charClassMatcher{
										pos:        position{line: 1905, col: 44, offset: 71188},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1907, col: 8, offset: 71238},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1912, col: 1, offset: 71325},
			expr: &seqExpr{
				pos: position{line: 1913, col: 5, offset: 71349},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1913, col: 5, offset: 71349},
						expr: &choiceExpr{
							pos: position{line: 1913, col: 6, offset: 71350},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1913, col: 6, offset: 71350},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1914, col: 11, offset: 71411},
									expr: &ruleRefExpr{
										pos:  position{line: 1914, col: 11, offset: 71411},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1915, col: 11, offset: 71429},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1916, col: 11, offset: 71447},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1917, col: 11, offset: 71476},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1918, col: 11, offset: 71494},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1918, col: 21, offset: 71504},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1922, col: 1, offset: 71652},
			expr: &seqExpr{
				pos: position{line: 1922, col: 24, offset: 71675},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1922, col: 24, offset: 71675},
						expr: &choiceExpr{
							pos: position{line: 1923, col: 5, offset: 71681},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1923, col: 5, offset: 71681},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1924, col: 7, offset: 71738},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1925, col: 7, offset: 71763},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1926, col: 7, offset: 71806},
									expr: &ruleRefExpr{
										pos:  position{line: 1926, col: 7, offset: 71806},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1927, col: 7, offset: 71820},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1928, col: 7, offset: 71834},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1928, col: 17, offset: 71844},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1931, col: 1, offset: 71901},
			expr: &seqExpr{
				pos: position{line: 1932, col: 5, offset: 71921},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1932, col: 5, offset: 71921},
						expr: &choiceExpr{
							pos: position{line: 1932, col: 6, offset: 71922},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1932, col: 6, offset: 71922},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1933, col: 11, offset: 71983},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1934, col: 11, offset: 72012},
									expr: &ruleRefExpr{
										pos:  position{line: 1934, col: 11, offset: 72012},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1935, col: 11, offset: 72029},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1936, col: 11, offset: 72047},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1937, col: 11, offset: 72065},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1937, col: 21, offset: 72075},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1939, col: 1, offset: 72080},
			expr: &actionExpr{
				pos: position{line: 1939, col: 12, offset: 72091},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1939, col: 12, offset: 72091},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1939, col: 12, offset: 72091},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1939, col: 16, offset: 72095},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1939, col: 21, offset: 72100},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1939, col: 21, offset: 72100},
									expr: &charClassMatcher{
										pos:        position{line: 1939, col: 21, offset: 72100},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1939, col: 69, offset: 72148},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1939, col: 73, offset: 72152},
							expr: &ruleRefExpr{
								pos:  position{line: 1939, col: 73, offset: 72152},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1939, col: 80, offset: 72159},
							expr: &choiceExpr{
								pos: position{line: 1939, col: 82, offset: 72161},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1939, col: 82, offset: 72161},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1939, col: 88, offset: 72167},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1944, col: 1, offset: 72267},
			expr: &seqExpr{
				pos: position{line: 1944, col: 13, offset: 72279},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1944, col: 13, offset: 72279},
						expr: &choiceExpr{
							pos: position{line: 1945, col: 5, offset: 72285},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1945, col: 5, offset: 72285},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1946, col: 8, offset: 72312},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1946, col: 8, offset: 72312},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1946, col: 8, offset: 72312},
												expr: &ruleRefExpr{
													pos:  position{line: 1946, col: 9, offset: 72313},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1946, col: 13, offset: 72317},
												expr: &charClassMatcher{
													pos:        position{line: 1946, col: 13, offset: 72317},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1946, col: 22, offset: 72326},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1948, col: 10, offset: 72431},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1953, col: 1, offset: 72624},
			expr: &actionExpr{
				pos: position{line: 1953, col: 10, offset: 72633},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1953, col: 10, offset: 72633},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1953, col: 10, offset: 72633},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1953, col: 16, offset: 72639},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1953, col: 17, offset: 72640},
									expr: &ruleRefExpr{
										pos:  position{line: 1953, col: 17, offset: 72640},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1953, col: 31, offset: 72654},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1954, col: 5, offset: 72673},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1954, col: 12, offset: 72680},
								expr: &ruleRefExpr{
									pos:  position{line: 1954, col: 13, offset: 72681},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1955, col: 5, offset: 72703},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1955, col: 11, offset: 72709},
								expr: &ruleRefExpr{
									pos:  position{line: 1955, col: 12, offset: 72710},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1956, col: 6, offset: 72727},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1956, col: 6, offset: 72727},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1956, col: 23, offset: 72744},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1960, col: 1, offset: 72854},
			expr: &seqExpr{
				pos: position{line: 1960, col: 23, offset: 72876},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1960, col: 23, offset: 72876},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1960, col: 27, offset: 72880},
						expr: &ruleRefExpr{
							pos:  position{line: 1960, col: 27, offset: 72880},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1962, col: 1, offset: 72888},
			expr: &seqExpr{
				pos: position{line: 1962, col: 19, offset: 72906},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1962, col: 19, offset: 72906},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1962, col: 26, offset: 72913},
						expr: &ruleRefExpr{
							pos:  position{line: 1962, col: 26, offset: 72913},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1962, col: 33, offset: 72920},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1965, col: 1, offset: 72988},
			expr: &actionExpr{
				pos: position{line: 1965, col: 20, offset: 73007},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1965, col: 20, offset: 73007},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1965, col: 20, offset: 73007},
							expr: &ruleRefExpr{
								pos:  position{line: 1965, col: 21, offset: 73008},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1965, col: 36, offset: 73023},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1965, col: 42, offset: 73029},
								expr: &ruleRefExpr{
									pos:  position{line: 1965, col: 43, offset: 73030},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1965, col: 55, offset: 73042},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1965, col: 59, offset: 73046},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1969, col: 1, offset: 73114},
			expr: &actionExpr{
				pos: position{line: 1969, col: 14, offset: 73127},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1969, col: 14, offset: 73127},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1969, col: 14, offset: 73127},
							expr: &ruleRefExpr{
								pos:  position{line: 1969, col: 15, offset: 73128},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1969, col: 30, offset: 73143},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1969, col: 36, offset: 73149},
								expr: &ruleRefExpr{
									pos:  position{line: 1969, col: 37, offset: 73150},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1969, col: 49, offset: 73162},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1969, col: 53, offset: 73166},
							expr: &ruleRefExpr{
								pos:  position{line: 1969, col: 53, offset: 73166},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1973, col: 1, offset: 73235},
			expr: &actionExpr{
				pos: position{line: 1973, col: 14, offset: 73248},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1973, col: 14, offset: 73248},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1973, col: 14, offset: 73248},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1973, col: 33, offset: 73267},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1973, col: 42, offset: 73276},
								expr: &seqExpr{
									pos: position{line: 1973, col: 43, offset: 73277},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1973, col: 43, offset: 73277},
											expr: &ruleRefExpr{
												pos:  position{line: 1973, col: 44, offset: 73278},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1973, col: 63, offset: 73297},
											expr: &ruleRefExpr{
												pos:  position{line: 1973, col: 64, offset: 73298},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1973, col: 68, offset: 73302},
											expr: &ruleRefExpr{
												pos:  position{line: 1973, col: 68, offset: 73302},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1973, col: 75, offset: 73309},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1973, col: 89, offset: 73323},
											expr: &ruleRefExpr{
												pos:  position{line: 1973, col: 89, offset: 73323},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1980, col: 1, offset: 73572},
			expr: &seqExpr{
				pos: position{line: 1980, col: 26, offset: 73597},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1980, col: 26, offset: 73597},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1980, col: 33, offset: 73604},
						expr: &ruleRefExpr{
							pos:  position{line: 1980, col: 33, offset: 73604},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1980, col: 40, offset: 73611},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1982, col: 1, offset: 73616},
			expr: &seqExpr{
				pos: position{line: 1982, col: 31, offset: 73646},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1982, col: 31, offset: 73646},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1982, col: 38, offset: 73653},
						expr: &ruleRefExpr{
							pos:  position{line: 1982, col: 38, offset: 73653},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1982, col: 45, offset: 73660},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1984, col: 1, offset: 73665},
			expr: &choiceExpr{
				pos: position{line: 1984, col: 29, offset: 73693},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1984, col: 30, offset: 73694},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1984, col: 30, offset: 73694},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1984, col: 37, offset: 73701},
								expr: &ruleRefExpr{
									pos:  position{line: 1984, col: 37, offset: 73701},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1984, col: 44, offset: 73708},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1984, col: 51, offset: 73715},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1986, col: 1, offset: 73720},
			expr: &actionExpr{
				pos: position{line: 1986, col: 17, offset: 73736},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1986, col: 17, offset: 73736},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1986, col: 17, offset: 73736},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1986, col: 44, offset: 73763},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1986, col: 53, offset: 73772},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1986, col: 78, offset: 73797},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1990, col: 1, offset: 73907},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1990, col: 27, offset: 73933},
				expr: &actionExpr{
					pos: position{line: 1990, col: 28, offset: 73934},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1990, col: 28, offset: 73934},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1990, col: 28, offset: 73934},
								expr: &ruleRefExpr{
									pos:  position{line: 1990, col: 29, offset: 73935},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1990, col: 54, offset: 73960},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1990, col: 60, offset: 73966},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1994, col: 1, offset: 74110},
			expr: &actionExpr{
				pos: position{line: 1994, col: 22, offset: 74131},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1994, col: 22, offset: 74131},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1994, col: 22, offset: 74131},
							expr: &ruleRefExpr{
								pos:  position{line: 1994, col: 23, offset: 74132},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1994, col: 45, offset: 74154},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1994, col: 50, offset: 74159},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1994, col: 59, offset: 74168},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1994, col: 85, offset: 74194},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1998, col: 1, offset: 74259},
			expr: &actionExpr{
				pos: position{line: 1998, col: 29, offset: 74287},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1998, col: 29, offset: 74287},
					expr: &charClassMatcher{
						pos:        position{line: 1998, col: 29, offset: 74287},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2006, col: 1, offset: 74600},
			expr: &choiceExpr{
				pos: position{line: 2006, col: 17, offset: 74616},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2006, col: 17, offset: 74616},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2006, col: 49, offset: 74648},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2006, col: 78, offset: 74677},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2008, col: 1, offset: 74713},
			expr: &litMatcher{
				pos:        position{line: 2008, col: 26, offset: 74738},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2011, col: 1, offset: 74810},
			expr: &actionExpr{
				pos: position{line: 2011, col: 31, offset: 74840},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2011, col: 31, offset: 74840},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2011, col: 31, offset: 74840},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2011, col: 42, offset: 74851},
								expr: &ruleRefExpr{
									pos:  position{line: 2011, col: 43, offset: 74852},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2011, col: 56, offset: 74865},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2011, col: 63, offset: 74872},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2016, col: 1, offset: 75102},
			expr: &actionExpr{
				pos: position{line: 2017, col: 5, offset: 75142},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2017, col: 5, offset: 75142},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2017, col: 5, offset: 75142},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 2017, col: 16, offset: 75153},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 2017, col: 16, offset: 75153},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2017, col: 16, offset: 75153},
											expr: &ruleRefExpr{
												pos:  position{line: 2017, col: 16, offset: 75153},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2017, col: 23, offset: 75160},
											expr: &charClassMatcher{
												pos:        position{line: 2017, col: 23, offset: 75160},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2019, col: 8, offset: 75213},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 2020, col: 5, offset: 75276},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2020, col: 16, offset: 75287},
								expr: &actionExpr{
									pos: position{line: 2021, col: 9, offset: 75297},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 2021, col: 9, offset: 75297},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2021, col: 9, offset: 75297},
												expr: &ruleRefExpr{
													pos:  position{line: 2021, col: 10, offset: 75298},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 2022, col: 9, offset: 75317},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 2022, col: 20, offset: 75328},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 2022, col: 20, offset: 75328},
														expr: &charClassMatcher{
															pos:        position{line: 2022, col: 20, offset: 75328},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2024, col: 12, offset: 75389},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2031, col: 1, offset: 75619},
			expr: &actionExpr{
				pos: position{line: 2031, col: 39, offset: 75657},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2031, col: 39, offset: 75657},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2031, col: 39, offset: 75657},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2031, col: 50, offset: 75668},
								expr: &ruleRefExpr{
									pos:  position{line: 2031, col: 51, offset: 75669},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2032, col: 9, offset: 75690},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2032, col: 31, offset: 75712},
							expr: &ruleRefExpr{
								pos:  position{line: 2032, col: 31, offset: 75712},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2032, col: 38, offset: 75719},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2032, col: 46, offset: 75727},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2032, col: 53, offset: 75734},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2032, col: 95, offset: 75776},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2032, col: 96, offset: 75777},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2032, col: 96, offset: 75777},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2032, col: 118, offset: 75799},
											expr: &ruleRefExpr{
												pos:  position{line: 2032, col: 118, offset: 75799},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2032, col: 125, offset: 75806},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2032, col: 132, offset: 75813},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2037, col: 1, offset: 75972},
			expr: &actionExpr{
				pos: position{line: 2037, col: 44, offset: 76015},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2037, col: 44, offset: 76015},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2037, col: 50, offset: 76021},
						expr: &ruleRefExpr{
							pos:  position{line: 2037, col: 51, offset: 76022},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2041, col: 1, offset: 76106},
			expr: &actionExpr{
				pos: position{line: 2042, col: 5, offset: 76161},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2042, col: 5, offset: 76161},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2042, col: 5, offset: 76161},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2042, col: 11, offset: 76167},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2042, col: 11, offset: 76167},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2042, col: 11, offset: 76167},
											expr: &ruleRefExpr{
												pos:  position{line: 2042, col: 12, offset: 76168},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2042, col: 34, offset: 76190},
											expr: &charClassMatcher{
												pos:        position{line: 2042, col: 34, offset: 76190},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2044, col: 8, offset: 76243},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2049, col: 1, offset: 76369},
			expr: &actionExpr{
				pos: position{line: 2050, col: 5, offset: 76407},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2050, col: 5, offset: 76407},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2050, col: 5, offset: 76407},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2050, col: 16, offset: 76418},
								expr: &ruleRefExpr{
									pos:  position{line: 2050, col: 17, offset: 76419},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2051, col: 5, offset: 76436},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2058, col: 5, offset: 76643},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2058, col: 12, offset: 76650},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2062, col: 1, offset: 76800},
			expr: &actionExpr{
				pos: position{line: 2062, col: 16, offset: 76815},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2062, col: 16, offset: 76815},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2067, col: 1, offset: 76898},
			expr: &actionExpr{
				pos: position{line: 2067, col: 39, offset: 76936},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2067, col: 39, offset: 76936},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2067, col: 45, offset: 76942},
						expr: &ruleRefExpr{
							pos:  position{line: 2067, col: 46, offset: 76943},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2071, col: 1, offset: 77023},
			expr: &actionExpr{
				pos: position{line: 2071, col: 38, offset: 77060},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2071, col: 38, offset: 77060},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2071, col: 38, offset: 77060},
							expr: &ruleRefExpr{
								pos:  position{line: 2071, col: 39, offset: 77061},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2071, col: 49, offset: 77071},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2071, col: 58, offset: 77080},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2071, col: 58, offset: 77080},
									expr: &charClassMatcher{
										pos:        position{line: 2071, col: 58, offset: 77080},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2073, col: 4, offset: 77125},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2080, col: 1, offset: 77311},
			expr: &actionExpr{
				pos: position{line: 2080, col: 14, offset: 77324},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2080, col: 14, offset: 77324},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2080, col: 14, offset: 77324},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2080, col: 19, offset: 77329},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2080, col: 25, offset: 77335},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2080, col: 43, offset: 77353},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2084, col: 1, offset: 77418},
			expr: &actionExpr{
				pos: position{line: 2084, col: 21, offset: 77438},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2084, col: 21, offset: 77438},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2084, col: 30, offset: 77447},
						expr: &choiceExpr{
							pos: position{line: 2084, col: 31, offset: 77448},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2084, col: 31, offset: 77448},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2084, col: 38, offset: 77455},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2084, col: 53, offset: 77470},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2084, col: 66, offset: 77483},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2084, col: 74, offset: 77491},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2084, col: 93, offset: 77510},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2084, col: 114, offset: 77531},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2084, col: 115, offset: 77532},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2084, col: 115, offset: 77532},
												expr: &litMatcher{
													pos:        position{line: 2084, col: 116, offset: 77533},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2084, col: 121, offset: 77538,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2090, col: 1, offset: 77644},
			expr: &actionExpr{
				pos: position{line: 2090, col: 23, offset: 77666},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2090, col: 23, offset: 77666},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2090, col: 23, offset: 77666},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2090, col: 29, offset: 77672},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2090, col: 36, offset: 77679},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2091, col: 5, offset: 77711},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2091, col: 11, offset: 77717},
								expr: &actionExpr{
									pos: position{line: 2091, col: 12, offset: 77718},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2091, col: 12, offset: 77718},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2091, col: 12, offset: 77718},
												expr: &ruleRefExpr{
													pos:  position{line: 2091, col: 12, offset: 77718},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2091, col: 19, offset: 77725},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2091, col: 23, offset: 77729},
												expr: &ruleRefExpr{
													pos:  position{line: 2091, col: 23, offset: 77729},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2091, col: 30, offset: 77736},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2091, col: 39, offset: 77745},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2092, col: 5, offset: 77803},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2092, col: 11, offset: 77809},
								expr: &actionExpr{
									pos: position{line: 2092, col: 12, offset: 77810},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2092, col: 12, offset: 77810},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2092, col: 12, offset: 77810},
												expr: &ruleRefExpr{
													pos:  position{line: 2092, col: 12, offset: 77810},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2092, col: 19, offset: 77817},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2092, col: 23, offset: 77821},
												expr: &ruleRefExpr{
													pos:  position{line: 2092, col: 23, offset: 77821},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2092, col: 30, offset: 77828},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2092, col: 39, offset: 77837},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2093, col: 5, offset: 77895},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2097, col: 1, offset: 77974},
			expr: &actionExpr{
				pos: position{line: 2097, col: 30, offset: 78003},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2097, col: 30, offset: 78003},
					expr: &choiceExpr{
						pos: position{line: 2097, col: 31, offset: 78004},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2097, col: 31, offset: 78004},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2097, col: 42, offset: 78015},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2104, col: 1, offset: 78164},
			expr: &actionExpr{
				pos: position{line: 2104, col: 14, offset: 78177},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2104, col: 14, offset: 78177},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2104, col: 14, offset: 78177},
							expr: &ruleRefExpr{
								pos:  position{line: 2104, col: 15, offset: 78178},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2104, col: 19, offset: 78182},
							expr: &ruleRefExpr{
								pos:  position{line: 2104, col: 19, offset: 78182},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2104, col: 26, offset: 78189},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2112, col: 1, offset: 78334},
			expr: &choiceExpr{
				pos: position{line: 2112, col: 11, offset: 78344},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2112, col: 11, offset: 78344},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2112, col: 24, offset: 78357},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2112, col: 36, offset: 78369},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2112, col: 48, offset: 78381},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2112, col: 61, offset: 78394},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2112, col: 72, offset: 78405},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2114, col: 1, offset: 78424},
			expr: &actionExpr{
				pos: position{line: 2114, col: 15, offset: 78438},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2114, col: 15, offset: 78438},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2117, col: 1, offset: 78491},
			expr: &actionExpr{
				pos: position{line: 2117, col: 14, offset: 78504},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2117, col: 14, offset: 78504},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2120, col: 1, offset: 78558},
			expr: &actionExpr{
				pos: position{line: 2120, col: 14, offset: 78571},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2120, col: 14, offset: 78571},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2123, col: 1, offset: 78626},
			expr: &actionExpr{
				pos: position{line: 2123, col: 15, offset: 78640},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2123, col: 15, offset: 78640},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2126, col: 1, offset: 78694},
			expr: &actionExpr{
				pos: position{line: 2126, col: 13, offset: 78706},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2126, col: 13, offset: 78706},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2134, col: 1, offset: 78983},
			expr: &actionExpr{
				pos: position{line: 2134, col: 22, offset: 79004},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2134, col: 22, offset: 79004},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2134, col: 22, offset: 79004},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2134, col: 31, offset: 79013},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2134, col: 35, offset: 79017},
							expr: &charClassMatcher{
								pos:        position{line: 2134, col: 36, offset: 79018},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2143, col: 1, offset: 79380},
			expr: &choiceExpr{
				pos: position{line: 2143, col: 21, offset: 79400},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2143, col: 21, offset: 79400},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2143, col: 21, offset: 79400},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2146, col: 9, offset: 79563},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2146, col: 10, offset: 79564},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2146, col: 10, offset: 79564},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2146, col: 16, offset: 79570},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2146, col: 22, offset: 79576},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2153, col: 1, offset: 79754},
			expr: &charClassMatcher{
				pos:        position{line: 2153, col: 13, offset: 79766},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2155, col: 1, offset: 79776},
			expr: &choiceExpr{
				pos: position{line: 2155, col: 16, offset: 79791},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2155, col: 16, offset: 79791},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2155, col: 22, offset: 79797},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2155, col: 28, offset: 79803},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2155, col: 34, offset: 79809},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2155, col: 40, offset: 79815},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2155, col: 46, offset: 79821},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2157, col: 1, offset: 79827},
			expr: &actionExpr{
				pos: position{line: 2157, col: 14, offset: 79840},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2157, col: 14, offset: 79840},
					expr: &charClassMatcher{
						pos:        position{line: 2157, col: 14, offset: 79840},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2161, col: 1, offset: 79886},
			expr: &choiceExpr{
				pos: position{line: 2165, col: 5, offset: 80213},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2165, col: 5, offset: 80213},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2165, col: 5, offset: 80213},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2165, col: 5, offset: 80213},
									expr: &charClassMatcher{
										pos:        position{line: 2165, col: 5, offset: 80213},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2165, col: 15, offset: 80223},
									expr: &choiceExpr{
										pos: position{line: 2165, col: 17, offset: 80225},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2165, col: 17, offset: 80225},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2165, col: 30, offset: 80238},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2167, col: 9, offset: 80308},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2167, col: 9, offset: 80308},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2167, col: 9, offset: 80308},
									expr: &charClassMatcher{
										pos:        position{line: 2167, col: 9, offset: 80308},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2167, col: 19, offset: 80318},
									expr: &seqExpr{
										pos: position{line: 2167, col: 20, offset: 80319},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2167, col: 20, offset: 80319},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2167, col: 27, offset: 80326},
												expr: &charClassMatcher{
													pos:        position{line: 2167, col: 27, offset: 80326},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2171, col: 1, offset: 80402},
			expr: &choiceExpr{
				pos: position{line: 2172, col: 5, offset: 80483},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2172, col: 5, offset: 80483},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2172, col: 5, offset: 80483},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2172, col: 5, offset: 80483},
									expr: &charClassMatcher{
										pos:        position{line: 2172, col: 5, offset: 80483},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2172, col: 19, offset: 80497},
									expr: &choiceExpr{
										pos: position{line: 2172, col: 21, offset: 80499},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2172, col: 21, offset: 80499},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2172, col: 31, offset: 80509},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2174, col: 9, offset: 80578},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2177, col: 1, offset: 80678},
			expr: &actionExpr{
				pos: position{line: 2177, col: 12, offset: 80689},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2177, col: 12, offset: 80689},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2181, col: 1, offset: 80754},
			expr: &actionExpr{
				pos: position{line: 2181, col: 17, offset: 80770},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2181, col: 17, offset: 80770},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2181, col: 22, offset: 80775},
						expr: &choiceExpr{
							pos: position{line: 2181, col: 23, offset: 80776},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2181, col: 23, offset: 80776},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2181, col: 34, offset: 80787},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2185, col: 1, offset: 80868},
			expr: &actionExpr{
				pos: position{line: 2185, col: 25, offset: 80892},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2185, col: 25, offset: 80892},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2185, col: 30, offset: 80897},
						expr: &charClassMatcher{
							pos:        position{line: 2185, col: 31, offset: 80898},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2189, col: 1, offset: 80970},
			expr: &actionExpr{
				pos: position{line: 2189, col: 13, offset: 80982},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2189, col: 13, offset: 80982},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2189, col: 13, offset: 80982},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2189, col: 20, offset: 80989},
								expr: &ruleRefExpr{
									pos:  position{line: 2189, col: 21, offset: 80990},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2189, col: 34, offset: 81003},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2189, col: 39, offset: 81008},
								expr: &choiceExpr{
									pos: position{line: 2189, col: 40, offset: 81009},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2189, col: 40, offset: 81009},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2189, col: 52, offset: 81021},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2193, col: 1, offset: 81106},
			expr: &actionExpr{
				pos: position{line: 2193, col: 23, offset: 81128},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2193, col: 23, offset: 81128},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2193, col: 23, offset: 81128},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2193, col: 31, offset: 81136},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2193, col: 43, offset: 81148},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2193, col: 48, offset: 81153},
								expr: &choiceExpr{
									pos: position{line: 2193, col: 49, offset: 81154},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2193, col: 49, offset: 81154},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2193, col: 60, offset: 81165},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2197, col: 1, offset: 81250},
			expr: &oneOrMoreExpr{
				pos: position{line: 2197, col: 13, offset: 81262},
				expr: &charClassMatcher{
					pos:        position{line: 2197, col: 14, offset: 81263},
					val:        "[^\\r\\n[\\]\\uFFFD ]",
					chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2199, col: 1, offset: 81331},
			expr: &actionExpr{
				pos: position{line: 2199, col: 21, offset: 81351},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2199, col: 21, offset: 81351},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2199, col: 21, offset: 81351},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2199, col: 29, offset: 81359},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2199, col: 41, offset: 81371},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2199, col: 47, offset: 81377},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2204, col: 1, offset: 81625},
			expr: &oneOrMoreExpr{
				pos: position{line: 2204, col: 22, offset: 81646},
				expr: &charClassMatcher{
					pos:        position{line: 2204, col: 23, offset: 81647},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2206, col: 1, offset: 81779},
			expr: &actionExpr{
				pos: position{line: 2206, col: 9, offset: 81787},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2206, col: 9, offset: 81787},
					expr: &charClassMatcher{
						pos:        position{line: 2206, col: 9, offset: 81787},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2210, col: 1, offset: 81835},
			expr: &choiceExpr{
				pos: position{line: 2210, col: 15, offset: 81849},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2210, col: 15, offset: 81849},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2210, col: 27, offset: 81861},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2210, col: 40, offset: 81874},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2210, col: 51, offset: 81885},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2210, col: 62, offset: 81896},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2212, col: 1, offset: 81907},
			expr: &actionExpr{
				pos: position{line: 2212, col: 7, offset: 81913},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2212, col: 7, offset: 81913},
					expr: &charClassMatcher{
						pos:        position{line: 2212, col: 7, offset: 81913},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2216, col: 1, offset: 82038},
			expr: &actionExpr{
				pos: position{line: 2216, col: 10, offset: 82047},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2216, col: 10, offset: 82047},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2220, col: 1, offset: 82089},
			expr: &actionExpr{
				pos: position{line: 2220, col: 11, offset: 82099},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2220, col: 11, offset: 82099},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2220, col: 11, offset: 82099},
							expr: &litMatcher{
								pos:        position{line: 2220, col: 11, offset: 82099},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2220, col: 16, offset: 82104},
							expr: &ruleRefExpr{
								pos:  position{line: 2220, col: 16, offset: 82104},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2224, col: 1, offset: 82156},
			expr: &choiceExpr{
				pos: position{line: 2224, col: 10, offset: 82165},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2224, col: 10, offset: 82165},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2224, col: 16, offset: 82171},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2224, col: 16, offset: 82171},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2228, col: 1, offset: 82212},
			expr: &choiceExpr{
				pos: position{line: 2228, col: 12, offset: 82223},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2228, col: 12, offset: 82223},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2228, col: 21, offset: 82232},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2228, col: 28, offset: 82239},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2230, col: 1, offset: 82245},
			expr: &notExpr{
				pos: position{line: 2230, col: 8, offset: 82252},
				expr: &anyMatcher{
					line: 2230, col: 9, offset: 82253,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2232, col: 1, offset: 82256},
			expr: &choiceExpr{
				pos: position{line: 2232, col: 8, offset: 82263},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2232, col: 8, offset: 82263},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2232, col: 18, offset: 82273},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawDocumentBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocumentBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value)
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueSingleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted7()
}

func (c *current) onAttrValueSingleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1(stack["elements"])
}

func (c *current) onAttrValueDoubleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueDoubleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted7()
}

func (c *current) onAttrValueDoubleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1(stack["elements"])
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph34(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph34(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine6(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine6(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value)
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value)
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onNormalBlocks1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonNormalBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlocks1(stack["elements"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
