// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &choiceExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 65, col: 9, offset: 1935},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 2000},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 2021},
						name: "SimpleRawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 2050},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2102},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 70, col: 11, offset: 2120},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 71, col: 11, offset: 2145},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 11, offset: 2173},
						name: "Table",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 11, offset: 2189},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 11, offset: 2213},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 75, col: 11, offset: 2239},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 76, col: 11, offset: 2268},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 77, col: 11, offset: 2294},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 11, offset: 2329},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 11, offset: 2353},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 11, offset: 2385},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 11, offset: 2411},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 11, offset: 2448},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 83, col: 11, offset: 2473},
						name: "RawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 84, col: 11, offset: 2496},
						name: "StandaloneAttributes",
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 89, col: 1, offset: 2626},
			expr: &ruleRefExpr{
				pos:  position{line: 89, col: 16, offset: 2641},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 91, col: 1, offset: 2659},
			expr: &actionExpr{
				pos: position{line: 91, col: 20, offset: 2678},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 91, col: 20, offset: 2678},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 91, col: 20, offset: 2678},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 41, offset: 2699},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 91, col: 49, offset: 2707},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 50, offset: 2708},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 75, offset: 2733},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 95, col: 1, offset: 2813},
			expr: &seqExpr{
				pos: position{line: 95, col: 26, offset: 2838},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 95, col: 26, offset: 2838},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 95, col: 32, offset: 2844},
						expr: &ruleRefExpr{
							pos:  position{line: 95, col: 32, offset: 2844},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 39, offset: 2851},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 97, col: 1, offset: 2856},
			expr: &actionExpr{
				pos: position{line: 97, col: 27, offset: 2882},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 97, col: 27, offset: 2882},
					expr: &oneOrMoreExpr{
						pos: position{line: 97, col: 28, offset: 2883},
						expr: &seqExpr{
							pos: position{line: 97, col: 29, offset: 2884},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 97, col: 29, offset: 2884},
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 30, offset: 2885},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 97, col: 51, offset: 2906,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 104, col: 1, offset: 3072},
			expr: &actionExpr{
				pos: position{line: 104, col: 19, offset: 3090},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 104, col: 19, offset: 3090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 104, col: 19, offset: 3090},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 104, col: 23, offset: 3094},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 23, offset: 3094},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 30, offset: 3101},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 37, offset: 3108},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 52, offset: 3123},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 56, offset: 3127},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 56, offset: 3127},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 74, offset: 3145},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 9, offset: 3157},
							expr: &choiceExpr{
								pos: position{line: 105, col: 10, offset: 3158},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 105, col: 10, offset: 3158},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 105, col: 10, offset: 3158},
												expr: &ruleRefExpr{
													pos:  position{line: 105, col: 10, offset: 3158},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 105, col: 17, offset: 3165},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 105, col: 37, offset: 3185},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 9, offset: 3208},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 18, offset: 3217},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 18, offset: 3217},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 107, col: 9, offset: 3244},
							expr: &choiceExpr{
								pos: position{line: 107, col: 10, offset: 3245},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 107, col: 10, offset: 3245},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 107, col: 10, offset: 3245},
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 10, offset: 3245},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 17, offset: 3252},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 107, col: 37, offset: 3272},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 9, offset: 3295},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 19, offset: 3305},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 19, offset: 3305},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 112, col: 1, offset: 3406},
			expr: &choiceExpr{
				pos: position{line: 112, col: 20, offset: 3425},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 112, col: 20, offset: 3425},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 48, offset: 3453},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 114, col: 1, offset: 3483},
			expr: &actionExpr{
				pos: position{line: 114, col: 30, offset: 3512},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 114, col: 30, offset: 3512},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 30, offset: 3512},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 30, offset: 3512},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 37, offset: 3519},
							expr: &litMatcher{
								pos:        position{line: 114, col: 38, offset: 3520},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 42, offset: 3524},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 114, col: 51, offset: 3533},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 51, offset: 3533},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 68, offset: 3550},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 118, col: 1, offset: 3620},
			expr: &actionExpr{
				pos: position{line: 118, col: 33, offset: 3652},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 118, col: 33, offset: 3652},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 33, offset: 3652},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 33, offset: 3652},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 118, col: 40, offset: 3659},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 118, col: 51, offset: 3670},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 59, offset: 3678},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 75, offset: 3694},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 122, col: 1, offset: 3773},
			expr: &actionExpr{
				pos: position{line: 122, col: 19, offset: 3791},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 122, col: 19, offset: 3791},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 19, offset: 3791},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 19, offset: 3791},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 26, offset: 3798},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 36, offset: 3808},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 56, offset: 3828},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 122, col: 62, offset: 3834},
								expr: &ruleRefExpr{
									pos:  position{line: 122, col: 63, offset: 3835},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 85, offset: 3857},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 85, offset: 3857},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 122, col: 92, offset: 3864},
							expr: &litMatcher{
								pos:        position{line: 122, col: 92, offset: 3864},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 97, offset: 3869},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 97, offset: 3869},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 127, col: 1, offset: 4014},
			expr: &actionExpr{
				pos: position{line: 127, col: 23, offset: 4036},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 127, col: 23, offset: 4036},
					expr: &charClassMatcher{
						pos:        position{line: 127, col: 23, offset: 4036},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 131, col: 1, offset: 4083},
			expr: &actionExpr{
				pos: position{line: 131, col: 24, offset: 4106},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 131, col: 24, offset: 4106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 131, col: 24, offset: 4106},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 131, col: 28, offset: 4110},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 131, col: 35, offset: 4117},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 131, col: 36, offset: 4118},
									expr: &charClassMatcher{
										pos:        position{line: 131, col: 36, offset: 4118},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 4, offset: 4165},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 139, col: 1, offset: 4326},
			expr: &actionExpr{
				pos: position{line: 139, col: 21, offset: 4346},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 139, col: 21, offset: 4346},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 139, col: 21, offset: 4346},
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 21, offset: 4346},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 139, col: 28, offset: 4353},
							expr: &litMatcher{
								pos:        position{line: 139, col: 29, offset: 4354},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 139, col: 33, offset: 4358},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 140, col: 9, offset: 4377},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 140, col: 10, offset: 4378},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 140, col: 10, offset: 4378},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 140, col: 10, offset: 4378},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 21, offset: 4389},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 45, offset: 4413},
													expr: &litMatcher{
														pos:        position{line: 140, col: 45, offset: 4413},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 50, offset: 4418},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 58, offset: 4426},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 59, offset: 4427},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 82, offset: 4450},
													expr: &litMatcher{
														pos:        position{line: 140, col: 82, offset: 4450},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 87, offset: 4455},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 97, offset: 4465},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 98, offset: 4466},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 142, col: 15, offset: 4583},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 142, col: 15, offset: 4583},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 142, col: 15, offset: 4583},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 142, col: 24, offset: 4592},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 142, col: 46, offset: 4614},
													expr: &litMatcher{
														pos:        position{line: 142, col: 46, offset: 4614},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 142, col: 51, offset: 4619},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 142, col: 61, offset: 4629},
														expr: &ruleRefExpr{
															pos:  position{line: 142, col: 62, offset: 4630},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 13, offset: 4739},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 149, col: 1, offset: 4869},
			expr: &choiceExpr{
				pos: position{line: 149, col: 27, offset: 4895},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 149, col: 27, offset: 4895},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 149, col: 27, offset: 4895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 149, col: 27, offset: 4895},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 32, offset: 4900},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 39, offset: 4907},
									expr: &charClassMatcher{
										pos:        position{line: 149, col: 39, offset: 4907},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 4955},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 151, col: 5, offset: 4955},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 151, col: 5, offset: 4955},
									expr: &litMatcher{
										pos:        position{line: 151, col: 5, offset: 4955},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 151, col: 11, offset: 4961},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 151, col: 18, offset: 4968},
									expr: &charClassMatcher{
										pos:        position{line: 151, col: 18, offset: 4968},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 151, col: 29, offset: 4979},
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 29, offset: 4979},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 151, col: 36, offset: 4986},
									expr: &litMatcher{
										pos:        position{line: 151, col: 37, offset: 4987},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 155, col: 1, offset: 5027},
			expr: &actionExpr{
				pos: position{line: 155, col: 25, offset: 5051},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 155, col: 25, offset: 5051},
					expr: &charClassMatcher{
						pos:        position{line: 155, col: 25, offset: 5051},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 159, col: 1, offset: 5097},
			expr: &actionExpr{
				pos: position{line: 159, col: 27, offset: 5123},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 159, col: 27, offset: 5123},
					expr: &charClassMatcher{
						pos:        position{line: 159, col: 27, offset: 5123},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 166, col: 1, offset: 5276},
			expr: &actionExpr{
				pos: position{line: 166, col: 25, offset: 5300},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 166, col: 25, offset: 5300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 166, col: 25, offset: 5300},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 29, offset: 5304},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 35, offset: 5310},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 166, col: 50, offset: 5325},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 9, offset: 5338},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 167, col: 15, offset: 5344},
								expr: &actionExpr{
									pos: position{line: 167, col: 16, offset: 5345},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 167, col: 17, offset: 5346},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 167, col: 17, offset: 5346},
												expr: &ruleRefExpr{
													pos:  position{line: 167, col: 17, offset: 5346},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 167, col: 24, offset: 5353},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 167, col: 31, offset: 5360},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 169, col: 13, offset: 5434},
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 13, offset: 5434},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 169, col: 20, offset: 5441},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 176, col: 1, offset: 5681},
			expr: &actionExpr{
				pos: position{line: 176, col: 18, offset: 5698},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 176, col: 18, offset: 5698},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 176, col: 18, offset: 5698},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 28, offset: 5708},
							expr: &charClassMatcher{
								pos:        position{line: 176, col: 29, offset: 5709},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 180, col: 1, offset: 5757},
			expr: &actionExpr{
				pos: position{line: 180, col: 30, offset: 5786},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 180, col: 30, offset: 5786},
					expr: &charClassMatcher{
						pos:        position{line: 180, col: 30, offset: 5786},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 184, col: 1, offset: 5831},
			expr: &choiceExpr{
				pos: position{line: 184, col: 19, offset: 5849},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 184, col: 19, offset: 5849},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 184, col: 19, offset: 5849},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 184, col: 19, offset: 5849},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 184, col: 24, offset: 5854},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 30, offset: 5860},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 184, col: 45, offset: 5875},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 184, col: 49, offset: 5879},
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 49, offset: 5879},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 184, col: 56, offset: 5886},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5946},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 186, col: 5, offset: 5946},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 9, offset: 5950},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 15, offset: 5956},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 186, col: 30, offset: 5971},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 186, col: 35, offset: 5976},
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 35, offset: 5976},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 42, offset: 5983},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 190, col: 1, offset: 6042},
			expr: &choiceExpr{
				pos: position{line: 190, col: 26, offset: 6067},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 190, col: 26, offset: 6067},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 190, col: 39, offset: 6080},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 192, col: 1, offset: 6089},
			expr: &actionExpr{
				pos: position{line: 192, col: 12, offset: 6100},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 192, col: 12, offset: 6100},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 192, col: 12, offset: 6100},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 16, offset: 6104},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 21, offset: 6109},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 192, col: 35, offset: 6123},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 196, col: 1, offset: 6189},
			expr: &choiceExpr{
				pos: position{line: 196, col: 15, offset: 6203},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 196, col: 15, offset: 6203},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 29, offset: 6217},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 43, offset: 6231},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 61, offset: 6249},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 80, offset: 6268},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 98, offset: 6286},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 198, col: 1, offset: 6304},
			expr: &actionExpr{
				pos: position{line: 198, col: 16, offset: 6319},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 198, col: 16, offset: 6319},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 198, col: 16, offset: 6319},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 198, col: 28, offset: 6331},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 33, offset: 6336},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 198, col: 47, offset: 6350},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 202, col: 1, offset: 6426},
			expr: &actionExpr{
				pos: position{line: 202, col: 16, offset: 6441},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 202, col: 16, offset: 6441},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 202, col: 16, offset: 6441},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 29, offset: 6454},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 34, offset: 6459},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 202, col: 48, offset: 6473},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 206, col: 1, offset: 6548},
			expr: &actionExpr{
				pos: position{line: 206, col: 20, offset: 6567},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 206, col: 20, offset: 6567},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 206, col: 20, offset: 6567},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 32, offset: 6579},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 37, offset: 6584},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 51, offset: 6598},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 55, offset: 6602},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 206, col: 61, offset: 6608},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 70, offset: 6617},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 210, col: 1, offset: 6695},
			expr: &actionExpr{
				pos: position{line: 210, col: 21, offset: 6715},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 210, col: 21, offset: 6715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 210, col: 21, offset: 6715},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 34, offset: 6728},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 39, offset: 6733},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 53, offset: 6747},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 57, offset: 6751},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 210, col: 63, offset: 6757},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 72, offset: 6766},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 214, col: 1, offset: 6843},
			expr: &actionExpr{
				pos: position{line: 214, col: 20, offset: 6862},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 214, col: 20, offset: 6862},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 214, col: 20, offset: 6862},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 32, offset: 6874},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 37, offset: 6879},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 214, col: 51, offset: 6893},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 55, offset: 6897},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 214, col: 60, offset: 6902},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 214, col: 60, offset: 6902},
									expr: &charClassMatcher{
										pos:        position{line: 214, col: 60, offset: 6902},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 214, col: 108, offset: 6950},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 218, col: 1, offset: 7032},
			expr: &actionExpr{
				pos: position{line: 218, col: 21, offset: 7052},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 218, col: 21, offset: 7052},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 218, col: 21, offset: 7052},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 34, offset: 7065},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 39, offset: 7070},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 53, offset: 7084},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 57, offset: 7088},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 218, col: 62, offset: 7093},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 218, col: 62, offset: 7093},
									expr: &charClassMatcher{
										pos:        position{line: 218, col: 62, offset: 7093},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 110, offset: 7141},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 222, col: 1, offset: 7222},
			expr: &actionExpr{
				pos: position{line: 222, col: 15, offset: 7236},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 222, col: 15, offset: 7236},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 222, col: 15, offset: 7236},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 222, col: 21, offset: 7242},
								expr: &ruleRefExpr{
									pos:  position{line: 222, col: 22, offset: 7243},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 222, col: 41, offset: 7262},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 41, offset: 7262},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 226, col: 1, offset: 7332},
			expr: &actionExpr{
				pos: position{line: 226, col: 21, offset: 7352},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 226, col: 21, offset: 7352},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 226, col: 21, offset: 7352},
							expr: &choiceExpr{
								pos: position{line: 226, col: 23, offset: 7354},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 226, col: 23, offset: 7354},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 226, col: 29, offset: 7360},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 7437},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 227, col: 11, offset: 7443},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 227, col: 11, offset: 7443},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 228, col: 9, offset: 7464},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 229, col: 9, offset: 7488},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 230, col: 9, offset: 7525},
										name: "LiteralBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 231, col: 9, offset: 7558},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 232, col: 9, offset: 7586},
										name: "ExampleBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 233, col: 9, offset: 7618},
										name: "ListingBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7650},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7677},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7704},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7741},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 238, col: 9, offset: 7777},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 242, col: 1, offset: 7880},
			expr: &actionExpr{
				pos: position{line: 242, col: 14, offset: 7893},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 242, col: 14, offset: 7893},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 14, offset: 7893},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 19, offset: 7898},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 23, offset: 7902},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 242, col: 27, offset: 7906},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 242, col: 32, offset: 7911},
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 32, offset: 7911},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 39, offset: 7918},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 246, col: 1, offset: 7961},
			expr: &actionExpr{
				pos: position{line: 246, col: 20, offset: 7980},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 246, col: 20, offset: 7980},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 246, col: 20, offset: 7980},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 25, offset: 7985},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 29, offset: 7989},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 246, col: 33, offset: 7993},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 246, col: 38, offset: 7998},
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 38, offset: 7998},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 252, col: 1, offset: 8275},
			expr: &actionExpr{
				pos: position{line: 252, col: 17, offset: 8291},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 252, col: 17, offset: 8291},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 252, col: 17, offset: 8291},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 252, col: 21, offset: 8295},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 28, offset: 8302},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 49, offset: 8323},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 49, offset: 8323},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 56, offset: 8330},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 256, col: 1, offset: 8388},
			expr: &actionExpr{
				pos: position{line: 256, col: 24, offset: 8411},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 256, col: 24, offset: 8411},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 256, col: 24, offset: 8411},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 256, col: 32, offset: 8419},
							expr: &charClassMatcher{
								pos:        position{line: 256, col: 32, offset: 8419},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 262, col: 1, offset: 8673},
			expr: &actionExpr{
				pos: position{line: 262, col: 31, offset: 8703},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 262, col: 31, offset: 8703},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 31, offset: 8703},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 262, col: 35, offset: 8707},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 262, col: 42, offset: 8714},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 262, col: 42, offset: 8714},
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 42, offset: 8714},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 262, col: 57, offset: 8729},
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 57, offset: 8729},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 262, col: 69, offset: 8741},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 262, col: 73, offset: 8745},
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 73, offset: 8745},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 262, col: 80, offset: 8752},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 266, col: 1, offset: 8806},
			expr: &choiceExpr{
				pos: position{line: 266, col: 15, offset: 8820},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 266, col: 15, offset: 8820},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 31, offset: 8836},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 46, offset: 8851},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 270, col: 1, offset: 9079},
			expr: &actionExpr{
				pos: position{line: 270, col: 18, offset: 9096},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 270, col: 18, offset: 9096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 18, offset: 9096},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 22, offset: 9100},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 270, col: 29, offset: 9107},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 270, col: 29, offset: 9107},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 29, offset: 9107},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 270, col: 45, offset: 9123},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 45, offset: 9123},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 270, col: 60, offset: 9138},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 60, offset: 9138},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 270, col: 82, offset: 9160},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 82, offset: 9160},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 270, col: 104, offset: 9182},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 104, offset: 9182},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 116, offset: 9194},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 120, offset: 9198},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 274, col: 1, offset: 9252},
			expr: &actionExpr{
				pos: position{line: 274, col: 19, offset: 9270},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 274, col: 19, offset: 9270},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 274, col: 25, offset: 9276},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 278, col: 1, offset: 9337},
			expr: &actionExpr{
				pos: position{line: 278, col: 25, offset: 9361},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 278, col: 25, offset: 9361},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 278, col: 25, offset: 9361},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 25, offset: 9361},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 32, offset: 9368},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 278, col: 36, offset: 9372},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 36, offset: 9372},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 278, col: 43, offset: 9379},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 278, col: 49, offset: 9385},
								expr: &ruleRefExpr{
									pos:  position{line: 278, col: 49, offset: 9385},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 285, col: 1, offset: 9526},
			expr: &actionExpr{
				pos: position{line: 285, col: 25, offset: 9550},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 285, col: 25, offset: 9550},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 25, offset: 9550},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 25, offset: 9550},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 285, col: 32, offset: 9557},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 36, offset: 9561},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 36, offset: 9561},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 43, offset: 9568},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 49, offset: 9574},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 49, offset: 9574},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockAttribute",
			pos:  position{line: 292, col: 1, offset: 9715},
			expr: &actionExpr{
				pos: position{line: 292, col: 26, offset: 9740},
				run: (*parser).callonLiteralBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 292, col: 26, offset: 9740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 292, col: 26, offset: 9740},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 292, col: 38, offset: 9752},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 38, offset: 9752},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 292, col: 45, offset: 9759},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 296, col: 1, offset: 9816},
			expr: &actionExpr{
				pos: position{line: 296, col: 30, offset: 9845},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 296, col: 30, offset: 9845},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 30, offset: 9845},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 296, col: 39, offset: 9854},
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 39, offset: 9854},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 46, offset: 9861},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockAttribute",
			pos:  position{line: 300, col: 1, offset: 9922},
			expr: &actionExpr{
				pos: position{line: 300, col: 26, offset: 9947},
				run: (*parser).callonExampleBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 300, col: 26, offset: 9947},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 300, col: 26, offset: 9947},
							val:        "[example]",
							ignoreCase: false,
							want:       "\"[example]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 38, offset: 9959},
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 38, offset: 9959},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 300, col: 45, offset: 9966},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockAttribute",
			pos:  position{line: 304, col: 1, offset: 10019},
			expr: &actionExpr{
				pos: position{line: 304, col: 26, offset: 10044},
				run: (*parser).callonListingBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 304, col: 26, offset: 10044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 304, col: 26, offset: 10044},
							val:        "[listing]",
							ignoreCase: false,
							want:       "\"[listing]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 304, col: 38, offset: 10056},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 38, offset: 10056},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 304, col: 45, offset: 10063},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 309, col: 1, offset: 10196},
			expr: &actionExpr{
				pos: position{line: 309, col: 30, offset: 10225},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 309, col: 30, offset: 10225},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 30, offset: 10225},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 34, offset: 10229},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 37, offset: 10232},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 309, col: 53, offset: 10248},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 57, offset: 10252},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 57, offset: 10252},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 64, offset: 10259},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 314, col: 1, offset: 10414},
			expr: &actionExpr{
				pos: position{line: 314, col: 21, offset: 10434},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 314, col: 21, offset: 10434},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 21, offset: 10434},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 5, offset: 10449},
							label: "option",
							expr: &zeroOrOneExpr{
								pos: position{line: 315, col: 12, offset: 10456},
								expr: &actionExpr{
									pos: position{line: 315, col: 13, offset: 10457},
									run: (*parser).callonSourceAttributes6,
									expr: &litMatcher{
										pos:        position{line: 315, col: 13, offset: 10457},
										val:        "%nowrap",
										ignoreCase: false,
										want:       "\"%nowrap\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 5, offset: 10510},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 14, offset: 10519},
								expr: &actionExpr{
									pos: position{line: 318, col: 15, offset: 10520},
									run: (*parser).callonSourceAttributes10,
									expr: &seqExpr{
										pos: position{line: 318, col: 15, offset: 10520},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 318, col: 15, offset: 10520},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 318, col: 19, offset: 10524},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 318, col: 24, offset: 10529},
													expr: &ruleRefExpr{
														pos:  position{line: 318, col: 25, offset: 10530},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 319, col: 5, offset: 10585},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 319, col: 12, offset: 10592},
								expr: &actionExpr{
									pos: position{line: 319, col: 13, offset: 10593},
									run: (*parser).callonSourceAttributes18,
									expr: &seqExpr{
										pos: position{line: 319, col: 13, offset: 10593},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 319, col: 13, offset: 10593},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 319, col: 17, offset: 10597},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 319, col: 22, offset: 10602},
													expr: &ruleRefExpr{
														pos:  position{line: 319, col: 23, offset: 10603},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 320, col: 5, offset: 10650},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 320, col: 9, offset: 10654},
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 9, offset: 10654},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 320, col: 16, offset: 10661},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 325, col: 1, offset: 10820},
			expr: &actionExpr{
				pos: position{line: 325, col: 19, offset: 10838},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 325, col: 19, offset: 10838},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 19, offset: 10838},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 23, offset: 10842},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 34, offset: 10853},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 35, offset: 10854},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 54, offset: 10873},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 58, offset: 10877},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 58, offset: 10877},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 65, offset: 10884},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 329, col: 1, offset: 10956},
			expr: &choiceExpr{
				pos: position{line: 329, col: 21, offset: 10976},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 329, col: 21, offset: 10976},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 329, col: 49, offset: 11004},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 331, col: 1, offset: 11034},
			expr: &actionExpr{
				pos: position{line: 331, col: 30, offset: 11063},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 331, col: 30, offset: 11063},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 331, col: 30, offset: 11063},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 35, offset: 11068},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 331, col: 49, offset: 11082},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 53, offset: 11086},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 59, offset: 11092},
								expr: &ruleRefExpr{
									pos:  position{line: 331, col: 60, offset: 11093},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 331, col: 77, offset: 11110},
							expr: &litMatcher{
								pos:        position{line: 331, col: 77, offset: 11110},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 331, col: 82, offset: 11115},
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 82, offset: 11115},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 335, col: 1, offset: 11214},
			expr: &actionExpr{
				pos: position{line: 335, col: 33, offset: 11246},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 335, col: 33, offset: 11246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 335, col: 33, offset: 11246},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 38, offset: 11251},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 335, col: 52, offset: 11265},
							expr: &litMatcher{
								pos:        position{line: 335, col: 52, offset: 11265},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 335, col: 57, offset: 11270},
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 57, offset: 11270},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 339, col: 1, offset: 11358},
			expr: &actionExpr{
				pos: position{line: 339, col: 17, offset: 11374},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 339, col: 17, offset: 11374},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 339, col: 17, offset: 11374},
							expr: &litMatcher{
								pos:        position{line: 339, col: 18, offset: 11375},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 339, col: 26, offset: 11383},
							expr: &litMatcher{
								pos:        position{line: 339, col: 27, offset: 11384},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 339, col: 35, offset: 11392},
							expr: &litMatcher{
								pos:        position{line: 339, col: 36, offset: 11393},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 339, col: 46, offset: 11403},
							expr: &oneOrMoreExpr{
								pos: position{line: 339, col: 48, offset: 11405},
								expr: &ruleRefExpr{
									pos:  position{line: 339, col: 48, offset: 11405},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 56, offset: 11413},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 339, col: 61, offset: 11418},
								expr: &charClassMatcher{
									pos:        position{line: 339, col: 61, offset: 11418},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 339, col: 75, offset: 11432},
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 75, offset: 11432},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 343, col: 1, offset: 11475},
			expr: &actionExpr{
				pos: position{line: 343, col: 19, offset: 11493},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 343, col: 19, offset: 11493},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 343, col: 26, offset: 11500},
						expr: &charClassMatcher{
							pos:        position{line: 343, col: 26, offset: 11500},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 347, col: 1, offset: 11551},
			expr: &actionExpr{
				pos: position{line: 347, col: 29, offset: 11579},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 347, col: 29, offset: 11579},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 347, col: 29, offset: 11579},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 347, col: 36, offset: 11586},
								expr: &charClassMatcher{
									pos:        position{line: 347, col: 36, offset: 11586},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 347, col: 50, offset: 11600},
							expr: &litMatcher{
								pos:        position{line: 347, col: 51, offset: 11601},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 351, col: 1, offset: 11767},
			expr: &actionExpr{
				pos: position{line: 351, col: 20, offset: 11786},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 351, col: 20, offset: 11786},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 351, col: 20, offset: 11786},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 351, col: 29, offset: 11795},
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 29, offset: 11795},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 351, col: 36, offset: 11802},
							expr: &litMatcher{
								pos:        position{line: 351, col: 36, offset: 11802},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 41, offset: 11807},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 351, col: 48, offset: 11814},
								expr: &ruleRefExpr{
									pos:  position{line: 351, col: 49, offset: 11815},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 351, col: 66, offset: 11832},
							expr: &litMatcher{
								pos:        position{line: 351, col: 66, offset: 11832},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 71, offset: 11837},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 351, col: 77, offset: 11843},
								expr: &ruleRefExpr{
									pos:  position{line: 351, col: 78, offset: 11844},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 351, col: 95, offset: 11861},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 351, col: 99, offset: 11865},
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 99, offset: 11865},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 351, col: 106, offset: 11872},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 355, col: 1, offset: 11941},
			expr: &actionExpr{
				pos: position{line: 355, col: 20, offset: 11960},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 355, col: 20, offset: 11960},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 20, offset: 11960},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 355, col: 29, offset: 11969},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 29, offset: 11969},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 355, col: 36, offset: 11976},
							expr: &litMatcher{
								pos:        position{line: 355, col: 36, offset: 11976},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 41, offset: 11981},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 48, offset: 11988},
								expr: &ruleRefExpr{
									pos:  position{line: 355, col: 49, offset: 11989},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 355, col: 66, offset: 12006},
							expr: &litMatcher{
								pos:        position{line: 355, col: 66, offset: 12006},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 71, offset: 12011},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 77, offset: 12017},
								expr: &ruleRefExpr{
									pos:  position{line: 355, col: 78, offset: 12018},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 355, col: 95, offset: 12035},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 355, col: 99, offset: 12039},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 99, offset: 12039},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 355, col: 106, offset: 12046},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 359, col: 1, offset: 12133},
			expr: &actionExpr{
				pos: position{line: 359, col: 19, offset: 12151},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 359, col: 20, offset: 12152},
					expr: &charClassMatcher{
						pos:        position{line: 359, col: 20, offset: 12152},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 363, col: 1, offset: 12201},
			expr: &actionExpr{
				pos: position{line: 363, col: 20, offset: 12220},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 363, col: 20, offset: 12220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 363, col: 20, offset: 12220},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 24, offset: 12224},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 363, col: 31, offset: 12231},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 363, col: 31, offset: 12231},
										expr: &ruleRefExpr{
											pos:  position{line: 363, col: 31, offset: 12231},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 363, col: 51, offset: 12251},
										expr: &ruleRefExpr{
											pos:  position{line: 363, col: 51, offset: 12251},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 363, col: 66, offset: 12266},
										expr: &ruleRefExpr{
											pos:  position{line: 363, col: 66, offset: 12266},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 78, offset: 12278},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 367, col: 1, offset: 12332},
			expr: &actionExpr{
				pos: position{line: 367, col: 23, offset: 12354},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 367, col: 23, offset: 12354},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 367, col: 28, offset: 12359},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 371, col: 1, offset: 12418},
			expr: &actionExpr{
				pos: position{line: 371, col: 25, offset: 12442},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 371, col: 25, offset: 12442},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 371, col: 25, offset: 12442},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 371, col: 36, offset: 12453},
								expr: &ruleRefExpr{
									pos:  position{line: 371, col: 37, offset: 12454},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 371, col: 56, offset: 12473},
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 56, offset: 12473},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 375, col: 1, offset: 12588},
			expr: &choiceExpr{
				pos: position{line: 375, col: 18, offset: 12605},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 375, col: 18, offset: 12605},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 36, offset: 12623},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 58, offset: 12645},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 377, col: 1, offset: 12664},
			expr: &actionExpr{
				pos: position{line: 377, col: 24, offset: 12687},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 377, col: 24, offset: 12687},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 377, col: 24, offset: 12687},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 28, offset: 12691},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 35, offset: 12698},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 377, col: 50, offset: 12713},
							expr: &charClassMatcher{
								pos:        position{line: 377, col: 51, offset: 12714},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 381, col: 1, offset: 12774},
			expr: &actionExpr{
				pos: position{line: 381, col: 20, offset: 12793},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 381, col: 20, offset: 12793},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 381, col: 20, offset: 12793},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 24, offset: 12797},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 27, offset: 12800},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 381, col: 42, offset: 12815},
							expr: &charClassMatcher{
								pos:        position{line: 381, col: 43, offset: 12816},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 385, col: 1, offset: 12868},
			expr: &actionExpr{
				pos: position{line: 385, col: 22, offset: 12889},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 385, col: 22, offset: 12889},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 385, col: 22, offset: 12889},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 26, offset: 12893},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 31, offset: 12898},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 385, col: 46, offset: 12913},
							expr: &charClassMatcher{
								pos:        position{line: 385, col: 47, offset: 12914},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 390, col: 1, offset: 13014},
			expr: &actionExpr{
				pos: position{line: 390, col: 20, offset: 13033},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 390, col: 20, offset: 13033},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 390, col: 20, offset: 13033},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 26, offset: 13039},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 390, col: 41, offset: 13054},
							expr: &charClassMatcher{
								pos:        position{line: 390, col: 42, offset: 13055},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 394, col: 1, offset: 13091},
			expr: &choiceExpr{
				pos: position{line: 394, col: 14, offset: 13104},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 394, col: 14, offset: 13104},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 26, offset: 13116},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 38, offset: 13128},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 50, offset: 13140},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 396, col: 1, offset: 13154},
			expr: &actionExpr{
				pos: position{line: 396, col: 15, offset: 13168},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 396, col: 15, offset: 13168},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 396, col: 21, offset: 13174},
						expr: &ruleRefExpr{
							pos:  position{line: 396, col: 21, offset: 13174},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 400, col: 1, offset: 13239},
			expr: &actionExpr{
				pos: position{line: 400, col: 18, offset: 13256},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 400, col: 18, offset: 13256},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 400, col: 18, offset: 13256},
							expr: &litMatcher{
								pos:        position{line: 400, col: 18, offset: 13256},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 400, col: 23, offset: 13261},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 23, offset: 13261},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 30, offset: 13268},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 32, offset: 13270},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 400, col: 45, offset: 13283},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 45, offset: 13283},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 52, offset: 13290},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 56, offset: 13294},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 400, col: 59, offset: 13297},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 400, col: 59, offset: 13297},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 400, col: 71, offset: 13309},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 400, col: 83, offset: 13321},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 405, col: 1, offset: 13510},
			expr: &actionExpr{
				pos: position{line: 405, col: 14, offset: 13523},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 405, col: 14, offset: 13523},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 14, offset: 13523},
							expr: &charClassMatcher{
								pos:        position{line: 405, col: 14, offset: 13523},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 405, col: 21, offset: 13530},
							expr: &charClassMatcher{
								pos:        position{line: 405, col: 22, offset: 13531},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 411, col: 1, offset: 13667},
			expr: &actionExpr{
				pos: position{line: 411, col: 14, offset: 13680},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 411, col: 14, offset: 13680},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 411, col: 14, offset: 13680},
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 14, offset: 13680},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 21, offset: 13687},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 25, offset: 13691},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 29, offset: 13695},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 41, offset: 13707},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 411, col: 45, offset: 13711},
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 45, offset: 13711},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 411, col: 52, offset: 13718},
							expr: &charClassMatcher{
								pos:        position{line: 411, col: 53, offset: 13719},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 413, col: 1, offset: 13746},
			expr: &actionExpr{
				pos: position{line: 413, col: 16, offset: 13761},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 413, col: 16, offset: 13761},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 413, col: 20, offset: 13765},
						expr: &choiceExpr{
							pos: position{line: 413, col: 22, offset: 13767},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 413, col: 22, offset: 13767},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 413, col: 37, offset: 13782},
									expr: &charClassMatcher{
										pos:        position{line: 413, col: 37, offset: 13782},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 413, col: 51, offset: 13796},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 415, col: 1, offset: 13836},
			expr: &actionExpr{
				pos: position{line: 415, col: 17, offset: 13852},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 415, col: 17, offset: 13852},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 418, col: 1, offset: 13912},
			expr: &actionExpr{
				pos: position{line: 418, col: 14, offset: 13925},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 418, col: 14, offset: 13925},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 418, col: 14, offset: 13925},
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 14, offset: 13925},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 418, col: 21, offset: 13932},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 418, col: 25, offset: 13936},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 29, offset: 13940},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 418, col: 41, offset: 13952},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 418, col: 45, offset: 13956},
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 45, offset: 13956},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 420, col: 1, offset: 13984},
			expr: &actionExpr{
				pos: position{line: 420, col: 16, offset: 13999},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 420, col: 16, offset: 13999},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 420, col: 20, offset: 14003},
						expr: &choiceExpr{
							pos: position{line: 420, col: 22, offset: 14005},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 420, col: 22, offset: 14005},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 420, col: 37, offset: 14020},
									expr: &charClassMatcher{
										pos:        position{line: 420, col: 37, offset: 14020},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 420, col: 51, offset: 14034},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 422, col: 1, offset: 14074},
			expr: &actionExpr{
				pos: position{line: 422, col: 17, offset: 14090},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 422, col: 17, offset: 14090},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 425, col: 1, offset: 14181},
			expr: &actionExpr{
				pos: position{line: 425, col: 17, offset: 14197},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 425, col: 17, offset: 14197},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 425, col: 17, offset: 14197},
							expr: &charClassMatcher{
								pos:        position{line: 425, col: 17, offset: 14197},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 425, col: 30, offset: 14210},
							expr: &charClassMatcher{
								pos:        position{line: 425, col: 31, offset: 14211},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 428, col: 1, offset: 14322},
			expr: &actionExpr{
				pos: position{line: 428, col: 19, offset: 14340},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 428, col: 19, offset: 14340},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 428, col: 19, offset: 14340},
							expr: &charClassMatcher{
								pos:        position{line: 428, col: 19, offset: 14340},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 428, col: 31, offset: 14352},
							expr: &charClassMatcher{
								pos:        position{line: 428, col: 32, offset: 14353},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 430, col: 1, offset: 14410},
			expr: &choiceExpr{
				pos: position{line: 430, col: 19, offset: 14428},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 430, col: 19, offset: 14428},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 430, col: 41, offset: 14450},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 430, col: 65, offset: 14474},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 434, col: 1, offset: 14672},
			expr: &actionExpr{
				pos: position{line: 434, col: 24, offset: 14695},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 434, col: 24, offset: 14695},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 434, col: 24, offset: 14695},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 434, col: 31, offset: 14702},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 434, col: 31, offset: 14702},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 437, col: 5, offset: 14788},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 437, col: 13, offset: 14796},
								expr: &choiceExpr{
									pos: position{line: 437, col: 14, offset: 14797},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 437, col: 14, offset: 14797},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 438, col: 12, offset: 14828},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 438, col: 12, offset: 14828},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 438, col: 34, offset: 14850},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 438, col: 34, offset: 14850},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 438, col: 34, offset: 14850},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 438, col: 39, offset: 14855},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 445, col: 1, offset: 15038},
			expr: &actionExpr{
				pos: position{line: 445, col: 13, offset: 15050},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 445, col: 13, offset: 15050},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 445, col: 13, offset: 15050},
							expr: &seqExpr{
								pos: position{line: 445, col: 15, offset: 15052},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 445, col: 15, offset: 15052},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 445, col: 19, offset: 15056},
										expr: &ruleRefExpr{
											pos:  position{line: 445, col: 19, offset: 15056},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 29, offset: 15066},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 33, offset: 15070},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 445, col: 46, offset: 15083},
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 46, offset: 15083},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 445, col: 53, offset: 15090},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 445, col: 57, offset: 15094},
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 57, offset: 15094},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 64, offset: 15101},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 70, offset: 15107},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 445, col: 85, offset: 15122},
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 85, offset: 15122},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 450, col: 1, offset: 15303},
			expr: &actionExpr{
				pos: position{line: 450, col: 17, offset: 15319},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 450, col: 17, offset: 15319},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 450, col: 17, offset: 15319},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 450, col: 26, offset: 15328},
							expr: &charClassMatcher{
								pos:        position{line: 450, col: 26, offset: 15328},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 454, col: 1, offset: 15376},
			expr: &choiceExpr{
				pos: position{line: 454, col: 19, offset: 15394},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 454, col: 19, offset: 15394},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 454, col: 35, offset: 15410},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 454, col: 59, offset: 15434},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 454, col: 83, offset: 15458},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 456, col: 1, offset: 15474},
			expr: &actionExpr{
				pos: position{line: 456, col: 19, offset: 15492},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 456, col: 19, offset: 15492},
					expr: &charClassMatcher{
						pos:        position{line: 456, col: 19, offset: 15492},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 460, col: 1, offset: 15545},
			expr: &actionExpr{
				pos: position{line: 460, col: 26, offset: 15570},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 460, col: 26, offset: 15570},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 460, col: 26, offset: 15570},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 460, col: 30, offset: 15574},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 460, col: 39, offset: 15583},
								expr: &choiceExpr{
									pos: position{line: 461, col: 5, offset: 15589},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 461, col: 6, offset: 15590},
											run: (*parser).callonAttrValueSingleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 461, col: 6, offset: 15590},
												expr: &charClassMatcher{
													pos:        position{line: 461, col: 6, offset: 15590},
													val:        "[^'\\r\\n\\uFFFD]",
													chars:      []rune{'\'', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 463, col: 10, offset: 15672},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 463, col: 31, offset: 15693},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 467, col: 1, offset: 15735},
			expr: &actionExpr{
				pos: position{line: 467, col: 26, offset: 15760},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 467, col: 26, offset: 15760},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 467, col: 26, offset: 15760},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 467, col: 31, offset: 15765},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 467, col: 40, offset: 15774},
								expr: &choiceExpr{
									pos: position{line: 468, col: 5, offset: 15780},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 468, col: 6, offset: 15781},
											run: (*parser).callonAttrValueDoubleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 468, col: 6, offset: 15781},
												expr: &charClassMatcher{
													pos:        position{line: 468, col: 6, offset: 15781},
													val:        "[^\"\\r\\n\\uFFFD]",
													chars:      []rune{'"', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 470, col: 10, offset: 15863},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 470, col: 31, offset: 15884},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 476, col: 1, offset: 16124},
			expr: &actionExpr{
				pos: position{line: 476, col: 18, offset: 16141},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 476, col: 18, offset: 16141},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 483, col: 1, offset: 16276},
			expr: &actionExpr{
				pos: position{line: 483, col: 12, offset: 16287},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 483, col: 12, offset: 16287},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 483, col: 12, offset: 16287},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 483, col: 23, offset: 16298},
								expr: &ruleRefExpr{
									pos:  position{line: 483, col: 24, offset: 16299},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 484, col: 5, offset: 16316},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 484, col: 12, offset: 16323},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 484, col: 12, offset: 16323},
									expr: &litMatcher{
										pos:        position{line: 484, col: 13, offset: 16324},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 488, col: 5, offset: 16415},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 492, col: 5, offset: 16567},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 5, offset: 16567},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 492, col: 12, offset: 16574},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 19, offset: 16581},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 492, col: 34, offset: 16596},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 492, col: 38, offset: 16600},
								expr: &ruleRefExpr{
									pos:  position{line: 492, col: 38, offset: 16600},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 56, offset: 16618},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 496, col: 1, offset: 16724},
			expr: &actionExpr{
				pos: position{line: 496, col: 18, offset: 16741},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 496, col: 18, offset: 16741},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 496, col: 27, offset: 16750},
						expr: &seqExpr{
							pos: position{line: 496, col: 28, offset: 16751},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 496, col: 28, offset: 16751},
									expr: &ruleRefExpr{
										pos:  position{line: 496, col: 29, offset: 16752},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 496, col: 37, offset: 16760},
									expr: &ruleRefExpr{
										pos:  position{line: 496, col: 38, offset: 16761},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 496, col: 54, offset: 16777},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 500, col: 1, offset: 16898},
			expr: &actionExpr{
				pos: position{line: 500, col: 17, offset: 16914},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 500, col: 17, offset: 16914},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 500, col: 26, offset: 16923},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 500, col: 26, offset: 16923},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 16938},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 502, col: 11, offset: 16983},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 11, offset: 16983},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 503, col: 11, offset: 17001},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 504, col: 11, offset: 17030},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 511, col: 1, offset: 17181},
			expr: &seqExpr{
				pos: position{line: 511, col: 31, offset: 17211},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 511, col: 31, offset: 17211},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 511, col: 41, offset: 17221},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 516, col: 1, offset: 17332},
			expr: &actionExpr{
				pos: position{line: 516, col: 19, offset: 17350},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 516, col: 19, offset: 17350},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 516, col: 19, offset: 17350},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 25, offset: 17356},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 516, col: 40, offset: 17371},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 516, col: 45, offset: 17376},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 52, offset: 17383},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 516, col: 68, offset: 17399},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 75, offset: 17406},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 520, col: 1, offset: 17521},
			expr: &actionExpr{
				pos: position{line: 520, col: 20, offset: 17540},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 520, col: 20, offset: 17540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 520, col: 20, offset: 17540},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 26, offset: 17546},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 520, col: 41, offset: 17561},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 520, col: 45, offset: 17565},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 52, offset: 17572},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 68, offset: 17588},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 75, offset: 17595},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 524, col: 1, offset: 17711},
			expr: &actionExpr{
				pos: position{line: 524, col: 18, offset: 17728},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 524, col: 18, offset: 17728},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 524, col: 18, offset: 17728},
							expr: &litMatcher{
								pos:        position{line: 524, col: 19, offset: 17729},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 524, col: 30, offset: 17740},
							expr: &charClassMatcher{
								pos:        position{line: 524, col: 30, offset: 17740},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 528, col: 1, offset: 17789},
			expr: &actionExpr{
				pos: position{line: 528, col: 19, offset: 17807},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 528, col: 19, offset: 17807},
					expr: &charClassMatcher{
						pos:        position{line: 528, col: 19, offset: 17807},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 532, col: 1, offset: 17855},
			expr: &actionExpr{
				pos: position{line: 532, col: 24, offset: 17878},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 532, col: 24, offset: 17878},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 532, col: 24, offset: 17878},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 532, col: 28, offset: 17882},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 532, col: 34, offset: 17888},
								expr: &ruleRefExpr{
									pos:  position{line: 532, col: 35, offset: 17889},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 532, col: 54, offset: 17908},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 539, col: 1, offset: 18090},
			expr: &actionExpr{
				pos: position{line: 539, col: 18, offset: 18107},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 539, col: 18, offset: 18107},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 539, col: 18, offset: 18107},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 539, col: 24, offset: 18113},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 539, col: 24, offset: 18113},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 539, col: 24, offset: 18113},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 539, col: 36, offset: 18125},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 539, col: 42, offset: 18131},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 539, col: 56, offset: 18145},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 539, col: 74, offset: 18163},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 541, col: 8, offset: 18310},
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 8, offset: 18310},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 15, offset: 18317},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 545, col: 1, offset: 18369},
			expr: &actionExpr{
				pos: position{line: 545, col: 26, offset: 18394},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 545, col: 26, offset: 18394},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 545, col: 26, offset: 18394},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 30, offset: 18398},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 545, col: 36, offset: 18404},
								expr: &choiceExpr{
									pos: position{line: 545, col: 37, offset: 18405},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 545, col: 37, offset: 18405},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 545, col: 59, offset: 18427},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 545, col: 80, offset: 18448},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 545, col: 99, offset: 18467},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 549, col: 1, offset: 18539},
			expr: &actionExpr{
				pos: position{line: 549, col: 24, offset: 18562},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 549, col: 24, offset: 18562},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 549, col: 24, offset: 18562},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 549, col: 33, offset: 18571},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 40, offset: 18578},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 549, col: 66, offset: 18604},
							expr: &litMatcher{
								pos:        position{line: 549, col: 66, offset: 18604},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 553, col: 1, offset: 18663},
			expr: &actionExpr{
				pos: position{line: 553, col: 29, offset: 18691},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 553, col: 29, offset: 18691},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 553, col: 29, offset: 18691},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 553, col: 36, offset: 18698},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 553, col: 36, offset: 18698},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 554, col: 11, offset: 18815},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 555, col: 11, offset: 18851},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 556, col: 11, offset: 18877},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 557, col: 11, offset: 18909},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 558, col: 11, offset: 18941},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 559, col: 11, offset: 18968},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 559, col: 31, offset: 18988},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 31, offset: 18988},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 559, col: 39, offset: 18996},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 559, col: 39, offset: 18996},
									expr: &litMatcher{
										pos:        position{line: 559, col: 40, offset: 18997},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 559, col: 46, offset: 19003},
									expr: &litMatcher{
										pos:        position{line: 559, col: 47, offset: 19004},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 563, col: 1, offset: 19036},
			expr: &actionExpr{
				pos: position{line: 563, col: 23, offset: 19058},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 563, col: 23, offset: 19058},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 563, col: 23, offset: 19058},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 563, col: 30, offset: 19065},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 563, col: 30, offset: 19065},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 563, col: 47, offset: 19082},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 5, offset: 19104},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 564, col: 12, offset: 19111},
								expr: &actionExpr{
									pos: position{line: 564, col: 13, offset: 19112},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 564, col: 13, offset: 19112},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 564, col: 13, offset: 19112},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 564, col: 17, offset: 19116},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 564, col: 24, offset: 19123},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 564, col: 24, offset: 19123},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 564, col: 41, offset: 19140},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 570, col: 1, offset: 19278},
			expr: &actionExpr{
				pos: position{line: 570, col: 29, offset: 19306},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 570, col: 29, offset: 19306},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 570, col: 29, offset: 19306},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 570, col: 34, offset: 19311},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 570, col: 41, offset: 19318},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 570, col: 41, offset: 19318},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 570, col: 58, offset: 19335},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 5, offset: 19357},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 571, col: 12, offset: 19364},
								expr: &actionExpr{
									pos: position{line: 571, col: 13, offset: 19365},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 571, col: 13, offset: 19365},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 571, col: 13, offset: 19365},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 571, col: 17, offset: 19369},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 571, col: 24, offset: 19376},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 571, col: 24, offset: 19376},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 571, col: 41, offset: 19393},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 573, col: 9, offset: 19446},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 577, col: 1, offset: 19536},
			expr: &actionExpr{
				pos: position{line: 577, col: 19, offset: 19554},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 577, col: 19, offset: 19554},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 577, col: 19, offset: 19554},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 26, offset: 19561},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 577, col: 34, offset: 19569},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 39, offset: 19574},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 44, offset: 19579},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 581, col: 1, offset: 19667},
			expr: &actionExpr{
				pos: position{line: 581, col: 25, offset: 19691},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 581, col: 25, offset: 19691},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 581, col: 25, offset: 19691},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 30, offset: 19696},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 37, offset: 19703},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 581, col: 45, offset: 19711},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 50, offset: 19716},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 55, offset: 19721},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 581, col: 63, offset: 19729},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 585, col: 1, offset: 19814},
			expr: &actionExpr{
				pos: position{line: 585, col: 20, offset: 19833},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 585, col: 20, offset: 19833},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 585, col: 32, offset: 19845},
						name: "Number",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 589, col: 1, offset: 19940},
			expr: &actionExpr{
				pos: position{line: 589, col: 26, offset: 19965},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 589, col: 26, offset: 19965},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 589, col: 26, offset: 19965},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 31, offset: 19970},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 43, offset: 19982},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 589, col: 51, offset: 19990},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 593, col: 1, offset: 20082},
			expr: &actionExpr{
				pos: position{line: 593, col: 23, offset: 20104},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 593, col: 23, offset: 20104},
					expr: &charClassMatcher{
						pos:        position{line: 593, col: 23, offset: 20104},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 597, col: 1, offset: 20149},
			expr: &actionExpr{
				pos: position{line: 597, col: 23, offset: 20171},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 597, col: 23, offset: 20171},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 597, col: 24, offset: 20172},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 597, col: 24, offset: 20172},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 597, col: 34, offset: 20182},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 597, col: 42, offset: 20190},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 48, offset: 20196},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 597, col: 73, offset: 20221},
							expr: &litMatcher{
								pos:        position{line: 597, col: 73, offset: 20221},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 601, col: 1, offset: 20370},
			expr: &actionExpr{
				pos: position{line: 601, col: 28, offset: 20397},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 601, col: 28, offset: 20397},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 601, col: 28, offset: 20397},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 35, offset: 20404},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 601, col: 54, offset: 20423},
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 54, offset: 20423},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 601, col: 62, offset: 20431},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 601, col: 62, offset: 20431},
									expr: &litMatcher{
										pos:        position{line: 601, col: 63, offset: 20432},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 601, col: 69, offset: 20438},
									expr: &litMatcher{
										pos:        position{line: 601, col: 70, offset: 20439},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 605, col: 1, offset: 20471},
			expr: &actionExpr{
				pos: position{line: 605, col: 22, offset: 20492},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 605, col: 22, offset: 20492},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 605, col: 22, offset: 20492},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 29, offset: 20499},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 20513},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 606, col: 12, offset: 20520},
								expr: &actionExpr{
									pos: position{line: 606, col: 13, offset: 20521},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 606, col: 13, offset: 20521},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 606, col: 13, offset: 20521},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 606, col: 17, offset: 20525},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 606, col: 24, offset: 20532},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 612, col: 1, offset: 20663},
			expr: &choiceExpr{
				pos: position{line: 612, col: 13, offset: 20675},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 612, col: 13, offset: 20675},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 612, col: 13, offset: 20675},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 612, col: 18, offset: 20680},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 612, col: 18, offset: 20680},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 612, col: 30, offset: 20692},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 614, col: 5, offset: 20760},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 614, col: 5, offset: 20760},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 614, col: 5, offset: 20760},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 614, col: 9, offset: 20764},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 614, col: 14, offset: 20769},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 614, col: 14, offset: 20769},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 614, col: 26, offset: 20781},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 618, col: 1, offset: 20849},
			expr: &actionExpr{
				pos: position{line: 618, col: 16, offset: 20864},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 618, col: 16, offset: 20864},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 618, col: 16, offset: 20864},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 618, col: 23, offset: 20871},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 618, col: 23, offset: 20871},
									expr: &litMatcher{
										pos:        position{line: 618, col: 24, offset: 20872},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 621, col: 5, offset: 20926},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 631, col: 1, offset: 21220},
			expr: &actionExpr{
				pos: position{line: 631, col: 21, offset: 21240},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 631, col: 21, offset: 21240},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 631, col: 21, offset: 21240},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 631, col: 29, offset: 21248},
								expr: &choiceExpr{
									pos: position{line: 631, col: 30, offset: 21249},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 631, col: 30, offset: 21249},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 631, col: 53, offset: 21272},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 631, col: 74, offset: 21293},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 631, col: 74, offset: 21293,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 631, col: 107, offset: 21326},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 635, col: 1, offset: 21397},
			expr: &actionExpr{
				pos: position{line: 635, col: 25, offset: 21421},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 635, col: 25, offset: 21421},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 635, col: 25, offset: 21421},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 635, col: 33, offset: 21429},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 635, col: 38, offset: 21434},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 635, col: 38, offset: 21434},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 635, col: 78, offset: 21474},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 639, col: 1, offset: 21539},
			expr: &actionExpr{
				pos: position{line: 639, col: 23, offset: 21561},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 639, col: 23, offset: 21561},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 639, col: 23, offset: 21561},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 639, col: 31, offset: 21569},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 639, col: 36, offset: 21574},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 639, col: 36, offset: 21574},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 639, col: 76, offset: 21614},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 646, col: 1, offset: 21778},
			expr: &choiceExpr{
				pos: position{line: 646, col: 18, offset: 21795},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 646, col: 18, offset: 21795},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 646, col: 18, offset: 21795},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 27, offset: 21804},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 648, col: 9, offset: 21861},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 648, col: 9, offset: 21861},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 648, col: 15, offset: 21867},
								expr: &ruleRefExpr{
									pos:  position{line: 648, col: 16, offset: 21868},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 652, col: 1, offset: 21960},
			expr: &actionExpr{
				pos: position{line: 652, col: 22, offset: 21981},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 652, col: 22, offset: 21981},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 652, col: 22, offset: 21981},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 23, offset: 21982},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 653, col: 5, offset: 21990},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 6, offset: 21991},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 654, col: 5, offset: 22006},
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 6, offset: 22007},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 655, col: 5, offset: 22029},
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 6, offset: 22030},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 656, col: 5, offset: 22056},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 6, offset: 22057},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 657, col: 5, offset: 22085},
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 6, offset: 22086},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 658, col: 5, offset: 22112},
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 6, offset: 22113},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 659, col: 5, offset: 22138},
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 6, offset: 22139},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 660, col: 5, offset: 22160},
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 6, offset: 22161},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 661, col: 5, offset: 22180},
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 6, offset: 22181},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 662, col: 5, offset: 22208},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 662, col: 11, offset: 22214},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 662, col: 11, offset: 22214},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 662, col: 11, offset: 22214},
											expr: &ruleRefExpr{
												pos:  position{line: 662, col: 11, offset: 22214},
												name: "Space",
											},
										},
										&labeledExpr{
											pos:   position{line: 662, col: 18, offset: 22221},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 662, col: 27, offset: 22230},
												expr: &ruleRefExpr{
													pos:  position{line: 662, col: 28, offset: 22231},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 664, col: 12, offset: 22330},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 668, col: 1, offset: 22369},
			expr: &seqExpr{
				pos: position{line: 668, col: 25, offset: 22393},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 668, col: 25, offset: 22393},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 668, col: 29, offset: 22397},
						expr: &ruleRefExpr{
							pos:  position{line: 668, col: 29, offset: 22397},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 668, col: 36, offset: 22404},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 670, col: 1, offset: 22476},
			expr: &actionExpr{
				pos: position{line: 670, col: 29, offset: 22504},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 670, col: 29, offset: 22504},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 670, col: 29, offset: 22504},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 670, col: 50, offset: 22525},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 670, col: 58, offset: 22533},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 674, col: 1, offset: 22639},
			expr: &actionExpr{
				pos: position{line: 674, col: 29, offset: 22667},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 674, col: 29, offset: 22667},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 674, col: 29, offset: 22667},
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 30, offset: 22668},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 675, col: 5, offset: 22677},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 675, col: 14, offset: 22686},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 675, col: 14, offset: 22686},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 22711},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 22739},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 22755},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 11, offset: 22776},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 22800},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 681, col: 11, offset: 22827},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 22856},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 22921},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 22972},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 22996},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 23028},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 23054},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 23091},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 23116},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 697, col: 1, offset: 23282},
			expr: &actionExpr{
				pos: position{line: 697, col: 20, offset: 23301},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 697, col: 20, offset: 23301},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 697, col: 20, offset: 23301},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 697, col: 26, offset: 23307},
								expr: &ruleRefExpr{
									pos:  position{line: 697, col: 27, offset: 23308},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 697, col: 40, offset: 23321},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 48, offset: 23329},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 697, col: 71, offset: 23352},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 80, offset: 23361},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 701, col: 1, offset: 23496},
			expr: &actionExpr{
				pos: position{line: 702, col: 5, offset: 23526},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 702, col: 5, offset: 23526},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 702, col: 5, offset: 23526},
							expr: &ruleRefExpr{
								pos:  position{line: 702, col: 5, offset: 23526},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 702, col: 12, offset: 23533},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 704, col: 9, offset: 23596},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 704, col: 9, offset: 23596},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 704, col: 9, offset: 23596},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 704, col: 9, offset: 23596},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 704, col: 16, offset: 23603},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 704, col: 16, offset: 23603},
															expr: &litMatcher{
																pos:        position{line: 704, col: 17, offset: 23604},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 708, col: 9, offset: 23704},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 727, col: 11, offset: 24421},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 727, col: 11, offset: 24421},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 727, col: 11, offset: 24421},
													expr: &charClassMatcher{
														pos:        position{line: 727, col: 12, offset: 24422},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 727, col: 20, offset: 24430},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 729, col: 13, offset: 24541},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 729, col: 13, offset: 24541},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 729, col: 14, offset: 24542},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 729, col: 21, offset: 24549},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 731, col: 13, offset: 24663},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 731, col: 13, offset: 24663},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 731, col: 14, offset: 24664},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 731, col: 21, offset: 24671},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 733, col: 13, offset: 24785},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 733, col: 13, offset: 24785},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 733, col: 13, offset: 24785},
													expr: &charClassMatcher{
														pos:        position{line: 733, col: 14, offset: 24786},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 733, col: 26, offset: 24798},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 735, col: 13, offset: 24912},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 735, col: 13, offset: 24912},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 735, col: 13, offset: 24912},
													expr: &charClassMatcher{
														pos:        position{line: 735, col: 14, offset: 24913},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 735, col: 26, offset: 24925},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 737, col: 12, offset: 25038},
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 12, offset: 25038},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 741, col: 1, offset: 25073},
			expr: &actionExpr{
				pos: position{line: 741, col: 27, offset: 25099},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 741, col: 27, offset: 25099},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 741, col: 37, offset: 25109},
						expr: &ruleRefExpr{
							pos:  position{line: 741, col: 37, offset: 25109},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 748, col: 1, offset: 25309},
			expr: &actionExpr{
				pos: position{line: 748, col: 22, offset: 25330},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 748, col: 22, offset: 25330},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 748, col: 22, offset: 25330},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 748, col: 28, offset: 25336},
								expr: &ruleRefExpr{
									pos:  position{line: 748, col: 29, offset: 25337},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 748, col: 42, offset: 25350},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 50, offset: 25358},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 748, col: 75, offset: 25383},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 748, col: 86, offset: 25394},
								expr: &ruleRefExpr{
									pos:  position{line: 748, col: 87, offset: 25395},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 748, col: 117, offset: 25425},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 126, offset: 25434},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 752, col: 1, offset: 25587},
			expr: &actionExpr{
				pos: position{line: 753, col: 5, offset: 25619},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 753, col: 5, offset: 25619},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 753, col: 5, offset: 25619},
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 5, offset: 25619},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 753, col: 12, offset: 25626},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 753, col: 20, offset: 25634},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 755, col: 9, offset: 25691},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 755, col: 9, offset: 25691},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 755, col: 9, offset: 25691},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 755, col: 16, offset: 25698},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 755, col: 16, offset: 25698},
															expr: &litMatcher{
																pos:        position{line: 755, col: 17, offset: 25699},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 759, col: 9, offset: 25799},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 776, col: 14, offset: 26506},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 776, col: 21, offset: 26513},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 776, col: 22, offset: 26514},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 778, col: 13, offset: 26600},
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 13, offset: 26600},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 782, col: 1, offset: 26636},
			expr: &actionExpr{
				pos: position{line: 782, col: 32, offset: 26667},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 782, col: 32, offset: 26667},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 782, col: 32, offset: 26667},
							expr: &litMatcher{
								pos:        position{line: 782, col: 33, offset: 26668},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 782, col: 37, offset: 26672},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 783, col: 7, offset: 26686},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 783, col: 7, offset: 26686},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 783, col: 7, offset: 26686},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 784, col: 7, offset: 26731},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 784, col: 7, offset: 26731},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 785, col: 7, offset: 26774},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 785, col: 7, offset: 26774},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 786, col: 7, offset: 26816},
							expr: &ruleRefExpr{
								pos:  position{line: 786, col: 7, offset: 26816},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 790, col: 1, offset: 26858},
			expr: &actionExpr{
				pos: position{line: 790, col: 29, offset: 26886},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 790, col: 29, offset: 26886},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 790, col: 39, offset: 26896},
						expr: &ruleRefExpr{
							pos:  position{line: 790, col: 39, offset: 26896},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 797, col: 1, offset: 27212},
			expr: &actionExpr{
				pos: position{line: 797, col: 20, offset: 27231},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 797, col: 20, offset: 27231},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 797, col: 20, offset: 27231},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 797, col: 26, offset: 27237},
								expr: &ruleRefExpr{
									pos:  position{line: 797, col: 27, offset: 27238},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 797, col: 40, offset: 27251},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 46, offset: 27257},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 797, col: 75, offset: 27286},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 86, offset: 27297},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 797, col: 112, offset: 27323},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 797, col: 124, offset: 27335},
								expr: &ruleRefExpr{
									pos:  position{line: 797, col: 125, offset: 27336},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 801, col: 1, offset: 27477},
			expr: &seqExpr{
				pos: position{line: 801, col: 26, offset: 27502},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 801, col: 26, offset: 27502},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 801, col: 54, offset: 27530},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 803, col: 1, offset: 27556},
			expr: &choiceExpr{
				pos: position{line: 803, col: 33, offset: 27588},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 803, col: 33, offset: 27588},
						expr: &charClassMatcher{
							pos:        position{line: 803, col: 33, offset: 27588},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 803, col: 45, offset: 27600},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 803, col: 45, offset: 27600},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 803, col: 49, offset: 27604},
								expr: &litMatcher{
									pos:        position{line: 803, col: 50, offset: 27605},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 804, col: 1, offset: 27609},
			expr: &actionExpr{
				pos: position{line: 804, col: 32, offset: 27640},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 804, col: 32, offset: 27640},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 804, col: 42, offset: 27650},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 804, col: 42, offset: 27650},
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 42, offset: 27650},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 810, col: 1, offset: 27805},
			expr: &actionExpr{
				pos: position{line: 810, col: 24, offset: 27828},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 810, col: 24, offset: 27828},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 810, col: 33, offset: 27837},
						expr: &seqExpr{
							pos: position{line: 810, col: 34, offset: 27838},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 810, col: 34, offset: 27838},
									expr: &ruleRefExpr{
										pos:  position{line: 810, col: 35, offset: 27839},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 810, col: 43, offset: 27847},
									expr: &litMatcher{
										pos:        position{line: 810, col: 44, offset: 27848},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 49, offset: 27853},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 814, col: 1, offset: 27980},
			expr: &actionExpr{
				pos: position{line: 814, col: 31, offset: 28010},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 814, col: 31, offset: 28010},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 814, col: 40, offset: 28019},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 814, col: 40, offset: 28019},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 815, col: 11, offset: 28034},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 816, col: 11, offset: 28083},
								expr: &ruleRefExpr{
									pos:  position{line: 816, col: 11, offset: 28083},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 28101},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 818, col: 11, offset: 28126},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 819, col: 11, offset: 28155},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 28175},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 821, col: 11, offset: 28264},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 822, col: 11, offset: 28285},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 28308},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 824, col: 11, offset: 28323},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 825, col: 11, offset: 28348},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 826, col: 11, offset: 28371},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 28392},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 28419},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 829, col: 11, offset: 28436},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 830, col: 11, offset: 28468},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 834, col: 1, offset: 28507},
			expr: &actionExpr{
				pos: position{line: 835, col: 5, offset: 28540},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 835, col: 5, offset: 28540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 835, col: 5, offset: 28540},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 835, col: 16, offset: 28551},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 835, col: 16, offset: 28551},
									expr: &litMatcher{
										pos:        position{line: 835, col: 17, offset: 28552},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 838, col: 5, offset: 28610},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 842, col: 6, offset: 28786},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 842, col: 6, offset: 28786},
									expr: &choiceExpr{
										pos: position{line: 842, col: 7, offset: 28787},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 842, col: 7, offset: 28787},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 842, col: 15, offset: 28795},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 842, col: 27, offset: 28807},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 846, col: 1, offset: 28847},
			expr: &actionExpr{
				pos: position{line: 846, col: 31, offset: 28877},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 846, col: 31, offset: 28877},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 846, col: 40, offset: 28886},
						expr: &ruleRefExpr{
							pos:  position{line: 846, col: 41, offset: 28887},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 853, col: 1, offset: 29078},
			expr: &choiceExpr{
				pos: position{line: 853, col: 19, offset: 29096},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 853, col: 19, offset: 29096},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 853, col: 19, offset: 29096},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 855, col: 5, offset: 29134},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 855, col: 5, offset: 29134},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 857, col: 5, offset: 29174},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 857, col: 5, offset: 29174},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 859, col: 5, offset: 29224},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 859, col: 5, offset: 29224},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 861, col: 5, offset: 29270},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 861, col: 5, offset: 29270},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 872, col: 1, offset: 29582},
			expr: &choiceExpr{
				pos: position{line: 874, col: 5, offset: 29632},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 874, col: 5, offset: 29632},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 874, col: 5, offset: 29632},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 874, col: 5, offset: 29632},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 874, col: 16, offset: 29643},
										expr: &ruleRefExpr{
											pos:  position{line: 874, col: 17, offset: 29644},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 874, col: 30, offset: 29657},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 874, col: 33, offset: 29660},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 874, col: 49, offset: 29676},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 874, col: 54, offset: 29681},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 874, col: 60, offset: 29687},
										expr: &choiceExpr{
											pos: position{line: 874, col: 61, offset: 29688},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 874, col: 61, offset: 29688},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 874, col: 81, offset: 29708},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 879, col: 5, offset: 29943},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 879, col: 5, offset: 29943},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 879, col: 5, offset: 29943},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 879, col: 16, offset: 29954},
										expr: &ruleRefExpr{
											pos:  position{line: 879, col: 17, offset: 29955},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 879, col: 30, offset: 29968},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 879, col: 35, offset: 29973},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 879, col: 44, offset: 29982},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 883, col: 5, offset: 30155},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 883, col: 5, offset: 30155},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 883, col: 5, offset: 30155},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 883, col: 16, offset: 30166},
										expr: &ruleRefExpr{
											pos:  position{line: 883, col: 17, offset: 30167},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 883, col: 30, offset: 30180},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 890, col: 7, offset: 30464},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 890, col: 15, offset: 30472},
										expr: &ruleRefExpr{
											pos:  position{line: 890, col: 16, offset: 30473},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 894, col: 5, offset: 30639},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 894, col: 5, offset: 30639},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 894, col: 5, offset: 30639},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 894, col: 16, offset: 30650},
										expr: &ruleRefExpr{
											pos:  position{line: 894, col: 17, offset: 30651},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 894, col: 31, offset: 30665},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 894, col: 37, offset: 30671},
										expr: &choiceExpr{
											pos: position{line: 894, col: 38, offset: 30672},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 894, col: 38, offset: 30672},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 894, col: 58, offset: 30692},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 898, col: 1, offset: 30790},
			expr: &oneOrMoreExpr{
				pos: position{line: 898, col: 33, offset: 30822},
				expr: &actionExpr{
					pos: position{line: 898, col: 34, offset: 30823},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 898, col: 34, offset: 30823},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 898, col: 34, offset: 30823},
								expr: &ruleRefExpr{
									pos:  position{line: 898, col: 35, offset: 30824},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 898, col: 45, offset: 30834},
								expr: &litMatcher{
									pos:        position{line: 898, col: 45, offset: 30834},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 898, col: 51, offset: 30840},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 898, col: 60, offset: 30849},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 902, col: 1, offset: 30890},
			expr: &actionExpr{
				pos: position{line: 902, col: 21, offset: 30910},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 902, col: 21, offset: 30910},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 902, col: 21, offset: 30910},
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 22, offset: 30911},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 903, col: 5, offset: 30931},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 903, col: 14, offset: 30940},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 903, col: 39, offset: 30965},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 903, col: 43, offset: 30969},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 913, col: 1, offset: 31204},
			expr: &actionExpr{
				pos: position{line: 913, col: 28, offset: 31231},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 913, col: 28, offset: 31231},
					expr: &charClassMatcher{
						pos:        position{line: 913, col: 28, offset: 31231},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 918, col: 1, offset: 31348},
			expr: &actionExpr{
				pos: position{line: 918, col: 23, offset: 31370},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 918, col: 23, offset: 31370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 918, col: 23, offset: 31370},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 918, col: 34, offset: 31381},
								expr: &ruleRefExpr{
									pos:  position{line: 918, col: 35, offset: 31382},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 919, col: 5, offset: 31400},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 927, col: 5, offset: 31691},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 927, col: 16, offset: 31702},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 928, col: 5, offset: 31728},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 928, col: 16, offset: 31739},
								expr: &choiceExpr{
									pos: position{line: 928, col: 17, offset: 31740},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 928, col: 17, offset: 31740},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 928, col: 37, offset: 31760},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 932, col: 1, offset: 31892},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 31922},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 31922},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 933, col: 5, offset: 31922},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 933, col: 14, offset: 31931},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 933, col: 14, offset: 31931},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 933, col: 14, offset: 31931},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 933, col: 23, offset: 31940},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 933, col: 28, offset: 31945},
											expr: &charClassMatcher{
												pos:        position{line: 933, col: 28, offset: 31945},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 933, col: 68, offset: 31985},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 944, col: 1, offset: 32237},
			expr: &choiceExpr{
				pos: position{line: 946, col: 5, offset: 32296},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 946, col: 5, offset: 32296},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 946, col: 5, offset: 32296},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 946, col: 5, offset: 32296},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 946, col: 16, offset: 32307},
										expr: &ruleRefExpr{
											pos:  position{line: 946, col: 17, offset: 32308},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 946, col: 30, offset: 32321},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 33, offset: 32324},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 946, col: 49, offset: 32340},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 946, col: 54, offset: 32345},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 61, offset: 32352},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 950, col: 5, offset: 32555},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 950, col: 5, offset: 32555},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 950, col: 5, offset: 32555},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 950, col: 16, offset: 32566},
										expr: &ruleRefExpr{
											pos:  position{line: 950, col: 17, offset: 32567},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 950, col: 30, offset: 32580},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 950, col: 37, offset: 32587},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 954, col: 1, offset: 32691},
			expr: &actionExpr{
				pos: position{line: 954, col: 31, offset: 32721},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 954, col: 31, offset: 32721},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 954, col: 31, offset: 32721},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 42, offset: 32732},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 954, col: 65, offset: 32755},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 954, col: 76, offset: 32766},
								expr: &actionExpr{
									pos: position{line: 954, col: 77, offset: 32767},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 954, col: 77, offset: 32767},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 954, col: 77, offset: 32767},
												expr: &ruleRefExpr{
													pos:  position{line: 954, col: 78, offset: 32768},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 954, col: 99, offset: 32789},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 954, col: 105, offset: 32795},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 954, col: 105, offset: 32795},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 954, col: 125, offset: 32815},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 962, col: 1, offset: 33057},
			expr: &actionExpr{
				pos: position{line: 962, col: 19, offset: 33075},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 962, col: 19, offset: 33075},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 962, col: 19, offset: 33075},
							expr: &ruleRefExpr{
								pos:  position{line: 962, col: 20, offset: 33076},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 963, col: 5, offset: 33090},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 963, col: 15, offset: 33100},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 963, col: 15, offset: 33100},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 963, col: 15, offset: 33100},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 963, col: 24, offset: 33109},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 965, col: 9, offset: 33201},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 965, col: 9, offset: 33201},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 965, col: 9, offset: 33201},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 965, col: 18, offset: 33210},
														expr: &ruleRefExpr{
															pos:  position{line: 965, col: 19, offset: 33211},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 965, col: 35, offset: 33227},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 971, col: 1, offset: 33344},
			expr: &actionExpr{
				pos: position{line: 972, col: 5, offset: 33367},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 972, col: 5, offset: 33367},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 972, col: 14, offset: 33376},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 972, col: 14, offset: 33376},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 973, col: 11, offset: 33437},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 974, col: 11, offset: 33482},
								expr: &ruleRefExpr{
									pos:  position{line: 974, col: 11, offset: 33482},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 975, col: 11, offset: 33500},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 975, col: 11, offset: 33500},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 12, offset: 33501},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 976, col: 13, offset: 33519},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 976, col: 13, offset: 33519},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 977, col: 15, offset: 33546},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 15, offset: 33571},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 33596},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 980, col: 15, offset: 33623},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 15, offset: 33643},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 982, col: 15, offset: 33736},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 983, col: 15, offset: 33766},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 15, offset: 33834},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 985, col: 15, offset: 33865},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 986, col: 15, offset: 33886},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 987, col: 15, offset: 33917},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 988, col: 15, offset: 33954},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 989, col: 15, offset: 33984},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 990, col: 15, offset: 34017},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 991, col: 15, offset: 34041},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 992, col: 15, offset: 34074},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 999, col: 1, offset: 34297},
			expr: &actionExpr{
				pos: position{line: 999, col: 14, offset: 34310},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 999, col: 14, offset: 34310},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 999, col: 14, offset: 34310},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 999, col: 20, offset: 34316},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 999, col: 24, offset: 34320},
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 24, offset: 34320},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 999, col: 31, offset: 34327},
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 32, offset: 34328},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1006, col: 1, offset: 34612},
			expr: &choiceExpr{
				pos: position{line: 1006, col: 15, offset: 34626},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1006, col: 15, offset: 34626},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 41, offset: 34652},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 65, offset: 34676},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1008, col: 1, offset: 34695},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 32, offset: 34726},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1008, col: 32, offset: 34726},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1008, col: 32, offset: 34726},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1008, col: 36, offset: 34730},
								expr: &litMatcher{
									pos:        position{line: 1008, col: 37, offset: 34731},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1008, col: 43, offset: 34737},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1008, col: 43, offset: 34737},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1008, col: 47, offset: 34741},
								expr: &litMatcher{
									pos:        position{line: 1008, col: 48, offset: 34742},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1008, col: 54, offset: 34748},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1008, col: 54, offset: 34748},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1008, col: 58, offset: 34752},
								expr: &litMatcher{
									pos:        position{line: 1008, col: 59, offset: 34753},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1008, col: 65, offset: 34759},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1008, col: 65, offset: 34759},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1008, col: 69, offset: 34763},
								expr: &litMatcher{
									pos:        position{line: 1008, col: 70, offset: 34764},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1010, col: 1, offset: 34769},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 34, offset: 34802},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1010, col: 34, offset: 34802},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1010, col: 41, offset: 34809},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1010, col: 48, offset: 34816},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1010, col: 55, offset: 34823},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1010, col: 62, offset: 34830},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1010, col: 68, offset: 34836},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1012, col: 1, offset: 34841},
			expr: &actionExpr{
				pos: position{line: 1012, col: 26, offset: 34866},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1012, col: 26, offset: 34866},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1012, col: 32, offset: 34872},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1012, col: 32, offset: 34872},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1013, col: 15, offset: 34907},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1014, col: 15, offset: 34943},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1015, col: 15, offset: 34979},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1016, col: 15, offset: 35019},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1017, col: 15, offset: 35048},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1018, col: 15, offset: 35079},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1022, col: 1, offset: 35233},
			expr: &choiceExpr{
				pos: position{line: 1022, col: 28, offset: 35260},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1022, col: 28, offset: 35260},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 15, offset: 35294},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 15, offset: 35330},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 15, offset: 35366},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1027, col: 1, offset: 35392},
			expr: &choiceExpr{
				pos: position{line: 1027, col: 22, offset: 35413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1027, col: 22, offset: 35413},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 15, offset: 35444},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 15, offset: 35476},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1030, col: 15, offset: 35508},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1031, col: 15, offset: 35544},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 15, offset: 35580},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1034, col: 1, offset: 35604},
			expr: &choiceExpr{
				pos: position{line: 1034, col: 33, offset: 35636},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1034, col: 33, offset: 35636},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1034, col: 39, offset: 35642},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1034, col: 39, offset: 35642},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1038, col: 1, offset: 35775},
			expr: &actionExpr{
				pos: position{line: 1038, col: 25, offset: 35799},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1038, col: 25, offset: 35799},
					expr: &litMatcher{
						pos:        position{line: 1038, col: 25, offset: 35799},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1042, col: 1, offset: 35840},
			expr: &actionExpr{
				pos: position{line: 1042, col: 25, offset: 35864},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1042, col: 25, offset: 35864},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1042, col: 25, offset: 35864},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1042, col: 30, offset: 35869},
							expr: &litMatcher{
								pos:        position{line: 1042, col: 30, offset: 35869},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1050, col: 1, offset: 35966},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 13, offset: 35978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1050, col: 13, offset: 35978},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 35, offset: 36000},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1052, col: 1, offset: 36067},
			expr: &actionExpr{
				pos: position{line: 1052, col: 24, offset: 36090},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1052, col: 24, offset: 36090},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1052, col: 24, offset: 36090},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1052, col: 30, offset: 36096},
								expr: &ruleRefExpr{
									pos:  position{line: 1052, col: 31, offset: 36097},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1052, col: 49, offset: 36115},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1052, col: 54, offset: 36120},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1052, col: 64, offset: 36130},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1052, col: 93, offset: 36159},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1056, col: 1, offset: 36246},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1056, col: 32, offset: 36277},
				expr: &ruleRefExpr{
					pos:  position{line: 1056, col: 32, offset: 36277},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1058, col: 1, offset: 36308},
			expr: &actionExpr{
				pos: position{line: 1058, col: 31, offset: 36338},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 31, offset: 36338},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1058, col: 31, offset: 36338},
							expr: &litMatcher{
								pos:        position{line: 1058, col: 33, offset: 36340},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1058, col: 39, offset: 36346},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1058, col: 48, offset: 36355},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1058, col: 48, offset: 36355},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1059, col: 11, offset: 36370},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1060, col: 11, offset: 36419},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1060, col: 11, offset: 36419},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1060, col: 19, offset: 36427},
												expr: &ruleRefExpr{
													pos:  position{line: 1060, col: 20, offset: 36428},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1061, col: 11, offset: 36446},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1062, col: 11, offset: 36476},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1063, col: 11, offset: 36499},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1064, col: 11, offset: 36520},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1065, col: 11, offset: 36541},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1066, col: 11, offset: 36565},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1067, col: 11, offset: 36589},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1068, col: 11, offset: 36615},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1069, col: 11, offset: 36644},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1073, col: 1, offset: 36711},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 5, offset: 36755},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1074, col: 5, offset: 36755},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1075, col: 7, offset: 36852},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1075, col: 7, offset: 36852},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1075, col: 7, offset: 36852},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1075, col: 12, offset: 36857},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1079, col: 1, offset: 37020},
			expr: &choiceExpr{
				pos: position{line: 1079, col: 24, offset: 37043},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1079, col: 24, offset: 37043},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1079, col: 24, offset: 37043},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1079, col: 24, offset: 37043},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1079, col: 30, offset: 37049},
										expr: &ruleRefExpr{
											pos:  position{line: 1079, col: 31, offset: 37050},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1079, col: 51, offset: 37070},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1079, col: 51, offset: 37070},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1079, col: 55, offset: 37074},
											expr: &litMatcher{
												pos:        position{line: 1079, col: 56, offset: 37075},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 61, offset: 37080},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1079, col: 71, offset: 37090},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1079, col: 100, offset: 37119},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1079, col: 104, offset: 37123},
									expr: &notExpr{
										pos: position{line: 1079, col: 106, offset: 37125},
										expr: &ruleRefExpr{
											pos:  position{line: 1079, col: 107, offset: 37126},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1081, col: 5, offset: 37320},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1081, col: 5, offset: 37320},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1081, col: 5, offset: 37320},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1081, col: 11, offset: 37326},
										expr: &ruleRefExpr{
											pos:  position{line: 1081, col: 12, offset: 37327},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 30, offset: 37345},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 34, offset: 37349},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1081, col: 44, offset: 37359},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1081, col: 44, offset: 37359},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1081, col: 48, offset: 37363},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 77, offset: 37392},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1085, col: 1, offset: 37598},
			expr: &seqExpr{
				pos: position{line: 1085, col: 32, offset: 37629},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1085, col: 32, offset: 37629},
						expr: &ruleRefExpr{
							pos:  position{line: 1085, col: 33, offset: 37630},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1085, col: 39, offset: 37636},
						expr: &ruleRefExpr{
							pos:  position{line: 1085, col: 39, offset: 37636},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1087, col: 1, offset: 37665},
			expr: &choiceExpr{
				pos: position{line: 1087, col: 31, offset: 37695},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1087, col: 31, offset: 37695},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1088, col: 11, offset: 37710},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1088, col: 11, offset: 37710},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1088, col: 19, offset: 37718},
								expr: &ruleRefExpr{
									pos:  position{line: 1088, col: 20, offset: 37719},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 11, offset: 37737},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 37767},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1091, col: 11, offset: 37790},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1091, col: 11, offset: 37790},
								expr: &ruleRefExpr{
									pos:  position{line: 1091, col: 11, offset: 37790},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1091, col: 18, offset: 37797},
								expr: &seqExpr{
									pos: position{line: 1091, col: 19, offset: 37798},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1091, col: 19, offset: 37798},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1091, col: 23, offset: 37802},
											expr: &litMatcher{
												pos:        position{line: 1091, col: 24, offset: 37803},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 37819},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 37840},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 37861},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 37885},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 11, offset: 37909},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 11, offset: 37935},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 11, offset: 37964},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1100, col: 1, offset: 38002},
			expr: &choiceExpr{
				pos: position{line: 1101, col: 5, offset: 38046},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1101, col: 5, offset: 38046},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1102, col: 7, offset: 38143},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1102, col: 7, offset: 38143},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1102, col: 7, offset: 38143},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1102, col: 11, offset: 38147},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1106, col: 1, offset: 38310},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 38334},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1107, col: 5, offset: 38334},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1107, col: 5, offset: 38334},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1107, col: 5, offset: 38334},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 18, offset: 38347},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1107, col: 40, offset: 38369},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1107, col: 45, offset: 38374},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 55, offset: 38384},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1107, col: 84, offset: 38413},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1109, col: 9, offset: 38570},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1109, col: 9, offset: 38570},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1109, col: 9, offset: 38570},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 22, offset: 38583},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1109, col: 44, offset: 38605},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 49, offset: 38610},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 59, offset: 38620},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1109, col: 88, offset: 38649},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1112, col: 9, offset: 38849},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1112, col: 9, offset: 38849},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1112, col: 9, offset: 38849},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1112, col: 22, offset: 38862},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1112, col: 44, offset: 38884},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 48, offset: 38888},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1112, col: 58, offset: 38898},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1112, col: 87, offset: 38927},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1120, col: 1, offset: 39135},
			expr: &choiceExpr{
				pos: position{line: 1120, col: 15, offset: 39149},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1120, col: 15, offset: 39149},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1120, col: 39, offset: 39173},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1122, col: 1, offset: 39196},
			expr: &actionExpr{
				pos: position{line: 1122, col: 26, offset: 39221},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 26, offset: 39221},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1122, col: 26, offset: 39221},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1122, col: 32, offset: 39227},
								expr: &ruleRefExpr{
									pos:  position{line: 1122, col: 33, offset: 39228},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1122, col: 51, offset: 39246},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1122, col: 56, offset: 39251},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 66, offset: 39261},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1122, col: 97, offset: 39292},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1126, col: 1, offset: 39426},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1126, col: 34, offset: 39459},
				expr: &ruleRefExpr{
					pos:  position{line: 1126, col: 34, offset: 39459},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1128, col: 1, offset: 39491},
			expr: &actionExpr{
				pos: position{line: 1128, col: 33, offset: 39523},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1128, col: 33, offset: 39523},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1128, col: 33, offset: 39523},
							expr: &litMatcher{
								pos:        position{line: 1128, col: 35, offset: 39525},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 41, offset: 39531},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1128, col: 50, offset: 39540},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1128, col: 50, offset: 39540},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1129, col: 11, offset: 39555},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1130, col: 11, offset: 39604},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1130, col: 11, offset: 39604},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1130, col: 19, offset: 39612},
												expr: &ruleRefExpr{
													pos:  position{line: 1130, col: 20, offset: 39613},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1131, col: 11, offset: 39631},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1132, col: 11, offset: 39663},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1133, col: 11, offset: 39686},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1134, col: 11, offset: 39705},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1135, col: 11, offset: 39726},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1136, col: 11, offset: 39750},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1137, col: 11, offset: 39774},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1138, col: 11, offset: 39800},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1139, col: 11, offset: 39829},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1143, col: 1, offset: 39898},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 5, offset: 39944},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1144, col: 5, offset: 39944},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1145, col: 7, offset: 40043},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1145, col: 7, offset: 40043},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1145, col: 7, offset: 40043},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1145, col: 12, offset: 40048},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1149, col: 1, offset: 40213},
			expr: &choiceExpr{
				pos: position{line: 1149, col: 26, offset: 40238},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1149, col: 26, offset: 40238},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1149, col: 26, offset: 40238},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1149, col: 26, offset: 40238},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1149, col: 32, offset: 40244},
										expr: &ruleRefExpr{
											pos:  position{line: 1149, col: 33, offset: 40245},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1149, col: 52, offset: 40264},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1149, col: 52, offset: 40264},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1149, col: 56, offset: 40268},
											expr: &litMatcher{
												pos:        position{line: 1149, col: 57, offset: 40269},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1149, col: 62, offset: 40274},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 72, offset: 40284},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 103, offset: 40315},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1151, col: 5, offset: 40505},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1151, col: 5, offset: 40505},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1151, col: 5, offset: 40505},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1151, col: 11, offset: 40511},
										expr: &ruleRefExpr{
											pos:  position{line: 1151, col: 12, offset: 40512},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 30, offset: 40530},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 34, offset: 40534},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1151, col: 44, offset: 40544},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1151, col: 44, offset: 40544},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1151, col: 48, offset: 40548},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 79, offset: 40579},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1155, col: 1, offset: 40789},
			expr: &seqExpr{
				pos: position{line: 1155, col: 34, offset: 40822},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1155, col: 34, offset: 40822},
						expr: &ruleRefExpr{
							pos:  position{line: 1155, col: 35, offset: 40823},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1155, col: 41, offset: 40829},
						expr: &ruleRefExpr{
							pos:  position{line: 1155, col: 41, offset: 40829},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1157, col: 1, offset: 40860},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 33, offset: 40892},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1157, col: 33, offset: 40892},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1158, col: 11, offset: 40907},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1158, col: 11, offset: 40907},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1158, col: 19, offset: 40915},
								expr: &ruleRefExpr{
									pos:  position{line: 1158, col: 20, offset: 40916},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 11, offset: 40934},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 40966},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1161, col: 11, offset: 40989},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1161, col: 11, offset: 40989},
								expr: &ruleRefExpr{
									pos:  position{line: 1161, col: 11, offset: 40989},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1161, col: 18, offset: 40996},
								expr: &seqExpr{
									pos: position{line: 1161, col: 19, offset: 40997},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1161, col: 19, offset: 40997},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1161, col: 23, offset: 41001},
											expr: &litMatcher{
												pos:        position{line: 1161, col: 24, offset: 41002},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 11, offset: 41018},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 11, offset: 41037},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 11, offset: 41058},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 11, offset: 41082},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 11, offset: 41106},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1167, col: 11, offset: 41132},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 11, offset: 41161},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1170, col: 1, offset: 41201},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 5, offset: 41247},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1171, col: 5, offset: 41247},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1172, col: 7, offset: 41346},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1172, col: 7, offset: 41346},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1172, col: 7, offset: 41346},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1172, col: 11, offset: 41350},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1176, col: 1, offset: 41516},
			expr: &choiceExpr{
				pos: position{line: 1177, col: 5, offset: 41542},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1177, col: 5, offset: 41542},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1177, col: 5, offset: 41542},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1177, col: 5, offset: 41542},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 18, offset: 41555},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1177, col: 40, offset: 41577},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1177, col: 45, offset: 41582},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 55, offset: 41592},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1177, col: 86, offset: 41623},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1179, col: 9, offset: 41780},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1179, col: 9, offset: 41780},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1179, col: 9, offset: 41780},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 22, offset: 41793},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1179, col: 44, offset: 41815},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1179, col: 49, offset: 41820},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 59, offset: 41830},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1179, col: 90, offset: 41861},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1182, col: 9, offset: 42061},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1182, col: 9, offset: 42061},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1182, col: 9, offset: 42061},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1182, col: 22, offset: 42074},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 44, offset: 42096},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 48, offset: 42100},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1182, col: 58, offset: 42110},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 89, offset: 42141},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1189, col: 1, offset: 42351},
			expr: &choiceExpr{
				pos: position{line: 1189, col: 18, offset: 42368},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1189, col: 18, offset: 42368},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1189, col: 45, offset: 42395},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1191, col: 1, offset: 42421},
			expr: &actionExpr{
				pos: position{line: 1191, col: 29, offset: 42449},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 29, offset: 42449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1191, col: 29, offset: 42449},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1191, col: 35, offset: 42455},
								expr: &ruleRefExpr{
									pos:  position{line: 1191, col: 36, offset: 42456},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1191, col: 54, offset: 42474},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 59, offset: 42479},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 69, offset: 42489},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1191, col: 103, offset: 42523},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1195, col: 1, offset: 42660},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1195, col: 37, offset: 42696},
				expr: &ruleRefExpr{
					pos:  position{line: 1195, col: 37, offset: 42696},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1197, col: 1, offset: 42763},
			expr: &actionExpr{
				pos: position{line: 1197, col: 36, offset: 42798},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 36, offset: 42798},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1197, col: 36, offset: 42798},
							expr: &litMatcher{
								pos:        position{line: 1197, col: 38, offset: 42800},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 44, offset: 42806},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1197, col: 53, offset: 42815},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1197, col: 53, offset: 42815},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1198, col: 11, offset: 42830},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1199, col: 11, offset: 42879},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1199, col: 11, offset: 42879},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1199, col: 19, offset: 42887},
												expr: &ruleRefExpr{
													pos:  position{line: 1199, col: 20, offset: 42888},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1200, col: 11, offset: 42906},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1201, col: 11, offset: 42929},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1201, col: 11, offset: 42929},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1205, col: 11, offset: 43113},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1206, col: 11, offset: 43148},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1207, col: 11, offset: 43167},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1208, col: 11, offset: 43188},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1209, col: 11, offset: 43209},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1210, col: 11, offset: 43233},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1211, col: 11, offset: 43259},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1212, col: 11, offset: 43288},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1216, col: 1, offset: 43360},
			expr: &choiceExpr{
				pos: position{line: 1217, col: 5, offset: 43409},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1217, col: 5, offset: 43409},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1218, col: 7, offset: 43511},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1218, col: 7, offset: 43511},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1218, col: 7, offset: 43511},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1218, col: 12, offset: 43516},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1222, col: 1, offset: 43684},
			expr: &choiceExpr{
				pos: position{line: 1222, col: 29, offset: 43712},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1222, col: 29, offset: 43712},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1222, col: 29, offset: 43712},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1222, col: 29, offset: 43712},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1222, col: 35, offset: 43718},
										expr: &ruleRefExpr{
											pos:  position{line: 1222, col: 36, offset: 43719},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1222, col: 55, offset: 43738},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1222, col: 55, offset: 43738},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1222, col: 59, offset: 43742},
											expr: &litMatcher{
												pos:        position{line: 1222, col: 60, offset: 43743},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1222, col: 65, offset: 43748},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1222, col: 75, offset: 43758},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1222, col: 109, offset: 43792},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1224, col: 5, offset: 43985},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1224, col: 5, offset: 43985},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1224, col: 5, offset: 43985},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1224, col: 11, offset: 43991},
										expr: &ruleRefExpr{
											pos:  position{line: 1224, col: 12, offset: 43992},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1224, col: 30, offset: 44010},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1224, col: 34, offset: 44014},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1224, col: 44, offset: 44024},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1224, col: 44, offset: 44024},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1224, col: 48, offset: 44028},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1224, col: 82, offset: 44062},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1228, col: 1, offset: 44276},
			expr: &seqExpr{
				pos: position{line: 1228, col: 37, offset: 44312},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1228, col: 37, offset: 44312},
						expr: &ruleRefExpr{
							pos:  position{line: 1228, col: 38, offset: 44313},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1228, col: 44, offset: 44319},
						expr: &ruleRefExpr{
							pos:  position{line: 1228, col: 44, offset: 44319},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1230, col: 1, offset: 44353},
			expr: &choiceExpr{
				pos: position{line: 1230, col: 37, offset: 44389},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1230, col: 37, offset: 44389},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1231, col: 11, offset: 44404},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1231, col: 11, offset: 44404},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1231, col: 19, offset: 44412},
								expr: &ruleRefExpr{
									pos:  position{line: 1231, col: 20, offset: 44413},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 44431},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 44466},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1234, col: 11, offset: 44489},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1234, col: 11, offset: 44489},
								expr: &ruleRefExpr{
									pos:  position{line: 1234, col: 11, offset: 44489},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1234, col: 18, offset: 44496},
								expr: &seqExpr{
									pos: position{line: 1234, col: 19, offset: 44497},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1234, col: 19, offset: 44497},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1234, col: 23, offset: 44501},
											expr: &litMatcher{
												pos:        position{line: 1234, col: 24, offset: 44502},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1235, col: 11, offset: 44630},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 11, offset: 44649},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 11, offset: 44670},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 11, offset: 44691},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 11, offset: 44715},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1240, col: 11, offset: 44741},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1240, col: 11, offset: 44741},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 11, offset: 44882},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 11, offset: 44911},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1247, col: 1, offset: 44954},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 5, offset: 45003},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1248, col: 5, offset: 45003},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1249, col: 7, offset: 45105},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1249, col: 7, offset: 45105},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1249, col: 7, offset: 45105},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1249, col: 11, offset: 45109},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1253, col: 1, offset: 45278},
			expr: &choiceExpr{
				pos: position{line: 1254, col: 5, offset: 45307},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1254, col: 5, offset: 45307},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1254, col: 5, offset: 45307},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1254, col: 5, offset: 45307},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1254, col: 18, offset: 45320},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1254, col: 40, offset: 45342},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1254, col: 45, offset: 45347},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1254, col: 55, offset: 45357},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1254, col: 89, offset: 45391},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1256, col: 9, offset: 45548},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1256, col: 9, offset: 45548},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1256, col: 9, offset: 45548},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 22, offset: 45561},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1256, col: 44, offset: 45583},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1256, col: 49, offset: 45588},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 59, offset: 45598},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1256, col: 93, offset: 45632},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1259, col: 9, offset: 45832},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1259, col: 9, offset: 45832},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1259, col: 9, offset: 45832},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1259, col: 22, offset: 45845},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 44, offset: 45867},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 48, offset: 45871},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1259, col: 58, offset: 45881},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 92, offset: 45915},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1267, col: 1, offset: 46240},
			expr: &choiceExpr{
				pos: position{line: 1267, col: 17, offset: 46256},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1267, col: 17, offset: 46256},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 38, offset: 46277},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1269, col: 1, offset: 46297},
			expr: &actionExpr{
				pos: position{line: 1269, col: 23, offset: 46319},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1269, col: 23, offset: 46319},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1269, col: 23, offset: 46319},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 46, offset: 46342},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 55, offset: 46351},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1269, col: 82, offset: 46378},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1273, col: 1, offset: 46482},
			expr: &actionExpr{
				pos: position{line: 1273, col: 31, offset: 46512},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1273, col: 31, offset: 46512},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1273, col: 41, offset: 46522},
						expr: &ruleRefExpr{
							pos:  position{line: 1273, col: 41, offset: 46522},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1277, col: 1, offset: 46600},
			expr: &seqExpr{
				pos: position{line: 1277, col: 27, offset: 46626},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1277, col: 27, offset: 46626},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1277, col: 32, offset: 46631},
						expr: &charClassMatcher{
							pos:        position{line: 1277, col: 33, offset: 46632},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1279, col: 1, offset: 46643},
			expr: &litMatcher{
				pos:        position{line: 1279, col: 25, offset: 46667},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1282, col: 1, offset: 46755},
			expr: &actionExpr{
				pos: position{line: 1282, col: 30, offset: 46784},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1282, col: 30, offset: 46784},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1283, col: 9, offset: 46802},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1283, col: 9, offset: 46802},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1283, col: 9, offset: 46802},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1283, col: 19, offset: 46812},
										expr: &ruleRefExpr{
											pos:  position{line: 1283, col: 20, offset: 46813},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1284, col: 11, offset: 46869},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1284, col: 11, offset: 46869},
										expr: &ruleRefExpr{
											pos:  position{line: 1284, col: 11, offset: 46869},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1284, col: 18, offset: 46876},
										expr: &ruleRefExpr{
											pos:  position{line: 1284, col: 19, offset: 46877},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1285, col: 11, offset: 46908},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1285, col: 11, offset: 46908},
										expr: &litMatcher{
											pos:        position{line: 1285, col: 12, offset: 46909},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1285, col: 16, offset: 46913},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1286, col: 11, offset: 46961},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1287, col: 11, offset: 46980},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1288, col: 11, offset: 47001},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1289, col: 11, offset: 47022},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1290, col: 11, offset: 47046},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1291, col: 11, offset: 47072},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1291, col: 11, offset: 47072},
										expr: &litMatcher{
											pos:        position{line: 1291, col: 12, offset: 47073},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1291, col: 17, offset: 47078},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1292, col: 11, offset: 47102},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1293, col: 11, offset: 47131},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1297, col: 1, offset: 47197},
			expr: &choiceExpr{
				pos: position{line: 1297, col: 41, offset: 47237},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1297, col: 41, offset: 47237},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1297, col: 55, offset: 47251},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1297, col: 55, offset: 47251},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1297, col: 55, offset: 47251},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1297, col: 59, offset: 47255},
									expr: &litMatcher{
										pos:        position{line: 1297, col: 60, offset: 47256},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1301, col: 1, offset: 47315},
			expr: &actionExpr{
				pos: position{line: 1301, col: 23, offset: 47337},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 23, offset: 47337},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1301, col: 23, offset: 47337},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1301, col: 46, offset: 47360},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1301, col: 55, offset: 47369},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1301, col: 82, offset: 47396},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1305, col: 1, offset: 47500},
			expr: &actionExpr{
				pos: position{line: 1305, col: 31, offset: 47530},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1305, col: 31, offset: 47530},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1305, col: 41, offset: 47540},
						expr: &ruleRefExpr{
							pos:  position{line: 1305, col: 41, offset: 47540},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1310, col: 1, offset: 47700},
			expr: &actionExpr{
				pos: position{line: 1310, col: 30, offset: 47729},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1310, col: 30, offset: 47729},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1311, col: 9, offset: 47747},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1311, col: 9, offset: 47747},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1311, col: 9, offset: 47747},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1311, col: 19, offset: 47757},
										expr: &ruleRefExpr{
											pos:  position{line: 1311, col: 20, offset: 47758},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1312, col: 11, offset: 47814},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1312, col: 11, offset: 47814},
										expr: &ruleRefExpr{
											pos:  position{line: 1312, col: 11, offset: 47814},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1312, col: 18, offset: 47821},
										expr: &ruleRefExpr{
											pos:  position{line: 1312, col: 19, offset: 47822},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1313, col: 11, offset: 47853},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1314, col: 11, offset: 47872},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1315, col: 11, offset: 47893},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1316, col: 11, offset: 47914},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1317, col: 11, offset: 47938},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1318, col: 11, offset: 47964},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1318, col: 11, offset: 47964},
										expr: &litMatcher{
											pos:        position{line: 1318, col: 12, offset: 47965},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1318, col: 18, offset: 47971},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1319, col: 10, offset: 47994},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1320, col: 11, offset: 48023},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1324, col: 1, offset: 48097},
			expr: &seqExpr{
				pos: position{line: 1324, col: 27, offset: 48123},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1324, col: 27, offset: 48123},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1324, col: 33, offset: 48129},
						expr: &charClassMatcher{
							pos:        position{line: 1324, col: 34, offset: 48130},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1326, col: 1, offset: 48141},
			expr: &litMatcher{
				pos:        position{line: 1326, col: 25, offset: 48165},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1328, col: 1, offset: 48172},
			expr: &actionExpr{
				pos: position{line: 1328, col: 41, offset: 48212},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1328, col: 42, offset: 48213},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1328, col: 42, offset: 48213},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1328, col: 56, offset: 48227},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1328, col: 56, offset: 48227},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1328, col: 60, offset: 48231},
									expr: &litMatcher{
										pos:        position{line: 1328, col: 61, offset: 48232},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1337, col: 1, offset: 48352},
			expr: &choiceExpr{
				pos: position{line: 1337, col: 15, offset: 48366},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1337, col: 15, offset: 48366},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 39, offset: 48390},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1339, col: 1, offset: 48413},
			expr: &actionExpr{
				pos: position{line: 1339, col: 26, offset: 48438},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1339, col: 26, offset: 48438},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1339, col: 26, offset: 48438},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1339, col: 32, offset: 48444},
								expr: &ruleRefExpr{
									pos:  position{line: 1339, col: 33, offset: 48445},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1339, col: 51, offset: 48463},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1339, col: 56, offset: 48468},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1339, col: 66, offset: 48478},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1339, col: 97, offset: 48509},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1343, col: 1, offset: 48643},
			expr: &seqExpr{
				pos: position{line: 1343, col: 34, offset: 48676},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1343, col: 34, offset: 48676},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1343, col: 63, offset: 48705},
						expr: &seqExpr{
							pos: position{line: 1343, col: 64, offset: 48706},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1343, col: 64, offset: 48706},
									expr: &litMatcher{
										pos:        position{line: 1343, col: 66, offset: 48708},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1343, col: 73, offset: 48715},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1343, col: 73, offset: 48715},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1343, col: 81, offset: 48723},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1345, col: 1, offset: 48790},
			expr: &choiceExpr{
				pos: position{line: 1345, col: 33, offset: 48822},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1345, col: 33, offset: 48822},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 48837},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1347, col: 11, offset: 48869},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1347, col: 11, offset: 48869},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1347, col: 19, offset: 48877},
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 20, offset: 48878},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 48896},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 48919},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 48938},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 48959},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 11, offset: 48983},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 11, offset: 49007},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 11, offset: 49033},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 11, offset: 49062},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1357, col: 1, offset: 49102},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 5, offset: 49148},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1358, col: 5, offset: 49148},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1359, col: 7, offset: 49247},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1359, col: 7, offset: 49247},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1359, col: 7, offset: 49247},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1359, col: 12, offset: 49252},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1363, col: 1, offset: 49417},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 26, offset: 49442},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1363, col: 26, offset: 49442},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1363, col: 26, offset: 49442},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1363, col: 26, offset: 49442},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1363, col: 32, offset: 49448},
										expr: &ruleRefExpr{
											pos:  position{line: 1363, col: 33, offset: 49449},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1363, col: 52, offset: 49468},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1363, col: 52, offset: 49468},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1363, col: 56, offset: 49472},
											expr: &litMatcher{
												pos:        position{line: 1363, col: 57, offset: 49473},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1363, col: 62, offset: 49478},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1363, col: 72, offset: 49488},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 103, offset: 49519},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1365, col: 5, offset: 49709},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1365, col: 5, offset: 49709},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1365, col: 5, offset: 49709},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1365, col: 11, offset: 49715},
										expr: &ruleRefExpr{
											pos:  position{line: 1365, col: 12, offset: 49716},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1365, col: 30, offset: 49734},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1365, col: 34, offset: 49738},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1365, col: 44, offset: 49748},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1365, col: 44, offset: 49748},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1365, col: 48, offset: 49752},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1365, col: 79, offset: 49783},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1369, col: 1, offset: 49992},
			expr: &seqExpr{
				pos: position{line: 1369, col: 34, offset: 50025},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1369, col: 34, offset: 50025},
						expr: &ruleRefExpr{
							pos:  position{line: 1369, col: 35, offset: 50026},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1369, col: 41, offset: 50032},
						expr: &ruleRefExpr{
							pos:  position{line: 1369, col: 41, offset: 50032},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1371, col: 1, offset: 50063},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 33, offset: 50095},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1371, col: 33, offset: 50095},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 50110},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1373, col: 11, offset: 50142},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1373, col: 11, offset: 50142},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1373, col: 19, offset: 50150},
								expr: &ruleRefExpr{
									pos:  position{line: 1373, col: 20, offset: 50151},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 50169},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1375, col: 11, offset: 50192},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1375, col: 11, offset: 50192},
								expr: &ruleRefExpr{
									pos:  position{line: 1375, col: 11, offset: 50192},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1375, col: 18, offset: 50199},
								expr: &seqExpr{
									pos: position{line: 1375, col: 19, offset: 50200},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1375, col: 19, offset: 50200},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1375, col: 23, offset: 50204},
											expr: &litMatcher{
												pos:        position{line: 1375, col: 24, offset: 50205},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 50221},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 50240},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 11, offset: 50261},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 11, offset: 50285},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 50309},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 11, offset: 50335},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 11, offset: 50364},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1384, col: 1, offset: 50404},
			expr: &choiceExpr{
				pos: position{line: 1385, col: 5, offset: 50450},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1385, col: 5, offset: 50450},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1386, col: 7, offset: 50547},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1386, col: 7, offset: 50547},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1386, col: 7, offset: 50547},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1386, col: 11, offset: 50551},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1390, col: 1, offset: 50714},
			expr: &choiceExpr{
				pos: position{line: 1391, col: 5, offset: 50739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1391, col: 5, offset: 50739},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1391, col: 5, offset: 50739},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1391, col: 5, offset: 50739},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1391, col: 18, offset: 50752},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1391, col: 40, offset: 50774},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1391, col: 45, offset: 50779},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1391, col: 55, offset: 50789},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1391, col: 86, offset: 50820},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1393, col: 9, offset: 50977},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1393, col: 9, offset: 50977},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1393, col: 9, offset: 50977},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1393, col: 22, offset: 50990},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1393, col: 44, offset: 51012},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1393, col: 49, offset: 51017},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1393, col: 59, offset: 51027},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1393, col: 90, offset: 51058},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1396, col: 9, offset: 51258},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1396, col: 9, offset: 51258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1396, col: 9, offset: 51258},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1396, col: 22, offset: 51271},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1396, col: 44, offset: 51293},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1396, col: 48, offset: 51297},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1396, col: 58, offset: 51307},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1396, col: 89, offset: 51338},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1401, col: 1, offset: 51488},
			expr: &actionExpr{
				pos: position{line: 1401, col: 18, offset: 51505},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1401, col: 18, offset: 51505},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1401, col: 18, offset: 51505},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1401, col: 24, offset: 51511},
								expr: &ruleRefExpr{
									pos:  position{line: 1401, col: 25, offset: 51512},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1401, col: 43, offset: 51530},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1401, col: 47, offset: 51534},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1401, col: 56, offset: 51543},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1401, col: 78, offset: 51565},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1405, col: 1, offset: 51661},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 25, offset: 51685},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1405, col: 25, offset: 51685},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 38, offset: 51698},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1407, col: 1, offset: 51717},
			expr: &actionExpr{
				pos: position{line: 1407, col: 21, offset: 51737},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1407, col: 21, offset: 51737},
					expr: &charClassMatcher{
						pos:        position{line: 1407, col: 21, offset: 51737},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1411, col: 1, offset: 51814},
			expr: &actionExpr{
				pos: position{line: 1411, col: 25, offset: 51838},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1411, col: 25, offset: 51838},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1411, col: 25, offset: 51838},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1411, col: 38, offset: 51851},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1411, col: 60, offset: 51873},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1411, col: 64, offset: 51877},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1411, col: 73, offset: 51886},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1411, col: 95, offset: 51908},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1415, col: 1, offset: 52037},
			expr: &actionExpr{
				pos: position{line: 1415, col: 20, offset: 52056},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1415, col: 20, offset: 52056},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1415, col: 20, offset: 52056},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1415, col: 26, offset: 52062},
								expr: &ruleRefExpr{
									pos:  position{line: 1415, col: 27, offset: 52063},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1415, col: 45, offset: 52081},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1415, col: 49, offset: 52085},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1415, col: 58, offset: 52094},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1415, col: 82, offset: 52118},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1419, col: 1, offset: 52216},
			expr: &choiceExpr{
				pos: position{line: 1419, col: 27, offset: 52242},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1419, col: 27, offset: 52242},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 40, offset: 52255},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1421, col: 1, offset: 52276},
			expr: &actionExpr{
				pos: position{line: 1421, col: 23, offset: 52298},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1421, col: 23, offset: 52298},
					expr: &charClassMatcher{
						pos:        position{line: 1421, col: 23, offset: 52298},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1425, col: 1, offset: 52375},
			expr: &actionExpr{
				pos: position{line: 1425, col: 27, offset: 52401},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1425, col: 27, offset: 52401},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1425, col: 27, offset: 52401},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1425, col: 40, offset: 52414},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1425, col: 62, offset: 52436},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1425, col: 66, offset: 52440},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1425, col: 75, offset: 52449},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1425, col: 99, offset: 52473},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1432, col: 1, offset: 52715},
			expr: &choiceExpr{
				pos: position{line: 1432, col: 22, offset: 52736},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1432, col: 22, offset: 52736},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1432, col: 46, offset: 52760},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1432, col: 70, offset: 52784},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1434, col: 1, offset: 52802},
			expr: &litMatcher{
				pos:        position{line: 1434, col: 32, offset: 52833},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1436, col: 1, offset: 52838},
			expr: &actionExpr{
				pos: position{line: 1436, col: 26, offset: 52863},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1436, col: 26, offset: 52863},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1436, col: 26, offset: 52863},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1436, col: 54, offset: 52891},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1436, col: 63, offset: 52900},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1436, col: 93, offset: 52930},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1436, col: 121, offset: 52958},
							expr: &ruleRefExpr{
								pos:  position{line: 1436, col: 122, offset: 52959},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1440, col: 1, offset: 53064},
			expr: &choiceExpr{
				pos: position{line: 1440, col: 33, offset: 53096},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1440, col: 34, offset: 53097},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1440, col: 34, offset: 53097},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1440, col: 35, offset: 53098},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1440, col: 35, offset: 53098},
											expr: &ruleRefExpr{
												pos:  position{line: 1440, col: 36, offset: 53099},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1440, col: 64, offset: 53127},
											expr: &ruleRefExpr{
												pos:  position{line: 1440, col: 65, offset: 53128},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1440, col: 71, offset: 53134},
											expr: &ruleRefExpr{
												pos:  position{line: 1440, col: 72, offset: 53135},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1440, col: 80, offset: 53143,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1440, col: 83, offset: 53146},
									expr: &seqExpr{
										pos: position{line: 1440, col: 84, offset: 53147},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1440, col: 84, offset: 53147},
												expr: &seqExpr{
													pos: position{line: 1440, col: 86, offset: 53149},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1440, col: 86, offset: 53149},
															expr: &ruleRefExpr{
																pos:  position{line: 1440, col: 86, offset: 53149},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1440, col: 93, offset: 53156},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1440, col: 122, offset: 53185},
												expr: &ruleRefExpr{
													pos:  position{line: 1440, col: 123, offset: 53186},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1440, col: 151, offset: 53214},
												expr: &ruleRefExpr{
													pos:  position{line: 1440, col: 152, offset: 53215},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1440, col: 160, offset: 53223,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1442, col: 7, offset: 53365},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1442, col: 8, offset: 53366},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1442, col: 8, offset: 53366},
									expr: &ruleRefExpr{
										pos:  position{line: 1442, col: 9, offset: 53367},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1442, col: 15, offset: 53373},
									expr: &ruleRefExpr{
										pos:  position{line: 1442, col: 16, offset: 53374},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1442, col: 24, offset: 53382},
									expr: &ruleRefExpr{
										pos:  position{line: 1442, col: 25, offset: 53383},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1442, col: 53, offset: 53411,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1446, col: 1, offset: 53493},
			expr: &litMatcher{
				pos:        position{line: 1446, col: 32, offset: 53524},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1448, col: 1, offset: 53531},
			expr: &actionExpr{
				pos: position{line: 1448, col: 26, offset: 53556},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1448, col: 26, offset: 53556},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1448, col: 26, offset: 53556},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 54, offset: 53584},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 63, offset: 53593},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1448, col: 93, offset: 53623},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1448, col: 121, offset: 53651},
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 122, offset: 53652},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1452, col: 1, offset: 53757},
			expr: &choiceExpr{
				pos: position{line: 1452, col: 33, offset: 53789},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1452, col: 34, offset: 53790},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1452, col: 34, offset: 53790},
							expr: &seqExpr{
								pos: position{line: 1452, col: 35, offset: 53791},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1452, col: 35, offset: 53791},
										expr: &ruleRefExpr{
											pos:  position{line: 1452, col: 36, offset: 53792},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1452, col: 64, offset: 53820,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1454, col: 7, offset: 53985},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1454, col: 7, offset: 53985},
							expr: &seqExpr{
								pos: position{line: 1454, col: 8, offset: 53986},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1454, col: 8, offset: 53986},
										expr: &ruleRefExpr{
											pos:  position{line: 1454, col: 9, offset: 53987},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1454, col: 15, offset: 53993},
										expr: &ruleRefExpr{
											pos:  position{line: 1454, col: 16, offset: 53994},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1454, col: 24, offset: 54002},
										expr: &ruleRefExpr{
											pos:  position{line: 1454, col: 25, offset: 54003},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1454, col: 53, offset: 54031,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1458, col: 1, offset: 54114},
			expr: &choiceExpr{
				pos: position{line: 1458, col: 21, offset: 54134},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1458, col: 21, offset: 54134},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1458, col: 21, offset: 54134},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1458, col: 21, offset: 54134},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1458, col: 30, offset: 54143},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1458, col: 38, offset: 54151},
										expr: &ruleRefExpr{
											pos:  position{line: 1458, col: 39, offset: 54152},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1458, col: 67, offset: 54180},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1460, col: 5, offset: 54276},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1460, col: 5, offset: 54276},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1460, col: 5, offset: 54276},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1460, col: 15, offset: 54286},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1460, col: 23, offset: 54294},
										expr: &choiceExpr{
											pos: position{line: 1460, col: 24, offset: 54295},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1460, col: 24, offset: 54295},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1460, col: 37, offset: 54308},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1460, col: 65, offset: 54336},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1464, col: 1, offset: 54432},
			expr: &actionExpr{
				pos: position{line: 1464, col: 30, offset: 54461},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1464, col: 30, offset: 54461},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1471, col: 1, offset: 54634},
			expr: &choiceExpr{
				pos: position{line: 1471, col: 19, offset: 54652},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1471, col: 19, offset: 54652},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1471, col: 44, offset: 54677},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1473, col: 1, offset: 54702},
			expr: &choiceExpr{
				pos: position{line: 1473, col: 27, offset: 54728},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1473, col: 27, offset: 54728},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1473, col: 27, offset: 54728},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1473, col: 27, offset: 54728},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1473, col: 32, offset: 54733},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1473, col: 36, offset: 54737},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1473, col: 40, offset: 54741},
									expr: &ruleRefExpr{
										pos:  position{line: 1473, col: 40, offset: 54741},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1473, col: 47, offset: 54748},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1473, col: 51, offset: 54752},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1473, col: 58, offset: 54759},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1473, col: 79, offset: 54780},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1475, col: 5, offset: 54863},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1475, col: 5, offset: 54863},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1475, col: 5, offset: 54863},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1475, col: 10, offset: 54868},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1475, col: 14, offset: 54872},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 1475, col: 18, offset: 54876},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1479, col: 1, offset: 54948},
			expr: &actionExpr{
				pos: position{line: 1479, col: 27, offset: 54974},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1479, col: 27, offset: 54974},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1479, col: 27, offset: 54974},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1479, col: 35, offset: 54982},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1479, col: 40, offset: 54987},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1479, col: 54, offset: 55001},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1479, col: 72, offset: 55019},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1483, col: 1, offset: 55142},
			expr: &ruleRefExpr{
				pos:  position{line: 1483, col: 24, offset: 55165},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1488, col: 1, offset: 55287},
			expr: &choiceExpr{
				pos: position{line: 1488, col: 9, offset: 55295},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1488, col: 9, offset: 55295},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1488, col: 24, offset: 55310},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1491, col: 1, offset: 55391},
			expr: &actionExpr{
				pos: position{line: 1491, col: 17, offset: 55407},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1491, col: 17, offset: 55407},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1491, col: 17, offset: 55407},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1491, col: 25, offset: 55415},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1491, col: 30, offset: 55420},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1491, col: 40, offset: 55430},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1491, col: 58, offset: 55448},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1495, col: 1, offset: 55559},
			expr: &actionExpr{
				pos: position{line: 1495, col: 17, offset: 55575},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1495, col: 17, offset: 55575},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1495, col: 17, offset: 55575},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1495, col: 22, offset: 55580},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1495, col: 42, offset: 55600},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1495, col: 59, offset: 55617},
								expr: &ruleRefExpr{
									pos:  position{line: 1495, col: 60, offset: 55618},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1499, col: 1, offset: 55711},
			expr: &actionExpr{
				pos: position{line: 1499, col: 19, offset: 55729},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1499, col: 19, offset: 55729},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1499, col: 19, offset: 55729},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1499, col: 23, offset: 55733},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1499, col: 33, offset: 55743},
								expr: &ruleRefExpr{
									pos:  position{line: 1499, col: 34, offset: 55744},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1500, col: 5, offset: 55776},
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 5, offset: 55776},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1500, col: 12, offset: 55783},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1500, col: 23, offset: 55794},
								expr: &ruleRefExpr{
									pos:  position{line: 1500, col: 24, offset: 55795},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1500, col: 43, offset: 55814},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1504, col: 1, offset: 55931},
			expr: &actionExpr{
				pos: position{line: 1504, col: 30, offset: 55960},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1504, col: 30, offset: 55960},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1506, col: 5, offset: 56011},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1506, col: 6, offset: 56012},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1506, col: 6, offset: 56012},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1506, col: 6, offset: 56012},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1506, col: 11, offset: 56017},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1506, col: 20, offset: 56026},
												expr: &choiceExpr{
													pos: position{line: 1506, col: 21, offset: 56027},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1506, col: 21, offset: 56027},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1506, col: 36, offset: 56042},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1506, col: 49, offset: 56055},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1506, col: 70, offset: 56076},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1506, col: 92, offset: 56098},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1506, col: 97, offset: 56103},
											expr: &notExpr{
												pos: position{line: 1506, col: 99, offset: 56105},
												expr: &litMatcher{
													pos:        position{line: 1506, col: 100, offset: 56106},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1506, col: 105, offset: 56111},
											expr: &litMatcher{
												pos:        position{line: 1506, col: 105, offset: 56111},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1510, col: 6, offset: 56238},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1510, col: 6, offset: 56238},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1510, col: 6, offset: 56238},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1510, col: 15, offset: 56247},
												expr: &choiceExpr{
													pos: position{line: 1510, col: 16, offset: 56248},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1510, col: 16, offset: 56248},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1510, col: 31, offset: 56263},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1510, col: 44, offset: 56276},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1510, col: 65, offset: 56297},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1510, col: 89, offset: 56321},
											expr: &notExpr{
												pos: position{line: 1510, col: 91, offset: 56323},
												expr: &litMatcher{
													pos:        position{line: 1510, col: 92, offset: 56324},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1510, col: 97, offset: 56329},
											expr: &litMatcher{
												pos:        position{line: 1510, col: 97, offset: 56329},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1516, col: 1, offset: 56443},
			expr: &actionExpr{
				pos: position{line: 1516, col: 18, offset: 56460},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1516, col: 18, offset: 56460},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1520, col: 1, offset: 56546},
			expr: &actionExpr{
				pos: position{line: 1520, col: 24, offset: 56569},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1520, col: 24, offset: 56569},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1524, col: 1, offset: 56662},
			expr: &actionExpr{
				pos: position{line: 1524, col: 26, offset: 56687},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1524, col: 26, offset: 56687},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1531, col: 1, offset: 56875},
			expr: &actionExpr{
				pos: position{line: 1531, col: 15, offset: 56889},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1531, col: 15, offset: 56889},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1531, col: 15, offset: 56889},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1531, col: 26, offset: 56900},
								expr: &ruleRefExpr{
									pos:  position{line: 1531, col: 27, offset: 56901},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1531, col: 45, offset: 56919},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1531, col: 55, offset: 56929},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1531, col: 61, offset: 56935},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1531, col: 71, offset: 56945},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1531, col: 84, offset: 56958},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1531, col: 102, offset: 56976},
							expr: &ruleRefExpr{
								pos:  position{line: 1531, col: 102, offset: 56976},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1531, col: 109, offset: 56983},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1536, col: 1, offset: 57193},
			expr: &actionExpr{
				pos: position{line: 1536, col: 16, offset: 57208},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1536, col: 16, offset: 57208},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1536, col: 16, offset: 57208},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1536, col: 25, offset: 57217},
							expr: &litMatcher{
								pos:        position{line: 1536, col: 26, offset: 57218},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 30, offset: 57222},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1536, col: 36, offset: 57228},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 46, offset: 57238},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1536, col: 59, offset: 57251},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1540, col: 1, offset: 57389},
			expr: &actionExpr{
				pos: position{line: 1540, col: 21, offset: 57409},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 21, offset: 57409},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1540, col: 21, offset: 57409},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 25, offset: 57413},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 29, offset: 57417},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 44, offset: 57432},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 46, offset: 57434},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 57, offset: 57445},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 59, offset: 57447},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 71, offset: 57459},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 74, offset: 57462},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1540, col: 85, offset: 57473},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1544, col: 1, offset: 57535},
			expr: &choiceExpr{
				pos: position{line: 1544, col: 20, offset: 57554},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1544, col: 20, offset: 57554},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1544, col: 36, offset: 57570},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1544, col: 51, offset: 57585},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1546, col: 1, offset: 57596},
			expr: &actionExpr{
				pos: position{line: 1546, col: 18, offset: 57613},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1546, col: 18, offset: 57613},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1546, col: 18, offset: 57613},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1546, col: 22, offset: 57617},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1546, col: 29, offset: 57624},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1546, col: 29, offset: 57624},
										expr: &ruleRefExpr{
											pos:  position{line: 1546, col: 29, offset: 57624},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1546, col: 43, offset: 57638},
										expr: &ruleRefExpr{
											pos:  position{line: 1546, col: 43, offset: 57638},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1546, col: 58, offset: 57653},
										expr: &ruleRefExpr{
											pos:  position{line: 1546, col: 58, offset: 57653},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1546, col: 74, offset: 57669},
										expr: &ruleRefExpr{
											pos:  position{line: 1546, col: 74, offset: 57669},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1546, col: 91, offset: 57686},
										expr: &ruleRefExpr{
											pos:  position{line: 1546, col: 91, offset: 57686},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1546, col: 103, offset: 57698},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1546, col: 107, offset: 57702},
							expr: &ruleRefExpr{
								pos:  position{line: 1546, col: 107, offset: 57702},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1546, col: 114, offset: 57709},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1550, col: 1, offset: 57763},
			expr: &actionExpr{
				pos: position{line: 1550, col: 19, offset: 57781},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1550, col: 19, offset: 57781},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1550, col: 25, offset: 57787},
						expr: &ruleRefExpr{
							pos:  position{line: 1550, col: 25, offset: 57787},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1554, col: 1, offset: 57866},
			expr: &actionExpr{
				pos: position{line: 1554, col: 15, offset: 57880},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1554, col: 15, offset: 57880},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1554, col: 15, offset: 57880},
							expr: &litMatcher{
								pos:        position{line: 1554, col: 15, offset: 57880},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 20, offset: 57885},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1554, col: 26, offset: 57891},
								expr: &ruleRefExpr{
									pos:  position{line: 1554, col: 26, offset: 57891},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1558, col: 1, offset: 57967},
			expr: &actionExpr{
				pos: position{line: 1558, col: 16, offset: 57982},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1558, col: 16, offset: 57982},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1558, col: 16, offset: 57982},
							expr: &litMatcher{
								pos:        position{line: 1558, col: 16, offset: 57982},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1558, col: 21, offset: 57987},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1558, col: 27, offset: 57993},
								expr: &ruleRefExpr{
									pos:  position{line: 1558, col: 27, offset: 57993},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1562, col: 1, offset: 58075},
			expr: &actionExpr{
				pos: position{line: 1562, col: 17, offset: 58091},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1562, col: 17, offset: 58091},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1562, col: 17, offset: 58091},
							expr: &ruleRefExpr{
								pos:  position{line: 1562, col: 17, offset: 58091},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1562, col: 24, offset: 58098},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1562, col: 30, offset: 58104},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1562, col: 46, offset: 58120},
							expr: &ruleRefExpr{
								pos:  position{line: 1562, col: 46, offset: 58120},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1566, col: 1, offset: 58196},
			expr: &actionExpr{
				pos: position{line: 1566, col: 19, offset: 58214},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1566, col: 19, offset: 58214},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1566, col: 19, offset: 58214},
							expr: &ruleRefExpr{
								pos:  position{line: 1566, col: 19, offset: 58214},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1566, col: 26, offset: 58221},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1566, col: 30, offset: 58225},
							expr: &ruleRefExpr{
								pos:  position{line: 1566, col: 30, offset: 58225},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1566, col: 37, offset: 58232},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1566, col: 43, offset: 58238},
								expr: &ruleRefExpr{
									pos:  position{line: 1566, col: 43, offset: 58238},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1573, col: 1, offset: 58373},
			expr: &actionExpr{
				pos: position{line: 1573, col: 20, offset: 58392},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1573, col: 20, offset: 58392},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1573, col: 20, offset: 58392},
							expr: &ruleRefExpr{
								pos:  position{line: 1573, col: 20, offset: 58392},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1573, col: 27, offset: 58399},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1573, col: 31, offset: 58403},
							expr: &ruleRefExpr{
								pos:  position{line: 1573, col: 31, offset: 58403},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1573, col: 38, offset: 58410},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1573, col: 44, offset: 58416},
								expr: &ruleRefExpr{
									pos:  position{line: 1573, col: 44, offset: 58416},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1584, col: 1, offset: 58750},
			expr: &actionExpr{
				pos: position{line: 1584, col: 15, offset: 58764},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1584, col: 15, offset: 58764},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1584, col: 15, offset: 58764},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1584, col: 23, offset: 58772},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1584, col: 29, offset: 58778},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1584, col: 29, offset: 58778},
									expr: &charClassMatcher{
										pos:        position{line: 1584, col: 29, offset: 58778},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1584, col: 73, offset: 58822},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1584, col: 80, offset: 58829},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1588, col: 1, offset: 58911},
			expr: &actionExpr{
				pos: position{line: 1588, col: 14, offset: 58924},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1588, col: 14, offset: 58924},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1588, col: 14, offset: 58924},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1588, col: 18, offset: 58928},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1588, col: 23, offset: 58933},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1588, col: 32, offset: 58942},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1588, col: 35, offset: 58945},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1588, col: 46, offset: 58956},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1592, col: 1, offset: 59013},
			expr: &actionExpr{
				pos: position{line: 1592, col: 13, offset: 59025},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1592, col: 13, offset: 59025},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1592, col: 19, offset: 59031},
						expr: &ruleRefExpr{
							pos:  position{line: 1592, col: 19, offset: 59031},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1599, col: 1, offset: 59307},
			expr: &choiceExpr{
				pos: position{line: 1599, col: 19, offset: 59325},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1599, col: 19, offset: 59325},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1599, col: 19, offset: 59325},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1599, col: 19, offset: 59325},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1599, col: 32, offset: 59338},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1599, col: 41, offset: 59347},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1599, col: 58, offset: 59364},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1601, col: 5, offset: 59432},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1601, col: 5, offset: 59432},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1601, col: 5, offset: 59432},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1601, col: 17, offset: 59444},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1601, col: 22, offset: 59449},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1601, col: 35, offset: 59462},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1601, col: 39, offset: 59466},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1601, col: 47, offset: 59474},
										expr: &ruleRefExpr{
											pos:  position{line: 1601, col: 48, offset: 59475},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1601, col: 66, offset: 59493},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1605, col: 1, offset: 59554},
			expr: &ruleRefExpr{
				pos:  position{line: 1605, col: 16, offset: 59569},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1607, col: 1, offset: 59580},
			expr: &actionExpr{
				pos: position{line: 1607, col: 20, offset: 59599},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1607, col: 20, offset: 59599},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1607, col: 29, offset: 59608},
						expr: &seqExpr{
							pos: position{line: 1607, col: 30, offset: 59609},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1607, col: 30, offset: 59609},
									expr: &litMatcher{
										pos:        position{line: 1607, col: 31, offset: 59610},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1607, col: 35, offset: 59614},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1615, col: 1, offset: 59930},
			expr: &actionExpr{
				pos: position{line: 1615, col: 12, offset: 59941},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 12, offset: 59941},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1615, col: 12, offset: 59941},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 16, offset: 59945},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1615, col: 21, offset: 59950},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1615, col: 21, offset: 59950},
									expr: &charClassMatcher{
										pos:        position{line: 1615, col: 21, offset: 59950},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1615, col: 69, offset: 59998},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1615, col: 73, offset: 60002},
							expr: &ruleRefExpr{
								pos:  position{line: 1615, col: 73, offset: 60002},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1615, col: 80, offset: 60009},
							expr: &choiceExpr{
								pos: position{line: 1615, col: 82, offset: 60011},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1615, col: 82, offset: 60011},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1615, col: 88, offset: 60017},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1619, col: 1, offset: 60070},
			expr: &actionExpr{
				pos: position{line: 1619, col: 20, offset: 60089},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 20, offset: 60089},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1619, col: 20, offset: 60089},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 25, offset: 60094},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 48, offset: 60117},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1619, col: 61, offset: 60130},
								expr: &ruleRefExpr{
									pos:  position{line: 1619, col: 61, offset: 60130},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1623, col: 1, offset: 60227},
			expr: &actionExpr{
				pos: position{line: 1623, col: 26, offset: 60252},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1623, col: 26, offset: 60252},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1623, col: 26, offset: 60252},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1623, col: 30, offset: 60256},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1623, col: 35, offset: 60261},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1623, col: 35, offset: 60261},
									expr: &charClassMatcher{
										pos:        position{line: 1623, col: 35, offset: 60261},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1623, col: 83, offset: 60309},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1623, col: 87, offset: 60313},
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 87, offset: 60313},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1632, col: 1, offset: 60560},
			expr: &actionExpr{
				pos: position{line: 1632, col: 18, offset: 60577},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1632, col: 18, offset: 60577},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1632, col: 19, offset: 60578},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1632, col: 19, offset: 60578},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1632, col: 27, offset: 60586},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1632, col: 37, offset: 60596},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1632, col: 45, offset: 60604},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1632, col: 55, offset: 60614},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1632, col: 63, offset: 60622},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1632, col: 72, offset: 60631},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1642, col: 1, offset: 60881},
			expr: &actionExpr{
				pos: position{line: 1642, col: 19, offset: 60899},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1642, col: 19, offset: 60899},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1642, col: 19, offset: 60899},
							expr: &ruleRefExpr{
								pos:  position{line: 1642, col: 20, offset: 60900},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 5, offset: 60988},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1643, col: 12, offset: 60995},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1643, col: 12, offset: 60995},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1644, col: 11, offset: 61018},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1645, col: 11, offset: 61042},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1646, col: 11, offset: 61066},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1647, col: 11, offset: 61087},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1648, col: 11, offset: 61108},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1649, col: 11, offset: 61131},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1650, col: 11, offset: 61158},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1654, col: 1, offset: 61199},
			expr: &choiceExpr{
				pos: position{line: 1654, col: 19, offset: 61217},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1654, col: 19, offset: 61217},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1654, col: 19, offset: 61217},
								expr: &ruleRefExpr{
									pos:  position{line: 1654, col: 21, offset: 61219},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1654, col: 31, offset: 61229},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1655, col: 19, offset: 61300},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1656, col: 19, offset: 61340},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1657, col: 19, offset: 61381},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1658, col: 19, offset: 61422},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1659, col: 19, offset: 61463},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1660, col: 19, offset: 61501},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1661, col: 19, offset: 61541},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1666, col: 1, offset: 61764},
			expr: &actionExpr{
				pos: position{line: 1666, col: 17, offset: 61780},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1666, col: 17, offset: 61780},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1666, col: 17, offset: 61780},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1666, col: 28, offset: 61791},
								expr: &ruleRefExpr{
									pos:  position{line: 1666, col: 29, offset: 61792},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1666, col: 42, offset: 61805},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1666, col: 69, offset: 61832},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1666, col: 77, offset: 61840},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1666, col: 101, offset: 61864},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1670, col: 1, offset: 61963},
			expr: &seqExpr{
				pos: position{line: 1670, col: 26, offset: 61988},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1670, col: 26, offset: 61988},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1670, col: 33, offset: 61995},
						expr: &ruleRefExpr{
							pos:  position{line: 1670, col: 33, offset: 61995},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1670, col: 40, offset: 62002},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1672, col: 1, offset: 62007},
			expr: &seqExpr{
				pos: position{line: 1672, col: 31, offset: 62037},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1672, col: 31, offset: 62037},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1672, col: 38, offset: 62044},
						expr: &ruleRefExpr{
							pos:  position{line: 1672, col: 38, offset: 62044},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1672, col: 45, offset: 62051},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1674, col: 1, offset: 62056},
			expr: &choiceExpr{
				pos: position{line: 1674, col: 29, offset: 62084},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1674, col: 30, offset: 62085},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1674, col: 30, offset: 62085},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1674, col: 37, offset: 62092},
								expr: &ruleRefExpr{
									pos:  position{line: 1674, col: 37, offset: 62092},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1674, col: 44, offset: 62099},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1674, col: 51, offset: 62106},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1676, col: 1, offset: 62111},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1676, col: 27, offset: 62137},
				expr: &actionExpr{
					pos: position{line: 1677, col: 8, offset: 62146},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1677, col: 8, offset: 62146},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1677, col: 8, offset: 62146},
								expr: &ruleRefExpr{
									pos:  position{line: 1677, col: 9, offset: 62147},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1678, col: 8, offset: 62180},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1678, col: 17, offset: 62189},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1678, col: 17, offset: 62189},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1679, col: 15, offset: 62214},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1680, col: 15, offset: 62239},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1681, col: 15, offset: 62267},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1682, col: 15, offset: 62298},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1683, col: 15, offset: 62331},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1684, col: 15, offset: 62362},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1685, col: 15, offset: 62401},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1686, col: 15, offset: 62428},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1687, col: 15, offset: 62456},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1688, col: 15, offset: 62481},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1689, col: 15, offset: 62506},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1690, col: 15, offset: 62533},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1691, col: 15, offset: 62565},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1692, col: 15, offset: 62596},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1693, col: 15, offset: 62616},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1694, col: 15, offset: 62643},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1695, col: 15, offset: 62671},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1696, col: 15, offset: 62698},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1703, col: 1, offset: 62954},
			expr: &actionExpr{
				pos: position{line: 1703, col: 15, offset: 62968},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1703, col: 15, offset: 62968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1703, col: 15, offset: 62968},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1703, col: 26, offset: 62979},
								expr: &ruleRefExpr{
									pos:  position{line: 1703, col: 27, offset: 62980},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1704, col: 5, offset: 62998},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1715, col: 5, offset: 63346},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1715, col: 30, offset: 63371},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1715, col: 39, offset: 63380},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1715, col: 61, offset: 63402},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1719, col: 1, offset: 63506},
			expr: &seqExpr{
				pos: position{line: 1719, col: 24, offset: 63529},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1719, col: 24, offset: 63529},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1719, col: 31, offset: 63536},
						expr: &ruleRefExpr{
							pos:  position{line: 1719, col: 31, offset: 63536},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1719, col: 38, offset: 63543},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1721, col: 1, offset: 63573},
			expr: &seqExpr{
				pos: position{line: 1721, col: 29, offset: 63601},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1721, col: 29, offset: 63601},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1721, col: 36, offset: 63608},
						expr: &ruleRefExpr{
							pos:  position{line: 1721, col: 36, offset: 63608},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1721, col: 43, offset: 63615},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1723, col: 1, offset: 63645},
			expr: &choiceExpr{
				pos: position{line: 1723, col: 27, offset: 63671},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1723, col: 28, offset: 63672},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1723, col: 28, offset: 63672},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1723, col: 35, offset: 63679},
								expr: &ruleRefExpr{
									pos:  position{line: 1723, col: 35, offset: 63679},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1723, col: 42, offset: 63686},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1723, col: 49, offset: 63693},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1725, col: 1, offset: 63723},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1725, col: 25, offset: 63747},
				expr: &actionExpr{
					pos: position{line: 1726, col: 8, offset: 63756},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1726, col: 8, offset: 63756},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1726, col: 8, offset: 63756},
								expr: &ruleRefExpr{
									pos:  position{line: 1726, col: 9, offset: 63757},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1727, col: 8, offset: 63788},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1727, col: 17, offset: 63797},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1727, col: 17, offset: 63797},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1728, col: 15, offset: 63822},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1729, col: 15, offset: 63847},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1730, col: 15, offset: 63875},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1731, col: 15, offset: 63906},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1732, col: 15, offset: 63939},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1733, col: 15, offset: 63970},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1734, col: 15, offset: 64009},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1735, col: 15, offset: 64036},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1736, col: 15, offset: 64064},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1737, col: 15, offset: 64089},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1738, col: 15, offset: 64116},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1739, col: 15, offset: 64143},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1740, col: 15, offset: 64175},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1741, col: 15, offset: 64206},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1742, col: 15, offset: 64226},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1743, col: 15, offset: 64253},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1744, col: 15, offset: 64281},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1745, col: 15, offset: 64308},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1752, col: 1, offset: 64566},
			expr: &actionExpr{
				pos: position{line: 1752, col: 17, offset: 64582},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1752, col: 17, offset: 64582},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1752, col: 17, offset: 64582},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1752, col: 28, offset: 64593},
								expr: &ruleRefExpr{
									pos:  position{line: 1752, col: 29, offset: 64594},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1752, col: 42, offset: 64607},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1752, col: 69, offset: 64634},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1752, col: 78, offset: 64643},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1752, col: 102, offset: 64667},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1756, col: 1, offset: 64767},
			expr: &seqExpr{
				pos: position{line: 1756, col: 26, offset: 64792},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1756, col: 26, offset: 64792},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1756, col: 33, offset: 64799},
						expr: &ruleRefExpr{
							pos:  position{line: 1756, col: 33, offset: 64799},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1756, col: 40, offset: 64806},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1758, col: 1, offset: 64811},
			expr: &seqExpr{
				pos: position{line: 1758, col: 31, offset: 64841},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1758, col: 31, offset: 64841},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1758, col: 38, offset: 64848},
						expr: &ruleRefExpr{
							pos:  position{line: 1758, col: 38, offset: 64848},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1758, col: 45, offset: 64855},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1760, col: 1, offset: 64860},
			expr: &choiceExpr{
				pos: position{line: 1760, col: 29, offset: 64888},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1760, col: 30, offset: 64889},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1760, col: 30, offset: 64889},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1760, col: 37, offset: 64896},
								expr: &ruleRefExpr{
									pos:  position{line: 1760, col: 37, offset: 64896},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1760, col: 44, offset: 64903},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1760, col: 51, offset: 64910},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1762, col: 1, offset: 64915},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1762, col: 27, offset: 64941},
				expr: &actionExpr{
					pos: position{line: 1763, col: 8, offset: 64950},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1763, col: 8, offset: 64950},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1763, col: 8, offset: 64950},
								expr: &ruleRefExpr{
									pos:  position{line: 1763, col: 9, offset: 64951},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1764, col: 8, offset: 64984},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1764, col: 17, offset: 64993},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1764, col: 17, offset: 64993},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1765, col: 15, offset: 65018},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1766, col: 15, offset: 65043},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1767, col: 15, offset: 65071},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1768, col: 15, offset: 65102},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1769, col: 15, offset: 65135},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1770, col: 15, offset: 65166},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1771, col: 15, offset: 65205},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1772, col: 15, offset: 65232},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1773, col: 15, offset: 65259},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1774, col: 15, offset: 65285},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1775, col: 15, offset: 65312},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1776, col: 15, offset: 65337},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1777, col: 15, offset: 65369},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1778, col: 15, offset: 65400},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1779, col: 15, offset: 65420},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1780, col: 15, offset: 65447},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1781, col: 15, offset: 65475},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1782, col: 15, offset: 65502},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1789, col: 1, offset: 65759},
			expr: &actionExpr{
				pos: position{line: 1789, col: 16, offset: 65774},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1789, col: 16, offset: 65774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1789, col: 16, offset: 65774},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1789, col: 27, offset: 65785},
								expr: &ruleRefExpr{
									pos:  position{line: 1789, col: 28, offset: 65786},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1789, col: 41, offset: 65799},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1789, col: 67, offset: 65825},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1789, col: 76, offset: 65834},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1789, col: 99, offset: 65857},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1793, col: 1, offset: 65955},
			expr: &seqExpr{
				pos: position{line: 1793, col: 25, offset: 65979},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1793, col: 25, offset: 65979},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1793, col: 31, offset: 65985},
						expr: &ruleRefExpr{
							pos:  position{line: 1793, col: 31, offset: 65985},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1793, col: 38, offset: 65992},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1795, col: 1, offset: 66052},
			expr: &seqExpr{
				pos: position{line: 1795, col: 30, offset: 66081},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1795, col: 30, offset: 66081},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1795, col: 36, offset: 66087},
						expr: &ruleRefExpr{
							pos:  position{line: 1795, col: 36, offset: 66087},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1795, col: 43, offset: 66094},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1797, col: 1, offset: 66099},
			expr: &choiceExpr{
				pos: position{line: 1797, col: 28, offset: 66126},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1797, col: 29, offset: 66127},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1797, col: 29, offset: 66127},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1797, col: 35, offset: 66133},
								expr: &ruleRefExpr{
									pos:  position{line: 1797, col: 35, offset: 66133},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1797, col: 42, offset: 66140},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1797, col: 49, offset: 66147},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1799, col: 1, offset: 66152},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1799, col: 26, offset: 66177},
				expr: &actionExpr{
					pos: position{line: 1799, col: 27, offset: 66178},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1799, col: 27, offset: 66178},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1799, col: 27, offset: 66178},
								expr: &ruleRefExpr{
									pos:  position{line: 1799, col: 28, offset: 66179},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1799, col: 52, offset: 66203},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1799, col: 58, offset: 66209},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1806, col: 1, offset: 66443},
			expr: &actionExpr{
				pos: position{line: 1806, col: 17, offset: 66459},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1806, col: 17, offset: 66459},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1806, col: 17, offset: 66459},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1806, col: 28, offset: 66470},
								expr: &ruleRefExpr{
									pos:  position{line: 1806, col: 29, offset: 66471},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1806, col: 42, offset: 66484},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1806, col: 69, offset: 66511},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1806, col: 78, offset: 66520},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1806, col: 102, offset: 66544},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1810, col: 1, offset: 66644},
			expr: &seqExpr{
				pos: position{line: 1810, col: 26, offset: 66669},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1810, col: 26, offset: 66669},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1810, col: 33, offset: 66676},
						expr: &ruleRefExpr{
							pos:  position{line: 1810, col: 33, offset: 66676},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1810, col: 40, offset: 66683},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1812, col: 1, offset: 66688},
			expr: &seqExpr{
				pos: position{line: 1812, col: 31, offset: 66718},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1812, col: 31, offset: 66718},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1812, col: 38, offset: 66725},
						expr: &ruleRefExpr{
							pos:  position{line: 1812, col: 38, offset: 66725},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1812, col: 45, offset: 66732},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1814, col: 1, offset: 66737},
			expr: &choiceExpr{
				pos: position{line: 1814, col: 29, offset: 66765},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1814, col: 30, offset: 66766},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1814, col: 30, offset: 66766},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1814, col: 37, offset: 66773},
								expr: &ruleRefExpr{
									pos:  position{line: 1814, col: 37, offset: 66773},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1814, col: 44, offset: 66780},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 51, offset: 66787},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1816, col: 1, offset: 66792},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1816, col: 27, offset: 66818},
				expr: &actionExpr{
					pos: position{line: 1816, col: 28, offset: 66819},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1816, col: 28, offset: 66819},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1816, col: 28, offset: 66819},
								expr: &ruleRefExpr{
									pos:  position{line: 1816, col: 29, offset: 66820},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1816, col: 54, offset: 66845},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1816, col: 60, offset: 66851},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1823, col: 1, offset: 67083},
			expr: &actionExpr{
				pos: position{line: 1823, col: 15, offset: 67097},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1823, col: 15, offset: 67097},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1823, col: 15, offset: 67097},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1823, col: 26, offset: 67108},
								expr: &ruleRefExpr{
									pos:  position{line: 1823, col: 27, offset: 67109},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1824, col: 5, offset: 67127},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1831, col: 5, offset: 67337},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1831, col: 30, offset: 67362},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1831, col: 39, offset: 67371},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1831, col: 61, offset: 67393},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1835, col: 1, offset: 67497},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1835, col: 25, offset: 67521},
				expr: &actionExpr{
					pos: position{line: 1835, col: 26, offset: 67522},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1835, col: 26, offset: 67522},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1835, col: 26, offset: 67522},
								expr: &ruleRefExpr{
									pos:  position{line: 1835, col: 27, offset: 67523},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1835, col: 50, offset: 67546},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1835, col: 56, offset: 67552},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1842, col: 1, offset: 67790},
			expr: &actionExpr{
				pos: position{line: 1842, col: 21, offset: 67810},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1842, col: 21, offset: 67810},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1842, col: 21, offset: 67810},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1842, col: 32, offset: 67821},
								expr: &ruleRefExpr{
									pos:  position{line: 1842, col: 33, offset: 67822},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1842, col: 46, offset: 67835},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1842, col: 77, offset: 67866},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1842, col: 86, offset: 67875},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1842, col: 114, offset: 67903},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1846, col: 1, offset: 68011},
			expr: &seqExpr{
				pos: position{line: 1846, col: 30, offset: 68040},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1846, col: 30, offset: 68040},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1846, col: 37, offset: 68047},
						expr: &ruleRefExpr{
							pos:  position{line: 1846, col: 37, offset: 68047},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1846, col: 44, offset: 68054},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1848, col: 1, offset: 68059},
			expr: &seqExpr{
				pos: position{line: 1848, col: 35, offset: 68093},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1848, col: 35, offset: 68093},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1848, col: 42, offset: 68100},
						expr: &ruleRefExpr{
							pos:  position{line: 1848, col: 42, offset: 68100},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1848, col: 49, offset: 68107},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1850, col: 1, offset: 68112},
			expr: &choiceExpr{
				pos: position{line: 1850, col: 33, offset: 68144},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1850, col: 34, offset: 68145},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1850, col: 34, offset: 68145},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1850, col: 41, offset: 68152},
								expr: &ruleRefExpr{
									pos:  position{line: 1850, col: 41, offset: 68152},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1850, col: 48, offset: 68159},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1850, col: 55, offset: 68166},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1852, col: 1, offset: 68171},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1852, col: 31, offset: 68201},
				expr: &actionExpr{
					pos: position{line: 1852, col: 32, offset: 68202},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1852, col: 32, offset: 68202},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1852, col: 32, offset: 68202},
								expr: &ruleRefExpr{
									pos:  position{line: 1852, col: 33, offset: 68203},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1852, col: 62, offset: 68232},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1852, col: 68, offset: 68238},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1859, col: 1, offset: 68472},
			expr: &seqExpr{
				pos: position{line: 1859, col: 26, offset: 68497},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1859, col: 26, offset: 68497},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1859, col: 33, offset: 68504},
						expr: &ruleRefExpr{
							pos:  position{line: 1859, col: 33, offset: 68504},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1859, col: 40, offset: 68511},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1861, col: 1, offset: 68516},
			expr: &seqExpr{
				pos: position{line: 1861, col: 31, offset: 68546},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1861, col: 31, offset: 68546},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1861, col: 38, offset: 68553},
						expr: &ruleRefExpr{
							pos:  position{line: 1861, col: 38, offset: 68553},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1861, col: 45, offset: 68560},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1863, col: 1, offset: 68565},
			expr: &choiceExpr{
				pos: position{line: 1863, col: 29, offset: 68593},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1863, col: 30, offset: 68594},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1863, col: 30, offset: 68594},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1863, col: 37, offset: 68601},
								expr: &ruleRefExpr{
									pos:  position{line: 1863, col: 37, offset: 68601},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1863, col: 44, offset: 68608},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1863, col: 51, offset: 68615},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1865, col: 1, offset: 68620},
			expr: &actionExpr{
				pos: position{line: 1865, col: 17, offset: 68636},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1865, col: 17, offset: 68636},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1865, col: 17, offset: 68636},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1865, col: 44, offset: 68663},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1865, col: 53, offset: 68672},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1865, col: 78, offset: 68697},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1869, col: 1, offset: 68790},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1869, col: 27, offset: 68816},
				expr: &actionExpr{
					pos: position{line: 1869, col: 28, offset: 68817},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1869, col: 28, offset: 68817},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1869, col: 28, offset: 68817},
								expr: &ruleRefExpr{
									pos:  position{line: 1869, col: 29, offset: 68818},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1869, col: 54, offset: 68843},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1869, col: 60, offset: 68849},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1873, col: 1, offset: 68887},
			expr: &actionExpr{
				pos: position{line: 1873, col: 22, offset: 68908},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1873, col: 22, offset: 68908},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1873, col: 22, offset: 68908},
							expr: &ruleRefExpr{
								pos:  position{line: 1873, col: 23, offset: 68909},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1873, col: 45, offset: 68931},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1873, col: 50, offset: 68936},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1873, col: 59, offset: 68945},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1873, col: 85, offset: 68971},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1877, col: 1, offset: 69036},
			expr: &actionExpr{
				pos: position{line: 1877, col: 29, offset: 69064},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1877, col: 29, offset: 69064},
					expr: &charClassMatcher{
						pos:        position{line: 1877, col: 29, offset: 69064},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1885, col: 1, offset: 69353},
			expr: &choiceExpr{
				pos: position{line: 1885, col: 17, offset: 69369},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1885, col: 17, offset: 69369},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1886, col: 19, offset: 69398},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1887, col: 19, offset: 69429},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1888, col: 19, offset: 69453},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1889, col: 19, offset: 69490},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1890, col: 19, offset: 69524},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1891, col: 19, offset: 69558},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1892, col: 19, offset: 69593},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1893, col: 19, offset: 69627},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1894, col: 19, offset: 69664},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1896, col: 1, offset: 69675},
			expr: &actionExpr{
				pos: position{line: 1896, col: 23, offset: 69697},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1896, col: 23, offset: 69697},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1896, col: 23, offset: 69697},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1896, col: 32, offset: 69706},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1896, col: 37, offset: 69711},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1896, col: 37, offset: 69711},
									expr: &charClassMatcher{
										pos:        position{line: 1896, col: 37, offset: 69711},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1896, col: 76, offset: 69750},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1901, col: 1, offset: 69902},
			expr: &seqExpr{
				pos: position{line: 1902, col: 5, offset: 69932},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1902, col: 5, offset: 69932},
						expr: &choiceExpr{
							pos: position{line: 1902, col: 6, offset: 69933},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1902, col: 6, offset: 69933},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1903, col: 11, offset: 69962},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1904, col: 11, offset: 70023},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1905, col: 11, offset: 70052},
									expr: &ruleRefExpr{
										pos:  position{line: 1905, col: 11, offset: 70052},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1906, col: 11, offset: 70070},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1907, col: 11, offset: 70088},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1907, col: 21, offset: 70098},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1910, col: 1, offset: 70219},
			expr: &seqExpr{
				pos: position{line: 1911, col: 5, offset: 70248},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1911, col: 5, offset: 70248},
						expr: &choiceExpr{
							pos: position{line: 1911, col: 6, offset: 70249},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1911, col: 6, offset: 70249},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1912, col: 11, offset: 70310},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 11, offset: 70337},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1914, col: 11, offset: 70366},
									expr: &ruleRefExpr{
										pos:  position{line: 1914, col: 11, offset: 70366},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1915, col: 11, offset: 70383},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1916, col: 11, offset: 70401},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1916, col: 21, offset: 70411},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1919, col: 1, offset: 70465},
			expr: &seqExpr{
				pos: position{line: 1920, col: 5, offset: 70488},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1920, col: 5, offset: 70488},
						expr: &choiceExpr{
							pos: position{line: 1920, col: 6, offset: 70489},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1920, col: 6, offset: 70489},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1921, col: 11, offset: 70550},
									expr: &ruleRefExpr{
										pos:  position{line: 1921, col: 11, offset: 70550},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 11, offset: 70568},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1923, col: 11, offset: 70590},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1924, col: 11, offset: 70613},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1925, col: 11, offset: 70642},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1926, col: 11, offset: 70660},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1926, col: 21, offset: 70670},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1929, col: 1, offset: 70728},
			expr: &seqExpr{
				pos: position{line: 1930, col: 5, offset: 70750},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1930, col: 5, offset: 70750},
						expr: &choiceExpr{
							pos: position{line: 1930, col: 6, offset: 70751},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1930, col: 6, offset: 70751},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1931, col: 11, offset: 70812},
									expr: &ruleRefExpr{
										pos:  position{line: 1931, col: 11, offset: 70812},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1932, col: 11, offset: 70830},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1933, col: 11, offset: 70862},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1934, col: 11, offset: 70891},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1935, col: 11, offset: 70909},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1935, col: 21, offset: 70919},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1938, col: 1, offset: 70973},
			expr: &seqExpr{
				pos: position{line: 1939, col: 5, offset: 70997},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1939, col: 5, offset: 70997},
						expr: &choiceExpr{
							pos: position{line: 1939, col: 6, offset: 70998},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1939, col: 6, offset: 70998},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1940, col: 11, offset: 71059},
									expr: &ruleRefExpr{
										pos:  position{line: 1940, col: 11, offset: 71059},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1941, col: 11, offset: 71077},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1942, col: 11, offset: 71100},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1943, col: 11, offset: 71129},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1944, col: 11, offset: 71147},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1944, col: 21, offset: 71157},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1947, col: 1, offset: 71237},
			expr: &actionExpr{
				pos: position{line: 1947, col: 27, offset: 71263},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1947, col: 27, offset: 71263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1947, col: 27, offset: 71263},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1947, col: 33, offset: 71269},
								expr: &ruleRefExpr{
									pos:  position{line: 1947, col: 34, offset: 71270},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1947, col: 54, offset: 71290},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1951, col: 1, offset: 71357},
			expr: &actionExpr{
				pos: position{line: 1952, col: 5, offset: 71383},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1952, col: 5, offset: 71383},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1952, col: 5, offset: 71383},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1952, col: 14, offset: 71392},
								expr: &choiceExpr{
									pos: position{line: 1952, col: 15, offset: 71393},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1952, col: 15, offset: 71393},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1953, col: 11, offset: 71454},
											expr: &ruleRefExpr{
												pos:  position{line: 1953, col: 11, offset: 71454},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1954, col: 11, offset: 71472},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1955, col: 11, offset: 71495},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1956, col: 11, offset: 71524},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1956, col: 21, offset: 71534},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1960, col: 1, offset: 71605},
			expr: &actionExpr{
				pos: position{line: 1960, col: 29, offset: 71633},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1960, col: 29, offset: 71633},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1960, col: 29, offset: 71633},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1960, col: 35, offset: 71639},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1960, col: 43, offset: 71647},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1960, col: 44, offset: 71648},
									expr: &charClassMatcher{
										pos:        position{line: 1960, col: 44, offset: 71648},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1962, col: 8, offset: 71698},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1967, col: 1, offset: 71785},
			expr: &seqExpr{
				pos: position{line: 1968, col: 5, offset: 71809},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1968, col: 5, offset: 71809},
						expr: &choiceExpr{
							pos: position{line: 1968, col: 6, offset: 71810},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1968, col: 6, offset: 71810},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1969, col: 11, offset: 71871},
									expr: &ruleRefExpr{
										pos:  position{line: 1969, col: 11, offset: 71871},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1970, col: 11, offset: 71889},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1971, col: 11, offset: 71907},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1972, col: 11, offset: 71936},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1973, col: 11, offset: 71954},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1973, col: 21, offset: 71964},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1977, col: 1, offset: 72112},
			expr: &seqExpr{
				pos: position{line: 1977, col: 24, offset: 72135},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1977, col: 24, offset: 72135},
						expr: &choiceExpr{
							pos: position{line: 1978, col: 5, offset: 72141},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1978, col: 5, offset: 72141},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1979, col: 7, offset: 72198},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1980, col: 7, offset: 72223},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1981, col: 7, offset: 72266},
									expr: &ruleRefExpr{
										pos:  position{line: 1981, col: 7, offset: 72266},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1982, col: 7, offset: 72280},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1983, col: 7, offset: 72294},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1983, col: 17, offset: 72304},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1986, col: 1, offset: 72361},
			expr: &seqExpr{
				pos: position{line: 1987, col: 5, offset: 72381},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1987, col: 5, offset: 72381},
						expr: &choiceExpr{
							pos: position{line: 1987, col: 6, offset: 72382},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1987, col: 6, offset: 72382},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1988, col: 11, offset: 72443},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1989, col: 11, offset: 72472},
									expr: &ruleRefExpr{
										pos:  position{line: 1989, col: 11, offset: 72472},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1990, col: 11, offset: 72489},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1991, col: 11, offset: 72507},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1992, col: 11, offset: 72525},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1992, col: 21, offset: 72535},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1995, col: 1, offset: 72587},
			expr: &seqExpr{
				pos: position{line: 1995, col: 13, offset: 72599},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1995, col: 13, offset: 72599},
						expr: &choiceExpr{
							pos: position{line: 1996, col: 5, offset: 72605},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1996, col: 5, offset: 72605},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1997, col: 8, offset: 72632},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1997, col: 8, offset: 72632},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1997, col: 8, offset: 72632},
												expr: &ruleRefExpr{
													pos:  position{line: 1997, col: 9, offset: 72633},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1997, col: 13, offset: 72637},
												expr: &charClassMatcher{
													pos:        position{line: 1997, col: 13, offset: 72637},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1997, col: 22, offset: 72646},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 10, offset: 72751},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 2004, col: 1, offset: 72944},
			expr: &actionExpr{
				pos: position{line: 2004, col: 10, offset: 72953},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 2004, col: 10, offset: 72953},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2004, col: 10, offset: 72953},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 2004, col: 16, offset: 72959},
								expr: &zeroOrMoreExpr{
									pos: position{line: 2004, col: 17, offset: 72960},
									expr: &ruleRefExpr{
										pos:  position{line: 2004, col: 17, offset: 72960},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2004, col: 31, offset: 72974},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2005, col: 5, offset: 72993},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 2005, col: 12, offset: 73000},
								expr: &ruleRefExpr{
									pos:  position{line: 2005, col: 13, offset: 73001},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2006, col: 5, offset: 73023},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2006, col: 11, offset: 73029},
								expr: &ruleRefExpr{
									pos:  position{line: 2006, col: 12, offset: 73030},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2007, col: 6, offset: 73047},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2007, col: 6, offset: 73047},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 2007, col: 23, offset: 73064},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 2011, col: 1, offset: 73174},
			expr: &seqExpr{
				pos: position{line: 2011, col: 23, offset: 73196},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2011, col: 23, offset: 73196},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2011, col: 27, offset: 73200},
						expr: &ruleRefExpr{
							pos:  position{line: 2011, col: 27, offset: 73200},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 2013, col: 1, offset: 73208},
			expr: &seqExpr{
				pos: position{line: 2013, col: 19, offset: 73226},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2013, col: 19, offset: 73226},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2013, col: 26, offset: 73233},
						expr: &ruleRefExpr{
							pos:  position{line: 2013, col: 26, offset: 73233},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2013, col: 33, offset: 73240},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 2016, col: 1, offset: 73308},
			expr: &actionExpr{
				pos: position{line: 2016, col: 20, offset: 73327},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 2016, col: 20, offset: 73327},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2016, col: 20, offset: 73327},
							expr: &ruleRefExpr{
								pos:  position{line: 2016, col: 21, offset: 73328},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2016, col: 36, offset: 73343},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2016, col: 42, offset: 73349},
								expr: &ruleRefExpr{
									pos:  position{line: 2016, col: 43, offset: 73350},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2016, col: 55, offset: 73362},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 2016, col: 59, offset: 73366},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 2020, col: 1, offset: 73434},
			expr: &actionExpr{
				pos: position{line: 2020, col: 14, offset: 73447},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 2020, col: 14, offset: 73447},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2020, col: 14, offset: 73447},
							expr: &ruleRefExpr{
								pos:  position{line: 2020, col: 15, offset: 73448},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2020, col: 30, offset: 73463},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2020, col: 36, offset: 73469},
								expr: &ruleRefExpr{
									pos:  position{line: 2020, col: 37, offset: 73470},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2020, col: 49, offset: 73482},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2020, col: 53, offset: 73486},
							expr: &ruleRefExpr{
								pos:  position{line: 2020, col: 53, offset: 73486},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2024, col: 1, offset: 73555},
			expr: &actionExpr{
				pos: position{line: 2024, col: 14, offset: 73568},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2024, col: 14, offset: 73568},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2024, col: 14, offset: 73568},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 2024, col: 33, offset: 73587},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2024, col: 42, offset: 73596},
								expr: &seqExpr{
									pos: position{line: 2024, col: 43, offset: 73597},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2024, col: 43, offset: 73597},
											expr: &ruleRefExpr{
												pos:  position{line: 2024, col: 44, offset: 73598},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 2024, col: 63, offset: 73617},
											expr: &ruleRefExpr{
												pos:  position{line: 2024, col: 64, offset: 73618},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2024, col: 68, offset: 73622},
											expr: &ruleRefExpr{
												pos:  position{line: 2024, col: 68, offset: 73622},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2024, col: 75, offset: 73629},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2024, col: 89, offset: 73643},
											expr: &ruleRefExpr{
												pos:  position{line: 2024, col: 89, offset: 73643},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2031, col: 1, offset: 73969},
			expr: &choiceExpr{
				pos: position{line: 2031, col: 17, offset: 73985},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2031, col: 17, offset: 73985},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2031, col: 49, offset: 74017},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2031, col: 78, offset: 74046},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2033, col: 1, offset: 74082},
			expr: &litMatcher{
				pos:        position{line: 2033, col: 26, offset: 74107},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2036, col: 1, offset: 74179},
			expr: &actionExpr{
				pos: position{line: 2036, col: 31, offset: 74209},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2036, col: 31, offset: 74209},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2036, col: 31, offset: 74209},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2036, col: 42, offset: 74220},
								expr: &ruleRefExpr{
									pos:  position{line: 2036, col: 43, offset: 74221},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2036, col: 56, offset: 74234},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2036, col: 63, offset: 74241},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2041, col: 1, offset: 74471},
			expr: &actionExpr{
				pos: position{line: 2042, col: 5, offset: 74511},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2042, col: 5, offset: 74511},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2042, col: 5, offset: 74511},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 2042, col: 16, offset: 74522},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2043, col: 5, offset: 74558},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2043, col: 16, offset: 74569},
								expr: &ruleRefExpr{
									pos:  position{line: 2043, col: 17, offset: 74570},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 2047, col: 1, offset: 74679},
			expr: &actionExpr{
				pos: position{line: 2047, col: 35, offset: 74713},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 2047, col: 35, offset: 74713},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2047, col: 35, offset: 74713},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2047, col: 41, offset: 74719},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 2047, col: 41, offset: 74719},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2047, col: 41, offset: 74719},
											expr: &ruleRefExpr{
												pos:  position{line: 2047, col: 41, offset: 74719},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2047, col: 48, offset: 74726},
											expr: &charClassMatcher{
												pos:        position{line: 2047, col: 48, offset: 74726},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2049, col: 8, offset: 74792},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2054, col: 1, offset: 74932},
			expr: &actionExpr{
				pos: position{line: 2054, col: 39, offset: 74970},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2054, col: 39, offset: 74970},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2054, col: 39, offset: 74970},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2054, col: 50, offset: 74981},
								expr: &ruleRefExpr{
									pos:  position{line: 2054, col: 51, offset: 74982},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2055, col: 9, offset: 75003},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2055, col: 31, offset: 75025},
							expr: &ruleRefExpr{
								pos:  position{line: 2055, col: 31, offset: 75025},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2055, col: 38, offset: 75032},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2055, col: 46, offset: 75040},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2055, col: 53, offset: 75047},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2055, col: 95, offset: 75089},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2055, col: 96, offset: 75090},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2055, col: 96, offset: 75090},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2055, col: 118, offset: 75112},
											expr: &ruleRefExpr{
												pos:  position{line: 2055, col: 118, offset: 75112},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2055, col: 125, offset: 75119},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2055, col: 132, offset: 75126},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2060, col: 1, offset: 75285},
			expr: &actionExpr{
				pos: position{line: 2060, col: 44, offset: 75328},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2060, col: 44, offset: 75328},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2060, col: 50, offset: 75334},
						expr: &ruleRefExpr{
							pos:  position{line: 2060, col: 51, offset: 75335},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2064, col: 1, offset: 75419},
			expr: &actionExpr{
				pos: position{line: 2065, col: 5, offset: 75474},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2065, col: 5, offset: 75474},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2065, col: 5, offset: 75474},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2065, col: 11, offset: 75480},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2065, col: 11, offset: 75480},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2065, col: 11, offset: 75480},
											expr: &ruleRefExpr{
												pos:  position{line: 2065, col: 12, offset: 75481},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2065, col: 34, offset: 75503},
											expr: &charClassMatcher{
												pos:        position{line: 2065, col: 34, offset: 75503},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2067, col: 8, offset: 75569},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2072, col: 1, offset: 75695},
			expr: &actionExpr{
				pos: position{line: 2073, col: 5, offset: 75733},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2073, col: 5, offset: 75733},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2073, col: 5, offset: 75733},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2073, col: 16, offset: 75744},
								expr: &ruleRefExpr{
									pos:  position{line: 2073, col: 17, offset: 75745},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2074, col: 5, offset: 75762},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2081, col: 5, offset: 75974},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2081, col: 11, offset: 75980},
								expr: &ruleRefExpr{
									pos:  position{line: 2081, col: 12, offset: 75981},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2085, col: 1, offset: 76118},
			expr: &actionExpr{
				pos: position{line: 2085, col: 16, offset: 76133},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2085, col: 16, offset: 76133},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2089, col: 1, offset: 76179},
			expr: &actionExpr{
				pos: position{line: 2089, col: 25, offset: 76203},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2089, col: 25, offset: 76203},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2089, col: 25, offset: 76203},
							expr: &ruleRefExpr{
								pos:  position{line: 2089, col: 26, offset: 76204},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2089, col: 36, offset: 76214},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2089, col: 45, offset: 76223},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2089, col: 45, offset: 76223},
									expr: &charClassMatcher{
										pos:        position{line: 2089, col: 45, offset: 76223},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2091, col: 4, offset: 76281},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2098, col: 1, offset: 76458},
			expr: &actionExpr{
				pos: position{line: 2098, col: 14, offset: 76471},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2098, col: 14, offset: 76471},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2098, col: 14, offset: 76471},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2098, col: 19, offset: 76476},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2098, col: 25, offset: 76482},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2098, col: 43, offset: 76500},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2102, col: 1, offset: 76565},
			expr: &actionExpr{
				pos: position{line: 2102, col: 21, offset: 76585},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2102, col: 21, offset: 76585},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2102, col: 30, offset: 76594},
						expr: &choiceExpr{
							pos: position{line: 2102, col: 31, offset: 76595},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2102, col: 31, offset: 76595},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2102, col: 38, offset: 76602},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2102, col: 53, offset: 76617},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2102, col: 66, offset: 76630},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2102, col: 74, offset: 76638},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2102, col: 93, offset: 76657},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2102, col: 114, offset: 76678},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2102, col: 115, offset: 76679},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2102, col: 115, offset: 76679},
												expr: &litMatcher{
													pos:        position{line: 2102, col: 116, offset: 76680},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2102, col: 121, offset: 76685,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2108, col: 1, offset: 76791},
			expr: &actionExpr{
				pos: position{line: 2108, col: 23, offset: 76813},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2108, col: 23, offset: 76813},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2108, col: 23, offset: 76813},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2108, col: 29, offset: 76819},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2108, col: 36, offset: 76826},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2109, col: 5, offset: 76858},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2109, col: 11, offset: 76864},
								expr: &actionExpr{
									pos: position{line: 2109, col: 12, offset: 76865},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2109, col: 12, offset: 76865},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2109, col: 12, offset: 76865},
												expr: &ruleRefExpr{
													pos:  position{line: 2109, col: 12, offset: 76865},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2109, col: 19, offset: 76872},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2109, col: 23, offset: 76876},
												expr: &ruleRefExpr{
													pos:  position{line: 2109, col: 23, offset: 76876},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2109, col: 30, offset: 76883},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2109, col: 39, offset: 76892},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2110, col: 5, offset: 76950},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2110, col: 11, offset: 76956},
								expr: &actionExpr{
									pos: position{line: 2110, col: 12, offset: 76957},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2110, col: 12, offset: 76957},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2110, col: 12, offset: 76957},
												expr: &ruleRefExpr{
													pos:  position{line: 2110, col: 12, offset: 76957},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2110, col: 19, offset: 76964},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2110, col: 23, offset: 76968},
												expr: &ruleRefExpr{
													pos:  position{line: 2110, col: 23, offset: 76968},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2110, col: 30, offset: 76975},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2110, col: 39, offset: 76984},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2111, col: 5, offset: 77042},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2115, col: 1, offset: 77121},
			expr: &actionExpr{
				pos: position{line: 2115, col: 30, offset: 77150},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2115, col: 30, offset: 77150},
					expr: &choiceExpr{
						pos: position{line: 2115, col: 31, offset: 77151},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2115, col: 31, offset: 77151},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2115, col: 42, offset: 77162},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2122, col: 1, offset: 77311},
			expr: &actionExpr{
				pos: position{line: 2122, col: 14, offset: 77324},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2122, col: 14, offset: 77324},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2122, col: 14, offset: 77324},
							expr: &ruleRefExpr{
								pos:  position{line: 2122, col: 15, offset: 77325},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2122, col: 19, offset: 77329},
							expr: &ruleRefExpr{
								pos:  position{line: 2122, col: 19, offset: 77329},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2122, col: 26, offset: 77336},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2130, col: 1, offset: 77481},
			expr: &choiceExpr{
				pos: position{line: 2130, col: 11, offset: 77491},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2130, col: 11, offset: 77491},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2130, col: 24, offset: 77504},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2130, col: 36, offset: 77516},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2130, col: 48, offset: 77528},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2130, col: 61, offset: 77541},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2130, col: 72, offset: 77552},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2132, col: 1, offset: 77571},
			expr: &actionExpr{
				pos: position{line: 2132, col: 15, offset: 77585},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2132, col: 15, offset: 77585},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2135, col: 1, offset: 77638},
			expr: &actionExpr{
				pos: position{line: 2135, col: 14, offset: 77651},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2135, col: 14, offset: 77651},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2138, col: 1, offset: 77705},
			expr: &actionExpr{
				pos: position{line: 2138, col: 14, offset: 77718},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2138, col: 14, offset: 77718},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2141, col: 1, offset: 77773},
			expr: &actionExpr{
				pos: position{line: 2141, col: 15, offset: 77787},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2141, col: 15, offset: 77787},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2144, col: 1, offset: 77841},
			expr: &actionExpr{
				pos: position{line: 2144, col: 13, offset: 77853},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2144, col: 13, offset: 77853},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2152, col: 1, offset: 78130},
			expr: &actionExpr{
				pos: position{line: 2152, col: 22, offset: 78151},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2152, col: 22, offset: 78151},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2152, col: 22, offset: 78151},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2152, col: 31, offset: 78160},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2152, col: 35, offset: 78164},
							expr: &charClassMatcher{
								pos:        position{line: 2152, col: 36, offset: 78165},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2161, col: 1, offset: 78527},
			expr: &choiceExpr{
				pos: position{line: 2161, col: 21, offset: 78547},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2161, col: 21, offset: 78547},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2161, col: 21, offset: 78547},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2164, col: 9, offset: 78710},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2164, col: 10, offset: 78711},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2164, col: 10, offset: 78711},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2164, col: 16, offset: 78717},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2164, col: 22, offset: 78723},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2171, col: 1, offset: 78901},
			expr: &charClassMatcher{
				pos:        position{line: 2171, col: 13, offset: 78913},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2173, col: 1, offset: 78923},
			expr: &choiceExpr{
				pos: position{line: 2173, col: 16, offset: 78938},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2173, col: 16, offset: 78938},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2173, col: 22, offset: 78944},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2173, col: 28, offset: 78950},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2173, col: 34, offset: 78956},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2173, col: 40, offset: 78962},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2173, col: 46, offset: 78968},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2175, col: 1, offset: 78974},
			expr: &actionExpr{
				pos: position{line: 2175, col: 14, offset: 78987},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2175, col: 14, offset: 78987},
					expr: &charClassMatcher{
						pos:        position{line: 2175, col: 14, offset: 78987},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2179, col: 1, offset: 79033},
			expr: &choiceExpr{
				pos: position{line: 2183, col: 5, offset: 79360},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2183, col: 5, offset: 79360},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2183, col: 5, offset: 79360},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2183, col: 5, offset: 79360},
									expr: &charClassMatcher{
										pos:        position{line: 2183, col: 5, offset: 79360},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2183, col: 15, offset: 79370},
									expr: &choiceExpr{
										pos: position{line: 2183, col: 17, offset: 79372},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2183, col: 17, offset: 79372},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2183, col: 30, offset: 79385},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2185, col: 9, offset: 79455},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2185, col: 9, offset: 79455},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2185, col: 9, offset: 79455},
									expr: &charClassMatcher{
										pos:        position{line: 2185, col: 9, offset: 79455},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2185, col: 19, offset: 79465},
									expr: &seqExpr{
										pos: position{line: 2185, col: 20, offset: 79466},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2185, col: 20, offset: 79466},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2185, col: 27, offset: 79473},
												expr: &charClassMatcher{
													pos:        position{line: 2185, col: 27, offset: 79473},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2189, col: 1, offset: 79549},
			expr: &choiceExpr{
				pos: position{line: 2190, col: 5, offset: 79630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2190, col: 5, offset: 79630},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2190, col: 5, offset: 79630},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2190, col: 5, offset: 79630},
									expr: &charClassMatcher{
										pos:        position{line: 2190, col: 5, offset: 79630},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2190, col: 19, offset: 79644},
									expr: &choiceExpr{
										pos: position{line: 2190, col: 21, offset: 79646},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2190, col: 21, offset: 79646},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2190, col: 31, offset: 79656},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2192, col: 9, offset: 79725},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2195, col: 1, offset: 79825},
			expr: &actionExpr{
				pos: position{line: 2195, col: 12, offset: 79836},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2195, col: 12, offset: 79836},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2199, col: 1, offset: 79901},
			expr: &actionExpr{
				pos: position{line: 2199, col: 17, offset: 79917},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2199, col: 17, offset: 79917},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2199, col: 22, offset: 79922},
						expr: &choiceExpr{
							pos: position{line: 2199, col: 23, offset: 79923},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2199, col: 23, offset: 79923},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2199, col: 34, offset: 79934},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2203, col: 1, offset: 80015},
			expr: &actionExpr{
				pos: position{line: 2203, col: 13, offset: 80027},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2203, col: 13, offset: 80027},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2203, col: 13, offset: 80027},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2203, col: 20, offset: 80034},
								expr: &ruleRefExpr{
									pos:  position{line: 2203, col: 21, offset: 80035},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2203, col: 30, offset: 80044},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2203, col: 35, offset: 80049},
								expr: &choiceExpr{
									pos: position{line: 2203, col: 36, offset: 80050},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2203, col: 36, offset: 80050},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2203, col: 47, offset: 80061},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2207, col: 1, offset: 80146},
			expr: &actionExpr{
				pos: position{line: 2207, col: 23, offset: 80168},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2207, col: 23, offset: 80168},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2207, col: 23, offset: 80168},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2207, col: 31, offset: 80176},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2207, col: 39, offset: 80184},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2207, col: 44, offset: 80189},
								expr: &choiceExpr{
									pos: position{line: 2207, col: 45, offset: 80190},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2207, col: 45, offset: 80190},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2207, col: 56, offset: 80201},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2211, col: 1, offset: 80286},
			expr: &actionExpr{
				pos: position{line: 2211, col: 13, offset: 80298},
				run: (*parser).callonFilename1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2211, col: 13, offset: 80298},
					expr: &charClassMatcher{
						pos:        position{line: 2211, col: 14, offset: 80299},
						val:        "[^\\r\\n[\\]\\uFFFD ]",
						chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2215, col: 1, offset: 80421},
			expr: &choiceExpr{
				pos: position{line: 2215, col: 11, offset: 80431},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2215, col: 11, offset: 80431},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2215, col: 23, offset: 80443},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2215, col: 36, offset: 80456},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2215, col: 47, offset: 80467},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2215, col: 58, offset: 80478},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2217, col: 1, offset: 80489},
			expr: &actionExpr{
				pos: position{line: 2217, col: 7, offset: 80495},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2217, col: 7, offset: 80495},
					expr: &charClassMatcher{
						pos:        position{line: 2217, col: 7, offset: 80495},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2221, col: 1, offset: 80620},
			expr: &actionExpr{
				pos: position{line: 2221, col: 10, offset: 80629},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2221, col: 10, offset: 80629},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2225, col: 1, offset: 80671},
			expr: &actionExpr{
				pos: position{line: 2225, col: 11, offset: 80681},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2225, col: 11, offset: 80681},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2225, col: 11, offset: 80681},
							expr: &litMatcher{
								pos:        position{line: 2225, col: 11, offset: 80681},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2225, col: 16, offset: 80686},
							expr: &ruleRefExpr{
								pos:  position{line: 2225, col: 16, offset: 80686},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2229, col: 1, offset: 80738},
			expr: &choiceExpr{
				pos: position{line: 2229, col: 10, offset: 80747},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2229, col: 10, offset: 80747},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2229, col: 16, offset: 80753},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2229, col: 16, offset: 80753},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2233, col: 1, offset: 80794},
			expr: &choiceExpr{
				pos: position{line: 2233, col: 12, offset: 80805},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2233, col: 12, offset: 80805},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2233, col: 21, offset: 80814},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2233, col: 28, offset: 80821},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2235, col: 1, offset: 80827},
			expr: &notExpr{
				pos: position{line: 2235, col: 8, offset: 80834},
				expr: &anyMatcher{
					line: 2235, col: 9, offset: 80835,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2237, col: 1, offset: 80838},
			expr: &choiceExpr{
				pos: position{line: 2237, col: 8, offset: 80845},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2237, col: 8, offset: 80845},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2237, col: 18, offset: 80855},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralBlockAttribute1() (interface{}, error) {
	return types.NewLiteralBlockAttribute()
}

func (p *parser) callonLiteralBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onExampleBlockAttribute1() (interface{}, error) {
	return types.NewExampleBlockAttribute()
}

func (p *parser) callonExampleBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockAttribute1()
}

func (c *current) onListingBlockAttribute1() (interface{}, error) {
	return types.NewListingBlockAttribute()
}

func (p *parser) callonListingBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6() (interface{}, error) {
	return "nowrap", nil

}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6()
}

func (c *current) onSourceAttributes10(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes10(stack["attr"])
}

func (c *current) onSourceAttributes18(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes18(stack["attr"])
}

func (c *current) onSourceAttributes1(option, language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, option, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["option"], stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value)
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueSingleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted7()
}

func (c *current) onAttrValueSingleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1(stack["elements"])
}

func (c *current) onAttrValueDoubleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueDoubleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted7()
}

func (c *current) onAttrValueDoubleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1(stack["elements"])
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrBlockKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrBlockKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value)
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value)
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	if attributes == nil {
		return true, nil
	}
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrBlockKind]
		// if AttrKind is missing, then accept as a QuoteBlock
		return !ok || kind == types.Quote, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrBlockKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrBlockKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename1() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1()
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
