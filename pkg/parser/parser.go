// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentRawLine",
			pos:  position{line: 25, col: 1, offset: 440},
			expr: &actionExpr{
				pos: position{line: 27, col: 5, offset: 497},
				run: (*parser).callonDocumentRawLine1,
				expr: &seqExpr{
					pos: position{line: 27, col: 5, offset: 497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 5, offset: 497},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 28, col: 9, offset: 515},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 28, col: 9, offset: 515},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 372, col: 19, offset: 11492},
										run: (*parser).callonDocumentRawLine6,
										expr: &seqExpr{
											pos: position{line: 372, col: 19, offset: 11492},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 372, col: 19, offset: 11492},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 372, col: 24, offset: 11497},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 332, col: 18, offset: 10393},
														run: (*parser).callonDocumentRawLine10,
														expr: &seqExpr{
															pos: position{line: 332, col: 18, offset: 10393},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 332, col: 18, offset: 10393},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 332, col: 28, offset: 10403},
																	expr: &charClassMatcher{
																		pos:        position{line: 332, col: 29, offset: 10404},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 372, col: 45, offset: 11518},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 372, col: 49, offset: 11522},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonDocumentRawLine17,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonDocumentRawLine20,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 374, col: 5, offset: 11605},
										run: (*parser).callonDocumentRawLine27,
										expr: &seqExpr{
											pos: position{line: 374, col: 5, offset: 11605},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 374, col: 5, offset: 11605},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 374, col: 9, offset: 11609},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 332, col: 18, offset: 10393},
														run: (*parser).callonDocumentRawLine31,
														expr: &seqExpr{
															pos: position{line: 332, col: 18, offset: 10393},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 332, col: 18, offset: 10393},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 332, col: 28, offset: 10403},
																	expr: &charClassMatcher{
																		pos:        position{line: 332, col: 29, offset: 10404},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 374, col: 30, offset: 11630},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 374, col: 35, offset: 11635},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonDocumentRawLine38,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonDocumentRawLine41,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 30, col: 11, offset: 571},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 71, col: 10, offset: 1773},
										run: (*parser).callonDocumentRawLine49,
										expr: &seqExpr{
											pos: position{line: 71, col: 10, offset: 1773},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 71, col: 10, offset: 1773},
													val:        "ifdef::",
													ignoreCase: false,
													want:       "\"ifdef::\"",
												},
												&labeledExpr{
													pos:   position{line: 71, col: 20, offset: 1783},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 128, col: 28, offset: 3562},
														run: (*parser).callonDocumentRawLine53,
														expr: &oneOrMoreExpr{
															pos: position{line: 128, col: 28, offset: 3562},
															expr: &charClassMatcher{
																pos:        position{line: 128, col: 28, offset: 3562},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 71, col: 51, offset: 1814},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 71, col: 55, offset: 1818},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 71, col: 60, offset: 1823},
														expr: &actionExpr{
															pos: position{line: 79, col: 34, offset: 2152},
															run: (*parser).callonDocumentRawLine59,
															expr: &oneOrMoreExpr{
																pos: position{line: 79, col: 34, offset: 2152},
																expr: &charClassMatcher{
																	pos:        position{line: 79, col: 34, offset: 2152},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 71, col: 93, offset: 1856},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 71, col: 97, offset: 1860},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonDocumentRawLine64,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 75, col: 11, offset: 1950},
										run: (*parser).callonDocumentRawLine68,
										expr: &seqExpr{
											pos: position{line: 75, col: 11, offset: 1950},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 75, col: 11, offset: 1950},
													val:        "ifndef::",
													ignoreCase: false,
													want:       "\"ifndef::\"",
												},
												&labeledExpr{
													pos:   position{line: 75, col: 22, offset: 1961},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 128, col: 28, offset: 3562},
														run: (*parser).callonDocumentRawLine72,
														expr: &oneOrMoreExpr{
															pos: position{line: 128, col: 28, offset: 3562},
															expr: &charClassMatcher{
																pos:        position{line: 128, col: 28, offset: 3562},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 75, col: 53, offset: 1992},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 75, col: 57, offset: 1996},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 75, col: 62, offset: 2001},
														expr: &actionExpr{
															pos: position{line: 79, col: 34, offset: 2152},
															run: (*parser).callonDocumentRawLine78,
															expr: &oneOrMoreExpr{
																pos: position{line: 79, col: 34, offset: 2152},
																expr: &charClassMatcher{
																	pos:        position{line: 79, col: 34, offset: 2152},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 75, col: 95, offset: 2034},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 75, col: 99, offset: 2038},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonDocumentRawLine83,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 83, col: 11, offset: 2217},
										run: (*parser).callonDocumentRawLine87,
										expr: &seqExpr{
											pos: position{line: 83, col: 11, offset: 2217},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 83, col: 11, offset: 2217},
													val:        "ifeval::[",
													ignoreCase: false,
													want:       "\"ifeval::[\"",
												},
												&labeledExpr{
													pos:   position{line: 85, col: 5, offset: 2242},
													label: "left",
													expr: &choiceExpr{
														pos: position{line: 93, col: 5, offset: 2505},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 93, col: 6, offset: 2506},
																run: (*parser).callonDocumentRawLine92,
																expr: &seqExpr{
																	pos: position{line: 93, col: 6, offset: 2506},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 93, col: 6, offset: 2506},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 11, offset: 2511},
																			label: "s",
																			expr: &actionExpr{
																				pos: position{line: 659, col: 5, offset: 21191},
																				run: (*parser).callonDocumentRawLine96,
																				expr: &seqExpr{
																					pos: position{line: 659, col: 5, offset: 21191},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 659, col: 5, offset: 21191},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 659, col: 9, offset: 21195},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 332, col: 18, offset: 10393},
																								run: (*parser).callonDocumentRawLine100,
																								expr: &seqExpr{
																									pos: position{line: 332, col: 18, offset: 10393},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 332, col: 18, offset: 10393},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 332, col: 28, offset: 10403},
																											expr: &charClassMatcher{
																												pos:        position{line: 332, col: 29, offset: 10404},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 659, col: 28, offset: 21214},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 39, offset: 2539},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2570},
																run: (*parser).callonDocumentRawLine107,
																expr: &seqExpr{
																	pos: position{line: 94, col: 8, offset: 2570},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 94, col: 8, offset: 2570},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 94, col: 12, offset: 2574},
																			label: "s",
																			expr: &actionExpr{
																				pos: position{line: 659, col: 5, offset: 21191},
																				run: (*parser).callonDocumentRawLine111,
																				expr: &seqExpr{
																					pos: position{line: 659, col: 5, offset: 21191},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 659, col: 5, offset: 21191},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 659, col: 9, offset: 21195},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 332, col: 18, offset: 10393},
																								run: (*parser).callonDocumentRawLine115,
																								expr: &seqExpr{
																									pos: position{line: 332, col: 18, offset: 10393},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 332, col: 18, offset: 10393},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 332, col: 28, offset: 10403},
																											expr: &charClassMatcher{
																												pos:        position{line: 332, col: 29, offset: 10404},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 659, col: 28, offset: 21214},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 94, col: 40, offset: 2602},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2632},
																run: (*parser).callonDocumentRawLine122,
																expr: &labeledExpr{
																	pos:   position{line: 95, col: 8, offset: 2632},
																	label: "s",
																	expr: &actionExpr{
																		pos: position{line: 659, col: 5, offset: 21191},
																		run: (*parser).callonDocumentRawLine124,
																		expr: &seqExpr{
																			pos: position{line: 659, col: 5, offset: 21191},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 659, col: 5, offset: 21191},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 659, col: 9, offset: 21195},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 332, col: 18, offset: 10393},
																						run: (*parser).callonDocumentRawLine128,
																						expr: &seqExpr{
																							pos: position{line: 332, col: 18, offset: 10393},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 332, col: 18, offset: 10393},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 332, col: 28, offset: 10403},
																									expr: &charClassMatcher{
																										pos:        position{line: 332, col: 29, offset: 10404},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 659, col: 28, offset: 21214},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2686},
																run: (*parser).callonDocumentRawLine134,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2686},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2686},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 13, offset: 2691},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 16, offset: 2694},
																				run: (*parser).callonDocumentRawLine138,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 16, offset: 2694},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 16, offset: 2694},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 63, offset: 2741},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 97, col: 8, offset: 2772},
																run: (*parser).callonDocumentRawLine142,
																expr: &seqExpr{
																	pos: position{line: 97, col: 8, offset: 2772},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 97, col: 8, offset: 2772},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 97, col: 12, offset: 2776},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 97, col: 15, offset: 2779},
																				run: (*parser).callonDocumentRawLine146,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 97, col: 15, offset: 2779},
																					expr: &charClassMatcher{
																						pos:        position{line: 97, col: 15, offset: 2779},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 97, col: 62, offset: 2826},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2891, col: 12, offset: 96014},
																run: (*parser).callonDocumentRawLine150,
																expr: &seqExpr{
																	pos: position{line: 2891, col: 13, offset: 96015},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2891, col: 13, offset: 96015},
																			expr: &litMatcher{
																				pos:        position{line: 2891, col: 13, offset: 96015},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2891, col: 18, offset: 96020},
																			expr: &charClassMatcher{
																				pos:        position{line: 2891, col: 18, offset: 96020},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 85, col: 35, offset: 2272},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonDocumentRawLine157,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 86, col: 5, offset: 2284},
													label: "operand",
													expr: &choiceExpr{
														pos: position{line: 101, col: 5, offset: 2895},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 101, col: 6, offset: 2896},
																run: (*parser).callonDocumentRawLine161,
																expr: &litMatcher{
																	pos:        position{line: 101, col: 6, offset: 2896},
																	val:        "==",
																	ignoreCase: false,
																	want:       "\"==\"",
																},
															},
															&actionExpr{
																pos: position{line: 104, col: 8, offset: 2956},
																run: (*parser).callonDocumentRawLine163,
																expr: &litMatcher{
																	pos:        position{line: 104, col: 8, offset: 2956},
																	val:        "!=",
																	ignoreCase: false,
																	want:       "\"!=\"",
																},
															},
															&actionExpr{
																pos: position{line: 107, col: 8, offset: 3019},
																run: (*parser).callonDocumentRawLine165,
																expr: &litMatcher{
																	pos:        position{line: 107, col: 8, offset: 3019},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 110, col: 8, offset: 3081},
																run: (*parser).callonDocumentRawLine167,
																expr: &litMatcher{
																	pos:        position{line: 110, col: 8, offset: 3081},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 113, col: 8, offset: 3147},
																run: (*parser).callonDocumentRawLine169,
																expr: &litMatcher{
																	pos:        position{line: 113, col: 8, offset: 3147},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 116, col: 8, offset: 3212},
																run: (*parser).callonDocumentRawLine171,
																expr: &litMatcher{
																	pos:        position{line: 116, col: 8, offset: 3212},
																	val:        ">=",
																	ignoreCase: false,
																	want:       "\">=\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 86, col: 39, offset: 2318},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonDocumentRawLine174,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 87, col: 5, offset: 2330},
													label: "right",
													expr: &choiceExpr{
														pos: position{line: 93, col: 5, offset: 2505},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 93, col: 6, offset: 2506},
																run: (*parser).callonDocumentRawLine178,
																expr: &seqExpr{
																	pos: position{line: 93, col: 6, offset: 2506},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 93, col: 6, offset: 2506},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 11, offset: 2511},
																			label: "s",
																			expr: &actionExpr{
																				pos: position{line: 659, col: 5, offset: 21191},
																				run: (*parser).callonDocumentRawLine182,
																				expr: &seqExpr{
																					pos: position{line: 659, col: 5, offset: 21191},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 659, col: 5, offset: 21191},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 659, col: 9, offset: 21195},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 332, col: 18, offset: 10393},
																								run: (*parser).callonDocumentRawLine186,
																								expr: &seqExpr{
																									pos: position{line: 332, col: 18, offset: 10393},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 332, col: 18, offset: 10393},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 332, col: 28, offset: 10403},
																											expr: &charClassMatcher{
																												pos:        position{line: 332, col: 29, offset: 10404},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 659, col: 28, offset: 21214},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 39, offset: 2539},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2570},
																run: (*parser).callonDocumentRawLine193,
																expr: &seqExpr{
																	pos: position{line: 94, col: 8, offset: 2570},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 94, col: 8, offset: 2570},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 94, col: 12, offset: 2574},
																			label: "s",
																			expr: &actionExpr{
																				pos: position{line: 659, col: 5, offset: 21191},
																				run: (*parser).callonDocumentRawLine197,
																				expr: &seqExpr{
																					pos: position{line: 659, col: 5, offset: 21191},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 659, col: 5, offset: 21191},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 659, col: 9, offset: 21195},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 332, col: 18, offset: 10393},
																								run: (*parser).callonDocumentRawLine201,
																								expr: &seqExpr{
																									pos: position{line: 332, col: 18, offset: 10393},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 332, col: 18, offset: 10393},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 332, col: 28, offset: 10403},
																											expr: &charClassMatcher{
																												pos:        position{line: 332, col: 29, offset: 10404},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 659, col: 28, offset: 21214},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 94, col: 40, offset: 2602},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2632},
																run: (*parser).callonDocumentRawLine208,
																expr: &labeledExpr{
																	pos:   position{line: 95, col: 8, offset: 2632},
																	label: "s",
																	expr: &actionExpr{
																		pos: position{line: 659, col: 5, offset: 21191},
																		run: (*parser).callonDocumentRawLine210,
																		expr: &seqExpr{
																			pos: position{line: 659, col: 5, offset: 21191},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 659, col: 5, offset: 21191},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 659, col: 9, offset: 21195},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 332, col: 18, offset: 10393},
																						run: (*parser).callonDocumentRawLine214,
																						expr: &seqExpr{
																							pos: position{line: 332, col: 18, offset: 10393},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 332, col: 18, offset: 10393},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 332, col: 28, offset: 10403},
																									expr: &charClassMatcher{
																										pos:        position{line: 332, col: 29, offset: 10404},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 659, col: 28, offset: 21214},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2686},
																run: (*parser).callonDocumentRawLine220,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2686},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2686},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 13, offset: 2691},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 16, offset: 2694},
																				run: (*parser).callonDocumentRawLine224,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 16, offset: 2694},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 16, offset: 2694},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 63, offset: 2741},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 97, col: 8, offset: 2772},
																run: (*parser).callonDocumentRawLine228,
																expr: &seqExpr{
																	pos: position{line: 97, col: 8, offset: 2772},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 97, col: 8, offset: 2772},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 97, col: 12, offset: 2776},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 97, col: 15, offset: 2779},
																				run: (*parser).callonDocumentRawLine232,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 97, col: 15, offset: 2779},
																					expr: &charClassMatcher{
																						pos:        position{line: 97, col: 15, offset: 2779},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 97, col: 62, offset: 2826},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2891, col: 12, offset: 96014},
																run: (*parser).callonDocumentRawLine236,
																expr: &seqExpr{
																	pos: position{line: 2891, col: 13, offset: 96015},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2891, col: 13, offset: 96015},
																			expr: &litMatcher{
																				pos:        position{line: 2891, col: 13, offset: 96015},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2891, col: 18, offset: 96020},
																			expr: &charClassMatcher{
																				pos:        position{line: 2891, col: 18, offset: 96020},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 87, col: 36, offset: 2361},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 88, col: 5, offset: 2370},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonDocumentRawLine244,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 124, col: 10, offset: 3339},
										run: (*parser).callonDocumentRawLine248,
										expr: &seqExpr{
											pos: position{line: 124, col: 10, offset: 3339},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 124, col: 10, offset: 3339},
													val:        "endif::",
													ignoreCase: false,
													want:       "\"endif::\"",
												},
												&labeledExpr{
													pos:   position{line: 124, col: 20, offset: 3349},
													label: "name",
													expr: &zeroOrOneExpr{
														pos: position{line: 124, col: 25, offset: 3354},
														expr: &actionExpr{
															pos: position{line: 128, col: 28, offset: 3562},
															run: (*parser).callonDocumentRawLine253,
															expr: &oneOrMoreExpr{
																pos: position{line: 128, col: 28, offset: 3562},
																expr: &charClassMatcher{
																	pos:        position{line: 128, col: 28, offset: 3562},
																	val:        "[^\\r\\n []",
																	chars:      []rune{'\r', '\n', ' ', '['},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 124, col: 52, offset: 3381},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 124, col: 56, offset: 3385},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 124, col: 61, offset: 3390},
														expr: &actionExpr{
															pos: position{line: 79, col: 34, offset: 2152},
															run: (*parser).callonDocumentRawLine259,
															expr: &oneOrMoreExpr{
																pos: position{line: 79, col: 34, offset: 2152},
																expr: &charClassMatcher{
																	pos:        position{line: 79, col: 34, offset: 2152},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 124, col: 94, offset: 3423},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 124, col: 98, offset: 3427},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonDocumentRawLine264,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 731, col: 5, offset: 23680},
										run: (*parser).callonDocumentRawLine268,
										expr: &seqExpr{
											pos: position{line: 731, col: 5, offset: 23680},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 731, col: 5, offset: 23680},
													expr: &charClassMatcher{
														pos:        position{line: 2813, col: 13, offset: 93503},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 732, col: 5, offset: 23710},
													label: "delimiter",
													expr: &choiceExpr{
														pos: position{line: 733, col: 9, offset: 23730},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 746, col: 26, offset: 24217},
																run: (*parser).callonDocumentRawLine274,
																expr: &seqExpr{
																	pos: position{line: 746, col: 26, offset: 24217},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 746, col: 26, offset: 24217},
																			val:        "////",
																			ignoreCase: false,
																			want:       "\"////\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 746, col: 33, offset: 24224},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonDocumentRawLine278,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonDocumentRawLine281,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 750, col: 26, offset: 24331},
																run: (*parser).callonDocumentRawLine288,
																expr: &seqExpr{
																	pos: position{line: 750, col: 26, offset: 24331},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 750, col: 26, offset: 24331},
																			val:        "====",
																			ignoreCase: false,
																			want:       "\"====\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 750, col: 33, offset: 24338},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonDocumentRawLine292,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonDocumentRawLine295,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 758, col: 26, offset: 24556},
																run: (*parser).callonDocumentRawLine302,
																expr: &seqExpr{
																	pos: position{line: 758, col: 26, offset: 24556},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 758, col: 26, offset: 24556},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 758, col: 32, offset: 24562},
																			label: "language",
																			expr: &actionExpr{
																				pos: position{line: 762, col: 13, offset: 24692},
																				run: (*parser).callonDocumentRawLine306,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 762, col: 14, offset: 24693},
																					expr: &charClassMatcher{
																						pos:        position{line: 762, col: 14, offset: 24693},
																						val:        "[^\\r\\n ]",
																						chars:      []rune{'\r', '\n', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 758, col: 52, offset: 24582},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonDocumentRawLine310,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonDocumentRawLine313,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 754, col: 25, offset: 24444},
																run: (*parser).callonDocumentRawLine320,
																expr: &seqExpr{
																	pos: position{line: 754, col: 25, offset: 24444},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 754, col: 25, offset: 24444},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 754, col: 31, offset: 24450},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonDocumentRawLine324,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonDocumentRawLine327,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 766, col: 26, offset: 24765},
																run: (*parser).callonDocumentRawLine334,
																expr: &seqExpr{
																	pos: position{line: 766, col: 26, offset: 24765},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 766, col: 26, offset: 24765},
																			val:        "----",
																			ignoreCase: false,
																			want:       "\"----\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 766, col: 33, offset: 24772},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonDocumentRawLine338,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonDocumentRawLine341,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 770, col: 26, offset: 24879},
																run: (*parser).callonDocumentRawLine348,
																expr: &seqExpr{
																	pos: position{line: 770, col: 26, offset: 24879},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 770, col: 26, offset: 24879},
																			val:        "....",
																			ignoreCase: false,
																			want:       "\"....\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 770, col: 33, offset: 24886},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonDocumentRawLine352,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonDocumentRawLine355,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 774, col: 30, offset: 24997},
																run: (*parser).callonDocumentRawLine362,
																expr: &seqExpr{
																	pos: position{line: 774, col: 30, offset: 24997},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 774, col: 30, offset: 24997},
																			val:        "++++",
																			ignoreCase: false,
																			want:       "\"++++\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 774, col: 37, offset: 25004},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonDocumentRawLine366,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonDocumentRawLine369,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 778, col: 24, offset: 25113},
																run: (*parser).callonDocumentRawLine376,
																expr: &seqExpr{
																	pos: position{line: 778, col: 24, offset: 25113},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 778, col: 24, offset: 25113},
																			val:        "____",
																			ignoreCase: false,
																			want:       "\"____\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 778, col: 31, offset: 25120},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonDocumentRawLine380,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonDocumentRawLine383,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 782, col: 26, offset: 25225},
																run: (*parser).callonDocumentRawLine390,
																expr: &seqExpr{
																	pos: position{line: 782, col: 26, offset: 25225},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 782, col: 26, offset: 25225},
																			val:        "****",
																			ignoreCase: false,
																			want:       "\"****\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 782, col: 33, offset: 25232},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonDocumentRawLine394,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonDocumentRawLine397,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 43, col: 5, offset: 940},
										run: (*parser).callonDocumentRawLine404,
										expr: &seqExpr{
											pos: position{line: 43, col: 5, offset: 940},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 43, col: 5, offset: 940},
													run: (*parser).callonDocumentRawLine406,
												},
												&andCodeExpr{
													pos: position{line: 47, col: 5, offset: 1084},
													run: (*parser).callonDocumentRawLine407,
												},
												&labeledExpr{
													pos:   position{line: 50, col: 5, offset: 1147},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 50, col: 12, offset: 1154},
														run: (*parser).callonDocumentRawLine409,
														expr: &oneOrMoreExpr{
															pos: position{line: 50, col: 12, offset: 1154},
															expr: &litMatcher{
																pos:        position{line: 50, col: 13, offset: 1155},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 54, col: 5, offset: 1263},
													run: (*parser).callonDocumentRawLine412,
												},
												&actionExpr{
													pos: position{line: 2903, col: 11, offset: 96254},
													run: (*parser).callonDocumentRawLine413,
													expr: &oneOrMoreExpr{
														pos: position{line: 2903, col: 11, offset: 96254},
														expr: &charClassMatcher{
															pos:        position{line: 2903, col: 12, offset: 96255},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 58, col: 12, offset: 1422},
													expr: &charClassMatcher{
														pos:        position{line: 58, col: 12, offset: 1422},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2912, col: 8, offset: 96461},
							expr: &anyMatcher{
								line: 2912, col: 9, offset: 96462,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 135, col: 1, offset: 3762},
			expr: &actionExpr{
				pos: position{line: 136, col: 5, offset: 3784},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 136, col: 5, offset: 3784},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 136, col: 5, offset: 3784},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 137, col: 9, offset: 3799},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 137, col: 9, offset: 3799},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 137, col: 9, offset: 3799},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 138, col: 9, offset: 3820},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2855, col: 17, offset: 94805},
												run: (*parser).callonFileInclusion8,
												expr: &labeledExpr{
													pos:   position{line: 2855, col: 17, offset: 94805},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2855, col: 22, offset: 94810},
														expr: &choiceExpr{
															pos: position{line: 2855, col: 23, offset: 94811},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2870, col: 5, offset: 95267},
																	run: (*parser).callonFileInclusion12,
																	expr: &seqExpr{
																		pos: position{line: 2870, col: 5, offset: 95267},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2870, col: 5, offset: 95267},
																				expr: &litMatcher{
																					pos:        position{line: 2870, col: 6, offset: 95268},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2871, col: 5, offset: 95292},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2871, col: 14, offset: 95301},
																					expr: &choiceExpr{
																						pos: position{line: 2872, col: 9, offset: 95311},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2872, col: 9, offset: 95311},
																								run: (*parser).callonFileInclusion19,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2872, col: 9, offset: 95311},
																									expr: &charClassMatcher{
																										pos:        position{line: 2872, col: 10, offset: 95312},
																										val:        "[^\\r\\n[]�{.,;?!<> ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2875, col: 11, offset: 95577},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 2845, col: 25, offset: 94548},
																										run: (*parser).callonFileInclusion23,
																										expr: &charClassMatcher{
																											pos:        position{line: 2845, col: 25, offset: 94548},
																											val:        "[.,;?!]",
																											chars:      []rune{'.', ',', ';', '?', '!'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 2875, col: 32, offset: 95598},
																										expr: &notExpr{
																											pos: position{line: 2875, col: 34, offset: 95600},
																											expr: &choiceExpr{
																												pos: position{line: 2875, col: 36, offset: 95602},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2912, col: 8, offset: 96461},
																														expr: &anyMatcher{
																															line: 2912, col: 9, offset: 96462,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2899, col: 10, offset: 96187},
																														run: (*parser).callonFileInclusion30,
																														expr: &charClassMatcher{
																															pos:        position{line: 2899, col: 11, offset: 96188},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 651, col: 5, offset: 21000},
																								run: (*parser).callonFileInclusion32,
																								expr: &seqExpr{
																									pos: position{line: 651, col: 5, offset: 21000},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 651, col: 5, offset: 21000},
																											run: (*parser).callonFileInclusion34,
																										},
																										&labeledExpr{
																											pos:   position{line: 654, col: 5, offset: 21069},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 654, col: 14, offset: 21078},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 666, col: 25, offset: 21447},
																														run: (*parser).callonFileInclusion37,
																														expr: &seqExpr{
																															pos: position{line: 666, col: 25, offset: 21447},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 666, col: 25, offset: 21447},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 666, col: 37, offset: 21459},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 332, col: 18, offset: 10393},
																																		run: (*parser).callonFileInclusion41,
																																		expr: &seqExpr{
																																			pos: position{line: 332, col: 18, offset: 10393},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 332, col: 18, offset: 10393},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 332, col: 28, offset: 10403},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 332, col: 29, offset: 10404},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 666, col: 56, offset: 21478},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 666, col: 62, offset: 21484},
																																		expr: &actionExpr{
																																			pos: position{line: 674, col: 17, offset: 21779},
																																			run: (*parser).callonFileInclusion48,
																																			expr: &seqExpr{
																																				pos: position{line: 674, col: 17, offset: 21779},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 674, col: 17, offset: 21779},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 674, col: 21, offset: 21783},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 674, col: 28, offset: 21790},
																																									run: (*parser).callonFileInclusion53,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 674, col: 28, offset: 21790},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 676, col: 9, offset: 21844},
																																									run: (*parser).callonFileInclusion55,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 676, col: 9, offset: 21844},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 676, col: 9, offset: 21844},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 666, col: 78, offset: 21500},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 670, col: 25, offset: 21618},
																														run: (*parser).callonFileInclusion59,
																														expr: &seqExpr{
																															pos: position{line: 670, col: 25, offset: 21618},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 670, col: 25, offset: 21618},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 670, col: 38, offset: 21631},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 332, col: 18, offset: 10393},
																																		run: (*parser).callonFileInclusion63,
																																		expr: &seqExpr{
																																			pos: position{line: 332, col: 18, offset: 10393},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 332, col: 18, offset: 10393},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 332, col: 28, offset: 10403},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 332, col: 29, offset: 10404},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 670, col: 57, offset: 21650},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 670, col: 63, offset: 21656},
																																		expr: &actionExpr{
																																			pos: position{line: 674, col: 17, offset: 21779},
																																			run: (*parser).callonFileInclusion70,
																																			expr: &seqExpr{
																																				pos: position{line: 674, col: 17, offset: 21779},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 674, col: 17, offset: 21779},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 674, col: 21, offset: 21783},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 674, col: 28, offset: 21790},
																																									run: (*parser).callonFileInclusion75,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 674, col: 28, offset: 21790},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 676, col: 9, offset: 21844},
																																									run: (*parser).callonFileInclusion77,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 676, col: 9, offset: 21844},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 676, col: 9, offset: 21844},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 670, col: 79, offset: 21672},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 659, col: 5, offset: 21191},
																														run: (*parser).callonFileInclusion81,
																														expr: &seqExpr{
																															pos: position{line: 659, col: 5, offset: 21191},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 659, col: 5, offset: 21191},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 659, col: 9, offset: 21195},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 332, col: 18, offset: 10393},
																																		run: (*parser).callonFileInclusion85,
																																		expr: &seqExpr{
																																			pos: position{line: 332, col: 18, offset: 10393},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 332, col: 18, offset: 10393},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 332, col: 28, offset: 10403},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 332, col: 29, offset: 10404},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 659, col: 28, offset: 21214},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2599, col: 5, offset: 86909},
																								run: (*parser).callonFileInclusion91,
																								expr: &seqExpr{
																									pos: position{line: 2599, col: 5, offset: 86909},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2599, col: 5, offset: 86909},
																											run: (*parser).callonFileInclusion93,
																										},
																										&labeledExpr{
																											pos:   position{line: 2602, col: 5, offset: 86985},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 2604, col: 9, offset: 87083},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2604, col: 9, offset: 87083},
																														run: (*parser).callonFileInclusion96,
																														expr: &choiceExpr{
																															pos: position{line: 694, col: 27, offset: 22498},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 694, col: 27, offset: 22498},
																																	run: (*parser).callonFileInclusion98,
																																	expr: &seqExpr{
																																		pos: position{line: 694, col: 27, offset: 22498},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 694, col: 27, offset: 22498},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 694, col: 32, offset: 22503},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 2884, col: 7, offset: 95839},
																																					run: (*parser).callonFileInclusion102,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 2884, col: 7, offset: 95839},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2884, col: 7, offset: 95839},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 694, col: 40, offset: 22511},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonFileInclusion106,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 694, col: 47, offset: 22518},
																																				val:        ",",
																																				ignoreCase: false,
																																				want:       "\",\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 694, col: 51, offset: 22522},
																																				label: "label",
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 704, col: 24, offset: 22923},
																																					expr: &choiceExpr{
																																						pos: position{line: 705, col: 5, offset: 22929},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 705, col: 6, offset: 22930},
																																								run: (*parser).callonFileInclusion112,
																																								expr: &seqExpr{
																																									pos: position{line: 705, col: 6, offset: 22930},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 705, col: 6, offset: 22930},
																																											val:        "[0-9\\pL]",
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&oneOrMoreExpr{
																																											pos: position{line: 705, col: 14, offset: 22938},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 705, col: 14, offset: 22938},
																																												val:        "[^\\r\\n{<>]",
																																												chars:      []rune{'\r', '\n', '{', '<', '>'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 659, col: 5, offset: 21191},
																																								run: (*parser).callonFileInclusion117,
																																								expr: &seqExpr{
																																									pos: position{line: 659, col: 5, offset: 21191},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 659, col: 5, offset: 21191},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 659, col: 9, offset: 21195},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 332, col: 18, offset: 10393},
																																												run: (*parser).callonFileInclusion121,
																																												expr: &seqExpr{
																																													pos: position{line: 332, col: 18, offset: 10393},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 332, col: 18, offset: 10393},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 332, col: 28, offset: 10403},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 332, col: 29, offset: 10404},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 659, col: 28, offset: 21214},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 709, col: 8, offset: 23164},
																																								run: (*parser).callonFileInclusion127,
																																								expr: &litMatcher{
																																									pos:        position{line: 709, col: 8, offset: 23164},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 694, col: 79, offset: 22550},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 696, col: 9, offset: 22623},
																																	run: (*parser).callonFileInclusion130,
																																	expr: &seqExpr{
																																		pos: position{line: 696, col: 9, offset: 22623},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 696, col: 9, offset: 22623},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 696, col: 14, offset: 22628},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 2884, col: 7, offset: 95839},
																																					run: (*parser).callonFileInclusion134,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 2884, col: 7, offset: 95839},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2884, col: 7, offset: 95839},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 696, col: 22, offset: 22636},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2607, col: 11, offset: 87187},
																														run: (*parser).callonFileInclusion138,
																														expr: &charClassMatcher{
																															pos:        position{line: 2607, col: 12, offset: 87188},
																															val:        "[<>&]",
																															chars:      []rune{'<', '>', '&'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2878, col: 11, offset: 95683},
																								run: (*parser).callonFileInclusion140,
																								expr: &litMatcher{
																									pos:        position{line: 2878, col: 11, offset: 95683},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1122, col: 23, offset: 34991},
																	run: (*parser).callonFileInclusion142,
																	expr: &seqExpr{
																		pos: position{line: 1122, col: 23, offset: 34991},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1120, col: 32, offset: 34959},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1122, col: 51, offset: 35019},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1122, col: 56, offset: 35024},
																					run: (*parser).callonFileInclusion146,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1122, col: 56, offset: 35024},
																						expr: &charClassMatcher{
																							pos:        position{line: 1122, col: 56, offset: 35024},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1120, col: 32, offset: 34959},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 139, col: 9, offset: 3849},
											label: "attributes",
											expr: &ruleRefExpr{
												pos:  position{line: 139, col: 21, offset: 3861},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 143, col: 5, offset: 4016},
							expr: &actionExpr{
								pos: position{line: 2899, col: 10, offset: 96187},
								run: (*parser).callonFileInclusion153,
								expr: &charClassMatcher{
									pos:        position{line: 2899, col: 11, offset: 96188},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2915, col: 8, offset: 96511},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2908, col: 12, offset: 96371},
									run: (*parser).callonFileInclusion156,
									expr: &choiceExpr{
										pos: position{line: 2908, col: 13, offset: 96372},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2908, col: 13, offset: 96372},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 20, offset: 96379},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 29, offset: 96388},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2912, col: 8, offset: 96461},
									expr: &anyMatcher{
										line: 2912, col: 9, offset: 96462,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 150, col: 1, offset: 4149},
			expr: &actionExpr{
				pos: position{line: 150, col: 15, offset: 4163},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 150, col: 15, offset: 4163},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 150, col: 15, offset: 4163},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 150, col: 22, offset: 4170},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 157, col: 23, offset: 4353},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 157, col: 23, offset: 4353},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 157, col: 23, offset: 4353},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 157, col: 30, offset: 4360},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 166, col: 19, offset: 4718},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 166, col: 19, offset: 4718},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 166, col: 19, offset: 4718},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 2891, col: 12, offset: 96014},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 2891, col: 13, offset: 96015},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2891, col: 13, offset: 96015},
																							expr: &litMatcher{
																								pos:        position{line: 2891, col: 13, offset: 96015},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2891, col: 18, offset: 96020},
																							expr: &charClassMatcher{
																								pos:        position{line: 2891, col: 18, offset: 96020},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 166, col: 35, offset: 4734},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 166, col: 40, offset: 4739},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 2891, col: 12, offset: 96014},
																				run: (*parser).callonLineRanges20,
																				expr: &seqExpr{
																					pos: position{line: 2891, col: 13, offset: 96015},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2891, col: 13, offset: 96015},
																							expr: &litMatcher{
																								pos:        position{line: 2891, col: 13, offset: 96015},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2891, col: 18, offset: 96020},
																							expr: &charClassMatcher{
																								pos:        position{line: 2891, col: 18, offset: 96020},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 170, col: 20, offset: 4860},
																run: (*parser).callonLineRanges26,
																expr: &labeledExpr{
																	pos:   position{line: 170, col: 20, offset: 4860},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 2891, col: 12, offset: 96014},
																		run: (*parser).callonLineRanges28,
																		expr: &seqExpr{
																			pos: position{line: 2891, col: 13, offset: 96015},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2891, col: 13, offset: 96015},
																					expr: &litMatcher{
																						pos:        position{line: 2891, col: 13, offset: 96015},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2891, col: 18, offset: 96020},
																					expr: &charClassMatcher{
																						pos:        position{line: 2891, col: 18, offset: 96020},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 158, col: 5, offset: 4399},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 158, col: 12, offset: 4406},
														expr: &actionExpr{
															pos: position{line: 159, col: 9, offset: 4416},
															run: (*parser).callonLineRanges36,
															expr: &seqExpr{
																pos: position{line: 159, col: 9, offset: 4416},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 159, col: 10, offset: 4417},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 160, col: 9, offset: 4534},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 160, col: 16, offset: 4541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 166, col: 19, offset: 4718},
																					run: (*parser).callonLineRanges41,
																					expr: &seqExpr{
																						pos: position{line: 166, col: 19, offset: 4718},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 166, col: 19, offset: 4718},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 2891, col: 12, offset: 96014},
																									run: (*parser).callonLineRanges44,
																									expr: &seqExpr{
																										pos: position{line: 2891, col: 13, offset: 96015},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2891, col: 13, offset: 96015},
																												expr: &litMatcher{
																													pos:        position{line: 2891, col: 13, offset: 96015},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2891, col: 18, offset: 96020},
																												expr: &charClassMatcher{
																													pos:        position{line: 2891, col: 18, offset: 96020},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 166, col: 35, offset: 4734},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 166, col: 40, offset: 4739},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 2891, col: 12, offset: 96014},
																									run: (*parser).callonLineRanges52,
																									expr: &seqExpr{
																										pos: position{line: 2891, col: 13, offset: 96015},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2891, col: 13, offset: 96015},
																												expr: &litMatcher{
																													pos:        position{line: 2891, col: 13, offset: 96015},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2891, col: 18, offset: 96020},
																												expr: &charClassMatcher{
																													pos:        position{line: 2891, col: 18, offset: 96020},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 170, col: 20, offset: 4860},
																					run: (*parser).callonLineRanges58,
																					expr: &labeledExpr{
																						pos:   position{line: 170, col: 20, offset: 4860},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 2891, col: 12, offset: 96014},
																							run: (*parser).callonLineRanges60,
																							expr: &seqExpr{
																								pos: position{line: 2891, col: 13, offset: 96015},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 2891, col: 13, offset: 96015},
																										expr: &litMatcher{
																											pos:        position{line: 2891, col: 13, offset: 96015},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2891, col: 18, offset: 96020},
																										expr: &charClassMatcher{
																											pos:        position{line: 2891, col: 18, offset: 96020},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 166, col: 19, offset: 4718},
										run: (*parser).callonLineRanges66,
										expr: &seqExpr{
											pos: position{line: 166, col: 19, offset: 4718},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 166, col: 19, offset: 4718},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 2891, col: 12, offset: 96014},
														run: (*parser).callonLineRanges69,
														expr: &seqExpr{
															pos: position{line: 2891, col: 13, offset: 96015},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2891, col: 13, offset: 96015},
																	expr: &litMatcher{
																		pos:        position{line: 2891, col: 13, offset: 96015},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2891, col: 18, offset: 96020},
																	expr: &charClassMatcher{
																		pos:        position{line: 2891, col: 18, offset: 96020},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 166, col: 35, offset: 4734},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 166, col: 40, offset: 4739},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 2891, col: 12, offset: 96014},
														run: (*parser).callonLineRanges77,
														expr: &seqExpr{
															pos: position{line: 2891, col: 13, offset: 96015},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2891, col: 13, offset: 96015},
																	expr: &litMatcher{
																		pos:        position{line: 2891, col: 13, offset: 96015},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2891, col: 18, offset: 96020},
																	expr: &charClassMatcher{
																		pos:        position{line: 2891, col: 18, offset: 96020},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 170, col: 20, offset: 4860},
										run: (*parser).callonLineRanges83,
										expr: &labeledExpr{
											pos:   position{line: 170, col: 20, offset: 4860},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 2891, col: 12, offset: 96014},
												run: (*parser).callonLineRanges85,
												expr: &seqExpr{
													pos: position{line: 2891, col: 13, offset: 96015},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 2891, col: 13, offset: 96015},
															expr: &litMatcher{
																pos:        position{line: 2891, col: 13, offset: 96015},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 2891, col: 18, offset: 96020},
															expr: &charClassMatcher{
																pos:        position{line: 2891, col: 18, offset: 96020},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2912, col: 8, offset: 96461},
							expr: &anyMatcher{
								line: 2912, col: 9, offset: 96462,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 175, col: 1, offset: 4996},
			expr: &actionExpr{
				pos: position{line: 175, col: 14, offset: 5009},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 175, col: 14, offset: 5009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 175, col: 14, offset: 5009},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 179, col: 22, offset: 5146},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 179, col: 22, offset: 5146},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 179, col: 22, offset: 5146},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 188, col: 13, offset: 5456},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 188, col: 13, offset: 5456},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 188, col: 13, offset: 5456},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 188, col: 18, offset: 5461},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2817, col: 14, offset: 93577},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2817, col: 14, offset: 93577},
																			expr: &charClassMatcher{
																				pos:        position{line: 2817, col: 14, offset: 93577},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 194, col: 16, offset: 5661},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 194, col: 16, offset: 5661},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 194, col: 16, offset: 5661},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 194, col: 23, offset: 5668},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 194, col: 23, offset: 5668},
																							expr: &litMatcher{
																								pos:        position{line: 194, col: 24, offset: 5669},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 197, col: 5, offset: 5723},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 190, col: 9, offset: 5549},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 190, col: 9, offset: 5549},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 190, col: 9, offset: 5549},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 190, col: 13, offset: 5553},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 190, col: 18, offset: 5558},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2817, col: 14, offset: 93577},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2817, col: 14, offset: 93577},
																					expr: &charClassMatcher{
																						pos:        position{line: 2817, col: 14, offset: 93577},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 194, col: 16, offset: 5661},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 194, col: 16, offset: 5661},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 194, col: 16, offset: 5661},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 194, col: 23, offset: 5668},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 194, col: 23, offset: 5668},
																									expr: &litMatcher{
																										pos:        position{line: 194, col: 24, offset: 5669},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 197, col: 5, offset: 5723},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 180, col: 5, offset: 5167},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 180, col: 12, offset: 5174},
												expr: &actionExpr{
													pos: position{line: 181, col: 9, offset: 5184},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 181, col: 9, offset: 5184},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 181, col: 10, offset: 5185},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 182, col: 9, offset: 5302},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 188, col: 13, offset: 5456},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 188, col: 13, offset: 5456},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 188, col: 13, offset: 5456},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 188, col: 18, offset: 5461},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2817, col: 14, offset: 93577},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2817, col: 14, offset: 93577},
																								expr: &charClassMatcher{
																									pos:        position{line: 2817, col: 14, offset: 93577},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 194, col: 16, offset: 5661},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 194, col: 16, offset: 5661},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 194, col: 16, offset: 5661},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 194, col: 23, offset: 5668},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 194, col: 23, offset: 5668},
																												expr: &litMatcher{
																													pos:        position{line: 194, col: 24, offset: 5669},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 197, col: 5, offset: 5723},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 190, col: 9, offset: 5549},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 190, col: 9, offset: 5549},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 190, col: 9, offset: 5549},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 190, col: 13, offset: 5553},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 190, col: 18, offset: 5558},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2817, col: 14, offset: 93577},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2817, col: 14, offset: 93577},
																										expr: &charClassMatcher{
																											pos:        position{line: 2817, col: 14, offset: 93577},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 194, col: 16, offset: 5661},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 194, col: 16, offset: 5661},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 194, col: 16, offset: 5661},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 194, col: 23, offset: 5668},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 194, col: 23, offset: 5668},
																														expr: &litMatcher{
																															pos:        position{line: 194, col: 24, offset: 5669},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 197, col: 5, offset: 5723},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2912, col: 8, offset: 96461},
							expr: &anyMatcher{
								line: 2912, col: 9, offset: 96462,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 204, col: 1, offset: 5890},
			expr: &actionExpr{
				pos: position{line: 204, col: 21, offset: 5910},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 204, col: 21, offset: 5910},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 204, col: 21, offset: 5910},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 204, col: 29, offset: 5918},
								expr: &choiceExpr{
									pos: position{line: 204, col: 30, offset: 5919},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 208, col: 25, offset: 6099},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 208, col: 25, offset: 6099},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 208, col: 25, offset: 6099},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 208, col: 33, offset: 6107},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 208, col: 38, offset: 6112},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2817, col: 14, offset: 93577},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2817, col: 14, offset: 93577},
																	expr: &charClassMatcher{
																		pos:        position{line: 2817, col: 14, offset: 93577},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 208, col: 78, offset: 6152},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 212, col: 23, offset: 6247},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 212, col: 23, offset: 6247},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 212, col: 23, offset: 6247},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 212, col: 31, offset: 6255},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 212, col: 36, offset: 6260},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2817, col: 14, offset: 93577},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2817, col: 14, offset: 93577},
																	expr: &charClassMatcher{
																		pos:        position{line: 2817, col: 14, offset: 93577},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 212, col: 76, offset: 6300},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 204, col: 74, offset: 5963},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 204, col: 74, offset: 5963,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2915, col: 8, offset: 96511},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2908, col: 12, offset: 96371},
									run: (*parser).callonIncludedFileLine27,
									expr: &choiceExpr{
										pos: position{line: 2908, col: 13, offset: 96372},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2908, col: 13, offset: 96372},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 20, offset: 96379},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 29, offset: 96388},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2912, col: 8, offset: 96461},
									expr: &anyMatcher{
										line: 2912, col: 9, offset: 96462,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragment",
			pos:  position{line: 228, col: 1, offset: 6786},
			expr: &actionExpr{
				pos: position{line: 229, col: 5, offset: 6810},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 229, col: 5, offset: 6810},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 229, col: 5, offset: 6810},
							expr: &notExpr{
								pos: position{line: 2912, col: 8, offset: 96461},
								expr: &anyMatcher{
									line: 2912, col: 9, offset: 96462,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 230, col: 5, offset: 6819},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 230, col: 16, offset: 6830},
								expr: &ruleRefExpr{
									pos:  position{line: 230, col: 17, offset: 6831},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 5, offset: 6853},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 13, offset: 6861},
								expr: &choiceExpr{
									pos: position{line: 232, col: 9, offset: 6871},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 232, col: 9, offset: 6871},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 233, col: 11, offset: 6932},
											name: "UserMacroBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 234, col: 11, offset: 6997},
											name: "ShortcutParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 235, col: 11, offset: 7025},
											name: "AttributeDeclaration",
										},
										&actionExpr{
											pos: position{line: 372, col: 19, offset: 11492},
											run: (*parser).callonDocumentFragment16,
											expr: &seqExpr{
												pos: position{line: 372, col: 19, offset: 11492},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 372, col: 19, offset: 11492},
														val:        ":!",
														ignoreCase: false,
														want:       "\":!\"",
													},
													&labeledExpr{
														pos:   position{line: 372, col: 24, offset: 11497},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 332, col: 18, offset: 10393},
															run: (*parser).callonDocumentFragment20,
															expr: &seqExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 332, col: 18, offset: 10393},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 332, col: 28, offset: 10403},
																		expr: &charClassMatcher{
																			pos:        position{line: 332, col: 29, offset: 10404},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 372, col: 45, offset: 11518},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 372, col: 49, offset: 11522},
														expr: &actionExpr{
															pos: position{line: 2899, col: 10, offset: 96187},
															run: (*parser).callonDocumentFragment27,
															expr: &charClassMatcher{
																pos:        position{line: 2899, col: 11, offset: 96188},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentFragment30,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 374, col: 5, offset: 11605},
											run: (*parser).callonDocumentFragment37,
											expr: &seqExpr{
												pos: position{line: 374, col: 5, offset: 11605},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 374, col: 5, offset: 11605},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&labeledExpr{
														pos:   position{line: 374, col: 9, offset: 11609},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 332, col: 18, offset: 10393},
															run: (*parser).callonDocumentFragment41,
															expr: &seqExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 332, col: 18, offset: 10393},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 332, col: 28, offset: 10403},
																		expr: &charClassMatcher{
																			pos:        position{line: 332, col: 29, offset: 10404},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 374, col: 30, offset: 11630},
														val:        "!:",
														ignoreCase: false,
														want:       "\"!:\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 374, col: 35, offset: 11635},
														expr: &actionExpr{
															pos: position{line: 2899, col: 10, offset: 96187},
															run: (*parser).callonDocumentFragment48,
															expr: &charClassMatcher{
																pos:        position{line: 2899, col: 11, offset: 96188},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentFragment51,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 11, offset: 7081},
											name: "DocumentHeader",
										},
										&actionExpr{
											pos: position{line: 685, col: 14, offset: 22145},
											run: (*parser).callonDocumentFragment59,
											expr: &seqExpr{
												pos: position{line: 685, col: 14, offset: 22145},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														expr: &notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 685, col: 19, offset: 22150},
														expr: &actionExpr{
															pos: position{line: 2899, col: 10, offset: 96187},
															run: (*parser).callonDocumentFragment65,
															expr: &charClassMatcher{
																pos:        position{line: 2899, col: 11, offset: 96188},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentFragment68,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2468, col: 5, offset: 83103},
											run: (*parser).callonDocumentFragment75,
											expr: &seqExpr{
												pos: position{line: 2468, col: 5, offset: 83103},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2468, col: 5, offset: 83103},
														run: (*parser).callonDocumentFragment77,
													},
													&labeledExpr{
														pos:   position{line: 2471, col: 5, offset: 83166},
														label: "level",
														expr: &actionExpr{
															pos: position{line: 2471, col: 12, offset: 83173},
															run: (*parser).callonDocumentFragment79,
															expr: &oneOrMoreExpr{
																pos: position{line: 2471, col: 12, offset: 83173},
																expr: &litMatcher{
																	pos:        position{line: 2471, col: 13, offset: 83174},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 2475, col: 5, offset: 83282},
														run: (*parser).callonDocumentFragment82,
													},
													&actionExpr{
														pos: position{line: 2903, col: 11, offset: 96254},
														run: (*parser).callonDocumentFragment83,
														expr: &oneOrMoreExpr{
															pos: position{line: 2903, col: 11, offset: 96254},
															expr: &charClassMatcher{
																pos:        position{line: 2903, col: 12, offset: 96255},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2479, col: 12, offset: 83441},
														label: "title",
														expr: &actionExpr{
															pos: position{line: 2483, col: 17, offset: 83560},
															run: (*parser).callonDocumentFragment87,
															expr: &oneOrMoreExpr{
																pos: position{line: 2483, col: 17, offset: 83560},
																expr: &charClassMatcher{
																	pos:        position{line: 2483, col: 17, offset: 83560},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentFragment91,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 798, col: 5, offset: 25649},
											run: (*parser).callonDocumentFragment98,
											expr: &seqExpr{
												pos: position{line: 798, col: 5, offset: 25649},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 746, col: 26, offset: 24217},
														run: (*parser).callonDocumentFragment100,
														expr: &seqExpr{
															pos: position{line: 746, col: 26, offset: 24217},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 746, col: 26, offset: 24217},
																	val:        "////",
																	ignoreCase: false,
																	want:       "\"////\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 746, col: 33, offset: 24224},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonDocumentFragment104,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonDocumentFragment107,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 799, col: 5, offset: 25680},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 810, col: 5, offset: 26004},
															expr: &actionExpr{
																pos: position{line: 810, col: 6, offset: 26005},
																run: (*parser).callonDocumentFragment116,
																expr: &seqExpr{
																	pos: position{line: 810, col: 6, offset: 26005},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 810, col: 6, offset: 26005},
																			expr: &choiceExpr{
																				pos: position{line: 807, col: 29, offset: 25947},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 746, col: 26, offset: 24217},
																						run: (*parser).callonDocumentFragment120,
																						expr: &seqExpr{
																							pos: position{line: 746, col: 26, offset: 24217},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 746, col: 26, offset: 24217},
																									val:        "////",
																									ignoreCase: false,
																									want:       "\"////\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 746, col: 33, offset: 24224},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment124,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment127,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 811, col: 5, offset: 26035},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				run: (*parser).callonDocumentFragment137,
																				expr: &seqExpr{
																					pos: position{line: 787, col: 5, offset: 25344},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 787, col: 5, offset: 25344},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25417},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								run: (*parser).callonDocumentFragment143,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 788, col: 14, offset: 25426},
																									expr: &charClassMatcher{
																										pos:        position{line: 788, col: 14, offset: 25426},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentFragment147,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 800, col: 5, offset: 25714},
														expr: &choiceExpr{
															pos: position{line: 807, col: 29, offset: 25947},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 746, col: 26, offset: 24217},
																	run: (*parser).callonDocumentFragment156,
																	expr: &seqExpr{
																		pos: position{line: 746, col: 26, offset: 24217},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 746, col: 26, offset: 24217},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 746, col: 33, offset: 24224},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonDocumentFragment160,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentFragment163,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 819, col: 5, offset: 26188},
											run: (*parser).callonDocumentFragment172,
											expr: &seqExpr{
												pos: position{line: 819, col: 5, offset: 26188},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 750, col: 26, offset: 24331},
														run: (*parser).callonDocumentFragment174,
														expr: &seqExpr{
															pos: position{line: 750, col: 26, offset: 24331},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 750, col: 26, offset: 24331},
																	val:        "====",
																	ignoreCase: false,
																	want:       "\"====\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 750, col: 33, offset: 24338},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonDocumentFragment178,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonDocumentFragment181,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 820, col: 5, offset: 26219},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 831, col: 4, offset: 26542},
															expr: &actionExpr{
																pos: position{line: 831, col: 5, offset: 26543},
																run: (*parser).callonDocumentFragment190,
																expr: &seqExpr{
																	pos: position{line: 831, col: 5, offset: 26543},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 831, col: 5, offset: 26543},
																			expr: &choiceExpr{
																				pos: position{line: 828, col: 29, offset: 26486},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 750, col: 26, offset: 24331},
																						run: (*parser).callonDocumentFragment194,
																						expr: &seqExpr{
																							pos: position{line: 750, col: 26, offset: 24331},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 750, col: 26, offset: 24331},
																									val:        "====",
																									ignoreCase: false,
																									want:       "\"====\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 750, col: 33, offset: 24338},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment198,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment201,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 832, col: 5, offset: 26573},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				run: (*parser).callonDocumentFragment211,
																				expr: &seqExpr{
																					pos: position{line: 787, col: 5, offset: 25344},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 787, col: 5, offset: 25344},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25417},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								run: (*parser).callonDocumentFragment217,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 788, col: 14, offset: 25426},
																									expr: &charClassMatcher{
																										pos:        position{line: 788, col: 14, offset: 25426},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentFragment221,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 821, col: 5, offset: 26253},
														expr: &choiceExpr{
															pos: position{line: 828, col: 29, offset: 26486},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 750, col: 26, offset: 24331},
																	run: (*parser).callonDocumentFragment230,
																	expr: &seqExpr{
																		pos: position{line: 750, col: 26, offset: 24331},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 750, col: 26, offset: 24331},
																				val:        "====",
																				ignoreCase: false,
																				want:       "\"====\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 750, col: 33, offset: 24338},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonDocumentFragment234,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentFragment237,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 903, col: 5, offset: 28353},
											run: (*parser).callonDocumentFragment246,
											expr: &seqExpr{
												pos: position{line: 903, col: 5, offset: 28353},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 903, col: 5, offset: 28353},
														label: "delimiter",
														expr: &actionExpr{
															pos: position{line: 758, col: 26, offset: 24556},
															run: (*parser).callonDocumentFragment249,
															expr: &seqExpr{
																pos: position{line: 758, col: 26, offset: 24556},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 758, col: 26, offset: 24556},
																		val:        "```",
																		ignoreCase: false,
																		want:       "\"```\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 758, col: 32, offset: 24562},
																		label: "language",
																		expr: &actionExpr{
																			pos: position{line: 762, col: 13, offset: 24692},
																			run: (*parser).callonDocumentFragment253,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 762, col: 14, offset: 24693},
																				expr: &charClassMatcher{
																					pos:        position{line: 762, col: 14, offset: 24693},
																					val:        "[^\\r\\n ]",
																					chars:      []rune{'\r', '\n', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 758, col: 52, offset: 24582},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonDocumentFragment257,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonDocumentFragment260,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 904, col: 5, offset: 28399},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 918, col: 5, offset: 28916},
															expr: &actionExpr{
																pos: position{line: 918, col: 6, offset: 28917},
																run: (*parser).callonDocumentFragment269,
																expr: &seqExpr{
																	pos: position{line: 918, col: 6, offset: 28917},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 918, col: 6, offset: 28917},
																			expr: &choiceExpr{
																				pos: position{line: 849, col: 28, offset: 27022},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 754, col: 25, offset: 24444},
																						run: (*parser).callonDocumentFragment273,
																						expr: &seqExpr{
																							pos: position{line: 754, col: 25, offset: 24444},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 754, col: 25, offset: 24444},
																									val:        "```",
																									ignoreCase: false,
																									want:       "\"```\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 754, col: 31, offset: 24450},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment277,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment280,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 919, col: 5, offset: 28952},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				run: (*parser).callonDocumentFragment290,
																				expr: &seqExpr{
																					pos: position{line: 787, col: 5, offset: 25344},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 787, col: 5, offset: 25344},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25417},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								run: (*parser).callonDocumentFragment296,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 788, col: 14, offset: 25426},
																									expr: &charClassMatcher{
																										pos:        position{line: 788, col: 14, offset: 25426},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentFragment300,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 905, col: 5, offset: 28438},
														expr: &choiceExpr{
															pos: position{line: 849, col: 28, offset: 27022},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 754, col: 25, offset: 24444},
																	run: (*parser).callonDocumentFragment309,
																	expr: &seqExpr{
																		pos: position{line: 754, col: 25, offset: 24444},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 754, col: 25, offset: 24444},
																				val:        "```",
																				ignoreCase: false,
																				want:       "\"```\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 754, col: 31, offset: 24450},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonDocumentFragment313,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentFragment316,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 840, col: 5, offset: 26726},
											run: (*parser).callonDocumentFragment325,
											expr: &seqExpr{
												pos: position{line: 840, col: 5, offset: 26726},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 754, col: 25, offset: 24444},
														run: (*parser).callonDocumentFragment327,
														expr: &seqExpr{
															pos: position{line: 754, col: 25, offset: 24444},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 754, col: 25, offset: 24444},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 754, col: 31, offset: 24450},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonDocumentFragment331,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonDocumentFragment334,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 841, col: 5, offset: 26756},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 852, col: 5, offset: 27077},
															expr: &actionExpr{
																pos: position{line: 852, col: 6, offset: 27078},
																run: (*parser).callonDocumentFragment343,
																expr: &seqExpr{
																	pos: position{line: 852, col: 6, offset: 27078},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 852, col: 6, offset: 27078},
																			expr: &choiceExpr{
																				pos: position{line: 849, col: 28, offset: 27022},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 754, col: 25, offset: 24444},
																						run: (*parser).callonDocumentFragment347,
																						expr: &seqExpr{
																							pos: position{line: 754, col: 25, offset: 24444},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 754, col: 25, offset: 24444},
																									val:        "```",
																									ignoreCase: false,
																									want:       "\"```\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 754, col: 31, offset: 24450},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment351,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment354,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 853, col: 5, offset: 27107},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				run: (*parser).callonDocumentFragment364,
																				expr: &seqExpr{
																					pos: position{line: 787, col: 5, offset: 25344},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 787, col: 5, offset: 25344},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25417},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								run: (*parser).callonDocumentFragment370,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 788, col: 14, offset: 25426},
																									expr: &charClassMatcher{
																										pos:        position{line: 788, col: 14, offset: 25426},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentFragment374,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 842, col: 5, offset: 26789},
														expr: &choiceExpr{
															pos: position{line: 849, col: 28, offset: 27022},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 754, col: 25, offset: 24444},
																	run: (*parser).callonDocumentFragment383,
																	expr: &seqExpr{
																		pos: position{line: 754, col: 25, offset: 24444},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 754, col: 25, offset: 24444},
																				val:        "```",
																				ignoreCase: false,
																				want:       "\"```\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 754, col: 31, offset: 24450},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonDocumentFragment387,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentFragment390,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 861, col: 5, offset: 27262},
											run: (*parser).callonDocumentFragment399,
											expr: &seqExpr{
												pos: position{line: 861, col: 5, offset: 27262},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 766, col: 26, offset: 24765},
														run: (*parser).callonDocumentFragment401,
														expr: &seqExpr{
															pos: position{line: 766, col: 26, offset: 24765},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 766, col: 26, offset: 24765},
																	val:        "----",
																	ignoreCase: false,
																	want:       "\"----\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 766, col: 33, offset: 24772},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonDocumentFragment405,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonDocumentFragment408,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 862, col: 5, offset: 27293},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 873, col: 5, offset: 27622},
															expr: &actionExpr{
																pos: position{line: 873, col: 6, offset: 27623},
																run: (*parser).callonDocumentFragment417,
																expr: &seqExpr{
																	pos: position{line: 873, col: 6, offset: 27623},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 873, col: 6, offset: 27623},
																			expr: &choiceExpr{
																				pos: position{line: 870, col: 29, offset: 27565},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 766, col: 26, offset: 24765},
																						run: (*parser).callonDocumentFragment421,
																						expr: &seqExpr{
																							pos: position{line: 766, col: 26, offset: 24765},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 766, col: 26, offset: 24765},
																									val:        "----",
																									ignoreCase: false,
																									want:       "\"----\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 766, col: 33, offset: 24772},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment425,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment428,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 874, col: 5, offset: 27653},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				run: (*parser).callonDocumentFragment438,
																				expr: &seqExpr{
																					pos: position{line: 787, col: 5, offset: 25344},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 787, col: 5, offset: 25344},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25417},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								run: (*parser).callonDocumentFragment444,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 788, col: 14, offset: 25426},
																									expr: &charClassMatcher{
																										pos:        position{line: 788, col: 14, offset: 25426},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentFragment448,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 863, col: 5, offset: 27327},
														expr: &choiceExpr{
															pos: position{line: 870, col: 29, offset: 27565},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 766, col: 26, offset: 24765},
																	run: (*parser).callonDocumentFragment457,
																	expr: &seqExpr{
																		pos: position{line: 766, col: 26, offset: 24765},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 766, col: 26, offset: 24765},
																				val:        "----",
																				ignoreCase: false,
																				want:       "\"----\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 766, col: 33, offset: 24772},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonDocumentFragment461,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentFragment464,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 882, col: 5, offset: 27808},
											run: (*parser).callonDocumentFragment473,
											expr: &seqExpr{
												pos: position{line: 882, col: 5, offset: 27808},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 770, col: 26, offset: 24879},
														run: (*parser).callonDocumentFragment475,
														expr: &seqExpr{
															pos: position{line: 770, col: 26, offset: 24879},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 770, col: 26, offset: 24879},
																	val:        "....",
																	ignoreCase: false,
																	want:       "\"....\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 770, col: 33, offset: 24886},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonDocumentFragment479,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonDocumentFragment482,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 883, col: 5, offset: 27839},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 894, col: 5, offset: 28163},
															expr: &actionExpr{
																pos: position{line: 894, col: 6, offset: 28164},
																run: (*parser).callonDocumentFragment491,
																expr: &seqExpr{
																	pos: position{line: 894, col: 6, offset: 28164},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 894, col: 6, offset: 28164},
																			expr: &choiceExpr{
																				pos: position{line: 891, col: 29, offset: 28106},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 770, col: 26, offset: 24879},
																						run: (*parser).callonDocumentFragment495,
																						expr: &seqExpr{
																							pos: position{line: 770, col: 26, offset: 24879},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 770, col: 26, offset: 24879},
																									val:        "....",
																									ignoreCase: false,
																									want:       "\"....\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 770, col: 33, offset: 24886},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment499,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment502,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 895, col: 5, offset: 28194},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				run: (*parser).callonDocumentFragment512,
																				expr: &seqExpr{
																					pos: position{line: 787, col: 5, offset: 25344},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 787, col: 5, offset: 25344},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25417},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								run: (*parser).callonDocumentFragment518,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 788, col: 14, offset: 25426},
																									expr: &charClassMatcher{
																										pos:        position{line: 788, col: 14, offset: 25426},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentFragment522,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 884, col: 5, offset: 27873},
														expr: &choiceExpr{
															pos: position{line: 891, col: 29, offset: 28106},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 770, col: 26, offset: 24879},
																	run: (*parser).callonDocumentFragment531,
																	expr: &seqExpr{
																		pos: position{line: 770, col: 26, offset: 24879},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 770, col: 26, offset: 24879},
																				val:        "....",
																				ignoreCase: false,
																				want:       "\"....\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 770, col: 33, offset: 24886},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonDocumentFragment535,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentFragment538,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 927, col: 5, offset: 29121},
											run: (*parser).callonDocumentFragment547,
											expr: &seqExpr{
												pos: position{line: 927, col: 5, offset: 29121},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 927, col: 5, offset: 29121},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 934, col: 5, offset: 29380},
															run: (*parser).callonDocumentFragment550,
															expr: &seqExpr{
																pos: position{line: 934, col: 5, offset: 29380},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 934, col: 5, offset: 29380},
																		expr: &actionExpr{
																			pos: position{line: 685, col: 14, offset: 22145},
																			run: (*parser).callonDocumentFragment553,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 14, offset: 22145},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 685, col: 14, offset: 22145},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 19, offset: 22150},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonDocumentFragment559,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonDocumentFragment562,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 935, col: 5, offset: 29395},
																		val:        "> ",
																		ignoreCase: false,
																		want:       "\"> \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 936, col: 5, offset: 29405},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 936, col: 14, offset: 29414},
																			run: (*parser).callonDocumentFragment571,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 936, col: 15, offset: 29415},
																				expr: &charClassMatcher{
																					pos:        position{line: 936, col: 15, offset: 29415},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonDocumentFragment575,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 928, col: 5, offset: 29158},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 928, col: 16, offset: 29169},
															expr: &choiceExpr{
																pos: position{line: 928, col: 17, offset: 29170},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 934, col: 5, offset: 29380},
																		run: (*parser).callonDocumentFragment585,
																		expr: &seqExpr{
																			pos: position{line: 934, col: 5, offset: 29380},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 934, col: 5, offset: 29380},
																					expr: &actionExpr{
																						pos: position{line: 685, col: 14, offset: 22145},
																						run: (*parser).callonDocumentFragment588,
																						expr: &seqExpr{
																							pos: position{line: 685, col: 14, offset: 22145},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 685, col: 14, offset: 22145},
																									expr: &notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 685, col: 19, offset: 22150},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment594,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment597,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 935, col: 5, offset: 29395},
																					val:        "> ",
																					ignoreCase: false,
																					want:       "\"> \"",
																				},
																				&labeledExpr{
																					pos:   position{line: 936, col: 5, offset: 29405},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 936, col: 14, offset: 29414},
																						run: (*parser).callonDocumentFragment606,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 936, col: 15, offset: 29415},
																							expr: &charClassMatcher{
																								pos:        position{line: 936, col: 15, offset: 29415},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonDocumentFragment610,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1716, col: 5, offset: 56453},
																		run: (*parser).callonDocumentFragment617,
																		expr: &seqExpr{
																			pos: position{line: 1716, col: 5, offset: 56453},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1716, col: 5, offset: 56453},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1716, col: 14, offset: 56462},
																						run: (*parser).callonDocumentFragment620,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1716, col: 14, offset: 56462},
																							expr: &charClassMatcher{
																								pos:        position{line: 1716, col: 14, offset: 56462},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1719, col: 5, offset: 56569},
																					run: (*parser).callonDocumentFragment623,
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonDocumentFragment625,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 953, col: 5, offset: 29773},
											run: (*parser).callonDocumentFragment632,
											expr: &seqExpr{
												pos: position{line: 953, col: 5, offset: 29773},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 774, col: 30, offset: 24997},
														run: (*parser).callonDocumentFragment634,
														expr: &seqExpr{
															pos: position{line: 774, col: 30, offset: 24997},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 774, col: 30, offset: 24997},
																	val:        "++++",
																	ignoreCase: false,
																	want:       "\"++++\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 774, col: 37, offset: 25004},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonDocumentFragment638,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonDocumentFragment641,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 954, col: 5, offset: 29808},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 965, col: 5, offset: 30164},
															expr: &actionExpr{
																pos: position{line: 965, col: 6, offset: 30165},
																run: (*parser).callonDocumentFragment650,
																expr: &seqExpr{
																	pos: position{line: 965, col: 6, offset: 30165},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 965, col: 6, offset: 30165},
																			expr: &choiceExpr{
																				pos: position{line: 962, col: 33, offset: 30099},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 774, col: 30, offset: 24997},
																						run: (*parser).callonDocumentFragment654,
																						expr: &seqExpr{
																							pos: position{line: 774, col: 30, offset: 24997},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 774, col: 30, offset: 24997},
																									val:        "++++",
																									ignoreCase: false,
																									want:       "\"++++\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 774, col: 37, offset: 25004},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment658,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment661,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 966, col: 5, offset: 30199},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				run: (*parser).callonDocumentFragment671,
																				expr: &seqExpr{
																					pos: position{line: 787, col: 5, offset: 25344},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 787, col: 5, offset: 25344},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25417},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								run: (*parser).callonDocumentFragment677,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 788, col: 14, offset: 25426},
																									expr: &charClassMatcher{
																										pos:        position{line: 788, col: 14, offset: 25426},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentFragment681,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 955, col: 5, offset: 29846},
														expr: &choiceExpr{
															pos: position{line: 962, col: 33, offset: 30099},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 774, col: 30, offset: 24997},
																	run: (*parser).callonDocumentFragment690,
																	expr: &seqExpr{
																		pos: position{line: 774, col: 30, offset: 24997},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 774, col: 30, offset: 24997},
																				val:        "++++",
																				ignoreCase: false,
																				want:       "\"++++\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 774, col: 37, offset: 25004},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonDocumentFragment694,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentFragment697,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 974, col: 5, offset: 30350},
											run: (*parser).callonDocumentFragment706,
											expr: &seqExpr{
												pos: position{line: 974, col: 5, offset: 30350},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 778, col: 24, offset: 25113},
														run: (*parser).callonDocumentFragment708,
														expr: &seqExpr{
															pos: position{line: 778, col: 24, offset: 25113},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 778, col: 24, offset: 25113},
																	val:        "____",
																	ignoreCase: false,
																	want:       "\"____\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 778, col: 31, offset: 25120},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonDocumentFragment712,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonDocumentFragment715,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 975, col: 5, offset: 30379},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 986, col: 4, offset: 30686},
															expr: &actionExpr{
																pos: position{line: 986, col: 5, offset: 30687},
																run: (*parser).callonDocumentFragment724,
																expr: &seqExpr{
																	pos: position{line: 986, col: 5, offset: 30687},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 986, col: 5, offset: 30687},
																			expr: &choiceExpr{
																				pos: position{line: 983, col: 27, offset: 30634},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 778, col: 24, offset: 25113},
																						run: (*parser).callonDocumentFragment728,
																						expr: &seqExpr{
																							pos: position{line: 778, col: 24, offset: 25113},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 778, col: 24, offset: 25113},
																									val:        "____",
																									ignoreCase: false,
																									want:       "\"____\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 778, col: 31, offset: 25120},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment732,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment735,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 987, col: 5, offset: 30715},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				run: (*parser).callonDocumentFragment745,
																				expr: &seqExpr{
																					pos: position{line: 787, col: 5, offset: 25344},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 787, col: 5, offset: 25344},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25417},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								run: (*parser).callonDocumentFragment751,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 788, col: 14, offset: 25426},
																									expr: &charClassMatcher{
																										pos:        position{line: 788, col: 14, offset: 25426},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentFragment755,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 976, col: 5, offset: 30411},
														expr: &choiceExpr{
															pos: position{line: 983, col: 27, offset: 30634},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 778, col: 24, offset: 25113},
																	run: (*parser).callonDocumentFragment764,
																	expr: &seqExpr{
																		pos: position{line: 778, col: 24, offset: 25113},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 778, col: 24, offset: 25113},
																				val:        "____",
																				ignoreCase: false,
																				want:       "\"____\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 778, col: 31, offset: 25120},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonDocumentFragment768,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentFragment771,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 995, col: 5, offset: 30870},
											run: (*parser).callonDocumentFragment780,
											expr: &seqExpr{
												pos: position{line: 995, col: 5, offset: 30870},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 782, col: 26, offset: 25225},
														run: (*parser).callonDocumentFragment782,
														expr: &seqExpr{
															pos: position{line: 782, col: 26, offset: 25225},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 782, col: 26, offset: 25225},
																	val:        "****",
																	ignoreCase: false,
																	want:       "\"****\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 782, col: 33, offset: 25232},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonDocumentFragment786,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonDocumentFragment789,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 996, col: 5, offset: 30901},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1007, col: 4, offset: 31226},
															expr: &actionExpr{
																pos: position{line: 1007, col: 5, offset: 31227},
																run: (*parser).callonDocumentFragment798,
																expr: &seqExpr{
																	pos: position{line: 1007, col: 5, offset: 31227},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1007, col: 5, offset: 31227},
																			expr: &choiceExpr{
																				pos: position{line: 1004, col: 29, offset: 31169},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 782, col: 26, offset: 25225},
																						run: (*parser).callonDocumentFragment802,
																						expr: &seqExpr{
																							pos: position{line: 782, col: 26, offset: 25225},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 782, col: 26, offset: 25225},
																									val:        "****",
																									ignoreCase: false,
																									want:       "\"****\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 782, col: 33, offset: 25232},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment806,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment809,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1008, col: 5, offset: 31257},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				run: (*parser).callonDocumentFragment819,
																				expr: &seqExpr{
																					pos: position{line: 787, col: 5, offset: 25344},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 787, col: 5, offset: 25344},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25417},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								run: (*parser).callonDocumentFragment825,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 788, col: 14, offset: 25426},
																									expr: &charClassMatcher{
																										pos:        position{line: 788, col: 14, offset: 25426},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentFragment829,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 997, col: 5, offset: 30935},
														expr: &choiceExpr{
															pos: position{line: 1004, col: 29, offset: 31169},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 782, col: 26, offset: 25225},
																	run: (*parser).callonDocumentFragment838,
																	expr: &seqExpr{
																		pos: position{line: 782, col: 26, offset: 25225},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 782, col: 26, offset: 25225},
																				val:        "****",
																				ignoreCase: false,
																				want:       "\"****\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 782, col: 33, offset: 25232},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonDocumentFragment842,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentFragment845,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2768, col: 18, offset: 91974},
											run: (*parser).callonDocumentFragment854,
											expr: &seqExpr{
												pos: position{line: 2768, col: 18, offset: 91974},
												exprs: []interface{}{
													&choiceExpr{
														pos: position{line: 2769, col: 9, offset: 91984},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2769, col: 9, offset: 91984},
																val:        "'''",
																ignoreCase: false,
																want:       "\"'''\"",
															},
															&litMatcher{
																pos:        position{line: 2770, col: 11, offset: 92020},
																val:        "***",
																ignoreCase: false,
																want:       "\"***\"",
															},
															&litMatcher{
																pos:        position{line: 2770, col: 19, offset: 92028},
																val:        "* * *",
																ignoreCase: false,
																want:       "\"* * *\"",
															},
															&litMatcher{
																pos:        position{line: 2770, col: 29, offset: 92038},
																val:        "---",
																ignoreCase: false,
																want:       "\"---\"",
															},
															&litMatcher{
																pos:        position{line: 2770, col: 37, offset: 92046},
																val:        "- - -",
																ignoreCase: false,
																want:       "\"- - -\"",
															},
															&litMatcher{
																pos:        position{line: 2770, col: 47, offset: 92056},
																val:        "___",
																ignoreCase: false,
																want:       "\"___\"",
															},
															&litMatcher{
																pos:        position{line: 2770, col: 55, offset: 92064},
																val:        "_ _ _",
																ignoreCase: false,
																want:       "\"_ _ _\"",
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 2771, col: 11, offset: 92122},
														expr: &actionExpr{
															pos: position{line: 2899, col: 10, offset: 96187},
															run: (*parser).callonDocumentFragment865,
															expr: &charClassMatcher{
																pos:        position{line: 2899, col: 11, offset: 96188},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentFragment868,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentFragment876,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 242, col: 11, offset: 7385},
											name: "ListElements",
										},
										&actionExpr{
											pos: position{line: 2666, col: 5, offset: 89103},
											run: (*parser).callonDocumentFragment884,
											expr: &seqExpr{
												pos: position{line: 2666, col: 5, offset: 89103},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2674, col: 19, offset: 89280},
														val:        "|===",
														ignoreCase: false,
														want:       "\"|===\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2674, col: 26, offset: 89287},
														expr: &actionExpr{
															pos: position{line: 2899, col: 10, offset: 96187},
															run: (*parser).callonDocumentFragment888,
															expr: &charClassMatcher{
																pos:        position{line: 2899, col: 11, offset: 96188},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentFragment891,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2667, col: 5, offset: 89127},
														label: "header",
														expr: &zeroOrOneExpr{
															pos: position{line: 2667, col: 12, offset: 89134},
															expr: &actionExpr{
																pos: position{line: 2682, col: 5, offset: 89447},
																run: (*parser).callonDocumentFragment900,
																expr: &seqExpr{
																	pos: position{line: 2682, col: 5, offset: 89447},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 2682, col: 5, offset: 89447},
																			label: "cells",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2682, col: 11, offset: 89453},
																				expr: &actionExpr{
																					pos: position{line: 2688, col: 5, offset: 89570},
																					run: (*parser).callonDocumentFragment904,
																					expr: &seqExpr{
																						pos: position{line: 2688, col: 5, offset: 89570},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2688, col: 5, offset: 89570},
																								val:        "|",
																								ignoreCase: false,
																								want:       "\"|\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2688, col: 9, offset: 89574},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonDocumentFragment908,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2689, col: 5, offset: 89586},
																								label: "content",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 2689, col: 14, offset: 89595},
																									expr: &actionExpr{
																										pos: position{line: 2721, col: 5, offset: 90383},
																										run: (*parser).callonDocumentFragment912,
																										expr: &labeledExpr{
																											pos:   position{line: 2721, col: 5, offset: 90383},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2721, col: 14, offset: 90392},
																												run: (*parser).callonDocumentFragment914,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2721, col: 14, offset: 90392},
																													expr: &charClassMatcher{
																														pos:        position{line: 2721, col: 14, offset: 90392},
																														val:        "[^\\r\\n|]",
																														chars:      []rune{'\r', '\n', '|'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonDocumentFragment918,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2683, col: 5, offset: 89475},
																			expr: &actionExpr{
																				pos: position{line: 685, col: 14, offset: 22145},
																				run: (*parser).callonDocumentFragment926,
																				expr: &seqExpr{
																					pos: position{line: 685, col: 14, offset: 22145},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 685, col: 14, offset: 22145},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 685, col: 19, offset: 22150},
																							expr: &actionExpr{
																								pos: position{line: 2899, col: 10, offset: 96187},
																								run: (*parser).callonDocumentFragment932,
																								expr: &charClassMatcher{
																									pos:        position{line: 2899, col: 11, offset: 96188},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentFragment935,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2668, col: 5, offset: 89153},
														label: "rows",
														expr: &zeroOrMoreExpr{
															pos: position{line: 2668, col: 10, offset: 89158},
															expr: &choiceExpr{
																pos: position{line: 2693, col: 13, offset: 89692},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2703, col: 5, offset: 89911},
																		run: (*parser).callonDocumentFragment945,
																		expr: &seqExpr{
																			pos: position{line: 2703, col: 5, offset: 89911},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2703, col: 5, offset: 89911},
																					expr: &choiceExpr{
																						pos: position{line: 2678, col: 22, offset: 89360},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2674, col: 19, offset: 89280},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2674, col: 19, offset: 89280},
																										val:        "|===",
																										ignoreCase: false,
																										want:       "\"|===\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2674, col: 26, offset: 89287},
																										expr: &actionExpr{
																											pos: position{line: 2899, col: 10, offset: 96187},
																											run: (*parser).callonDocumentFragment952,
																											expr: &charClassMatcher{
																												pos:        position{line: 2899, col: 11, offset: 96188},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2915, col: 8, offset: 96511},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2908, col: 12, offset: 96371},
																												run: (*parser).callonDocumentFragment955,
																												expr: &choiceExpr{
																													pos: position{line: 2908, col: 13, offset: 96372},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2908, col: 13, offset: 96372},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 20, offset: 96379},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 29, offset: 96388},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2704, col: 5, offset: 89934},
																					label: "cells",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2704, col: 11, offset: 89940},
																						expr: &actionExpr{
																							pos: position{line: 2704, col: 12, offset: 89941},
																							run: (*parser).callonDocumentFragment966,
																							expr: &seqExpr{
																								pos: position{line: 2704, col: 12, offset: 89941},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 2704, col: 12, offset: 89941},
																										label: "cell",
																										expr: &actionExpr{
																											pos: position{line: 2713, col: 5, offset: 90182},
																											run: (*parser).callonDocumentFragment969,
																											expr: &seqExpr{
																												pos: position{line: 2713, col: 5, offset: 90182},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 2713, col: 5, offset: 90182},
																														expr: &choiceExpr{
																															pos: position{line: 2678, col: 22, offset: 89360},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2674, col: 19, offset: 89280},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2674, col: 19, offset: 89280},
																																			val:        "|===",
																																			ignoreCase: false,
																																			want:       "\"|===\"",
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 2674, col: 26, offset: 89287},
																																			expr: &actionExpr{
																																				pos: position{line: 2899, col: 10, offset: 96187},
																																				run: (*parser).callonDocumentFragment976,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2899, col: 11, offset: 96188},
																																					val:        "[ \\t]",
																																					chars:      []rune{' ', '\t'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&choiceExpr{
																																			pos: position{line: 2915, col: 8, offset: 96511},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 2908, col: 12, offset: 96371},
																																					run: (*parser).callonDocumentFragment979,
																																					expr: &choiceExpr{
																																						pos: position{line: 2908, col: 13, offset: 96372},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 2908, col: 13, offset: 96372},
																																								val:        "\n",
																																								ignoreCase: false,
																																								want:       "\"\\n\"",
																																							},
																																							&litMatcher{
																																								pos:        position{line: 2908, col: 20, offset: 96379},
																																								val:        "\r\n",
																																								ignoreCase: false,
																																								want:       "\"\\r\\n\"",
																																							},
																																							&litMatcher{
																																								pos:        position{line: 2908, col: 29, offset: 96388},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2912, col: 8, offset: 96461},
																																					expr: &anyMatcher{
																																						line: 2912, col: 9, offset: 96462,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2912, col: 8, offset: 96461},
																																	expr: &anyMatcher{
																																		line: 2912, col: 9, offset: 96462,
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2714, col: 5, offset: 90205},
																														expr: &actionExpr{
																															pos: position{line: 685, col: 14, offset: 22145},
																															run: (*parser).callonDocumentFragment989,
																															expr: &seqExpr{
																																pos: position{line: 685, col: 14, offset: 22145},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 685, col: 14, offset: 22145},
																																		expr: &notExpr{
																																			pos: position{line: 2912, col: 8, offset: 96461},
																																			expr: &anyMatcher{
																																				line: 2912, col: 9, offset: 96462,
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 685, col: 19, offset: 22150},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonDocumentFragment995,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2915, col: 8, offset: 96511},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2908, col: 12, offset: 96371},
																																				run: (*parser).callonDocumentFragment998,
																																				expr: &choiceExpr{
																																					pos: position{line: 2908, col: 13, offset: 96372},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 13, offset: 96372},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 20, offset: 96379},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 29, offset: 96388},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2912, col: 8, offset: 96461},
																																				expr: &anyMatcher{
																																					line: 2912, col: 9, offset: 96462,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2715, col: 5, offset: 90220},
																														val:        "|",
																														ignoreCase: false,
																														want:       "\"|\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2715, col: 9, offset: 90224},
																														expr: &actionExpr{
																															pos: position{line: 2899, col: 10, offset: 96187},
																															run: (*parser).callonDocumentFragment1007,
																															expr: &charClassMatcher{
																																pos:        position{line: 2899, col: 11, offset: 96188},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 2715, col: 16, offset: 90231},
																														label: "content",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 2715, col: 25, offset: 90240},
																															expr: &actionExpr{
																																pos: position{line: 2721, col: 5, offset: 90383},
																																run: (*parser).callonDocumentFragment1011,
																																expr: &labeledExpr{
																																	pos:   position{line: 2721, col: 5, offset: 90383},
																																	label: "content",
																																	expr: &actionExpr{
																																		pos: position{line: 2721, col: 14, offset: 90392},
																																		run: (*parser).callonDocumentFragment1013,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 2721, col: 14, offset: 90392},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2721, col: 14, offset: 90392},
																																				val:        "[^\\r\\n|]",
																																				chars:      []rune{'\r', '\n', '|'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2915, col: 8, offset: 96511},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2908, col: 12, offset: 96371},
																												run: (*parser).callonDocumentFragment1017,
																												expr: &choiceExpr{
																													pos: position{line: 2908, col: 13, offset: 96372},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2908, col: 13, offset: 96372},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 20, offset: 96379},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 29, offset: 96388},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2707, col: 6, offset: 90003},
																					alternatives: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 2707, col: 6, offset: 90003},
																							expr: &actionExpr{
																								pos: position{line: 685, col: 14, offset: 22145},
																								run: (*parser).callonDocumentFragment1026,
																								expr: &seqExpr{
																									pos: position{line: 685, col: 14, offset: 22145},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 685, col: 14, offset: 22145},
																											expr: &notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 685, col: 19, offset: 22150},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonDocumentFragment1032,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonDocumentFragment1035,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 2707, col: 19, offset: 90016},
																							expr: &choiceExpr{
																								pos: position{line: 2678, col: 22, offset: 89360},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2674, col: 19, offset: 89280},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2674, col: 19, offset: 89280},
																												val:        "|===",
																												ignoreCase: false,
																												want:       "\"|===\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2674, col: 26, offset: 89287},
																												expr: &actionExpr{
																													pos: position{line: 2899, col: 10, offset: 96187},
																													run: (*parser).callonDocumentFragment1047,
																													expr: &charClassMatcher{
																														pos:        position{line: 2899, col: 11, offset: 96188},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2915, col: 8, offset: 96511},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2908, col: 12, offset: 96371},
																														run: (*parser).callonDocumentFragment1050,
																														expr: &choiceExpr{
																															pos: position{line: 2908, col: 13, offset: 96372},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2908, col: 13, offset: 96372},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2908, col: 20, offset: 96379},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2908, col: 29, offset: 96388},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2912, col: 8, offset: 96461},
																														expr: &anyMatcher{
																															line: 2912, col: 9, offset: 96462,
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2696, col: 5, offset: 89759},
																		run: (*parser).callonDocumentFragment1059,
																		expr: &seqExpr{
																			pos: position{line: 2696, col: 5, offset: 89759},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2696, col: 5, offset: 89759},
																					expr: &choiceExpr{
																						pos: position{line: 2678, col: 22, offset: 89360},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2674, col: 19, offset: 89280},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2674, col: 19, offset: 89280},
																										val:        "|===",
																										ignoreCase: false,
																										want:       "\"|===\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2674, col: 26, offset: 89287},
																										expr: &actionExpr{
																											pos: position{line: 2899, col: 10, offset: 96187},
																											run: (*parser).callonDocumentFragment1066,
																											expr: &charClassMatcher{
																												pos:        position{line: 2899, col: 11, offset: 96188},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2915, col: 8, offset: 96511},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2908, col: 12, offset: 96371},
																												run: (*parser).callonDocumentFragment1069,
																												expr: &choiceExpr{
																													pos: position{line: 2908, col: 13, offset: 96372},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2908, col: 13, offset: 96372},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 20, offset: 96379},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 29, offset: 96388},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2697, col: 5, offset: 89782},
																					label: "cells",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2697, col: 11, offset: 89788},
																						expr: &actionExpr{
																							pos: position{line: 2713, col: 5, offset: 90182},
																							run: (*parser).callonDocumentFragment1080,
																							expr: &seqExpr{
																								pos: position{line: 2713, col: 5, offset: 90182},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 2713, col: 5, offset: 90182},
																										expr: &choiceExpr{
																											pos: position{line: 2678, col: 22, offset: 89360},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 2674, col: 19, offset: 89280},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2674, col: 19, offset: 89280},
																															val:        "|===",
																															ignoreCase: false,
																															want:       "\"|===\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2674, col: 26, offset: 89287},
																															expr: &actionExpr{
																																pos: position{line: 2899, col: 10, offset: 96187},
																																run: (*parser).callonDocumentFragment1087,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2899, col: 11, offset: 96188},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2915, col: 8, offset: 96511},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 2908, col: 12, offset: 96371},
																																	run: (*parser).callonDocumentFragment1090,
																																	expr: &choiceExpr{
																																		pos: position{line: 2908, col: 13, offset: 96372},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 13, offset: 96372},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 20, offset: 96379},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 29, offset: 96388},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2912, col: 8, offset: 96461},
																																	expr: &anyMatcher{
																																		line: 2912, col: 9, offset: 96462,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2714, col: 5, offset: 90205},
																										expr: &actionExpr{
																											pos: position{line: 685, col: 14, offset: 22145},
																											run: (*parser).callonDocumentFragment1100,
																											expr: &seqExpr{
																												pos: position{line: 685, col: 14, offset: 22145},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 685, col: 14, offset: 22145},
																														expr: &notExpr{
																															pos: position{line: 2912, col: 8, offset: 96461},
																															expr: &anyMatcher{
																																line: 2912, col: 9, offset: 96462,
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 685, col: 19, offset: 22150},
																														expr: &actionExpr{
																															pos: position{line: 2899, col: 10, offset: 96187},
																															run: (*parser).callonDocumentFragment1106,
																															expr: &charClassMatcher{
																																pos:        position{line: 2899, col: 11, offset: 96188},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2915, col: 8, offset: 96511},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2908, col: 12, offset: 96371},
																																run: (*parser).callonDocumentFragment1109,
																																expr: &choiceExpr{
																																	pos: position{line: 2908, col: 13, offset: 96372},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 13, offset: 96372},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 20, offset: 96379},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 29, offset: 96388},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2912, col: 8, offset: 96461},
																																expr: &anyMatcher{
																																	line: 2912, col: 9, offset: 96462,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2715, col: 5, offset: 90220},
																										val:        "|",
																										ignoreCase: false,
																										want:       "\"|\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2715, col: 9, offset: 90224},
																										expr: &actionExpr{
																											pos: position{line: 2899, col: 10, offset: 96187},
																											run: (*parser).callonDocumentFragment1118,
																											expr: &charClassMatcher{
																												pos:        position{line: 2899, col: 11, offset: 96188},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 2715, col: 16, offset: 90231},
																										label: "content",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 2715, col: 25, offset: 90240},
																											expr: &actionExpr{
																												pos: position{line: 2721, col: 5, offset: 90383},
																												run: (*parser).callonDocumentFragment1122,
																												expr: &labeledExpr{
																													pos:   position{line: 2721, col: 5, offset: 90383},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 2721, col: 14, offset: 90392},
																														run: (*parser).callonDocumentFragment1124,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2721, col: 14, offset: 90392},
																															expr: &charClassMatcher{
																																pos:        position{line: 2721, col: 14, offset: 90392},
																																val:        "[^\\r\\n|]",
																																chars:      []rune{'\r', '\n', '|'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonDocumentFragment1128,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2698, col: 5, offset: 89809},
																					expr: &actionExpr{
																						pos: position{line: 685, col: 14, offset: 22145},
																						run: (*parser).callonDocumentFragment1136,
																						expr: &seqExpr{
																							pos: position{line: 685, col: 14, offset: 22145},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 685, col: 14, offset: 22145},
																									expr: &notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 685, col: 19, offset: 22150},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentFragment1142,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment1145,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2678, col: 22, offset: 89360},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 2674, col: 19, offset: 89280},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2674, col: 19, offset: 89280},
																		val:        "|===",
																		ignoreCase: false,
																		want:       "\"|===\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2674, col: 26, offset: 89287},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonDocumentFragment1156,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonDocumentFragment1159,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2616, col: 22, offset: 87547},
											run: (*parser).callonDocumentFragment1168,
											expr: &seqExpr{
												pos: position{line: 2616, col: 22, offset: 87547},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2621, col: 31, offset: 87768},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
													&notExpr{
														pos: position{line: 2621, col: 36, offset: 87773},
														expr: &litMatcher{
															pos:        position{line: 2621, col: 37, offset: 87774},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 2616, col: 49, offset: 87574},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2623, col: 29, offset: 87809},
															run: (*parser).callonDocumentFragment1174,
															expr: &zeroOrMoreExpr{
																pos: position{line: 2623, col: 29, offset: 87809},
																expr: &charClassMatcher{
																	pos:        position{line: 2623, col: 29, offset: 87809},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentFragment1178,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1704, col: 5, offset: 56077},
											run: (*parser).callonDocumentFragment1185,
											expr: &seqExpr{
												pos: position{line: 1704, col: 5, offset: 56077},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1704, col: 5, offset: 56077},
														label: "kind",
														expr: &choiceExpr{
															pos: position{line: 301, col: 19, offset: 9383},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 301, col: 19, offset: 9383},
																	run: (*parser).callonDocumentFragment1189,
																	expr: &litMatcher{
																		pos:        position{line: 301, col: 19, offset: 9383},
																		val:        "TIP",
																		ignoreCase: false,
																		want:       "\"TIP\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 303, col: 5, offset: 9421},
																	run: (*parser).callonDocumentFragment1191,
																	expr: &litMatcher{
																		pos:        position{line: 303, col: 5, offset: 9421},
																		val:        "NOTE",
																		ignoreCase: false,
																		want:       "\"NOTE\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 305, col: 5, offset: 9461},
																	run: (*parser).callonDocumentFragment1193,
																	expr: &litMatcher{
																		pos:        position{line: 305, col: 5, offset: 9461},
																		val:        "IMPORTANT",
																		ignoreCase: false,
																		want:       "\"IMPORTANT\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 307, col: 5, offset: 9511},
																	run: (*parser).callonDocumentFragment1195,
																	expr: &litMatcher{
																		pos:        position{line: 307, col: 5, offset: 9511},
																		val:        "WARNING",
																		ignoreCase: false,
																		want:       "\"WARNING\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 309, col: 5, offset: 9557},
																	run: (*parser).callonDocumentFragment1197,
																	expr: &litMatcher{
																		pos:        position{line: 309, col: 5, offset: 9557},
																		val:        "CAUTION",
																		ignoreCase: false,
																		want:       "\"CAUTION\"",
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1704, col: 27, offset: 56099},
														val:        ": ",
														ignoreCase: false,
														want:       "\": \"",
													},
													&labeledExpr{
														pos:   position{line: 1705, col: 5, offset: 56109},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 1716, col: 5, offset: 56453},
															run: (*parser).callonDocumentFragment1201,
															expr: &seqExpr{
																pos: position{line: 1716, col: 5, offset: 56453},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1716, col: 5, offset: 56453},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1716, col: 14, offset: 56462},
																			run: (*parser).callonDocumentFragment1204,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1716, col: 14, offset: 56462},
																				expr: &charClassMatcher{
																					pos:        position{line: 1716, col: 14, offset: 56462},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1719, col: 5, offset: 56569},
																		run: (*parser).callonDocumentFragment1207,
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonDocumentFragment1209,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1706, col: 5, offset: 56143},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1706, col: 16, offset: 56154},
															expr: &actionExpr{
																pos: position{line: 1707, col: 9, offset: 56164},
																run: (*parser).callonDocumentFragment1218,
																expr: &seqExpr{
																	pos: position{line: 1707, col: 9, offset: 56164},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1707, col: 9, offset: 56164},
																			expr: &seqExpr{
																				pos: position{line: 1444, col: 34, offset: 47455},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1444, col: 34, offset: 47455},
																						val:        "+",
																						ignoreCase: false,
																						want:       "\"+\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 1444, col: 38, offset: 47459},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonDocumentFragment1224,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentFragment1226,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1708, col: 9, offset: 56203},
																			label: "line",
																			expr: &choiceExpr{
																				pos: position{line: 1708, col: 15, offset: 56209},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2616, col: 22, offset: 87547},
																						run: (*parser).callonDocumentFragment1233,
																						expr: &seqExpr{
																							pos: position{line: 2616, col: 22, offset: 87547},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2621, col: 31, offset: 87768},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																								&notExpr{
																									pos: position{line: 2621, col: 36, offset: 87773},
																									expr: &litMatcher{
																										pos:        position{line: 2621, col: 37, offset: 87774},
																										val:        "//",
																										ignoreCase: false,
																										want:       "\"//\"",
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2616, col: 49, offset: 87574},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 2623, col: 29, offset: 87809},
																										run: (*parser).callonDocumentFragment1239,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 2623, col: 29, offset: 87809},
																											expr: &charClassMatcher{
																												pos:        position{line: 2623, col: 29, offset: 87809},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment1243,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1716, col: 5, offset: 56453},
																						run: (*parser).callonDocumentFragment1250,
																						expr: &seqExpr{
																							pos: position{line: 1716, col: 5, offset: 56453},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 1716, col: 5, offset: 56453},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 1716, col: 14, offset: 56462},
																										run: (*parser).callonDocumentFragment1253,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1716, col: 14, offset: 56462},
																											expr: &charClassMatcher{
																												pos:        position{line: 1716, col: 14, offset: 56462},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&andCodeExpr{
																									pos: position{line: 1719, col: 5, offset: 56569},
																									run: (*parser).callonDocumentFragment1256,
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentFragment1258,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1727, col: 5, offset: 56735},
											run: (*parser).callonDocumentFragment1265,
											expr: &seqExpr{
												pos: position{line: 1727, col: 5, offset: 56735},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1727, col: 5, offset: 56735},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 1734, col: 5, offset: 57020},
															run: (*parser).callonDocumentFragment1268,
															expr: &seqExpr{
																pos: position{line: 1734, col: 5, offset: 57020},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1734, col: 5, offset: 57020},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1734, col: 14, offset: 57029},
																			run: (*parser).callonDocumentFragment1271,
																			expr: &seqExpr{
																				pos: position{line: 1734, col: 14, offset: 57029},
																				exprs: []interface{}{
																					&actionExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						run: (*parser).callonDocumentFragment1273,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2903, col: 11, offset: 96254},
																							expr: &charClassMatcher{
																								pos:        position{line: 2903, col: 12, offset: 96255},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 1734, col: 21, offset: 57036},
																						expr: &charClassMatcher{
																							pos:        position{line: 1734, col: 21, offset: 57036},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1737, col: 5, offset: 57093},
																		run: (*parser).callonDocumentFragment1278,
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonDocumentFragment1280,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1728, col: 5, offset: 56776},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1728, col: 16, offset: 56787},
															expr: &choiceExpr{
																pos: position{line: 1728, col: 17, offset: 56788},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2616, col: 22, offset: 87547},
																		run: (*parser).callonDocumentFragment1290,
																		expr: &seqExpr{
																			pos: position{line: 2616, col: 22, offset: 87547},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2621, col: 31, offset: 87768},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																				&notExpr{
																					pos: position{line: 2621, col: 36, offset: 87773},
																					expr: &litMatcher{
																						pos:        position{line: 2621, col: 37, offset: 87774},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2616, col: 49, offset: 87574},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2623, col: 29, offset: 87809},
																						run: (*parser).callonDocumentFragment1296,
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 2623, col: 29, offset: 87809},
																							expr: &charClassMatcher{
																								pos:        position{line: 2623, col: 29, offset: 87809},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonDocumentFragment1300,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1716, col: 5, offset: 56453},
																		run: (*parser).callonDocumentFragment1307,
																		expr: &seqExpr{
																			pos: position{line: 1716, col: 5, offset: 56453},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1716, col: 5, offset: 56453},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1716, col: 14, offset: 56462},
																						run: (*parser).callonDocumentFragment1310,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1716, col: 14, offset: 56462},
																							expr: &charClassMatcher{
																								pos:        position{line: 1716, col: 14, offset: 56462},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1719, col: 5, offset: 56569},
																					run: (*parser).callonDocumentFragment1313,
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonDocumentFragment1315,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1141, col: 5, offset: 35820},
											run: (*parser).callonDocumentFragment1322,
											expr: &seqExpr{
												pos: position{line: 1141, col: 5, offset: 35820},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1141, col: 5, offset: 35820},
														run: (*parser).callonDocumentFragment1324,
													},
													&labeledExpr{
														pos:   position{line: 1144, col: 5, offset: 35878},
														label: "frontmatter",
														expr: &actionExpr{
															pos: position{line: 1149, col: 20, offset: 35973},
															run: (*parser).callonDocumentFragment1326,
															expr: &seqExpr{
																pos: position{line: 1149, col: 20, offset: 35973},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1153, col: 30, offset: 36145},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1153, col: 36, offset: 36151},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonDocumentFragment1330,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonDocumentFragment1333,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1149, col: 45, offset: 35998},
																		label: "content",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 1149, col: 53, offset: 36006},
																			expr: &actionExpr{
																				pos: position{line: 1155, col: 27, offset: 36189},
																				run: (*parser).callonDocumentFragment1342,
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 1155, col: 27, offset: 36189},
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1155, col: 28, offset: 36190},
																						expr: &seqExpr{
																							pos: position{line: 1155, col: 29, offset: 36191},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 1155, col: 29, offset: 36191},
																									expr: &seqExpr{
																										pos: position{line: 1153, col: 30, offset: 36145},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1153, col: 30, offset: 36145},
																												val:        "---",
																												ignoreCase: false,
																												want:       "\"---\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1153, col: 36, offset: 36151},
																												expr: &actionExpr{
																													pos: position{line: 2899, col: 10, offset: 96187},
																													run: (*parser).callonDocumentFragment1350,
																													expr: &charClassMatcher{
																														pos:        position{line: 2899, col: 11, offset: 96188},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2915, col: 8, offset: 96511},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2908, col: 12, offset: 96371},
																														run: (*parser).callonDocumentFragment1353,
																														expr: &choiceExpr{
																															pos: position{line: 2908, col: 13, offset: 96372},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2908, col: 13, offset: 96372},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2908, col: 20, offset: 96379},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2908, col: 29, offset: 96388},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2912, col: 8, offset: 96461},
																														expr: &anyMatcher{
																															line: 2912, col: 9, offset: 96462,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&anyMatcher{
																									line: 1155, col: 55, offset: 36217,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1153, col: 30, offset: 36145},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1153, col: 36, offset: 36151},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonDocumentFragment1363,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonDocumentFragment1366,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 248, col: 11, offset: 7531},
											name: "Paragraph",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlockElements",
			pos:  position{line: 279, col: 1, offset: 8572},
			expr: &actionExpr{
				pos: position{line: 280, col: 5, offset: 8603},
				run: (*parser).callonDelimitedBlockElements1,
				expr: &seqExpr{
					pos: position{line: 280, col: 5, offset: 8603},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 280, col: 5, offset: 8603},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 280, col: 14, offset: 8612},
								expr: &choiceExpr{
									pos: position{line: 281, col: 9, offset: 8622},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1122, col: 23, offset: 34991},
											run: (*parser).callonDelimitedBlockElements6,
											expr: &seqExpr{
												pos: position{line: 1122, col: 23, offset: 34991},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1120, col: 32, offset: 34959},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1122, col: 51, offset: 35019},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1122, col: 56, offset: 35024},
															run: (*parser).callonDelimitedBlockElements10,
															expr: &oneOrMoreExpr{
																pos: position{line: 1122, col: 56, offset: 35024},
																expr: &charClassMatcher{
																	pos:        position{line: 1122, col: 56, offset: 35024},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1120, col: 32, offset: 34959},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 282, col: 11, offset: 8684},
											name: "DocumentFragment",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2912, col: 8, offset: 96461},
							expr: &anyMatcher{
								line: 2912, col: 9, offset: 96462,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 316, col: 1, offset: 9817},
			expr: &actionExpr{
				pos: position{line: 317, col: 5, offset: 9846},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 317, col: 5, offset: 9846},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 317, col: 5, offset: 9846},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 9, offset: 9850},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 332, col: 18, offset: 10393},
								run: (*parser).callonAttributeDeclaration5,
								expr: &seqExpr{
									pos: position{line: 332, col: 18, offset: 10393},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 332, col: 18, offset: 10393},
											val:        "[_0-9\\pL]",
											chars:      []rune{'_'},
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 332, col: 28, offset: 10403},
											expr: &charClassMatcher{
												pos:        position{line: 332, col: 29, offset: 10404},
												val:        "[-0-9\\pL]",
												chars:      []rune{'-'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 317, col: 30, offset: 9871},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 5, offset: 9880},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 11, offset: 9886},
								expr: &actionExpr{
									pos: position{line: 319, col: 9, offset: 9896},
									run: (*parser).callonAttributeDeclaration13,
									expr: &seqExpr{
										pos: position{line: 319, col: 9, offset: 9896},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2903, col: 11, offset: 96254},
												run: (*parser).callonAttributeDeclaration15,
												expr: &oneOrMoreExpr{
													pos: position{line: 2903, col: 11, offset: 96254},
													expr: &charClassMatcher{
														pos:        position{line: 2903, col: 12, offset: 96255},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 320, col: 9, offset: 9988},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 320, col: 16, offset: 9995},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2915, col: 8, offset: 96511},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2908, col: 12, offset: 96371},
									run: (*parser).callonAttributeDeclaration21,
									expr: &choiceExpr{
										pos: position{line: 2908, col: 13, offset: 96372},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2908, col: 13, offset: 96372},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 20, offset: 96379},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 29, offset: 96388},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2912, col: 8, offset: 96461},
									expr: &anyMatcher{
										line: 2912, col: 9, offset: 96462,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 336, col: 1, offset: 10460},
			expr: &actionExpr{
				pos: position{line: 337, col: 5, offset: 10494},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 337, col: 5, offset: 10494},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 337, col: 5, offset: 10494},
							label: "elements",
							expr: &actionExpr{
								pos: position{line: 353, col: 5, offset: 11012},
								run: (*parser).callonAttributeDeclarationValue4,
								expr: &labeledExpr{
									pos:   position{line: 353, col: 5, offset: 11012},
									label: "elements",
									expr: &zeroOrMoreExpr{
										pos: position{line: 353, col: 14, offset: 11021},
										expr: &actionExpr{
											pos: position{line: 358, col: 5, offset: 11152},
											run: (*parser).callonAttributeDeclarationValue7,
											expr: &seqExpr{
												pos: position{line: 358, col: 5, offset: 11152},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 358, col: 5, offset: 11152},
														expr: &seqExpr{
															pos: position{line: 358, col: 7, offset: 11154},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 358, col: 7, offset: 11154},
																	expr: &litMatcher{
																		pos:        position{line: 358, col: 7, offset: 11154},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 358, col: 13, offset: 11160},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonAttributeDeclarationValue14,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonAttributeDeclarationValue17,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 359, col: 5, offset: 11176},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 360, col: 9, offset: 11194},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 360, col: 10, offset: 11195},
																	run: (*parser).callonAttributeDeclarationValue26,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 360, col: 10, offset: 11195},
																		expr: &charClassMatcher{
																			pos:        position{line: 360, col: 10, offset: 11195},
																			val:        "[^\\r\\n{ ]",
																			chars:      []rune{'\r', '\n', '{', ' '},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonAttributeDeclarationValue29,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&actionExpr{
																	pos: position{line: 651, col: 5, offset: 21000},
																	run: (*parser).callonAttributeDeclarationValue31,
																	expr: &seqExpr{
																		pos: position{line: 651, col: 5, offset: 21000},
																		exprs: []interface{}{
																			&andCodeExpr{
																				pos: position{line: 651, col: 5, offset: 21000},
																				run: (*parser).callonAttributeDeclarationValue33,
																			},
																			&labeledExpr{
																				pos:   position{line: 654, col: 5, offset: 21069},
																				label: "element",
																				expr: &choiceExpr{
																					pos: position{line: 654, col: 14, offset: 21078},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 666, col: 25, offset: 21447},
																							run: (*parser).callonAttributeDeclarationValue36,
																							expr: &seqExpr{
																								pos: position{line: 666, col: 25, offset: 21447},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 666, col: 25, offset: 21447},
																										val:        "{counter:",
																										ignoreCase: false,
																										want:       "\"{counter:\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 666, col: 37, offset: 21459},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 332, col: 18, offset: 10393},
																											run: (*parser).callonAttributeDeclarationValue40,
																											expr: &seqExpr{
																												pos: position{line: 332, col: 18, offset: 10393},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 332, col: 18, offset: 10393},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 332, col: 28, offset: 10403},
																														expr: &charClassMatcher{
																															pos:        position{line: 332, col: 29, offset: 10404},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 666, col: 56, offset: 21478},
																										label: "start",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 666, col: 62, offset: 21484},
																											expr: &actionExpr{
																												pos: position{line: 674, col: 17, offset: 21779},
																												run: (*parser).callonAttributeDeclarationValue47,
																												expr: &seqExpr{
																													pos: position{line: 674, col: 17, offset: 21779},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 674, col: 17, offset: 21779},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 674, col: 21, offset: 21783},
																															label: "start",
																															expr: &choiceExpr{
																																pos: position{line: 674, col: 28, offset: 21790},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 674, col: 28, offset: 21790},
																																		run: (*parser).callonAttributeDeclarationValue52,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 674, col: 28, offset: 21790},
																																			val:        "[A-Za-z]",
																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 676, col: 9, offset: 21844},
																																		run: (*parser).callonAttributeDeclarationValue54,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 676, col: 9, offset: 21844},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 676, col: 9, offset: 21844},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 666, col: 78, offset: 21500},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 670, col: 25, offset: 21618},
																							run: (*parser).callonAttributeDeclarationValue58,
																							expr: &seqExpr{
																								pos: position{line: 670, col: 25, offset: 21618},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 670, col: 25, offset: 21618},
																										val:        "{counter2:",
																										ignoreCase: false,
																										want:       "\"{counter2:\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 670, col: 38, offset: 21631},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 332, col: 18, offset: 10393},
																											run: (*parser).callonAttributeDeclarationValue62,
																											expr: &seqExpr{
																												pos: position{line: 332, col: 18, offset: 10393},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 332, col: 18, offset: 10393},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 332, col: 28, offset: 10403},
																														expr: &charClassMatcher{
																															pos:        position{line: 332, col: 29, offset: 10404},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 670, col: 57, offset: 21650},
																										label: "start",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 670, col: 63, offset: 21656},
																											expr: &actionExpr{
																												pos: position{line: 674, col: 17, offset: 21779},
																												run: (*parser).callonAttributeDeclarationValue69,
																												expr: &seqExpr{
																													pos: position{line: 674, col: 17, offset: 21779},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 674, col: 17, offset: 21779},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 674, col: 21, offset: 21783},
																															label: "start",
																															expr: &choiceExpr{
																																pos: position{line: 674, col: 28, offset: 21790},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 674, col: 28, offset: 21790},
																																		run: (*parser).callonAttributeDeclarationValue74,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 674, col: 28, offset: 21790},
																																			val:        "[A-Za-z]",
																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 676, col: 9, offset: 21844},
																																		run: (*parser).callonAttributeDeclarationValue76,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 676, col: 9, offset: 21844},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 676, col: 9, offset: 21844},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 670, col: 79, offset: 21672},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 659, col: 5, offset: 21191},
																							run: (*parser).callonAttributeDeclarationValue80,
																							expr: &seqExpr{
																								pos: position{line: 659, col: 5, offset: 21191},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 659, col: 5, offset: 21191},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 659, col: 9, offset: 21195},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 332, col: 18, offset: 10393},
																											run: (*parser).callonAttributeDeclarationValue84,
																											expr: &seqExpr{
																												pos: position{line: 332, col: 18, offset: 10393},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 332, col: 18, offset: 10393},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 332, col: 28, offset: 10403},
																														expr: &charClassMatcher{
																															pos:        position{line: 332, col: 29, offset: 10404},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 659, col: 28, offset: 21214},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 365, col: 12, offset: 11337},
																	run: (*parser).callonAttributeDeclarationValue90,
																	expr: &litMatcher{
																		pos:        position{line: 365, col: 12, offset: 11337},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 5, offset: 10544},
							label: "otherElements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 338, col: 19, offset: 10558},
								expr: &actionExpr{
									pos: position{line: 339, col: 9, offset: 10568},
									run: (*parser).callonAttributeDeclarationValue94,
									expr: &seqExpr{
										pos: position{line: 339, col: 9, offset: 10568},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 339, col: 9, offset: 10568},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&actionExpr{
												pos: position{line: 2908, col: 12, offset: 96371},
												run: (*parser).callonAttributeDeclarationValue97,
												expr: &choiceExpr{
													pos: position{line: 2908, col: 13, offset: 96372},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2908, col: 13, offset: 96372},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 20, offset: 96379},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 29, offset: 96388},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 340, col: 9, offset: 10590},
												expr: &actionExpr{
													pos: position{line: 2899, col: 10, offset: 96187},
													run: (*parser).callonAttributeDeclarationValue103,
													expr: &charClassMatcher{
														pos:        position{line: 2899, col: 11, offset: 96188},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 341, col: 9, offset: 10605},
												label: "elements",
												expr: &ruleRefExpr{
													pos:  position{line: 341, col: 19, offset: 10615},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 381, col: 1, offset: 11926},
			expr: &actionExpr{
				pos: position{line: 382, col: 5, offset: 11949},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 382, col: 5, offset: 11949},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 382, col: 16, offset: 11960},
						expr: &choiceExpr{
							pos: position{line: 384, col: 9, offset: 12027},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 384, col: 10, offset: 12028},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 384, col: 10, offset: 12028},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 384, col: 10, offset: 12028},
												label: "anchor",
												expr: &actionExpr{
													pos: position{line: 416, col: 4, offset: 12902},
													run: (*parser).callonBlockAttributes8,
													expr: &seqExpr{
														pos: position{line: 416, col: 4, offset: 12902},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 416, col: 4, offset: 12902},
																val:        "[[",
																ignoreCase: false,
																want:       "\"[[\"",
															},
															&labeledExpr{
																pos:   position{line: 417, col: 5, offset: 12912},
																label: "id",
																expr: &actionExpr{
																	pos: position{line: 418, col: 9, offset: 12925},
																	run: (*parser).callonBlockAttributes12,
																	expr: &labeledExpr{
																		pos:   position{line: 418, col: 9, offset: 12925},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 418, col: 18, offset: 12934},
																			expr: &choiceExpr{
																				pos: position{line: 419, col: 13, offset: 12948},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 419, col: 14, offset: 12949},
																						run: (*parser).callonBlockAttributes16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 419, col: 14, offset: 12949},
																							expr: &charClassMatcher{
																								pos:        position{line: 419, col: 14, offset: 12949},
																								val:        "[^=\\r\\n�{]]",
																								chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1122, col: 23, offset: 34991},
																						run: (*parser).callonBlockAttributes19,
																						expr: &seqExpr{
																							pos: position{line: 1122, col: 23, offset: 34991},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1120, col: 32, offset: 34959},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 1122, col: 51, offset: 35019},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 1122, col: 56, offset: 35024},
																										run: (*parser).callonBlockAttributes23,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1122, col: 56, offset: 35024},
																											expr: &charClassMatcher{
																												pos:        position{line: 1122, col: 56, offset: 35024},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1120, col: 32, offset: 34959},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 651, col: 5, offset: 21000},
																						run: (*parser).callonBlockAttributes27,
																						expr: &seqExpr{
																							pos: position{line: 651, col: 5, offset: 21000},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 651, col: 5, offset: 21000},
																									run: (*parser).callonBlockAttributes29,
																								},
																								&labeledExpr{
																									pos:   position{line: 654, col: 5, offset: 21069},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 654, col: 14, offset: 21078},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 666, col: 25, offset: 21447},
																												run: (*parser).callonBlockAttributes32,
																												expr: &seqExpr{
																													pos: position{line: 666, col: 25, offset: 21447},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 666, col: 25, offset: 21447},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 666, col: 37, offset: 21459},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonBlockAttributes36,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 666, col: 56, offset: 21478},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 666, col: 62, offset: 21484},
																																expr: &actionExpr{
																																	pos: position{line: 674, col: 17, offset: 21779},
																																	run: (*parser).callonBlockAttributes43,
																																	expr: &seqExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 674, col: 17, offset: 21779},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 674, col: 21, offset: 21783},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							run: (*parser).callonBlockAttributes48,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 674, col: 28, offset: 21790},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 676, col: 9, offset: 21844},
																																							run: (*parser).callonBlockAttributes50,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 676, col: 9, offset: 21844},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 666, col: 78, offset: 21500},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 670, col: 25, offset: 21618},
																												run: (*parser).callonBlockAttributes54,
																												expr: &seqExpr{
																													pos: position{line: 670, col: 25, offset: 21618},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 670, col: 25, offset: 21618},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 670, col: 38, offset: 21631},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonBlockAttributes58,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 670, col: 57, offset: 21650},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 670, col: 63, offset: 21656},
																																expr: &actionExpr{
																																	pos: position{line: 674, col: 17, offset: 21779},
																																	run: (*parser).callonBlockAttributes65,
																																	expr: &seqExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 674, col: 17, offset: 21779},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 674, col: 21, offset: 21783},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							run: (*parser).callonBlockAttributes70,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 674, col: 28, offset: 21790},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 676, col: 9, offset: 21844},
																																							run: (*parser).callonBlockAttributes72,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 676, col: 9, offset: 21844},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 670, col: 79, offset: 21672},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 659, col: 5, offset: 21191},
																												run: (*parser).callonBlockAttributes76,
																												expr: &seqExpr{
																													pos: position{line: 659, col: 5, offset: 21191},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 659, col: 5, offset: 21191},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 659, col: 9, offset: 21195},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonBlockAttributes80,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 659, col: 28, offset: 21214},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 424, col: 16, offset: 13182},
																						run: (*parser).callonBlockAttributes86,
																						expr: &litMatcher{
																							pos:        position{line: 424, col: 16, offset: 13182},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 430, col: 5, offset: 13368},
																val:        "]]",
																ignoreCase: false,
																want:       "\"]]\"",
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 384, col: 35, offset: 12053},
												expr: &actionExpr{
													pos: position{line: 2899, col: 10, offset: 96187},
													run: (*parser).callonBlockAttributes90,
													expr: &charClassMatcher{
														pos:        position{line: 2899, col: 11, offset: 96188},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2915, col: 8, offset: 96511},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2908, col: 12, offset: 96371},
														run: (*parser).callonBlockAttributes93,
														expr: &choiceExpr{
															pos: position{line: 2908, col: 13, offset: 96372},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2908, col: 13, offset: 96372},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2908, col: 20, offset: 96379},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2908, col: 29, offset: 96388},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2912, col: 8, offset: 96461},
														expr: &anyMatcher{
															line: 2912, col: 9, offset: 96462,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 384, col: 46, offset: 12064},
												expr: &actionExpr{
													pos: position{line: 685, col: 14, offset: 22145},
													run: (*parser).callonBlockAttributes101,
													expr: &seqExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 685, col: 14, offset: 22145},
																expr: &notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 685, col: 19, offset: 22150},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonBlockAttributes107,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonBlockAttributes110,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 388, col: 12, offset: 12185},
									run: (*parser).callonBlockAttributes117,
									expr: &seqExpr{
										pos: position{line: 388, col: 12, offset: 12185},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 388, col: 12, offset: 12185},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 435, col: 19, offset: 13487},
													run: (*parser).callonBlockAttributes120,
													expr: &seqExpr{
														pos: position{line: 435, col: 19, offset: 13487},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 435, col: 19, offset: 13487},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&labeledExpr{
																pos:   position{line: 435, col: 23, offset: 13491},
																label: "title",
																expr: &actionExpr{
																	pos: position{line: 436, col: 5, offset: 13503},
																	run: (*parser).callonBlockAttributes124,
																	expr: &seqExpr{
																		pos: position{line: 436, col: 5, offset: 13503},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 436, col: 5, offset: 13503},
																				expr: &charClassMatcher{
																					pos:        position{line: 436, col: 6, offset: 13504},
																					val:        "[. ]",
																					chars:      []rune{'.', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 437, col: 5, offset: 13616},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 437, col: 14, offset: 13625},
																					expr: &choiceExpr{
																						pos: position{line: 438, col: 9, offset: 13635},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 438, col: 10, offset: 13636},
																								run: (*parser).callonBlockAttributes131,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 438, col: 10, offset: 13636},
																									expr: &charClassMatcher{
																										pos:        position{line: 438, col: 10, offset: 13636},
																										val:        "[^\\r\\n�{]",
																										chars:      []rune{'\r', '\n', '�', '{'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 659, col: 5, offset: 21191},
																								run: (*parser).callonBlockAttributes134,
																								expr: &seqExpr{
																									pos: position{line: 659, col: 5, offset: 21191},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 659, col: 5, offset: 21191},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 659, col: 9, offset: 21195},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 332, col: 18, offset: 10393},
																												run: (*parser).callonBlockAttributes138,
																												expr: &seqExpr{
																													pos: position{line: 332, col: 18, offset: 10393},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 332, col: 18, offset: 10393},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 332, col: 28, offset: 10403},
																															expr: &charClassMatcher{
																																pos:        position{line: 332, col: 29, offset: 10404},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 659, col: 28, offset: 21214},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 443, col: 12, offset: 13781},
																								run: (*parser).callonBlockAttributes144,
																								expr: &litMatcher{
																									pos:        position{line: 443, col: 12, offset: 13781},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 388, col: 35, offset: 12208},
												expr: &actionExpr{
													pos: position{line: 2899, col: 10, offset: 96187},
													run: (*parser).callonBlockAttributes147,
													expr: &charClassMatcher{
														pos:        position{line: 2899, col: 11, offset: 96188},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2915, col: 8, offset: 96511},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2908, col: 12, offset: 96371},
														run: (*parser).callonBlockAttributes150,
														expr: &choiceExpr{
															pos: position{line: 2908, col: 13, offset: 96372},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2908, col: 13, offset: 96372},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2908, col: 20, offset: 96379},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2908, col: 29, offset: 96388},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2912, col: 8, offset: 96461},
														expr: &anyMatcher{
															line: 2912, col: 9, offset: 96462,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 388, col: 46, offset: 12219},
												expr: &actionExpr{
													pos: position{line: 685, col: 14, offset: 22145},
													run: (*parser).callonBlockAttributes158,
													expr: &seqExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 685, col: 14, offset: 22145},
																expr: &notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 685, col: 19, offset: 22150},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonBlockAttributes164,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonBlockAttributes167,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 392, col: 12, offset: 12309},
									run: (*parser).callonBlockAttributes174,
									expr: &seqExpr{
										pos: position{line: 392, col: 12, offset: 12309},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 392, col: 12, offset: 12309},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 392, col: 24, offset: 12321},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 392, col: 44, offset: 12341},
												expr: &actionExpr{
													pos: position{line: 2899, col: 10, offset: 96187},
													run: (*parser).callonBlockAttributes179,
													expr: &charClassMatcher{
														pos:        position{line: 2899, col: 11, offset: 96188},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2915, col: 8, offset: 96511},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2908, col: 12, offset: 96371},
														run: (*parser).callonBlockAttributes182,
														expr: &choiceExpr{
															pos: position{line: 2908, col: 13, offset: 96372},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2908, col: 13, offset: 96372},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2908, col: 20, offset: 96379},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2908, col: 29, offset: 96388},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2912, col: 8, offset: 96461},
														expr: &anyMatcher{
															line: 2912, col: 9, offset: 96462,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 392, col: 55, offset: 12352},
												expr: &actionExpr{
													pos: position{line: 685, col: 14, offset: 22145},
													run: (*parser).callonBlockAttributes190,
													expr: &seqExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 685, col: 14, offset: 22145},
																expr: &notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 685, col: 19, offset: 22150},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonBlockAttributes196,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonBlockAttributes199,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 400, col: 1, offset: 12536},
			expr: &actionExpr{
				pos: position{line: 401, col: 5, offset: 12560},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 401, col: 5, offset: 12560},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 5, offset: 12560},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 5, offset: 12568},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 402, col: 16, offset: 12579},
								expr: &actionExpr{
									pos: position{line: 403, col: 9, offset: 12589},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 404, col: 13, offset: 12603},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 404, col: 13, offset: 12603},
												expr: &litMatcher{
													pos:        position{line: 404, col: 14, offset: 12604},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 405, col: 13, offset: 12636},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 405, col: 24, offset: 12647},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 405, col: 24, offset: 12647},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 405, col: 46, offset: 12669},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 5, offset: 12752},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 454, col: 1, offset: 14162},
			expr: &actionExpr{
				pos: position{line: 455, col: 5, offset: 14188},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 455, col: 5, offset: 14188},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 455, col: 5, offset: 14188},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 455, col: 9, offset: 14192},
							expr: &litMatcher{
								pos:        position{line: 455, col: 10, offset: 14193},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 457, col: 5, offset: 14362},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 457, col: 31, offset: 14388},
								expr: &ruleRefExpr{
									pos:  position{line: 457, col: 32, offset: 14389},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 458, col: 5, offset: 14421},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 458, col: 21, offset: 14437},
								expr: &choiceExpr{
									pos: position{line: 458, col: 22, offset: 14438},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 458, col: 22, offset: 14438},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 458, col: 44, offset: 14460},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 459, col: 5, offset: 14481},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 472, col: 1, offset: 15009},
			expr: &actionExpr{
				pos: position{line: 473, col: 5, offset: 15043},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 473, col: 5, offset: 15043},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 473, col: 5, offset: 15043},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 473, col: 10, offset: 15048},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 9, offset: 15058},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 5, offset: 15088},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 476, col: 12, offset: 15095},
								expr: &actionExpr{
									pos: position{line: 477, col: 9, offset: 15106},
									run: (*parser).callonFirstPositionalAttributes8,
									expr: &seqExpr{
										pos: position{line: 477, col: 9, offset: 15106},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 477, col: 9, offset: 15106},
												expr: &litMatcher{
													pos:        position{line: 477, col: 10, offset: 15107},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
											},
											&notExpr{
												pos: position{line: 477, col: 14, offset: 15111},
												expr: &litMatcher{
													pos:        position{line: 477, col: 15, offset: 15112},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 478, col: 9, offset: 15124},
												label: "extra",
												expr: &choiceExpr{
													pos: position{line: 479, col: 13, offset: 15144},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 479, col: 13, offset: 15144},
															name: "ShortHandIDAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 480, col: 15, offset: 15180},
															name: "ShortHandOptionAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 481, col: 15, offset: 15219},
															name: "ShortHandDotRoleAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 484, col: 8, offset: 15295},
							expr: &seqExpr{
								pos: position{line: 484, col: 9, offset: 15296},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 484, col: 9, offset: 15296},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 484, col: 13, offset: 15300},
										expr: &actionExpr{
											pos: position{line: 2899, col: 10, offset: 96187},
											run: (*parser).callonFirstPositionalAttributes23,
											expr: &charClassMatcher{
												pos:        position{line: 2899, col: 11, offset: 96188},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 485, col: 5, offset: 15314},
							run: (*parser).callonFirstPositionalAttributes25,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 501, col: 1, offset: 15730},
			expr: &actionExpr{
				pos: position{line: 501, col: 25, offset: 15754},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 501, col: 25, offset: 15754},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 501, col: 25, offset: 15754},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 29, offset: 15758},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 33, offset: 15762},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 505, col: 1, offset: 15836},
			expr: &actionExpr{
				pos: position{line: 505, col: 23, offset: 15858},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 505, col: 23, offset: 15858},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 505, col: 30, offset: 15865},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 510, col: 1, offset: 15991},
			expr: &actionExpr{
				pos: position{line: 510, col: 30, offset: 16020},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 510, col: 30, offset: 16020},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 510, col: 30, offset: 16020},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 510, col: 34, offset: 16024},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 40, offset: 16030},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 515, col: 1, offset: 16152},
			expr: &actionExpr{
				pos: position{line: 515, col: 29, offset: 16180},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 515, col: 29, offset: 16180},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 515, col: 29, offset: 16180},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 515, col: 33, offset: 16184},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 41, offset: 16192},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 520, col: 1, offset: 16305},
			expr: &choiceExpr{
				pos: position{line: 521, col: 5, offset: 16337},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 521, col: 5, offset: 16337},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 522, col: 7, offset: 16371},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 523, col: 7, offset: 16405},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 523, col: 7, offset: 16405},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 523, col: 7, offset: 16405},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 523, col: 16, offset: 16414},
										expr: &choiceExpr{
											pos: position{line: 526, col: 9, offset: 16596},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 526, col: 10, offset: 16597},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 526, col: 10, offset: 16597},
														expr: &charClassMatcher{
															pos:        position{line: 526, col: 10, offset: 16597},
															val:        "[^,=.%# \\r\\n�{]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&actionExpr{
													pos: position{line: 651, col: 5, offset: 21000},
													run: (*parser).callonShortHandAttributeValue12,
													expr: &seqExpr{
														pos: position{line: 651, col: 5, offset: 21000},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 651, col: 5, offset: 21000},
																run: (*parser).callonShortHandAttributeValue14,
															},
															&labeledExpr{
																pos:   position{line: 654, col: 5, offset: 21069},
																label: "element",
																expr: &choiceExpr{
																	pos: position{line: 654, col: 14, offset: 21078},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 666, col: 25, offset: 21447},
																			run: (*parser).callonShortHandAttributeValue17,
																			expr: &seqExpr{
																				pos: position{line: 666, col: 25, offset: 21447},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 666, col: 25, offset: 21447},
																						val:        "{counter:",
																						ignoreCase: false,
																						want:       "\"{counter:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 666, col: 37, offset: 21459},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 332, col: 18, offset: 10393},
																							run: (*parser).callonShortHandAttributeValue21,
																							expr: &seqExpr{
																								pos: position{line: 332, col: 18, offset: 10393},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 332, col: 18, offset: 10393},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 332, col: 28, offset: 10403},
																										expr: &charClassMatcher{
																											pos:        position{line: 332, col: 29, offset: 10404},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 666, col: 56, offset: 21478},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 666, col: 62, offset: 21484},
																							expr: &actionExpr{
																								pos: position{line: 674, col: 17, offset: 21779},
																								run: (*parser).callonShortHandAttributeValue28,
																								expr: &seqExpr{
																									pos: position{line: 674, col: 17, offset: 21779},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 674, col: 17, offset: 21779},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 674, col: 21, offset: 21783},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 674, col: 28, offset: 21790},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 674, col: 28, offset: 21790},
																														run: (*parser).callonShortHandAttributeValue33,
																														expr: &charClassMatcher{
																															pos:        position{line: 674, col: 28, offset: 21790},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 676, col: 9, offset: 21844},
																														run: (*parser).callonShortHandAttributeValue35,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 676, col: 9, offset: 21844},
																															expr: &charClassMatcher{
																																pos:        position{line: 676, col: 9, offset: 21844},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 666, col: 78, offset: 21500},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 670, col: 25, offset: 21618},
																			run: (*parser).callonShortHandAttributeValue39,
																			expr: &seqExpr{
																				pos: position{line: 670, col: 25, offset: 21618},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 670, col: 25, offset: 21618},
																						val:        "{counter2:",
																						ignoreCase: false,
																						want:       "\"{counter2:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 670, col: 38, offset: 21631},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 332, col: 18, offset: 10393},
																							run: (*parser).callonShortHandAttributeValue43,
																							expr: &seqExpr{
																								pos: position{line: 332, col: 18, offset: 10393},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 332, col: 18, offset: 10393},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 332, col: 28, offset: 10403},
																										expr: &charClassMatcher{
																											pos:        position{line: 332, col: 29, offset: 10404},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 670, col: 57, offset: 21650},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 670, col: 63, offset: 21656},
																							expr: &actionExpr{
																								pos: position{line: 674, col: 17, offset: 21779},
																								run: (*parser).callonShortHandAttributeValue50,
																								expr: &seqExpr{
																									pos: position{line: 674, col: 17, offset: 21779},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 674, col: 17, offset: 21779},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 674, col: 21, offset: 21783},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 674, col: 28, offset: 21790},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 674, col: 28, offset: 21790},
																														run: (*parser).callonShortHandAttributeValue55,
																														expr: &charClassMatcher{
																															pos:        position{line: 674, col: 28, offset: 21790},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 676, col: 9, offset: 21844},
																														run: (*parser).callonShortHandAttributeValue57,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 676, col: 9, offset: 21844},
																															expr: &charClassMatcher{
																																pos:        position{line: 676, col: 9, offset: 21844},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 670, col: 79, offset: 21672},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 659, col: 5, offset: 21191},
																			run: (*parser).callonShortHandAttributeValue61,
																			expr: &seqExpr{
																				pos: position{line: 659, col: 5, offset: 21191},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 659, col: 5, offset: 21191},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 659, col: 9, offset: 21195},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 332, col: 18, offset: 10393},
																							run: (*parser).callonShortHandAttributeValue65,
																							expr: &seqExpr{
																								pos: position{line: 332, col: 18, offset: 10393},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 332, col: 18, offset: 10393},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 332, col: 28, offset: 10403},
																										expr: &charClassMatcher{
																											pos:        position{line: 332, col: 29, offset: 10404},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 659, col: 28, offset: 21214},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 531, col: 12, offset: 16765},
													run: (*parser).callonShortHandAttributeValue71,
													expr: &litMatcher{
														pos:        position{line: 531, col: 12, offset: 16765},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 535, col: 5, offset: 16853},
									expr: &notExpr{
										pos: position{line: 535, col: 7, offset: 16855},
										expr: &seqExpr{
											pos: position{line: 535, col: 9, offset: 16857},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 535, col: 9, offset: 16857},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonShortHandAttributeValue77,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 535, col: 16, offset: 16864},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 540, col: 1, offset: 16942},
			expr: &choiceExpr{
				pos: position{line: 540, col: 24, offset: 16965},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 16971},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 541, col: 5, offset: 16971},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 541, col: 5, offset: 16971},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 541, col: 12, offset: 16978},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 541, col: 29, offset: 16995},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 541, col: 29, offset: 16995},
											expr: &seqExpr{
												pos: position{line: 541, col: 30, offset: 16996},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 541, col: 30, offset: 16996},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 541, col: 34, offset: 17000},
														expr: &actionExpr{
															pos: position{line: 2899, col: 10, offset: 96187},
															run: (*parser).callonPositionalAttribute11,
															expr: &charClassMatcher{
																pos:        position{line: 2899, col: 11, offset: 96188},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 541, col: 45, offset: 17011},
											expr: &litMatcher{
												pos:        position{line: 541, col: 46, offset: 17012},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 546, col: 6, offset: 17249},
						run: (*parser).callonPositionalAttribute15,
						expr: &seqExpr{
							pos: position{line: 546, col: 6, offset: 17249},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 546, col: 6, offset: 17249},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 546, col: 13, offset: 17256},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 546, col: 13, offset: 17256},
												expr: &actionExpr{
													pos: position{line: 2899, col: 10, offset: 96187},
													run: (*parser).callonPositionalAttribute20,
													expr: &charClassMatcher{
														pos:        position{line: 2899, col: 11, offset: 96188},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 546, col: 21, offset: 17264},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 546, col: 22, offset: 17265},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 546, col: 22, offset: 17265},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 546, col: 26, offset: 17269},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonPositionalAttribute26,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 546, col: 36, offset: 17279},
														expr: &litMatcher{
															pos:        position{line: 546, col: 37, offset: 17280},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 547, col: 5, offset: 17290},
									run: (*parser).callonPositionalAttribute30,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 557, col: 1, offset: 17605},
			expr: &actionExpr{
				pos: position{line: 557, col: 19, offset: 17623},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 557, col: 19, offset: 17623},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 19, offset: 17623},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 562, col: 22, offset: 17931},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 562, col: 22, offset: 17931},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 562, col: 22, offset: 17931},
											expr: &actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonNamedAttribute7,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 562, col: 29, offset: 17938},
											expr: &charClassMatcher{
												pos:        position{line: 562, col: 29, offset: 17938},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 562, col: 42, offset: 17951},
											expr: &actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonNamedAttribute12,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 557, col: 43, offset: 17647},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 557, col: 47, offset: 17651},
							expr: &actionExpr{
								pos: position{line: 2899, col: 10, offset: 96187},
								run: (*parser).callonNamedAttribute16,
								expr: &charClassMatcher{
									pos:        position{line: 2899, col: 11, offset: 96188},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 557, col: 54, offset: 17658},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 61, offset: 17665},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 557, col: 77, offset: 17681},
							expr: &seqExpr{
								pos: position{line: 557, col: 78, offset: 17682},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 557, col: 78, offset: 17682},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 557, col: 82, offset: 17686},
										expr: &actionExpr{
											pos: position{line: 2899, col: 10, offset: 96187},
											run: (*parser).callonNamedAttribute24,
											expr: &charClassMatcher{
												pos:        position{line: 2899, col: 11, offset: 96188},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 566, col: 1, offset: 18021},
			expr: &actionExpr{
				pos: position{line: 567, col: 5, offset: 18044},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 567, col: 5, offset: 18044},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 567, col: 5, offset: 18044},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 568, col: 9, offset: 18060},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 568, col: 9, offset: 18060},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 569, col: 11, offset: 18098},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 570, col: 11, offset: 18136},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 572, col: 5, offset: 18170},
							expr: &notExpr{
								pos: position{line: 572, col: 7, offset: 18172},
								expr: &seqExpr{
									pos: position{line: 572, col: 9, offset: 18174},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 572, col: 9, offset: 18174},
											expr: &actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonAttributeValue12,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 572, col: 16, offset: 18181},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 576, col: 1, offset: 18222},
			expr: &actionExpr{
				pos: position{line: 577, col: 5, offset: 18257},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 577, col: 5, offset: 18257},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 577, col: 5, offset: 18257},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&notExpr{
							pos: position{line: 577, col: 9, offset: 18261},
							expr: &litMatcher{
								pos:        position{line: 577, col: 10, offset: 18262},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 5, offset: 18341},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 14, offset: 18350},
								name: "SingleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 579, col: 5, offset: 18389},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValueContent",
			pos:  position{line: 583, col: 1, offset: 18430},
			expr: &actionExpr{
				pos: position{line: 584, col: 5, offset: 18472},
				run: (*parser).callonSingleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 584, col: 5, offset: 18472},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 584, col: 14, offset: 18481},
						expr: &choiceExpr{
							pos: position{line: 585, col: 9, offset: 18491},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2817, col: 14, offset: 93577},
									run: (*parser).callonSingleQuotedAttributeValueContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2817, col: 14, offset: 93577},
										expr: &charClassMatcher{
											pos:        position{line: 2817, col: 14, offset: 93577},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&actionExpr{
									pos: position{line: 2899, col: 10, offset: 96187},
									run: (*parser).callonSingleQuotedAttributeValueContent8,
									expr: &charClassMatcher{
										pos:        position{line: 2899, col: 11, offset: 96188},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 587, col: 11, offset: 18527},
									name: "Quote",
								},
								&actionExpr{
									pos: position{line: 651, col: 5, offset: 21000},
									run: (*parser).callonSingleQuotedAttributeValueContent11,
									expr: &seqExpr{
										pos: position{line: 651, col: 5, offset: 21000},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 651, col: 5, offset: 21000},
												run: (*parser).callonSingleQuotedAttributeValueContent13,
											},
											&labeledExpr{
												pos:   position{line: 654, col: 5, offset: 21069},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 654, col: 14, offset: 21078},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 666, col: 25, offset: 21447},
															run: (*parser).callonSingleQuotedAttributeValueContent16,
															expr: &seqExpr{
																pos: position{line: 666, col: 25, offset: 21447},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 666, col: 25, offset: 21447},
																		val:        "{counter:",
																		ignoreCase: false,
																		want:       "\"{counter:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 666, col: 37, offset: 21459},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 332, col: 18, offset: 10393},
																			run: (*parser).callonSingleQuotedAttributeValueContent20,
																			expr: &seqExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 332, col: 18, offset: 10393},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 332, col: 28, offset: 10403},
																						expr: &charClassMatcher{
																							pos:        position{line: 332, col: 29, offset: 10404},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 666, col: 56, offset: 21478},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 666, col: 62, offset: 21484},
																			expr: &actionExpr{
																				pos: position{line: 674, col: 17, offset: 21779},
																				run: (*parser).callonSingleQuotedAttributeValueContent27,
																				expr: &seqExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 674, col: 17, offset: 21779},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 674, col: 21, offset: 21783},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 674, col: 28, offset: 21790},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 674, col: 28, offset: 21790},
																										run: (*parser).callonSingleQuotedAttributeValueContent32,
																										expr: &charClassMatcher{
																											pos:        position{line: 674, col: 28, offset: 21790},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 676, col: 9, offset: 21844},
																										run: (*parser).callonSingleQuotedAttributeValueContent34,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											expr: &charClassMatcher{
																												pos:        position{line: 676, col: 9, offset: 21844},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 666, col: 78, offset: 21500},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 670, col: 25, offset: 21618},
															run: (*parser).callonSingleQuotedAttributeValueContent38,
															expr: &seqExpr{
																pos: position{line: 670, col: 25, offset: 21618},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 670, col: 25, offset: 21618},
																		val:        "{counter2:",
																		ignoreCase: false,
																		want:       "\"{counter2:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 670, col: 38, offset: 21631},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 332, col: 18, offset: 10393},
																			run: (*parser).callonSingleQuotedAttributeValueContent42,
																			expr: &seqExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 332, col: 18, offset: 10393},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 332, col: 28, offset: 10403},
																						expr: &charClassMatcher{
																							pos:        position{line: 332, col: 29, offset: 10404},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 670, col: 57, offset: 21650},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 670, col: 63, offset: 21656},
																			expr: &actionExpr{
																				pos: position{line: 674, col: 17, offset: 21779},
																				run: (*parser).callonSingleQuotedAttributeValueContent49,
																				expr: &seqExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 674, col: 17, offset: 21779},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 674, col: 21, offset: 21783},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 674, col: 28, offset: 21790},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 674, col: 28, offset: 21790},
																										run: (*parser).callonSingleQuotedAttributeValueContent54,
																										expr: &charClassMatcher{
																											pos:        position{line: 674, col: 28, offset: 21790},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 676, col: 9, offset: 21844},
																										run: (*parser).callonSingleQuotedAttributeValueContent56,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											expr: &charClassMatcher{
																												pos:        position{line: 676, col: 9, offset: 21844},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 670, col: 79, offset: 21672},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 659, col: 5, offset: 21191},
															run: (*parser).callonSingleQuotedAttributeValueContent60,
															expr: &seqExpr{
																pos: position{line: 659, col: 5, offset: 21191},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 659, col: 5, offset: 21191},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 659, col: 9, offset: 21195},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 332, col: 18, offset: 10393},
																			run: (*parser).callonSingleQuotedAttributeValueContent64,
																			expr: &seqExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 332, col: 18, offset: 10393},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 332, col: 28, offset: 10403},
																						expr: &charClassMatcher{
																							pos:        position{line: 332, col: 29, offset: 10404},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 659, col: 28, offset: 21214},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 589, col: 12, offset: 18573},
									run: (*parser).callonSingleQuotedAttributeValueContent70,
									expr: &litMatcher{
										pos:        position{line: 589, col: 12, offset: 18573},
										val:        "\\'",
										ignoreCase: false,
										want:       "\"\\\\'\"",
									},
								},
								&litMatcher{
									pos:        position{line: 592, col: 13, offset: 18675},
									val:        "'`",
									ignoreCase: false,
									want:       "\"'`\"",
								},
								&litMatcher{
									pos:        position{line: 592, col: 20, offset: 18682},
									val:        "`'",
									ignoreCase: false,
									want:       "\"`'\"",
								},
								&actionExpr{
									pos: position{line: 592, col: 27, offset: 18689},
									run: (*parser).callonSingleQuotedAttributeValueContent74,
									expr: &litMatcher{
										pos:        position{line: 592, col: 27, offset: 18689},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&actionExpr{
									pos: position{line: 595, col: 12, offset: 18849},
									run: (*parser).callonSingleQuotedAttributeValueContent76,
									expr: &oneOrMoreExpr{
										pos: position{line: 595, col: 12, offset: 18849},
										expr: &charClassMatcher{
											pos:        position{line: 595, col: 12, offset: 18849},
											val:        "[^\\r\\n\\\\\\ ]",
											chars:      []rune{'\r', '\n', '\\', '\'', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 602, col: 1, offset: 19046},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 19081},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 19081},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 603, col: 5, offset: 19081},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&notExpr{
							pos: position{line: 603, col: 10, offset: 19086},
							expr: &litMatcher{
								pos:        position{line: 603, col: 11, offset: 19087},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 604, col: 5, offset: 19166},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 14, offset: 19175},
								name: "DoubleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 605, col: 5, offset: 19214},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&andExpr{
							pos: position{line: 605, col: 10, offset: 19219},
							expr: &notExpr{
								pos: position{line: 605, col: 12, offset: 19221},
								expr: &seqExpr{
									pos: position{line: 605, col: 14, offset: 19223},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 605, col: 14, offset: 19223},
											expr: &actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonDoubleQuotedAttributeValue13,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 605, col: 21, offset: 19230},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValueContent",
			pos:  position{line: 608, col: 1, offset: 19272},
			expr: &actionExpr{
				pos: position{line: 609, col: 5, offset: 19314},
				run: (*parser).callonDoubleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 609, col: 5, offset: 19314},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 609, col: 14, offset: 19323},
						expr: &choiceExpr{
							pos: position{line: 610, col: 9, offset: 19333},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2817, col: 14, offset: 93577},
									run: (*parser).callonDoubleQuotedAttributeValueContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2817, col: 14, offset: 93577},
										expr: &charClassMatcher{
											pos:        position{line: 2817, col: 14, offset: 93577},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&actionExpr{
									pos: position{line: 2899, col: 10, offset: 96187},
									run: (*parser).callonDoubleQuotedAttributeValueContent8,
									expr: &charClassMatcher{
										pos:        position{line: 2899, col: 11, offset: 96188},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 612, col: 11, offset: 19369},
									name: "Quote",
								},
								&actionExpr{
									pos: position{line: 651, col: 5, offset: 21000},
									run: (*parser).callonDoubleQuotedAttributeValueContent11,
									expr: &seqExpr{
										pos: position{line: 651, col: 5, offset: 21000},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 651, col: 5, offset: 21000},
												run: (*parser).callonDoubleQuotedAttributeValueContent13,
											},
											&labeledExpr{
												pos:   position{line: 654, col: 5, offset: 21069},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 654, col: 14, offset: 21078},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 666, col: 25, offset: 21447},
															run: (*parser).callonDoubleQuotedAttributeValueContent16,
															expr: &seqExpr{
																pos: position{line: 666, col: 25, offset: 21447},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 666, col: 25, offset: 21447},
																		val:        "{counter:",
																		ignoreCase: false,
																		want:       "\"{counter:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 666, col: 37, offset: 21459},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 332, col: 18, offset: 10393},
																			run: (*parser).callonDoubleQuotedAttributeValueContent20,
																			expr: &seqExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 332, col: 18, offset: 10393},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 332, col: 28, offset: 10403},
																						expr: &charClassMatcher{
																							pos:        position{line: 332, col: 29, offset: 10404},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 666, col: 56, offset: 21478},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 666, col: 62, offset: 21484},
																			expr: &actionExpr{
																				pos: position{line: 674, col: 17, offset: 21779},
																				run: (*parser).callonDoubleQuotedAttributeValueContent27,
																				expr: &seqExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 674, col: 17, offset: 21779},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 674, col: 21, offset: 21783},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 674, col: 28, offset: 21790},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 674, col: 28, offset: 21790},
																										run: (*parser).callonDoubleQuotedAttributeValueContent32,
																										expr: &charClassMatcher{
																											pos:        position{line: 674, col: 28, offset: 21790},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 676, col: 9, offset: 21844},
																										run: (*parser).callonDoubleQuotedAttributeValueContent34,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											expr: &charClassMatcher{
																												pos:        position{line: 676, col: 9, offset: 21844},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 666, col: 78, offset: 21500},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 670, col: 25, offset: 21618},
															run: (*parser).callonDoubleQuotedAttributeValueContent38,
															expr: &seqExpr{
																pos: position{line: 670, col: 25, offset: 21618},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 670, col: 25, offset: 21618},
																		val:        "{counter2:",
																		ignoreCase: false,
																		want:       "\"{counter2:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 670, col: 38, offset: 21631},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 332, col: 18, offset: 10393},
																			run: (*parser).callonDoubleQuotedAttributeValueContent42,
																			expr: &seqExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 332, col: 18, offset: 10393},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 332, col: 28, offset: 10403},
																						expr: &charClassMatcher{
																							pos:        position{line: 332, col: 29, offset: 10404},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 670, col: 57, offset: 21650},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 670, col: 63, offset: 21656},
																			expr: &actionExpr{
																				pos: position{line: 674, col: 17, offset: 21779},
																				run: (*parser).callonDoubleQuotedAttributeValueContent49,
																				expr: &seqExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 674, col: 17, offset: 21779},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 674, col: 21, offset: 21783},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 674, col: 28, offset: 21790},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 674, col: 28, offset: 21790},
																										run: (*parser).callonDoubleQuotedAttributeValueContent54,
																										expr: &charClassMatcher{
																											pos:        position{line: 674, col: 28, offset: 21790},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 676, col: 9, offset: 21844},
																										run: (*parser).callonDoubleQuotedAttributeValueContent56,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											expr: &charClassMatcher{
																												pos:        position{line: 676, col: 9, offset: 21844},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 670, col: 79, offset: 21672},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 659, col: 5, offset: 21191},
															run: (*parser).callonDoubleQuotedAttributeValueContent60,
															expr: &seqExpr{
																pos: position{line: 659, col: 5, offset: 21191},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 659, col: 5, offset: 21191},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 659, col: 9, offset: 21195},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 332, col: 18, offset: 10393},
																			run: (*parser).callonDoubleQuotedAttributeValueContent64,
																			expr: &seqExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 332, col: 18, offset: 10393},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 332, col: 28, offset: 10403},
																						expr: &charClassMatcher{
																							pos:        position{line: 332, col: 29, offset: 10404},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 659, col: 28, offset: 21214},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 614, col: 12, offset: 19416},
									run: (*parser).callonDoubleQuotedAttributeValueContent70,
									expr: &litMatcher{
										pos:        position{line: 614, col: 12, offset: 19416},
										val:        "\\\"",
										ignoreCase: false,
										want:       "\"\\\\\\\"\"",
									},
								},
								&litMatcher{
									pos:        position{line: 617, col: 13, offset: 19518},
									val:        "\"`",
									ignoreCase: false,
									want:       "\"\\\"`\"",
								},
								&litMatcher{
									pos:        position{line: 617, col: 21, offset: 19526},
									val:        "`\"",
									ignoreCase: false,
									want:       "\"`\\\"\"",
								},
								&litMatcher{
									pos:        position{line: 617, col: 29, offset: 19534},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&actionExpr{
									pos: position{line: 617, col: 35, offset: 19540},
									run: (*parser).callonDoubleQuotedAttributeValueContent75,
									expr: &litMatcher{
										pos:        position{line: 617, col: 35, offset: 19540},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
								&actionExpr{
									pos: position{line: 620, col: 12, offset: 19723},
									run: (*parser).callonDoubleQuotedAttributeValueContent77,
									expr: &oneOrMoreExpr{
										pos: position{line: 620, col: 12, offset: 19723},
										expr: &charClassMatcher{
											pos:        position{line: 620, col: 12, offset: 19723},
											val:        "[^\\r\\n\\\\\"` ]",
											chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 628, col: 1, offset: 19997},
			expr: &actionExpr{
				pos: position{line: 631, col: 5, offset: 20181},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 631, col: 5, offset: 20181},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 631, col: 5, offset: 20181},
							expr: &actionExpr{
								pos: position{line: 2899, col: 10, offset: 96187},
								run: (*parser).callonUnquotedAttributeValue4,
								expr: &charClassMatcher{
									pos:        position{line: 2899, col: 11, offset: 96188},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 632, col: 5, offset: 20250},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 632, col: 14, offset: 20259},
								expr: &choiceExpr{
									pos: position{line: 633, col: 9, offset: 20269},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 633, col: 9, offset: 20269},
											name: "Quote",
										},
										&seqExpr{
											pos: position{line: 634, col: 12, offset: 20326},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 634, col: 12, offset: 20326},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 634, col: 16, offset: 20330},
													name: "UnquotedAttributeValue",
												},
												&litMatcher{
													pos:        position{line: 634, col: 39, offset: 20353},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&actionExpr{
											pos: position{line: 636, col: 12, offset: 20452},
											run: (*parser).callonUnquotedAttributeValue14,
											expr: &oneOrMoreExpr{
												pos: position{line: 636, col: 12, offset: 20452},
												expr: &charClassMatcher{
													pos:        position{line: 636, col: 12, offset: 20452},
													val:        "[^=,�]{ ]",
													chars:      []rune{'=', ',', '�', ']', '{', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2899, col: 10, offset: 96187},
											run: (*parser).callonUnquotedAttributeValue17,
											expr: &charClassMatcher{
												pos:        position{line: 2899, col: 11, offset: 96188},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 651, col: 5, offset: 21000},
											run: (*parser).callonUnquotedAttributeValue19,
											expr: &seqExpr{
												pos: position{line: 651, col: 5, offset: 21000},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 651, col: 5, offset: 21000},
														run: (*parser).callonUnquotedAttributeValue21,
													},
													&labeledExpr{
														pos:   position{line: 654, col: 5, offset: 21069},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 654, col: 14, offset: 21078},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 666, col: 25, offset: 21447},
																	run: (*parser).callonUnquotedAttributeValue24,
																	expr: &seqExpr{
																		pos: position{line: 666, col: 25, offset: 21447},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 666, col: 25, offset: 21447},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 666, col: 37, offset: 21459},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					run: (*parser).callonUnquotedAttributeValue28,
																					expr: &seqExpr{
																						pos: position{line: 332, col: 18, offset: 10393},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 332, col: 18, offset: 10393},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 332, col: 28, offset: 10403},
																								expr: &charClassMatcher{
																									pos:        position{line: 332, col: 29, offset: 10404},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 666, col: 56, offset: 21478},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 666, col: 62, offset: 21484},
																					expr: &actionExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						run: (*parser).callonUnquotedAttributeValue35,
																						expr: &seqExpr{
																							pos: position{line: 674, col: 17, offset: 21779},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 674, col: 17, offset: 21779},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 674, col: 21, offset: 21783},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 674, col: 28, offset: 21790},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 674, col: 28, offset: 21790},
																												run: (*parser).callonUnquotedAttributeValue40,
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 28, offset: 21790},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												run: (*parser).callonUnquotedAttributeValue42,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 676, col: 9, offset: 21844},
																													expr: &charClassMatcher{
																														pos:        position{line: 676, col: 9, offset: 21844},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 666, col: 78, offset: 21500},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 670, col: 25, offset: 21618},
																	run: (*parser).callonUnquotedAttributeValue46,
																	expr: &seqExpr{
																		pos: position{line: 670, col: 25, offset: 21618},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 670, col: 25, offset: 21618},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 670, col: 38, offset: 21631},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					run: (*parser).callonUnquotedAttributeValue50,
																					expr: &seqExpr{
																						pos: position{line: 332, col: 18, offset: 10393},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 332, col: 18, offset: 10393},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 332, col: 28, offset: 10403},
																								expr: &charClassMatcher{
																									pos:        position{line: 332, col: 29, offset: 10404},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 670, col: 57, offset: 21650},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 670, col: 63, offset: 21656},
																					expr: &actionExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						run: (*parser).callonUnquotedAttributeValue57,
																						expr: &seqExpr{
																							pos: position{line: 674, col: 17, offset: 21779},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 674, col: 17, offset: 21779},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 674, col: 21, offset: 21783},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 674, col: 28, offset: 21790},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 674, col: 28, offset: 21790},
																												run: (*parser).callonUnquotedAttributeValue62,
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 28, offset: 21790},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												run: (*parser).callonUnquotedAttributeValue64,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 676, col: 9, offset: 21844},
																													expr: &charClassMatcher{
																														pos:        position{line: 676, col: 9, offset: 21844},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 670, col: 79, offset: 21672},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 659, col: 5, offset: 21191},
																	run: (*parser).callonUnquotedAttributeValue68,
																	expr: &seqExpr{
																		pos: position{line: 659, col: 5, offset: 21191},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 659, col: 5, offset: 21191},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 659, col: 9, offset: 21195},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					run: (*parser).callonUnquotedAttributeValue72,
																					expr: &seqExpr{
																						pos: position{line: 332, col: 18, offset: 10393},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 332, col: 18, offset: 10393},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 332, col: 28, offset: 10403},
																								expr: &charClassMatcher{
																									pos:        position{line: 332, col: 29, offset: 10404},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 659, col: 28, offset: 21214},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 641, col: 11, offset: 20626},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 692, col: 1, offset: 22404},
			expr: &choiceExpr{
				pos: position{line: 692, col: 19, offset: 22422},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 694, col: 27, offset: 22498},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 694, col: 27, offset: 22498},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 694, col: 27, offset: 22498},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 694, col: 32, offset: 22503},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2884, col: 7, offset: 95839},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 2884, col: 7, offset: 95839},
											expr: &charClassMatcher{
												pos:        position{line: 2884, col: 7, offset: 95839},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 694, col: 40, offset: 22511},
									expr: &actionExpr{
										pos: position{line: 2899, col: 10, offset: 96187},
										run: (*parser).callonCrossReference10,
										expr: &charClassMatcher{
											pos:        position{line: 2899, col: 11, offset: 96188},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&litMatcher{
									pos:        position{line: 694, col: 47, offset: 22518},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 694, col: 51, offset: 22522},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 704, col: 24, offset: 22923},
										expr: &choiceExpr{
											pos: position{line: 705, col: 5, offset: 22929},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 705, col: 6, offset: 22930},
													run: (*parser).callonCrossReference16,
													expr: &seqExpr{
														pos: position{line: 705, col: 6, offset: 22930},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 705, col: 6, offset: 22930},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 705, col: 14, offset: 22938},
																expr: &charClassMatcher{
																	pos:        position{line: 705, col: 14, offset: 22938},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 659, col: 5, offset: 21191},
													run: (*parser).callonCrossReference21,
													expr: &seqExpr{
														pos: position{line: 659, col: 5, offset: 21191},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 659, col: 5, offset: 21191},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
															&labeledExpr{
																pos:   position{line: 659, col: 9, offset: 21195},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	run: (*parser).callonCrossReference25,
																	expr: &seqExpr{
																		pos: position{line: 332, col: 18, offset: 10393},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 332, col: 18, offset: 10393},
																				val:        "[_0-9\\pL]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 332, col: 28, offset: 10403},
																				expr: &charClassMatcher{
																					pos:        position{line: 332, col: 29, offset: 10404},
																					val:        "[-0-9\\pL]",
																					chars:      []rune{'-'},
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 659, col: 28, offset: 21214},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 709, col: 8, offset: 23164},
													run: (*parser).callonCrossReference31,
													expr: &litMatcher{
														pos:        position{line: 709, col: 8, offset: 23164},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 694, col: 79, offset: 22550},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 696, col: 9, offset: 22623},
						run: (*parser).callonCrossReference34,
						expr: &seqExpr{
							pos: position{line: 696, col: 9, offset: 22623},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 696, col: 9, offset: 22623},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 696, col: 14, offset: 22628},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2884, col: 7, offset: 95839},
										run: (*parser).callonCrossReference38,
										expr: &oneOrMoreExpr{
											pos: position{line: 2884, col: 7, offset: 95839},
											expr: &charClassMatcher{
												pos:        position{line: 2884, col: 7, offset: 95839},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 696, col: 22, offset: 22636},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 692, col: 44, offset: 22447},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 700, col: 1, offset: 22707},
			expr: &actionExpr{
				pos: position{line: 700, col: 27, offset: 22733},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 700, col: 27, offset: 22733},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 700, col: 27, offset: 22733},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 700, col: 35, offset: 22741},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2855, col: 17, offset: 94805},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 2855, col: 17, offset: 94805},
									label: "path",
									expr: &oneOrMoreExpr{
										pos: position{line: 2855, col: 22, offset: 94810},
										expr: &choiceExpr{
											pos: position{line: 2855, col: 23, offset: 94811},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2870, col: 5, offset: 95267},
													run: (*parser).callonExternalCrossReference9,
													expr: &seqExpr{
														pos: position{line: 2870, col: 5, offset: 95267},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 2870, col: 5, offset: 95267},
																expr: &litMatcher{
																	pos:        position{line: 2870, col: 6, offset: 95268},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
															&labeledExpr{
																pos:   position{line: 2871, col: 5, offset: 95292},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2871, col: 14, offset: 95301},
																	expr: &choiceExpr{
																		pos: position{line: 2872, col: 9, offset: 95311},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2872, col: 9, offset: 95311},
																				run: (*parser).callonExternalCrossReference16,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2872, col: 9, offset: 95311},
																					expr: &charClassMatcher{
																						pos:        position{line: 2872, col: 10, offset: 95312},
																						val:        "[^\\r\\n[]�{.,;?!<> ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2875, col: 11, offset: 95577},
																				exprs: []interface{}{
																					&actionExpr{
																						pos: position{line: 2845, col: 25, offset: 94548},
																						run: (*parser).callonExternalCrossReference20,
																						expr: &charClassMatcher{
																							pos:        position{line: 2845, col: 25, offset: 94548},
																							val:        "[.,;?!]",
																							chars:      []rune{'.', ',', ';', '?', '!'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&andExpr{
																						pos: position{line: 2875, col: 32, offset: 95598},
																						expr: &notExpr{
																							pos: position{line: 2875, col: 34, offset: 95600},
																							expr: &choiceExpr{
																								pos: position{line: 2875, col: 36, offset: 95602},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonExternalCrossReference27,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 651, col: 5, offset: 21000},
																				run: (*parser).callonExternalCrossReference29,
																				expr: &seqExpr{
																					pos: position{line: 651, col: 5, offset: 21000},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 651, col: 5, offset: 21000},
																							run: (*parser).callonExternalCrossReference31,
																						},
																						&labeledExpr{
																							pos:   position{line: 654, col: 5, offset: 21069},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 654, col: 14, offset: 21078},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 666, col: 25, offset: 21447},
																										run: (*parser).callonExternalCrossReference34,
																										expr: &seqExpr{
																											pos: position{line: 666, col: 25, offset: 21447},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 666, col: 25, offset: 21447},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 666, col: 37, offset: 21459},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonExternalCrossReference38,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 666, col: 56, offset: 21478},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 666, col: 62, offset: 21484},
																														expr: &actionExpr{
																															pos: position{line: 674, col: 17, offset: 21779},
																															run: (*parser).callonExternalCrossReference45,
																															expr: &seqExpr{
																																pos: position{line: 674, col: 17, offset: 21779},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 674, col: 17, offset: 21779},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 674, col: 21, offset: 21783},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 674, col: 28, offset: 21790},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					run: (*parser).callonExternalCrossReference50,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 674, col: 28, offset: 21790},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 676, col: 9, offset: 21844},
																																					run: (*parser).callonExternalCrossReference52,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 676, col: 9, offset: 21844},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 676, col: 9, offset: 21844},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 666, col: 78, offset: 21500},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 670, col: 25, offset: 21618},
																										run: (*parser).callonExternalCrossReference56,
																										expr: &seqExpr{
																											pos: position{line: 670, col: 25, offset: 21618},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 670, col: 25, offset: 21618},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 670, col: 38, offset: 21631},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonExternalCrossReference60,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 670, col: 57, offset: 21650},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 670, col: 63, offset: 21656},
																														expr: &actionExpr{
																															pos: position{line: 674, col: 17, offset: 21779},
																															run: (*parser).callonExternalCrossReference67,
																															expr: &seqExpr{
																																pos: position{line: 674, col: 17, offset: 21779},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 674, col: 17, offset: 21779},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 674, col: 21, offset: 21783},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 674, col: 28, offset: 21790},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					run: (*parser).callonExternalCrossReference72,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 674, col: 28, offset: 21790},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 676, col: 9, offset: 21844},
																																					run: (*parser).callonExternalCrossReference74,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 676, col: 9, offset: 21844},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 676, col: 9, offset: 21844},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 670, col: 79, offset: 21672},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 659, col: 5, offset: 21191},
																										run: (*parser).callonExternalCrossReference78,
																										expr: &seqExpr{
																											pos: position{line: 659, col: 5, offset: 21191},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 659, col: 5, offset: 21191},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 659, col: 9, offset: 21195},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonExternalCrossReference82,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 659, col: 28, offset: 21214},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2599, col: 5, offset: 86909},
																				run: (*parser).callonExternalCrossReference88,
																				expr: &seqExpr{
																					pos: position{line: 2599, col: 5, offset: 86909},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2599, col: 5, offset: 86909},
																							run: (*parser).callonExternalCrossReference90,
																						},
																						&labeledExpr{
																							pos:   position{line: 2602, col: 5, offset: 86985},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2604, col: 9, offset: 87083},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2604, col: 9, offset: 87083},
																										run: (*parser).callonExternalCrossReference93,
																										expr: &choiceExpr{
																											pos: position{line: 694, col: 27, offset: 22498},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 694, col: 27, offset: 22498},
																													run: (*parser).callonExternalCrossReference95,
																													expr: &seqExpr{
																														pos: position{line: 694, col: 27, offset: 22498},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 694, col: 27, offset: 22498},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 694, col: 32, offset: 22503},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2884, col: 7, offset: 95839},
																																	run: (*parser).callonExternalCrossReference99,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2884, col: 7, offset: 95839},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2884, col: 7, offset: 95839},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 694, col: 40, offset: 22511},
																																expr: &actionExpr{
																																	pos: position{line: 2899, col: 10, offset: 96187},
																																	run: (*parser).callonExternalCrossReference103,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2899, col: 11, offset: 96188},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 694, col: 47, offset: 22518},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 694, col: 51, offset: 22522},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 704, col: 24, offset: 22923},
																																	expr: &choiceExpr{
																																		pos: position{line: 705, col: 5, offset: 22929},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 705, col: 6, offset: 22930},
																																				run: (*parser).callonExternalCrossReference109,
																																				expr: &seqExpr{
																																					pos: position{line: 705, col: 6, offset: 22930},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 705, col: 6, offset: 22930},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 705, col: 14, offset: 22938},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 705, col: 14, offset: 22938},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 659, col: 5, offset: 21191},
																																				run: (*parser).callonExternalCrossReference114,
																																				expr: &seqExpr{
																																					pos: position{line: 659, col: 5, offset: 21191},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 659, col: 5, offset: 21191},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 659, col: 9, offset: 21195},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 332, col: 18, offset: 10393},
																																								run: (*parser).callonExternalCrossReference118,
																																								expr: &seqExpr{
																																									pos: position{line: 332, col: 18, offset: 10393},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 332, col: 18, offset: 10393},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 332, col: 28, offset: 10403},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 332, col: 29, offset: 10404},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 659, col: 28, offset: 21214},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 709, col: 8, offset: 23164},
																																				run: (*parser).callonExternalCrossReference124,
																																				expr: &litMatcher{
																																					pos:        position{line: 709, col: 8, offset: 23164},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 694, col: 79, offset: 22550},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 696, col: 9, offset: 22623},
																													run: (*parser).callonExternalCrossReference127,
																													expr: &seqExpr{
																														pos: position{line: 696, col: 9, offset: 22623},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 696, col: 9, offset: 22623},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 696, col: 14, offset: 22628},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2884, col: 7, offset: 95839},
																																	run: (*parser).callonExternalCrossReference131,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2884, col: 7, offset: 95839},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2884, col: 7, offset: 95839},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 696, col: 22, offset: 22636},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2607, col: 11, offset: 87187},
																										run: (*parser).callonExternalCrossReference135,
																										expr: &charClassMatcher{
																											pos:        position{line: 2607, col: 12, offset: 87188},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 11, offset: 95683},
																				run: (*parser).callonExternalCrossReference137,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 11, offset: 95683},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1122, col: 23, offset: 34991},
													run: (*parser).callonExternalCrossReference139,
													expr: &seqExpr{
														pos: position{line: 1122, col: 23, offset: 34991},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1120, col: 32, offset: 34959},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 1122, col: 51, offset: 35019},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 1122, col: 56, offset: 35024},
																	run: (*parser).callonExternalCrossReference143,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1122, col: 56, offset: 35024},
																		expr: &charClassMatcher{
																			pos:        position{line: 1122, col: 56, offset: 35024},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1120, col: 32, offset: 34959},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 54, offset: 22760},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 66, offset: 22772},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 942, col: 1, offset: 29533},
			expr: &actionExpr{
				pos: position{line: 943, col: 5, offset: 29566},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 943, col: 5, offset: 29566},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 943, col: 5, offset: 29566},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 943, col: 11, offset: 29572},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 943, col: 19, offset: 29580},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 943, col: 20, offset: 29581},
									expr: &charClassMatcher{
										pos:        position{line: 943, col: 20, offset: 29581},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2915, col: 8, offset: 96511},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2908, col: 12, offset: 96371},
									run: (*parser).callonMarkdownQuoteAttribution9,
									expr: &choiceExpr{
										pos: position{line: 2908, col: 13, offset: 96372},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2908, col: 13, offset: 96372},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 20, offset: 96379},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 29, offset: 96388},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2912, col: 8, offset: 96461},
									expr: &anyMatcher{
										line: 2912, col: 9, offset: 96462,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 1015, col: 1, offset: 31532},
			expr: &actionExpr{
				pos: position{line: 1016, col: 5, offset: 31555},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 5, offset: 31555},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1016, col: 5, offset: 31555},
							run: (*parser).callonDocumentHeader3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1019, col: 5, offset: 31616},
							expr: &actionExpr{
								pos: position{line: 685, col: 14, offset: 22145},
								run: (*parser).callonDocumentHeader5,
								expr: &seqExpr{
									pos: position{line: 685, col: 14, offset: 22145},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 685, col: 14, offset: 22145},
											expr: &notExpr{
												pos: position{line: 2912, col: 8, offset: 96461},
												expr: &anyMatcher{
													line: 2912, col: 9, offset: 96462,
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 685, col: 19, offset: 22150},
											expr: &actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonDocumentHeader11,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2915, col: 8, offset: 96511},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonDocumentHeader14,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1020, col: 5, offset: 31666},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 1028, col: 5, offset: 32009},
								run: (*parser).callonDocumentHeader22,
								expr: &seqExpr{
									pos: position{line: 1028, col: 5, offset: 32009},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1028, col: 5, offset: 32009},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
										&actionExpr{
											pos: position{line: 2903, col: 11, offset: 96254},
											run: (*parser).callonDocumentHeader25,
											expr: &oneOrMoreExpr{
												pos: position{line: 2903, col: 11, offset: 96254},
												expr: &charClassMatcher{
													pos:        position{line: 2903, col: 12, offset: 96255},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 1028, col: 16, offset: 32020},
											label: "title",
											expr: &actionExpr{
												pos: position{line: 2483, col: 17, offset: 83560},
												run: (*parser).callonDocumentHeader29,
												expr: &oneOrMoreExpr{
													pos: position{line: 2483, col: 17, offset: 83560},
													expr: &charClassMatcher{
														pos:        position{line: 2483, col: 17, offset: 83560},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 2915, col: 8, offset: 96511},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonDocumentHeader33,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1021, col: 5, offset: 31690},
							label: "info",
							expr: &zeroOrOneExpr{
								pos: position{line: 1021, col: 10, offset: 31695},
								expr: &actionExpr{
									pos: position{line: 1033, col: 5, offset: 32114},
									run: (*parser).callonDocumentHeader42,
									expr: &seqExpr{
										pos: position{line: 1033, col: 5, offset: 32114},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1033, col: 5, offset: 32114},
												expr: &actionExpr{
													pos: position{line: 685, col: 14, offset: 22145},
													run: (*parser).callonDocumentHeader45,
													expr: &seqExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 685, col: 14, offset: 22145},
																expr: &notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 685, col: 19, offset: 22150},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonDocumentHeader51,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonDocumentHeader54,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1034, col: 5, offset: 32129},
												expr: &choiceExpr{
													pos: position{line: 1034, col: 6, offset: 32130},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2616, col: 22, offset: 87547},
															run: (*parser).callonDocumentHeader63,
															expr: &seqExpr{
																pos: position{line: 2616, col: 22, offset: 87547},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2621, col: 31, offset: 87768},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2621, col: 36, offset: 87773},
																		expr: &litMatcher{
																			pos:        position{line: 2621, col: 37, offset: 87774},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2616, col: 49, offset: 87574},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2623, col: 29, offset: 87809},
																			run: (*parser).callonDocumentHeader69,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2623, col: 29, offset: 87809},
																				expr: &charClassMatcher{
																					pos:        position{line: 2623, col: 29, offset: 87809},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonDocumentHeader73,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 798, col: 5, offset: 25649},
															run: (*parser).callonDocumentHeader80,
															expr: &seqExpr{
																pos: position{line: 798, col: 5, offset: 25649},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 746, col: 26, offset: 24217},
																		run: (*parser).callonDocumentHeader82,
																		expr: &seqExpr{
																			pos: position{line: 746, col: 26, offset: 24217},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 746, col: 26, offset: 24217},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 746, col: 33, offset: 24224},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonDocumentHeader86,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonDocumentHeader89,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 799, col: 5, offset: 25680},
																		label: "content",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 810, col: 5, offset: 26004},
																			expr: &actionExpr{
																				pos: position{line: 810, col: 6, offset: 26005},
																				run: (*parser).callonDocumentHeader98,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 6, offset: 26005},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 6, offset: 26005},
																							expr: &choiceExpr{
																								pos: position{line: 807, col: 29, offset: 25947},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 746, col: 26, offset: 24217},
																										run: (*parser).callonDocumentHeader102,
																										expr: &seqExpr{
																											pos: position{line: 746, col: 26, offset: 24217},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 746, col: 26, offset: 24217},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 746, col: 33, offset: 24224},
																													expr: &actionExpr{
																														pos: position{line: 2899, col: 10, offset: 96187},
																														run: (*parser).callonDocumentHeader106,
																														expr: &charClassMatcher{
																															pos:        position{line: 2899, col: 11, offset: 96188},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2915, col: 8, offset: 96511},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2908, col: 12, offset: 96371},
																															run: (*parser).callonDocumentHeader109,
																															expr: &choiceExpr{
																																pos: position{line: 2908, col: 13, offset: 96372},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2908, col: 13, offset: 96372},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2908, col: 20, offset: 96379},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2908, col: 29, offset: 96388},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2912, col: 8, offset: 96461},
																															expr: &anyMatcher{
																																line: 2912, col: 9, offset: 96462,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26035},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 787, col: 5, offset: 25344},
																								run: (*parser).callonDocumentHeader119,
																								expr: &seqExpr{
																									pos: position{line: 787, col: 5, offset: 25344},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 787, col: 5, offset: 25344},
																											expr: &notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 788, col: 5, offset: 25417},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 788, col: 14, offset: 25426},
																												run: (*parser).callonDocumentHeader125,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 788, col: 14, offset: 25426},
																													expr: &charClassMatcher{
																														pos:        position{line: 788, col: 14, offset: 25426},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonDocumentHeader129,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 800, col: 5, offset: 25714},
																		expr: &choiceExpr{
																			pos: position{line: 807, col: 29, offset: 25947},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 746, col: 26, offset: 24217},
																					run: (*parser).callonDocumentHeader138,
																					expr: &seqExpr{
																						pos: position{line: 746, col: 26, offset: 24217},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 746, col: 26, offset: 24217},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 746, col: 33, offset: 24224},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonDocumentHeader142,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonDocumentHeader145,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1035, col: 5, offset: 32204},
												label: "authors",
												expr: &actionExpr{
													pos: position{line: 1041, col: 20, offset: 32454},
													run: (*parser).callonDocumentHeader155,
													expr: &seqExpr{
														pos: position{line: 1041, col: 20, offset: 32454},
														exprs: []interface{}{
															&zeroOrMoreExpr{
																pos: position{line: 1041, col: 20, offset: 32454},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonDocumentHeader158,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1041, col: 27, offset: 32461},
																label: "authors",
																expr: &choiceExpr{
																	pos: position{line: 1041, col: 36, offset: 32470},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 1045, col: 30, offset: 32590},
																			run: (*parser).callonDocumentHeader162,
																			expr: &seqExpr{
																				pos: position{line: 1045, col: 30, offset: 32590},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1045, col: 30, offset: 32590},
																						expr: &litMatcher{
																							pos:        position{line: 1045, col: 31, offset: 32591},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1045, col: 35, offset: 32595},
																						label: "authors",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1045, col: 44, offset: 32604},
																							expr: &actionExpr{
																								pos: position{line: 1054, col: 5, offset: 32836},
																								run: (*parser).callonDocumentHeader168,
																								expr: &seqExpr{
																									pos: position{line: 1054, col: 5, offset: 32836},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1054, col: 5, offset: 32836},
																											label: "fullName",
																											expr: &zeroOrOneExpr{
																												pos: position{line: 1054, col: 14, offset: 32845},
																												expr: &actionExpr{
																													pos: position{line: 1065, col: 5, offset: 33225},
																													run: (*parser).callonDocumentHeader172,
																													expr: &seqExpr{
																														pos: position{line: 1065, col: 5, offset: 33225},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 1065, col: 5, offset: 33225},
																																label: "part1",
																																expr: &actionExpr{
																																	pos: position{line: 1065, col: 12, offset: 33232},
																																	run: (*parser).callonDocumentHeader175,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1065, col: 12, offset: 33232},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1065, col: 12, offset: 33232},
																																			val:        "[^<;\\r\\n ]",
																																			chars:      []rune{'<', ';', '\r', '\n', ' '},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 1068, col: 5, offset: 33312},
																																expr: &actionExpr{
																																	pos: position{line: 2899, col: 10, offset: 96187},
																																	run: (*parser).callonDocumentHeader179,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2899, col: 11, offset: 96188},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1069, col: 5, offset: 33323},
																																label: "part2",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 1069, col: 11, offset: 33329},
																																	expr: &actionExpr{
																																		pos: position{line: 1069, col: 12, offset: 33330},
																																		run: (*parser).callonDocumentHeader183,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 1069, col: 12, offset: 33330},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 1069, col: 12, offset: 33330},
																																				val:        "[^<;\\r\\n ]",
																																				chars:      []rune{'<', ';', '\r', '\n', ' '},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 1072, col: 5, offset: 33411},
																																expr: &actionExpr{
																																	pos: position{line: 2899, col: 10, offset: 96187},
																																	run: (*parser).callonDocumentHeader187,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2899, col: 11, offset: 96188},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1073, col: 5, offset: 33422},
																																label: "part3",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 1073, col: 11, offset: 33428},
																																	expr: &actionExpr{
																																		pos: position{line: 1073, col: 12, offset: 33429},
																																		run: (*parser).callonDocumentHeader191,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 1073, col: 12, offset: 33429},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 1073, col: 12, offset: 33429},
																																				val:        "[^<;\\r\\n]",
																																				chars:      []rune{'<', ';', '\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 1076, col: 5, offset: 33508},
																																expr: &actionExpr{
																																	pos: position{line: 2899, col: 10, offset: 96187},
																																	run: (*parser).callonDocumentHeader195,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2899, col: 11, offset: 96188},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 1054, col: 40, offset: 32871},
																											label: "email",
																											expr: &zeroOrOneExpr{
																												pos: position{line: 1054, col: 46, offset: 32877},
																												expr: &actionExpr{
																													pos: position{line: 1082, col: 5, offset: 33630},
																													run: (*parser).callonDocumentHeader199,
																													expr: &seqExpr{
																														pos: position{line: 1082, col: 5, offset: 33630},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 1082, col: 5, offset: 33630},
																																expr: &notExpr{
																																	pos: position{line: 2912, col: 8, offset: 96461},
																																	expr: &anyMatcher{
																																		line: 2912, col: 9, offset: 96462,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 1083, col: 5, offset: 33640},
																																val:        "<",
																																ignoreCase: false,
																																want:       "\"<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 1084, col: 5, offset: 33649},
																																label: "email",
																																expr: &actionExpr{
																																	pos: position{line: 1084, col: 12, offset: 33656},
																																	run: (*parser).callonDocumentHeader206,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1084, col: 13, offset: 33657},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1084, col: 13, offset: 33657},
																																			val:        "[^>\\r\\n]",
																																			chars:      []rune{'>', '\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 1087, col: 5, offset: 33717},
																																val:        ">",
																																ignoreCase: false,
																																want:       "\">\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1054, col: 69, offset: 32900},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonDocumentHeader211,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 1054, col: 76, offset: 32907},
																											expr: &litMatcher{
																												pos:        position{line: 1054, col: 76, offset: 32907},
																												val:        ";",
																												ignoreCase: false,
																												want:       "\";\"",
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1054, col: 81, offset: 32912},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonDocumentHeader216,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1055, col: 5, offset: 32924},
																											run: (*parser).callonDocumentHeader218,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1049, col: 33, offset: 32722},
																			run: (*parser).callonDocumentHeader219,
																			expr: &seqExpr{
																				pos: position{line: 1049, col: 33, offset: 32722},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1049, col: 33, offset: 32722},
																						val:        ":author:",
																						ignoreCase: false,
																						want:       "\":author:\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 1049, col: 44, offset: 32733},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonDocumentHeader223,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1049, col: 51, offset: 32740},
																						label: "author",
																						expr: &actionExpr{
																							pos: position{line: 1054, col: 5, offset: 32836},
																							run: (*parser).callonDocumentHeader226,
																							expr: &seqExpr{
																								pos: position{line: 1054, col: 5, offset: 32836},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1054, col: 5, offset: 32836},
																										label: "fullName",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 1054, col: 14, offset: 32845},
																											expr: &actionExpr{
																												pos: position{line: 1065, col: 5, offset: 33225},
																												run: (*parser).callonDocumentHeader230,
																												expr: &seqExpr{
																													pos: position{line: 1065, col: 5, offset: 33225},
																													exprs: []interface{}{
																														&labeledExpr{
																															pos:   position{line: 1065, col: 5, offset: 33225},
																															label: "part1",
																															expr: &actionExpr{
																																pos: position{line: 1065, col: 12, offset: 33232},
																																run: (*parser).callonDocumentHeader233,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 1065, col: 12, offset: 33232},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 1065, col: 12, offset: 33232},
																																		val:        "[^<;\\r\\n ]",
																																		chars:      []rune{'<', ';', '\r', '\n', ' '},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1068, col: 5, offset: 33312},
																															expr: &actionExpr{
																																pos: position{line: 2899, col: 10, offset: 96187},
																																run: (*parser).callonDocumentHeader237,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2899, col: 11, offset: 96188},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 1069, col: 5, offset: 33323},
																															label: "part2",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 1069, col: 11, offset: 33329},
																																expr: &actionExpr{
																																	pos: position{line: 1069, col: 12, offset: 33330},
																																	run: (*parser).callonDocumentHeader241,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1069, col: 12, offset: 33330},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1069, col: 12, offset: 33330},
																																			val:        "[^<;\\r\\n ]",
																																			chars:      []rune{'<', ';', '\r', '\n', ' '},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1072, col: 5, offset: 33411},
																															expr: &actionExpr{
																																pos: position{line: 2899, col: 10, offset: 96187},
																																run: (*parser).callonDocumentHeader245,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2899, col: 11, offset: 96188},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 1073, col: 5, offset: 33422},
																															label: "part3",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 1073, col: 11, offset: 33428},
																																expr: &actionExpr{
																																	pos: position{line: 1073, col: 12, offset: 33429},
																																	run: (*parser).callonDocumentHeader249,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1073, col: 12, offset: 33429},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1073, col: 12, offset: 33429},
																																			val:        "[^<;\\r\\n]",
																																			chars:      []rune{'<', ';', '\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1076, col: 5, offset: 33508},
																															expr: &actionExpr{
																																pos: position{line: 2899, col: 10, offset: 96187},
																																run: (*parser).callonDocumentHeader253,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2899, col: 11, offset: 96188},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1054, col: 40, offset: 32871},
																										label: "email",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 1054, col: 46, offset: 32877},
																											expr: &actionExpr{
																												pos: position{line: 1082, col: 5, offset: 33630},
																												run: (*parser).callonDocumentHeader257,
																												expr: &seqExpr{
																													pos: position{line: 1082, col: 5, offset: 33630},
																													exprs: []interface{}{
																														&notExpr{
																															pos: position{line: 1082, col: 5, offset: 33630},
																															expr: &notExpr{
																																pos: position{line: 2912, col: 8, offset: 96461},
																																expr: &anyMatcher{
																																	line: 2912, col: 9, offset: 96462,
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 1083, col: 5, offset: 33640},
																															val:        "<",
																															ignoreCase: false,
																															want:       "\"<\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 1084, col: 5, offset: 33649},
																															label: "email",
																															expr: &actionExpr{
																																pos: position{line: 1084, col: 12, offset: 33656},
																																run: (*parser).callonDocumentHeader264,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 1084, col: 13, offset: 33657},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 1084, col: 13, offset: 33657},
																																		val:        "[^>\\r\\n]",
																																		chars:      []rune{'>', '\r', '\n'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 1087, col: 5, offset: 33717},
																															val:        ">",
																															ignoreCase: false,
																															want:       "\">\"",
																														},
																													},
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1054, col: 69, offset: 32900},
																										expr: &actionExpr{
																											pos: position{line: 2899, col: 10, offset: 96187},
																											run: (*parser).callonDocumentHeader269,
																											expr: &charClassMatcher{
																												pos:        position{line: 2899, col: 11, offset: 96188},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 1054, col: 76, offset: 32907},
																										expr: &litMatcher{
																											pos:        position{line: 1054, col: 76, offset: 32907},
																											val:        ";",
																											ignoreCase: false,
																											want:       "\";\"",
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1054, col: 81, offset: 32912},
																										expr: &actionExpr{
																											pos: position{line: 2899, col: 10, offset: 96187},
																											run: (*parser).callonDocumentHeader274,
																											expr: &charClassMatcher{
																												pos:        position{line: 2899, col: 11, offset: 96188},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1055, col: 5, offset: 32924},
																										run: (*parser).callonDocumentHeader276,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonDocumentHeader278,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1036, col: 5, offset: 32235},
												expr: &choiceExpr{
													pos: position{line: 1036, col: 6, offset: 32236},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2616, col: 22, offset: 87547},
															run: (*parser).callonDocumentHeader287,
															expr: &seqExpr{
																pos: position{line: 2616, col: 22, offset: 87547},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2621, col: 31, offset: 87768},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2621, col: 36, offset: 87773},
																		expr: &litMatcher{
																			pos:        position{line: 2621, col: 37, offset: 87774},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2616, col: 49, offset: 87574},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2623, col: 29, offset: 87809},
																			run: (*parser).callonDocumentHeader293,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2623, col: 29, offset: 87809},
																				expr: &charClassMatcher{
																					pos:        position{line: 2623, col: 29, offset: 87809},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonDocumentHeader297,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 798, col: 5, offset: 25649},
															run: (*parser).callonDocumentHeader304,
															expr: &seqExpr{
																pos: position{line: 798, col: 5, offset: 25649},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 746, col: 26, offset: 24217},
																		run: (*parser).callonDocumentHeader306,
																		expr: &seqExpr{
																			pos: position{line: 746, col: 26, offset: 24217},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 746, col: 26, offset: 24217},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 746, col: 33, offset: 24224},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonDocumentHeader310,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonDocumentHeader313,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 799, col: 5, offset: 25680},
																		label: "content",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 810, col: 5, offset: 26004},
																			expr: &actionExpr{
																				pos: position{line: 810, col: 6, offset: 26005},
																				run: (*parser).callonDocumentHeader322,
																				expr: &seqExpr{
																					pos: position{line: 810, col: 6, offset: 26005},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 810, col: 6, offset: 26005},
																							expr: &choiceExpr{
																								pos: position{line: 807, col: 29, offset: 25947},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 746, col: 26, offset: 24217},
																										run: (*parser).callonDocumentHeader326,
																										expr: &seqExpr{
																											pos: position{line: 746, col: 26, offset: 24217},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 746, col: 26, offset: 24217},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 746, col: 33, offset: 24224},
																													expr: &actionExpr{
																														pos: position{line: 2899, col: 10, offset: 96187},
																														run: (*parser).callonDocumentHeader330,
																														expr: &charClassMatcher{
																															pos:        position{line: 2899, col: 11, offset: 96188},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2915, col: 8, offset: 96511},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2908, col: 12, offset: 96371},
																															run: (*parser).callonDocumentHeader333,
																															expr: &choiceExpr{
																																pos: position{line: 2908, col: 13, offset: 96372},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2908, col: 13, offset: 96372},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2908, col: 20, offset: 96379},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2908, col: 29, offset: 96388},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2912, col: 8, offset: 96461},
																															expr: &anyMatcher{
																																line: 2912, col: 9, offset: 96462,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 811, col: 5, offset: 26035},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 787, col: 5, offset: 25344},
																								run: (*parser).callonDocumentHeader343,
																								expr: &seqExpr{
																									pos: position{line: 787, col: 5, offset: 25344},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 787, col: 5, offset: 25344},
																											expr: &notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 788, col: 5, offset: 25417},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 788, col: 14, offset: 25426},
																												run: (*parser).callonDocumentHeader349,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 788, col: 14, offset: 25426},
																													expr: &charClassMatcher{
																														pos:        position{line: 788, col: 14, offset: 25426},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonDocumentHeader353,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 800, col: 5, offset: 25714},
																		expr: &choiceExpr{
																			pos: position{line: 807, col: 29, offset: 25947},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 746, col: 26, offset: 24217},
																					run: (*parser).callonDocumentHeader362,
																					expr: &seqExpr{
																						pos: position{line: 746, col: 26, offset: 24217},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 746, col: 26, offset: 24217},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 746, col: 33, offset: 24224},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonDocumentHeader366,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonDocumentHeader369,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1037, col: 5, offset: 32310},
												label: "revision",
												expr: &zeroOrOneExpr{
													pos: position{line: 1037, col: 14, offset: 32319},
													expr: &actionExpr{
														pos: position{line: 1093, col: 21, offset: 33906},
														run: (*parser).callonDocumentHeader380,
														expr: &seqExpr{
															pos: position{line: 1093, col: 21, offset: 33906},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1093, col: 21, offset: 33906},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonDocumentHeader383,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1093, col: 28, offset: 33913},
																	expr: &litMatcher{
																		pos:        position{line: 1093, col: 29, offset: 33914},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1093, col: 33, offset: 33918},
																	label: "revision",
																	expr: &choiceExpr{
																		pos: position{line: 1094, col: 9, offset: 33937},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1094, col: 10, offset: 33938},
																				run: (*parser).callonDocumentHeader389,
																				expr: &seqExpr{
																					pos: position{line: 1094, col: 10, offset: 33938},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1094, col: 10, offset: 33938},
																							label: "revnumber",
																							expr: &choiceExpr{
																								pos: position{line: 1103, col: 27, offset: 34455},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1103, col: 27, offset: 34455},
																										run: (*parser).callonDocumentHeader393,
																										expr: &seqExpr{
																											pos: position{line: 1103, col: 27, offset: 34455},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 1103, col: 27, offset: 34455},
																													val:        "v",
																													ignoreCase: true,
																													want:       "\"v\"i",
																												},
																												&charClassMatcher{
																													pos:        position{line: 1103, col: 32, offset: 34460},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 1103, col: 38, offset: 34466},
																													expr: &charClassMatcher{
																														pos:        position{line: 1103, col: 38, offset: 34466},
																														val:        "[^:,\\r\\n]",
																														chars:      []rune{':', ',', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1105, col: 5, offset: 34514},
																										run: (*parser).callonDocumentHeader399,
																										expr: &seqExpr{
																											pos: position{line: 1105, col: 5, offset: 34514},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 1105, col: 5, offset: 34514},
																													expr: &litMatcher{
																														pos:        position{line: 1105, col: 5, offset: 34514},
																														val:        "v",
																														ignoreCase: true,
																														want:       "\"v\"i",
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 1105, col: 11, offset: 34520},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 1105, col: 17, offset: 34526},
																													expr: &charClassMatcher{
																														pos:        position{line: 1105, col: 17, offset: 34526},
																														val:        "[^:,\\r\\n]",
																														chars:      []rune{':', ',', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1105, col: 28, offset: 34537},
																													expr: &actionExpr{
																														pos: position{line: 2899, col: 10, offset: 96187},
																														run: (*parser).callonDocumentHeader407,
																														expr: &charClassMatcher{
																															pos:        position{line: 2899, col: 11, offset: 96188},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 1105, col: 35, offset: 34544},
																													expr: &litMatcher{
																														pos:        position{line: 1105, col: 36, offset: 34545},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1094, col: 45, offset: 33973},
																							expr: &litMatcher{
																								pos:        position{line: 1094, col: 45, offset: 33973},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1094, col: 50, offset: 33978},
																							label: "revdate",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1094, col: 58, offset: 33986},
																								expr: &actionExpr{
																									pos: position{line: 1109, col: 25, offset: 34609},
																									run: (*parser).callonDocumentHeader415,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1109, col: 25, offset: 34609},
																										expr: &charClassMatcher{
																											pos:        position{line: 1109, col: 25, offset: 34609},
																											val:        "[^:\\r\\n]",
																											chars:      []rune{':', '\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1094, col: 82, offset: 34010},
																							expr: &litMatcher{
																								pos:        position{line: 1094, col: 82, offset: 34010},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1094, col: 87, offset: 34015},
																							label: "revremark",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1094, col: 97, offset: 34025},
																								expr: &actionExpr{
																									pos: position{line: 1113, col: 27, offset: 34681},
																									run: (*parser).callonDocumentHeader422,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1113, col: 27, offset: 34681},
																										expr: &charClassMatcher{
																											pos:        position{line: 1113, col: 27, offset: 34681},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1096, col: 15, offset: 34143},
																				run: (*parser).callonDocumentHeader425,
																				expr: &seqExpr{
																					pos: position{line: 1096, col: 15, offset: 34143},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1096, col: 15, offset: 34143},
																							label: "revdate",
																							expr: &actionExpr{
																								pos: position{line: 1109, col: 25, offset: 34609},
																								run: (*parser).callonDocumentHeader428,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1109, col: 25, offset: 34609},
																									expr: &charClassMatcher{
																										pos:        position{line: 1109, col: 25, offset: 34609},
																										val:        "[^:\\r\\n]",
																										chars:      []rune{':', '\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1096, col: 46, offset: 34174},
																							expr: &litMatcher{
																								pos:        position{line: 1096, col: 46, offset: 34174},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1096, col: 51, offset: 34179},
																							label: "revremark",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1096, col: 61, offset: 34189},
																								expr: &actionExpr{
																									pos: position{line: 1113, col: 27, offset: 34681},
																									run: (*parser).callonDocumentHeader435,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1113, col: 27, offset: 34681},
																										expr: &charClassMatcher{
																											pos:        position{line: 1113, col: 27, offset: 34681},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonDocumentHeader439,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1022, col: 5, offset: 31720},
							label: "extraAttrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1022, col: 16, offset: 31731},
								expr: &choiceExpr{
									pos: position{line: 1022, col: 17, offset: 31732},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1022, col: 17, offset: 31732},
											name: "AttributeDeclaration",
										},
										&actionExpr{
											pos: position{line: 372, col: 19, offset: 11492},
											run: (*parser).callonDocumentHeader450,
											expr: &seqExpr{
												pos: position{line: 372, col: 19, offset: 11492},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 372, col: 19, offset: 11492},
														val:        ":!",
														ignoreCase: false,
														want:       "\":!\"",
													},
													&labeledExpr{
														pos:   position{line: 372, col: 24, offset: 11497},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 332, col: 18, offset: 10393},
															run: (*parser).callonDocumentHeader454,
															expr: &seqExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 332, col: 18, offset: 10393},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 332, col: 28, offset: 10403},
																		expr: &charClassMatcher{
																			pos:        position{line: 332, col: 29, offset: 10404},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 372, col: 45, offset: 11518},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 372, col: 49, offset: 11522},
														expr: &actionExpr{
															pos: position{line: 2899, col: 10, offset: 96187},
															run: (*parser).callonDocumentHeader461,
															expr: &charClassMatcher{
																pos:        position{line: 2899, col: 11, offset: 96188},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentHeader464,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 374, col: 5, offset: 11605},
											run: (*parser).callonDocumentHeader471,
											expr: &seqExpr{
												pos: position{line: 374, col: 5, offset: 11605},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 374, col: 5, offset: 11605},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&labeledExpr{
														pos:   position{line: 374, col: 9, offset: 11609},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 332, col: 18, offset: 10393},
															run: (*parser).callonDocumentHeader475,
															expr: &seqExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 332, col: 18, offset: 10393},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 332, col: 28, offset: 10403},
																		expr: &charClassMatcher{
																			pos:        position{line: 332, col: 29, offset: 10404},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 374, col: 30, offset: 11630},
														val:        "!:",
														ignoreCase: false,
														want:       "\"!:\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 374, col: 35, offset: 11635},
														expr: &actionExpr{
															pos: position{line: 2899, col: 10, offset: 96187},
															run: (*parser).callonDocumentHeader482,
															expr: &charClassMatcher{
																pos:        position{line: 2899, col: 11, offset: 96188},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentHeader485,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2616, col: 22, offset: 87547},
											run: (*parser).callonDocumentHeader492,
											expr: &seqExpr{
												pos: position{line: 2616, col: 22, offset: 87547},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2621, col: 31, offset: 87768},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
													&notExpr{
														pos: position{line: 2621, col: 36, offset: 87773},
														expr: &litMatcher{
															pos:        position{line: 2621, col: 37, offset: 87774},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 2616, col: 49, offset: 87574},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2623, col: 29, offset: 87809},
															run: (*parser).callonDocumentHeader498,
															expr: &zeroOrMoreExpr{
																pos: position{line: 2623, col: 29, offset: 87809},
																expr: &charClassMatcher{
																	pos:        position{line: 2623, col: 29, offset: 87809},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2915, col: 8, offset: 96511},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonDocumentHeader502,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 798, col: 5, offset: 25649},
											run: (*parser).callonDocumentHeader509,
											expr: &seqExpr{
												pos: position{line: 798, col: 5, offset: 25649},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 746, col: 26, offset: 24217},
														run: (*parser).callonDocumentHeader511,
														expr: &seqExpr{
															pos: position{line: 746, col: 26, offset: 24217},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 746, col: 26, offset: 24217},
																	val:        "////",
																	ignoreCase: false,
																	want:       "\"////\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 746, col: 33, offset: 24224},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonDocumentHeader515,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonDocumentHeader518,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 799, col: 5, offset: 25680},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 810, col: 5, offset: 26004},
															expr: &actionExpr{
																pos: position{line: 810, col: 6, offset: 26005},
																run: (*parser).callonDocumentHeader527,
																expr: &seqExpr{
																	pos: position{line: 810, col: 6, offset: 26005},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 810, col: 6, offset: 26005},
																			expr: &choiceExpr{
																				pos: position{line: 807, col: 29, offset: 25947},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 746, col: 26, offset: 24217},
																						run: (*parser).callonDocumentHeader531,
																						expr: &seqExpr{
																							pos: position{line: 746, col: 26, offset: 24217},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 746, col: 26, offset: 24217},
																									val:        "////",
																									ignoreCase: false,
																									want:       "\"////\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 746, col: 33, offset: 24224},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonDocumentHeader535,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonDocumentHeader538,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 811, col: 5, offset: 26035},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				run: (*parser).callonDocumentHeader548,
																				expr: &seqExpr{
																					pos: position{line: 787, col: 5, offset: 25344},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 787, col: 5, offset: 25344},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25417},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								run: (*parser).callonDocumentHeader554,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 788, col: 14, offset: 25426},
																									expr: &charClassMatcher{
																										pos:        position{line: 788, col: 14, offset: 25426},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonDocumentHeader558,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 800, col: 5, offset: 25714},
														expr: &choiceExpr{
															pos: position{line: 807, col: 29, offset: 25947},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 746, col: 26, offset: 24217},
																	run: (*parser).callonDocumentHeader567,
																	expr: &seqExpr{
																		pos: position{line: 746, col: 26, offset: 24217},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 746, col: 26, offset: 24217},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 746, col: 33, offset: 24224},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonDocumentHeader571,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonDocumentHeader574,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1180, col: 1, offset: 36851},
			expr: &actionExpr{
				pos: position{line: 1181, col: 5, offset: 36874},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1181, col: 5, offset: 36874},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1182, col: 9, offset: 36892},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 2832, col: 5, offset: 94176},
								run: (*parser).callonInlineElement4,
								expr: &seqExpr{
									pos: position{line: 2832, col: 5, offset: 94176},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2832, col: 5, offset: 94176},
											expr: &charClassMatcher{
												pos:        position{line: 2832, col: 5, offset: 94176},
												val:        "[,;!?0-9\\pL]",
												chars:      []rune{',', ';', '!', '?'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2833, col: 6, offset: 94226},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2899, col: 10, offset: 96187},
													run: (*parser).callonInlineElement9,
													expr: &charClassMatcher{
														pos:        position{line: 2899, col: 11, offset: 96188},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2833, col: 14, offset: 94234},
													expr: &choiceExpr{
														pos: position{line: 2833, col: 16, offset: 94236},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2833, col: 16, offset: 94236},
																val:        "[.�]",
																chars:      []rune{'.', '�'},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 2908, col: 12, offset: 96371},
																run: (*parser).callonInlineElement14,
																expr: &choiceExpr{
																	pos: position{line: 2908, col: 13, offset: 96372},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2908, col: 13, offset: 96372},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 20, offset: 96379},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2908, col: 29, offset: 96388},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 2903, col: 11, offset: 96254},
								run: (*parser).callonInlineElement21,
								expr: &oneOrMoreExpr{
									pos: position{line: 2903, col: 11, offset: 96254},
									expr: &charClassMatcher{
										pos:        position{line: 2903, col: 12, offset: 96255},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&actionExpr{
								pos: position{line: 1130, col: 5, offset: 35437},
								run: (*parser).callonInlineElement24,
								expr: &seqExpr{
									pos: position{line: 1130, col: 5, offset: 35437},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 1130, col: 5, offset: 35437},
											run: (*parser).callonInlineElement26,
										},
										&litMatcher{
											pos:        position{line: 1133, col: 5, offset: 35539},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1133, col: 9, offset: 35543},
											expr: &actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonInlineElement29,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&andExpr{
											pos: position{line: 1133, col: 16, offset: 35550},
											expr: &choiceExpr{
												pos: position{line: 2915, col: 8, offset: 96511},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2908, col: 12, offset: 96371},
														run: (*parser).callonInlineElement33,
														expr: &choiceExpr{
															pos: position{line: 2908, col: 13, offset: 96372},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2908, col: 13, offset: 96372},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2908, col: 20, offset: 96379},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2908, col: 29, offset: 96388},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2912, col: 8, offset: 96461},
														expr: &anyMatcher{
															line: 2912, col: 9, offset: 96462,
														},
													},
												},
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1185, col: 11, offset: 36991},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1185, col: 11, offset: 36991},
										expr: &choiceExpr{
											pos: position{line: 2915, col: 8, offset: 96511},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonInlineElement43,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 1186, col: 13, offset: 37010},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1186, col: 13, offset: 37010},
												name: "Quote",
											},
											&actionExpr{
												pos: position{line: 651, col: 5, offset: 21000},
												run: (*parser).callonInlineElement52,
												expr: &seqExpr{
													pos: position{line: 651, col: 5, offset: 21000},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 651, col: 5, offset: 21000},
															run: (*parser).callonInlineElement54,
														},
														&labeledExpr{
															pos:   position{line: 654, col: 5, offset: 21069},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 654, col: 14, offset: 21078},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 666, col: 25, offset: 21447},
																		run: (*parser).callonInlineElement57,
																		expr: &seqExpr{
																			pos: position{line: 666, col: 25, offset: 21447},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 666, col: 25, offset: 21447},
																					val:        "{counter:",
																					ignoreCase: false,
																					want:       "\"{counter:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 666, col: 37, offset: 21459},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 332, col: 18, offset: 10393},
																						run: (*parser).callonInlineElement61,
																						expr: &seqExpr{
																							pos: position{line: 332, col: 18, offset: 10393},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 332, col: 18, offset: 10393},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 332, col: 28, offset: 10403},
																									expr: &charClassMatcher{
																										pos:        position{line: 332, col: 29, offset: 10404},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 666, col: 56, offset: 21478},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 666, col: 62, offset: 21484},
																						expr: &actionExpr{
																							pos: position{line: 674, col: 17, offset: 21779},
																							run: (*parser).callonInlineElement68,
																							expr: &seqExpr{
																								pos: position{line: 674, col: 17, offset: 21779},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 674, col: 17, offset: 21779},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 674, col: 21, offset: 21783},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 674, col: 28, offset: 21790},
																													run: (*parser).callonInlineElement73,
																													expr: &charClassMatcher{
																														pos:        position{line: 674, col: 28, offset: 21790},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 676, col: 9, offset: 21844},
																													run: (*parser).callonInlineElement75,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 676, col: 9, offset: 21844},
																														expr: &charClassMatcher{
																															pos:        position{line: 676, col: 9, offset: 21844},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 666, col: 78, offset: 21500},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 670, col: 25, offset: 21618},
																		run: (*parser).callonInlineElement79,
																		expr: &seqExpr{
																			pos: position{line: 670, col: 25, offset: 21618},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 670, col: 25, offset: 21618},
																					val:        "{counter2:",
																					ignoreCase: false,
																					want:       "\"{counter2:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 670, col: 38, offset: 21631},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 332, col: 18, offset: 10393},
																						run: (*parser).callonInlineElement83,
																						expr: &seqExpr{
																							pos: position{line: 332, col: 18, offset: 10393},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 332, col: 18, offset: 10393},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 332, col: 28, offset: 10403},
																									expr: &charClassMatcher{
																										pos:        position{line: 332, col: 29, offset: 10404},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 670, col: 57, offset: 21650},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 670, col: 63, offset: 21656},
																						expr: &actionExpr{
																							pos: position{line: 674, col: 17, offset: 21779},
																							run: (*parser).callonInlineElement90,
																							expr: &seqExpr{
																								pos: position{line: 674, col: 17, offset: 21779},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 674, col: 17, offset: 21779},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 674, col: 21, offset: 21783},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 674, col: 28, offset: 21790},
																													run: (*parser).callonInlineElement95,
																													expr: &charClassMatcher{
																														pos:        position{line: 674, col: 28, offset: 21790},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 676, col: 9, offset: 21844},
																													run: (*parser).callonInlineElement97,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 676, col: 9, offset: 21844},
																														expr: &charClassMatcher{
																															pos:        position{line: 676, col: 9, offset: 21844},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 670, col: 79, offset: 21672},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 659, col: 5, offset: 21191},
																		run: (*parser).callonInlineElement101,
																		expr: &seqExpr{
																			pos: position{line: 659, col: 5, offset: 21191},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 659, col: 5, offset: 21191},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 659, col: 9, offset: 21195},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 332, col: 18, offset: 10393},
																						run: (*parser).callonInlineElement105,
																						expr: &seqExpr{
																							pos: position{line: 332, col: 18, offset: 10393},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 332, col: 18, offset: 10393},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 332, col: 28, offset: 10403},
																									expr: &charClassMatcher{
																										pos:        position{line: 332, col: 29, offset: 10404},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 659, col: 28, offset: 21214},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1188, col: 15, offset: 37064},
												name: "InlineMacro",
											},
											&actionExpr{
												pos: position{line: 2599, col: 5, offset: 86909},
												run: (*parser).callonInlineElement112,
												expr: &seqExpr{
													pos: position{line: 2599, col: 5, offset: 86909},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2599, col: 5, offset: 86909},
															run: (*parser).callonInlineElement114,
														},
														&labeledExpr{
															pos:   position{line: 2602, col: 5, offset: 86985},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 2604, col: 9, offset: 87083},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2604, col: 9, offset: 87083},
																		run: (*parser).callonInlineElement117,
																		expr: &choiceExpr{
																			pos: position{line: 694, col: 27, offset: 22498},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 694, col: 27, offset: 22498},
																					run: (*parser).callonInlineElement119,
																					expr: &seqExpr{
																						pos: position{line: 694, col: 27, offset: 22498},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 694, col: 27, offset: 22498},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 694, col: 32, offset: 22503},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 2884, col: 7, offset: 95839},
																									run: (*parser).callonInlineElement123,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2884, col: 7, offset: 95839},
																										expr: &charClassMatcher{
																											pos:        position{line: 2884, col: 7, offset: 95839},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 694, col: 40, offset: 22511},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonInlineElement127,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 694, col: 47, offset: 22518},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 694, col: 51, offset: 22522},
																								label: "label",
																								expr: &oneOrMoreExpr{
																									pos: position{line: 704, col: 24, offset: 22923},
																									expr: &choiceExpr{
																										pos: position{line: 705, col: 5, offset: 22929},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 705, col: 6, offset: 22930},
																												run: (*parser).callonInlineElement133,
																												expr: &seqExpr{
																													pos: position{line: 705, col: 6, offset: 22930},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 705, col: 6, offset: 22930},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&oneOrMoreExpr{
																															pos: position{line: 705, col: 14, offset: 22938},
																															expr: &charClassMatcher{
																																pos:        position{line: 705, col: 14, offset: 22938},
																																val:        "[^\\r\\n{<>]",
																																chars:      []rune{'\r', '\n', '{', '<', '>'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 659, col: 5, offset: 21191},
																												run: (*parser).callonInlineElement138,
																												expr: &seqExpr{
																													pos: position{line: 659, col: 5, offset: 21191},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 659, col: 5, offset: 21191},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 659, col: 9, offset: 21195},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonInlineElement142,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 659, col: 28, offset: 21214},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 709, col: 8, offset: 23164},
																												run: (*parser).callonInlineElement148,
																												expr: &litMatcher{
																													pos:        position{line: 709, col: 8, offset: 23164},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 694, col: 79, offset: 22550},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 696, col: 9, offset: 22623},
																					run: (*parser).callonInlineElement151,
																					expr: &seqExpr{
																						pos: position{line: 696, col: 9, offset: 22623},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 696, col: 9, offset: 22623},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 696, col: 14, offset: 22628},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 2884, col: 7, offset: 95839},
																									run: (*parser).callonInlineElement155,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2884, col: 7, offset: 95839},
																										expr: &charClassMatcher{
																											pos:        position{line: 2884, col: 7, offset: 95839},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 696, col: 22, offset: 22636},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2607, col: 11, offset: 87187},
																		run: (*parser).callonInlineElement159,
																		expr: &charClassMatcher{
																			pos:        position{line: 2607, col: 12, offset: 87188},
																			val:        "[<>&]",
																			chars:      []rune{'<', '>', '&'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2632, col: 15, offset: 88155},
												run: (*parser).callonInlineElement161,
												expr: &litMatcher{
													pos:        position{line: 2632, col: 15, offset: 88155},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
											&actionExpr{
												pos: position{line: 2638, col: 14, offset: 88270},
												run: (*parser).callonInlineElement163,
												expr: &litMatcher{
													pos:        position{line: 2638, col: 14, offset: 88270},
													val:        "(C)",
													ignoreCase: false,
													want:       "\"(C)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2642, col: 14, offset: 88346},
												run: (*parser).callonInlineElement165,
												expr: &litMatcher{
													pos:        position{line: 2642, col: 14, offset: 88346},
													val:        "(TM)",
													ignoreCase: false,
													want:       "\"(TM)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2646, col: 15, offset: 88424},
												run: (*parser).callonInlineElement167,
												expr: &litMatcher{
													pos:        position{line: 2646, col: 15, offset: 88424},
													val:        "(R)",
													ignoreCase: false,
													want:       "\"(R)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2650, col: 13, offset: 88499},
												run: (*parser).callonInlineElement169,
												expr: &litMatcher{
													pos:        position{line: 2650, col: 13, offset: 88499},
													val:        "...",
													ignoreCase: false,
													want:       "\"...\"",
												},
											},
											&actionExpr{
												pos: position{line: 2658, col: 22, offset: 88805},
												run: (*parser).callonInlineElement171,
												expr: &seqExpr{
													pos: position{line: 2658, col: 22, offset: 88805},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2813, col: 13, offset: 93503},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&litMatcher{
															pos:        position{line: 2658, col: 31, offset: 88814},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&andExpr{
															pos: position{line: 2658, col: 35, offset: 88818},
															expr: &charClassMatcher{
																pos:        position{line: 2658, col: 36, offset: 88819},
																val:        "[\\pL]",
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1122, col: 23, offset: 34991},
												run: (*parser).callonInlineElement177,
												expr: &seqExpr{
													pos: position{line: 1122, col: 23, offset: 34991},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1120, col: 32, offset: 34959},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
														&labeledExpr{
															pos:   position{line: 1122, col: 51, offset: 35019},
															label: "ref",
															expr: &actionExpr{
																pos: position{line: 1122, col: 56, offset: 35024},
																run: (*parser).callonInlineElement181,
																expr: &oneOrMoreExpr{
																	pos: position{line: 1122, col: 56, offset: 35024},
																	expr: &charClassMatcher{
																		pos:        position{line: 1122, col: 56, offset: 35024},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1120, col: 32, offset: 34959},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2851, col: 12, offset: 94722},
												run: (*parser).callonInlineElement185,
												expr: &anyMatcher{
													line: 2851, col: 12, offset: 94722,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1208, col: 1, offset: 37912},
			expr: &actionExpr{
				pos: position{line: 1208, col: 14, offset: 37925},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 14, offset: 37925},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1208, col: 14, offset: 37925},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 19, offset: 37930},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 25, offset: 37936},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1208, col: 43, offset: 37954},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1212, col: 1, offset: 38023},
			expr: &actionExpr{
				pos: position{line: 1212, col: 21, offset: 38043},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1212, col: 21, offset: 38043},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1212, col: 30, offset: 38052},
						expr: &choiceExpr{
							pos: position{line: 1212, col: 31, offset: 38053},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2825, col: 5, offset: 93958},
									run: (*parser).callonIndexTermContent5,
									expr: &seqExpr{
										pos: position{line: 2825, col: 5, offset: 93958},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2825, col: 5, offset: 93958},
												expr: &charClassMatcher{
													pos:        position{line: 2825, col: 5, offset: 93958},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 2825, col: 15, offset: 93968},
												expr: &choiceExpr{
													pos: position{line: 2825, col: 17, offset: 93970},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2825, col: 17, offset: 93970},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2827, col: 9, offset: 94052},
									run: (*parser).callonIndexTermContent14,
									expr: &seqExpr{
										pos: position{line: 2827, col: 9, offset: 94052},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2827, col: 9, offset: 94052},
												expr: &charClassMatcher{
													pos:        position{line: 2827, col: 9, offset: 94052},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 2827, col: 19, offset: 94062},
												expr: &seqExpr{
													pos: position{line: 2827, col: 20, offset: 94063},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2827, col: 20, offset: 94063},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 2827, col: 27, offset: 94070},
															expr: &charClassMatcher{
																pos:        position{line: 2827, col: 27, offset: 94070},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1212, col: 38, offset: 38060},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1212, col: 53, offset: 38075},
									name: "QuotedText",
								},
								&actionExpr{
									pos: position{line: 2899, col: 10, offset: 96187},
									run: (*parser).callonIndexTermContent25,
									expr: &charClassMatcher{
										pos:        position{line: 2899, col: 11, offset: 96188},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&actionExpr{
									pos: position{line: 2599, col: 5, offset: 86909},
									run: (*parser).callonIndexTermContent27,
									expr: &seqExpr{
										pos: position{line: 2599, col: 5, offset: 86909},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 2599, col: 5, offset: 86909},
												run: (*parser).callonIndexTermContent29,
											},
											&labeledExpr{
												pos:   position{line: 2602, col: 5, offset: 86985},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2604, col: 9, offset: 87083},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2604, col: 9, offset: 87083},
															run: (*parser).callonIndexTermContent32,
															expr: &choiceExpr{
																pos: position{line: 694, col: 27, offset: 22498},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 694, col: 27, offset: 22498},
																		run: (*parser).callonIndexTermContent34,
																		expr: &seqExpr{
																			pos: position{line: 694, col: 27, offset: 22498},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 694, col: 27, offset: 22498},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 694, col: 32, offset: 22503},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2884, col: 7, offset: 95839},
																						run: (*parser).callonIndexTermContent38,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							expr: &charClassMatcher{
																								pos:        position{line: 2884, col: 7, offset: 95839},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 694, col: 40, offset: 22511},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonIndexTermContent42,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 694, col: 47, offset: 22518},
																					val:        ",",
																					ignoreCase: false,
																					want:       "\",\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 694, col: 51, offset: 22522},
																					label: "label",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 704, col: 24, offset: 22923},
																						expr: &choiceExpr{
																							pos: position{line: 705, col: 5, offset: 22929},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 705, col: 6, offset: 22930},
																									run: (*parser).callonIndexTermContent48,
																									expr: &seqExpr{
																										pos: position{line: 705, col: 6, offset: 22930},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 705, col: 6, offset: 22930},
																												val:        "[0-9\\pL]",
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 705, col: 14, offset: 22938},
																												expr: &charClassMatcher{
																													pos:        position{line: 705, col: 14, offset: 22938},
																													val:        "[^\\r\\n{<>]",
																													chars:      []rune{'\r', '\n', '{', '<', '>'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 659, col: 5, offset: 21191},
																									run: (*parser).callonIndexTermContent53,
																									expr: &seqExpr{
																										pos: position{line: 659, col: 5, offset: 21191},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 659, col: 5, offset: 21191},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 659, col: 9, offset: 21195},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 332, col: 18, offset: 10393},
																													run: (*parser).callonIndexTermContent57,
																													expr: &seqExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 332, col: 18, offset: 10393},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 332, col: 28, offset: 10403},
																																expr: &charClassMatcher{
																																	pos:        position{line: 332, col: 29, offset: 10404},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 659, col: 28, offset: 21214},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 709, col: 8, offset: 23164},
																									run: (*parser).callonIndexTermContent63,
																									expr: &litMatcher{
																										pos:        position{line: 709, col: 8, offset: 23164},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 694, col: 79, offset: 22550},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 696, col: 9, offset: 22623},
																		run: (*parser).callonIndexTermContent66,
																		expr: &seqExpr{
																			pos: position{line: 696, col: 9, offset: 22623},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 696, col: 9, offset: 22623},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 696, col: 14, offset: 22628},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 2884, col: 7, offset: 95839},
																						run: (*parser).callonIndexTermContent70,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							expr: &charClassMatcher{
																								pos:        position{line: 2884, col: 7, offset: 95839},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 696, col: 22, offset: 22636},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2607, col: 11, offset: 87187},
															run: (*parser).callonIndexTermContent74,
															expr: &charClassMatcher{
																pos:        position{line: 2607, col: 12, offset: 87188},
																val:        "[<>&]",
																chars:      []rune{'<', '>', '&'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1122, col: 23, offset: 34991},
									run: (*parser).callonIndexTermContent76,
									expr: &seqExpr{
										pos: position{line: 1122, col: 23, offset: 34991},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1120, col: 32, offset: 34959},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1122, col: 51, offset: 35019},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1122, col: 56, offset: 35024},
													run: (*parser).callonIndexTermContent80,
													expr: &oneOrMoreExpr{
														pos: position{line: 1122, col: 56, offset: 35024},
														expr: &charClassMatcher{
															pos:        position{line: 1122, col: 56, offset: 35024},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1120, col: 32, offset: 34959},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1212, col: 114, offset: 38136},
									run: (*parser).callonIndexTermContent84,
									expr: &seqExpr{
										pos: position{line: 1212, col: 115, offset: 38137},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1212, col: 115, offset: 38137},
												expr: &litMatcher{
													pos:        position{line: 1212, col: 116, offset: 38138},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1212, col: 121, offset: 38143,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1232, col: 1, offset: 38852},
			expr: &actionExpr{
				pos: position{line: 1233, col: 5, offset: 38871},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 5, offset: 38871},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1233, col: 5, offset: 38871},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 15, offset: 38881},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2859, col: 13, offset: 94923},
								run: (*parser).callonImageBlock5,
								expr: &seqExpr{
									pos: position{line: 2859, col: 13, offset: 94923},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2859, col: 13, offset: 94923},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2859, col: 20, offset: 94930},
												expr: &choiceExpr{
													pos: position{line: 2867, col: 11, offset: 95192},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2867, col: 11, offset: 95192},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 23, offset: 95204},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 36, offset: 95217},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 47, offset: 95228},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 58, offset: 95239},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2859, col: 30, offset: 94940},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2859, col: 35, offset: 94945},
												expr: &choiceExpr{
													pos: position{line: 2859, col: 36, offset: 94946},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 5, offset: 95267},
															run: (*parser).callonImageBlock18,
															expr: &seqExpr{
																pos: position{line: 2870, col: 5, offset: 95267},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2870, col: 5, offset: 95267},
																		expr: &litMatcher{
																			pos:        position{line: 2870, col: 6, offset: 95268},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2871, col: 5, offset: 95292},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2871, col: 14, offset: 95301},
																			expr: &choiceExpr{
																				pos: position{line: 2872, col: 9, offset: 95311},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2872, col: 9, offset: 95311},
																						run: (*parser).callonImageBlock25,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2872, col: 9, offset: 95311},
																							expr: &charClassMatcher{
																								pos:        position{line: 2872, col: 10, offset: 95312},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2875, col: 11, offset: 95577},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2845, col: 25, offset: 94548},
																								run: (*parser).callonImageBlock29,
																								expr: &charClassMatcher{
																									pos:        position{line: 2845, col: 25, offset: 94548},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 2875, col: 32, offset: 95598},
																								expr: &notExpr{
																									pos: position{line: 2875, col: 34, offset: 95600},
																									expr: &choiceExpr{
																										pos: position{line: 2875, col: 36, offset: 95602},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonImageBlock36,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 651, col: 5, offset: 21000},
																						run: (*parser).callonImageBlock38,
																						expr: &seqExpr{
																							pos: position{line: 651, col: 5, offset: 21000},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 651, col: 5, offset: 21000},
																									run: (*parser).callonImageBlock40,
																								},
																								&labeledExpr{
																									pos:   position{line: 654, col: 5, offset: 21069},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 654, col: 14, offset: 21078},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 666, col: 25, offset: 21447},
																												run: (*parser).callonImageBlock43,
																												expr: &seqExpr{
																													pos: position{line: 666, col: 25, offset: 21447},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 666, col: 25, offset: 21447},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 666, col: 37, offset: 21459},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonImageBlock47,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 666, col: 56, offset: 21478},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 666, col: 62, offset: 21484},
																																expr: &actionExpr{
																																	pos: position{line: 674, col: 17, offset: 21779},
																																	run: (*parser).callonImageBlock54,
																																	expr: &seqExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 674, col: 17, offset: 21779},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 674, col: 21, offset: 21783},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							run: (*parser).callonImageBlock59,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 674, col: 28, offset: 21790},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 676, col: 9, offset: 21844},
																																							run: (*parser).callonImageBlock61,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 676, col: 9, offset: 21844},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 666, col: 78, offset: 21500},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 670, col: 25, offset: 21618},
																												run: (*parser).callonImageBlock65,
																												expr: &seqExpr{
																													pos: position{line: 670, col: 25, offset: 21618},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 670, col: 25, offset: 21618},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 670, col: 38, offset: 21631},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonImageBlock69,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 670, col: 57, offset: 21650},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 670, col: 63, offset: 21656},
																																expr: &actionExpr{
																																	pos: position{line: 674, col: 17, offset: 21779},
																																	run: (*parser).callonImageBlock76,
																																	expr: &seqExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 674, col: 17, offset: 21779},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 674, col: 21, offset: 21783},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							run: (*parser).callonImageBlock81,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 674, col: 28, offset: 21790},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 676, col: 9, offset: 21844},
																																							run: (*parser).callonImageBlock83,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 676, col: 9, offset: 21844},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 670, col: 79, offset: 21672},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 659, col: 5, offset: 21191},
																												run: (*parser).callonImageBlock87,
																												expr: &seqExpr{
																													pos: position{line: 659, col: 5, offset: 21191},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 659, col: 5, offset: 21191},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 659, col: 9, offset: 21195},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonImageBlock91,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 659, col: 28, offset: 21214},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2599, col: 5, offset: 86909},
																						run: (*parser).callonImageBlock97,
																						expr: &seqExpr{
																							pos: position{line: 2599, col: 5, offset: 86909},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2599, col: 5, offset: 86909},
																									run: (*parser).callonImageBlock99,
																								},
																								&labeledExpr{
																									pos:   position{line: 2602, col: 5, offset: 86985},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2604, col: 9, offset: 87083},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2604, col: 9, offset: 87083},
																												run: (*parser).callonImageBlock102,
																												expr: &choiceExpr{
																													pos: position{line: 694, col: 27, offset: 22498},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 694, col: 27, offset: 22498},
																															run: (*parser).callonImageBlock104,
																															expr: &seqExpr{
																																pos: position{line: 694, col: 27, offset: 22498},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 694, col: 27, offset: 22498},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 32, offset: 22503},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2884, col: 7, offset: 95839},
																																			run: (*parser).callonImageBlock108,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2884, col: 7, offset: 95839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2884, col: 7, offset: 95839},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 694, col: 40, offset: 22511},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonImageBlock112,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 47, offset: 22518},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 51, offset: 22522},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 704, col: 24, offset: 22923},
																																			expr: &choiceExpr{
																																				pos: position{line: 705, col: 5, offset: 22929},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 705, col: 6, offset: 22930},
																																						run: (*parser).callonImageBlock118,
																																						expr: &seqExpr{
																																							pos: position{line: 705, col: 6, offset: 22930},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 705, col: 6, offset: 22930},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 705, col: 14, offset: 22938},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 705, col: 14, offset: 22938},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 659, col: 5, offset: 21191},
																																						run: (*parser).callonImageBlock123,
																																						expr: &seqExpr{
																																							pos: position{line: 659, col: 5, offset: 21191},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 659, col: 5, offset: 21191},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 659, col: 9, offset: 21195},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 332, col: 18, offset: 10393},
																																										run: (*parser).callonImageBlock127,
																																										expr: &seqExpr{
																																											pos: position{line: 332, col: 18, offset: 10393},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 332, col: 18, offset: 10393},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 332, col: 28, offset: 10403},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 332, col: 29, offset: 10404},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 659, col: 28, offset: 21214},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 709, col: 8, offset: 23164},
																																						run: (*parser).callonImageBlock133,
																																						expr: &litMatcher{
																																							pos:        position{line: 709, col: 8, offset: 23164},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 79, offset: 22550},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 696, col: 9, offset: 22623},
																															run: (*parser).callonImageBlock136,
																															expr: &seqExpr{
																																pos: position{line: 696, col: 9, offset: 22623},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 696, col: 9, offset: 22623},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 696, col: 14, offset: 22628},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2884, col: 7, offset: 95839},
																																			run: (*parser).callonImageBlock140,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2884, col: 7, offset: 95839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2884, col: 7, offset: 95839},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 696, col: 22, offset: 22636},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2607, col: 11, offset: 87187},
																												run: (*parser).callonImageBlock144,
																												expr: &charClassMatcher{
																													pos:        position{line: 2607, col: 12, offset: 87188},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 11, offset: 95683},
																						run: (*parser).callonImageBlock146,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 11, offset: 95683},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1122, col: 23, offset: 34991},
															run: (*parser).callonImageBlock148,
															expr: &seqExpr{
																pos: position{line: 1122, col: 23, offset: 34991},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1120, col: 32, offset: 34959},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1122, col: 51, offset: 35019},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1122, col: 56, offset: 35024},
																			run: (*parser).callonImageBlock152,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1122, col: 56, offset: 35024},
																				expr: &charClassMatcher{
																					pos:        position{line: 1122, col: 56, offset: 35024},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1120, col: 32, offset: 34959},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 31, offset: 38897},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 43, offset: 38909},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1233, col: 61, offset: 38927},
							expr: &actionExpr{
								pos: position{line: 2899, col: 10, offset: 96187},
								run: (*parser).callonImageBlock159,
								expr: &charClassMatcher{
									pos:        position{line: 2899, col: 11, offset: 96188},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2915, col: 8, offset: 96511},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2908, col: 12, offset: 96371},
									run: (*parser).callonImageBlock162,
									expr: &choiceExpr{
										pos: position{line: 2908, col: 13, offset: 96372},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2908, col: 13, offset: 96372},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 20, offset: 96379},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 29, offset: 96388},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2912, col: 8, offset: 96461},
									expr: &anyMatcher{
										line: 2912, col: 9, offset: 96462,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1238, col: 1, offset: 39144},
			expr: &actionExpr{
				pos: position{line: 1238, col: 16, offset: 39159},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1238, col: 16, offset: 39159},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1238, col: 16, offset: 39159},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1238, col: 25, offset: 39168},
							expr: &litMatcher{
								pos:        position{line: 1238, col: 26, offset: 39169},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 30, offset: 39173},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2859, col: 13, offset: 94923},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 2859, col: 13, offset: 94923},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2859, col: 13, offset: 94923},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2859, col: 20, offset: 94930},
												expr: &choiceExpr{
													pos: position{line: 2867, col: 11, offset: 95192},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2867, col: 11, offset: 95192},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 23, offset: 95204},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 36, offset: 95217},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 47, offset: 95228},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 58, offset: 95239},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2859, col: 30, offset: 94940},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2859, col: 35, offset: 94945},
												expr: &choiceExpr{
													pos: position{line: 2859, col: 36, offset: 94946},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 5, offset: 95267},
															run: (*parser).callonInlineImage20,
															expr: &seqExpr{
																pos: position{line: 2870, col: 5, offset: 95267},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2870, col: 5, offset: 95267},
																		expr: &litMatcher{
																			pos:        position{line: 2870, col: 6, offset: 95268},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2871, col: 5, offset: 95292},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2871, col: 14, offset: 95301},
																			expr: &choiceExpr{
																				pos: position{line: 2872, col: 9, offset: 95311},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2872, col: 9, offset: 95311},
																						run: (*parser).callonInlineImage27,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2872, col: 9, offset: 95311},
																							expr: &charClassMatcher{
																								pos:        position{line: 2872, col: 10, offset: 95312},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2875, col: 11, offset: 95577},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2845, col: 25, offset: 94548},
																								run: (*parser).callonInlineImage31,
																								expr: &charClassMatcher{
																									pos:        position{line: 2845, col: 25, offset: 94548},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 2875, col: 32, offset: 95598},
																								expr: &notExpr{
																									pos: position{line: 2875, col: 34, offset: 95600},
																									expr: &choiceExpr{
																										pos: position{line: 2875, col: 36, offset: 95602},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonInlineImage38,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 651, col: 5, offset: 21000},
																						run: (*parser).callonInlineImage40,
																						expr: &seqExpr{
																							pos: position{line: 651, col: 5, offset: 21000},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 651, col: 5, offset: 21000},
																									run: (*parser).callonInlineImage42,
																								},
																								&labeledExpr{
																									pos:   position{line: 654, col: 5, offset: 21069},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 654, col: 14, offset: 21078},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 666, col: 25, offset: 21447},
																												run: (*parser).callonInlineImage45,
																												expr: &seqExpr{
																													pos: position{line: 666, col: 25, offset: 21447},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 666, col: 25, offset: 21447},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 666, col: 37, offset: 21459},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonInlineImage49,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 666, col: 56, offset: 21478},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 666, col: 62, offset: 21484},
																																expr: &actionExpr{
																																	pos: position{line: 674, col: 17, offset: 21779},
																																	run: (*parser).callonInlineImage56,
																																	expr: &seqExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 674, col: 17, offset: 21779},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 674, col: 21, offset: 21783},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							run: (*parser).callonInlineImage61,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 674, col: 28, offset: 21790},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 676, col: 9, offset: 21844},
																																							run: (*parser).callonInlineImage63,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 676, col: 9, offset: 21844},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 666, col: 78, offset: 21500},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 670, col: 25, offset: 21618},
																												run: (*parser).callonInlineImage67,
																												expr: &seqExpr{
																													pos: position{line: 670, col: 25, offset: 21618},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 670, col: 25, offset: 21618},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 670, col: 38, offset: 21631},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonInlineImage71,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 670, col: 57, offset: 21650},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 670, col: 63, offset: 21656},
																																expr: &actionExpr{
																																	pos: position{line: 674, col: 17, offset: 21779},
																																	run: (*parser).callonInlineImage78,
																																	expr: &seqExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 674, col: 17, offset: 21779},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 674, col: 21, offset: 21783},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							run: (*parser).callonInlineImage83,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 674, col: 28, offset: 21790},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 676, col: 9, offset: 21844},
																																							run: (*parser).callonInlineImage85,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 676, col: 9, offset: 21844},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 670, col: 79, offset: 21672},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 659, col: 5, offset: 21191},
																												run: (*parser).callonInlineImage89,
																												expr: &seqExpr{
																													pos: position{line: 659, col: 5, offset: 21191},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 659, col: 5, offset: 21191},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 659, col: 9, offset: 21195},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonInlineImage93,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 659, col: 28, offset: 21214},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2599, col: 5, offset: 86909},
																						run: (*parser).callonInlineImage99,
																						expr: &seqExpr{
																							pos: position{line: 2599, col: 5, offset: 86909},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2599, col: 5, offset: 86909},
																									run: (*parser).callonInlineImage101,
																								},
																								&labeledExpr{
																									pos:   position{line: 2602, col: 5, offset: 86985},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2604, col: 9, offset: 87083},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2604, col: 9, offset: 87083},
																												run: (*parser).callonInlineImage104,
																												expr: &choiceExpr{
																													pos: position{line: 694, col: 27, offset: 22498},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 694, col: 27, offset: 22498},
																															run: (*parser).callonInlineImage106,
																															expr: &seqExpr{
																																pos: position{line: 694, col: 27, offset: 22498},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 694, col: 27, offset: 22498},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 32, offset: 22503},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2884, col: 7, offset: 95839},
																																			run: (*parser).callonInlineImage110,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2884, col: 7, offset: 95839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2884, col: 7, offset: 95839},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 694, col: 40, offset: 22511},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonInlineImage114,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 47, offset: 22518},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 51, offset: 22522},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 704, col: 24, offset: 22923},
																																			expr: &choiceExpr{
																																				pos: position{line: 705, col: 5, offset: 22929},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 705, col: 6, offset: 22930},
																																						run: (*parser).callonInlineImage120,
																																						expr: &seqExpr{
																																							pos: position{line: 705, col: 6, offset: 22930},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 705, col: 6, offset: 22930},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 705, col: 14, offset: 22938},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 705, col: 14, offset: 22938},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 659, col: 5, offset: 21191},
																																						run: (*parser).callonInlineImage125,
																																						expr: &seqExpr{
																																							pos: position{line: 659, col: 5, offset: 21191},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 659, col: 5, offset: 21191},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 659, col: 9, offset: 21195},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 332, col: 18, offset: 10393},
																																										run: (*parser).callonInlineImage129,
																																										expr: &seqExpr{
																																											pos: position{line: 332, col: 18, offset: 10393},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 332, col: 18, offset: 10393},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 332, col: 28, offset: 10403},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 332, col: 29, offset: 10404},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 659, col: 28, offset: 21214},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 709, col: 8, offset: 23164},
																																						run: (*parser).callonInlineImage135,
																																						expr: &litMatcher{
																																							pos:        position{line: 709, col: 8, offset: 23164},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 79, offset: 22550},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 696, col: 9, offset: 22623},
																															run: (*parser).callonInlineImage138,
																															expr: &seqExpr{
																																pos: position{line: 696, col: 9, offset: 22623},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 696, col: 9, offset: 22623},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 696, col: 14, offset: 22628},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2884, col: 7, offset: 95839},
																																			run: (*parser).callonInlineImage142,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2884, col: 7, offset: 95839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2884, col: 7, offset: 95839},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 696, col: 22, offset: 22636},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2607, col: 11, offset: 87187},
																												run: (*parser).callonInlineImage146,
																												expr: &charClassMatcher{
																													pos:        position{line: 2607, col: 12, offset: 87188},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 11, offset: 95683},
																						run: (*parser).callonInlineImage148,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 11, offset: 95683},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1122, col: 23, offset: 34991},
															run: (*parser).callonInlineImage150,
															expr: &seqExpr{
																pos: position{line: 1122, col: 23, offset: 34991},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1120, col: 32, offset: 34959},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1122, col: 51, offset: 35019},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1122, col: 56, offset: 35024},
																			run: (*parser).callonInlineImage154,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1122, col: 56, offset: 35024},
																				expr: &charClassMatcher{
																					pos:        position{line: 1122, col: 56, offset: 35024},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1120, col: 32, offset: 34959},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 46, offset: 39189},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1238, col: 58, offset: 39201},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1245, col: 1, offset: 39597},
			expr: &actionExpr{
				pos: position{line: 1245, col: 15, offset: 39611},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1245, col: 15, offset: 39611},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1245, col: 15, offset: 39611},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1245, col: 23, offset: 39619},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1245, col: 29, offset: 39625},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1245, col: 29, offset: 39625},
									expr: &charClassMatcher{
										pos:        position{line: 1245, col: 29, offset: 39625},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1245, col: 73, offset: 39669},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1245, col: 85, offset: 39681},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1252, col: 1, offset: 40047},
			expr: &choiceExpr{
				pos: position{line: 1252, col: 19, offset: 40065},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1252, col: 19, offset: 40065},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1252, col: 19, offset: 40065},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1252, col: 19, offset: 40065},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1252, col: 32, offset: 40078},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1252, col: 41, offset: 40087},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1252, col: 58, offset: 40104},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1254, col: 9, offset: 40164},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1254, col: 9, offset: 40164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1254, col: 9, offset: 40164},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1254, col: 21, offset: 40176},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 2817, col: 14, offset: 93577},
										run: (*parser).callonInlineFootnote12,
										expr: &oneOrMoreExpr{
											pos: position{line: 2817, col: 14, offset: 93577},
											expr: &charClassMatcher{
												pos:        position{line: 2817, col: 14, offset: 93577},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1254, col: 39, offset: 40194},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1254, col: 43, offset: 40198},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1254, col: 51, offset: 40206},
										expr: &ruleRefExpr{
											pos:  position{line: 1254, col: 52, offset: 40207},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1254, col: 70, offset: 40225},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1260, col: 1, offset: 40374},
			expr: &actionExpr{
				pos: position{line: 1260, col: 20, offset: 40393},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1260, col: 20, offset: 40393},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1260, col: 29, offset: 40402},
						expr: &seqExpr{
							pos: position{line: 1260, col: 30, offset: 40403},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1260, col: 30, offset: 40403},
									expr: &litMatcher{
										pos:        position{line: 1260, col: 31, offset: 40404},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1260, col: 35, offset: 40408},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1292, col: 1, offset: 42097},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 21, offset: 42117},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1292, col: 21, offset: 42117},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1292, col: 21, offset: 42117},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1292, col: 21, offset: 42117},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1292, col: 30, offset: 42126},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1292, col: 38, offset: 42134},
										expr: &actionExpr{
											pos: position{line: 1298, col: 30, offset: 42460},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 1298, col: 30, offset: 42460},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1292, col: 67, offset: 42163},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1294, col: 9, offset: 42267},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 1294, col: 9, offset: 42267},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1294, col: 9, offset: 42267},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1294, col: 19, offset: 42277},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1294, col: 27, offset: 42285},
										expr: &choiceExpr{
											pos: position{line: 1294, col: 28, offset: 42286},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1294, col: 28, offset: 42286},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1298, col: 30, offset: 42460},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 1298, col: 30, offset: 42460},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1294, col: 69, offset: 42327},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1305, col: 1, offset: 42716},
			expr: &choiceExpr{
				pos: position{line: 1305, col: 9, offset: 42724},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1308, col: 5, offset: 42779},
						run: (*parser).callonLink2,
						expr: &seqExpr{
							pos: position{line: 1308, col: 5, offset: 42779},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1308, col: 5, offset: 42779},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 5, offset: 42788},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2863, col: 23, offset: 95072},
										run: (*parser).callonLink6,
										expr: &seqExpr{
											pos: position{line: 2863, col: 23, offset: 95072},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2863, col: 23, offset: 95072},
													expr: &litMatcher{
														pos:        position{line: 2863, col: 24, offset: 95073},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2863, col: 28, offset: 95077},
													label: "scheme",
													expr: &choiceExpr{
														pos: position{line: 2867, col: 11, offset: 95192},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2867, col: 11, offset: 95192},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 2867, col: 23, offset: 95204},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 2867, col: 36, offset: 95217},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 2867, col: 47, offset: 95228},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 2867, col: 58, offset: 95239},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2863, col: 44, offset: 95093},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2863, col: 49, offset: 95098},
														expr: &actionExpr{
															pos: position{line: 2870, col: 5, offset: 95267},
															run: (*parser).callonLink19,
															expr: &seqExpr{
																pos: position{line: 2870, col: 5, offset: 95267},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2870, col: 5, offset: 95267},
																		expr: &litMatcher{
																			pos:        position{line: 2870, col: 6, offset: 95268},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2871, col: 5, offset: 95292},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2871, col: 14, offset: 95301},
																			expr: &choiceExpr{
																				pos: position{line: 2872, col: 9, offset: 95311},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2872, col: 9, offset: 95311},
																						run: (*parser).callonLink26,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2872, col: 9, offset: 95311},
																							expr: &charClassMatcher{
																								pos:        position{line: 2872, col: 10, offset: 95312},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2875, col: 11, offset: 95577},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2845, col: 25, offset: 94548},
																								run: (*parser).callonLink30,
																								expr: &charClassMatcher{
																									pos:        position{line: 2845, col: 25, offset: 94548},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 2875, col: 32, offset: 95598},
																								expr: &notExpr{
																									pos: position{line: 2875, col: 34, offset: 95600},
																									expr: &choiceExpr{
																										pos: position{line: 2875, col: 36, offset: 95602},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonLink37,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 651, col: 5, offset: 21000},
																						run: (*parser).callonLink39,
																						expr: &seqExpr{
																							pos: position{line: 651, col: 5, offset: 21000},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 651, col: 5, offset: 21000},
																									run: (*parser).callonLink41,
																								},
																								&labeledExpr{
																									pos:   position{line: 654, col: 5, offset: 21069},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 654, col: 14, offset: 21078},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 666, col: 25, offset: 21447},
																												run: (*parser).callonLink44,
																												expr: &seqExpr{
																													pos: position{line: 666, col: 25, offset: 21447},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 666, col: 25, offset: 21447},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 666, col: 37, offset: 21459},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonLink48,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 666, col: 56, offset: 21478},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 666, col: 62, offset: 21484},
																																expr: &actionExpr{
																																	pos: position{line: 674, col: 17, offset: 21779},
																																	run: (*parser).callonLink55,
																																	expr: &seqExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 674, col: 17, offset: 21779},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 674, col: 21, offset: 21783},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							run: (*parser).callonLink60,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 674, col: 28, offset: 21790},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 676, col: 9, offset: 21844},
																																							run: (*parser).callonLink62,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 676, col: 9, offset: 21844},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 666, col: 78, offset: 21500},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 670, col: 25, offset: 21618},
																												run: (*parser).callonLink66,
																												expr: &seqExpr{
																													pos: position{line: 670, col: 25, offset: 21618},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 670, col: 25, offset: 21618},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 670, col: 38, offset: 21631},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonLink70,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 670, col: 57, offset: 21650},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 670, col: 63, offset: 21656},
																																expr: &actionExpr{
																																	pos: position{line: 674, col: 17, offset: 21779},
																																	run: (*parser).callonLink77,
																																	expr: &seqExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 674, col: 17, offset: 21779},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 674, col: 21, offset: 21783},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							run: (*parser).callonLink82,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 674, col: 28, offset: 21790},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 676, col: 9, offset: 21844},
																																							run: (*parser).callonLink84,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 676, col: 9, offset: 21844},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 670, col: 79, offset: 21672},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 659, col: 5, offset: 21191},
																												run: (*parser).callonLink88,
																												expr: &seqExpr{
																													pos: position{line: 659, col: 5, offset: 21191},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 659, col: 5, offset: 21191},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 659, col: 9, offset: 21195},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonLink92,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 659, col: 28, offset: 21214},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2599, col: 5, offset: 86909},
																						run: (*parser).callonLink98,
																						expr: &seqExpr{
																							pos: position{line: 2599, col: 5, offset: 86909},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2599, col: 5, offset: 86909},
																									run: (*parser).callonLink100,
																								},
																								&labeledExpr{
																									pos:   position{line: 2602, col: 5, offset: 86985},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2604, col: 9, offset: 87083},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2604, col: 9, offset: 87083},
																												run: (*parser).callonLink103,
																												expr: &choiceExpr{
																													pos: position{line: 694, col: 27, offset: 22498},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 694, col: 27, offset: 22498},
																															run: (*parser).callonLink105,
																															expr: &seqExpr{
																																pos: position{line: 694, col: 27, offset: 22498},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 694, col: 27, offset: 22498},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 32, offset: 22503},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2884, col: 7, offset: 95839},
																																			run: (*parser).callonLink109,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2884, col: 7, offset: 95839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2884, col: 7, offset: 95839},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 694, col: 40, offset: 22511},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonLink113,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 47, offset: 22518},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 51, offset: 22522},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 704, col: 24, offset: 22923},
																																			expr: &choiceExpr{
																																				pos: position{line: 705, col: 5, offset: 22929},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 705, col: 6, offset: 22930},
																																						run: (*parser).callonLink119,
																																						expr: &seqExpr{
																																							pos: position{line: 705, col: 6, offset: 22930},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 705, col: 6, offset: 22930},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 705, col: 14, offset: 22938},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 705, col: 14, offset: 22938},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 659, col: 5, offset: 21191},
																																						run: (*parser).callonLink124,
																																						expr: &seqExpr{
																																							pos: position{line: 659, col: 5, offset: 21191},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 659, col: 5, offset: 21191},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 659, col: 9, offset: 21195},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 332, col: 18, offset: 10393},
																																										run: (*parser).callonLink128,
																																										expr: &seqExpr{
																																											pos: position{line: 332, col: 18, offset: 10393},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 332, col: 18, offset: 10393},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 332, col: 28, offset: 10403},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 332, col: 29, offset: 10404},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 659, col: 28, offset: 21214},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 709, col: 8, offset: 23164},
																																						run: (*parser).callonLink134,
																																						expr: &litMatcher{
																																							pos:        position{line: 709, col: 8, offset: 23164},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 79, offset: 22550},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 696, col: 9, offset: 22623},
																															run: (*parser).callonLink137,
																															expr: &seqExpr{
																																pos: position{line: 696, col: 9, offset: 22623},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 696, col: 9, offset: 22623},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 696, col: 14, offset: 22628},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2884, col: 7, offset: 95839},
																																			run: (*parser).callonLink141,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2884, col: 7, offset: 95839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2884, col: 7, offset: 95839},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 696, col: 22, offset: 22636},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2607, col: 11, offset: 87187},
																												run: (*parser).callonLink145,
																												expr: &charClassMatcher{
																													pos:        position{line: 2607, col: 12, offset: 87188},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 11, offset: 95683},
																						run: (*parser).callonLink147,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 11, offset: 95683},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1310, col: 5, offset: 42855},
									label: "closingBracket",
									expr: &zeroOrOneExpr{
										pos: position{line: 1310, col: 20, offset: 42870},
										expr: &litMatcher{
											pos:        position{line: 1310, col: 21, offset: 42871},
											val:        ">",
											ignoreCase: false,
											want:       "\">\"",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1311, col: 5, offset: 42902},
									run: (*parser).callonLink152,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 19, offset: 42734},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 34, offset: 42749},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1319, col: 1, offset: 43117},
			expr: &actionExpr{
				pos: position{line: 1319, col: 17, offset: 43133},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1319, col: 17, offset: 43133},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1319, col: 17, offset: 43133},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1319, col: 25, offset: 43141},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2859, col: 13, offset: 94923},
								run: (*parser).callonRelativeLink5,
								expr: &seqExpr{
									pos: position{line: 2859, col: 13, offset: 94923},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2859, col: 13, offset: 94923},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2859, col: 20, offset: 94930},
												expr: &choiceExpr{
													pos: position{line: 2867, col: 11, offset: 95192},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2867, col: 11, offset: 95192},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 23, offset: 95204},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 36, offset: 95217},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 47, offset: 95228},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 2867, col: 58, offset: 95239},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2859, col: 30, offset: 94940},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2859, col: 35, offset: 94945},
												expr: &choiceExpr{
													pos: position{line: 2859, col: 36, offset: 94946},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2870, col: 5, offset: 95267},
															run: (*parser).callonRelativeLink18,
															expr: &seqExpr{
																pos: position{line: 2870, col: 5, offset: 95267},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2870, col: 5, offset: 95267},
																		expr: &litMatcher{
																			pos:        position{line: 2870, col: 6, offset: 95268},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2871, col: 5, offset: 95292},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2871, col: 14, offset: 95301},
																			expr: &choiceExpr{
																				pos: position{line: 2872, col: 9, offset: 95311},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2872, col: 9, offset: 95311},
																						run: (*parser).callonRelativeLink25,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2872, col: 9, offset: 95311},
																							expr: &charClassMatcher{
																								pos:        position{line: 2872, col: 10, offset: 95312},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2875, col: 11, offset: 95577},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2845, col: 25, offset: 94548},
																								run: (*parser).callonRelativeLink29,
																								expr: &charClassMatcher{
																									pos:        position{line: 2845, col: 25, offset: 94548},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 2875, col: 32, offset: 95598},
																								expr: &notExpr{
																									pos: position{line: 2875, col: 34, offset: 95600},
																									expr: &choiceExpr{
																										pos: position{line: 2875, col: 36, offset: 95602},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonRelativeLink36,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 651, col: 5, offset: 21000},
																						run: (*parser).callonRelativeLink38,
																						expr: &seqExpr{
																							pos: position{line: 651, col: 5, offset: 21000},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 651, col: 5, offset: 21000},
																									run: (*parser).callonRelativeLink40,
																								},
																								&labeledExpr{
																									pos:   position{line: 654, col: 5, offset: 21069},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 654, col: 14, offset: 21078},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 666, col: 25, offset: 21447},
																												run: (*parser).callonRelativeLink43,
																												expr: &seqExpr{
																													pos: position{line: 666, col: 25, offset: 21447},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 666, col: 25, offset: 21447},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 666, col: 37, offset: 21459},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonRelativeLink47,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 666, col: 56, offset: 21478},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 666, col: 62, offset: 21484},
																																expr: &actionExpr{
																																	pos: position{line: 674, col: 17, offset: 21779},
																																	run: (*parser).callonRelativeLink54,
																																	expr: &seqExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 674, col: 17, offset: 21779},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 674, col: 21, offset: 21783},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							run: (*parser).callonRelativeLink59,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 674, col: 28, offset: 21790},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 676, col: 9, offset: 21844},
																																							run: (*parser).callonRelativeLink61,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 676, col: 9, offset: 21844},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 666, col: 78, offset: 21500},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 670, col: 25, offset: 21618},
																												run: (*parser).callonRelativeLink65,
																												expr: &seqExpr{
																													pos: position{line: 670, col: 25, offset: 21618},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 670, col: 25, offset: 21618},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 670, col: 38, offset: 21631},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonRelativeLink69,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 670, col: 57, offset: 21650},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 670, col: 63, offset: 21656},
																																expr: &actionExpr{
																																	pos: position{line: 674, col: 17, offset: 21779},
																																	run: (*parser).callonRelativeLink76,
																																	expr: &seqExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 674, col: 17, offset: 21779},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 674, col: 21, offset: 21783},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 674, col: 28, offset: 21790},
																																							run: (*parser).callonRelativeLink81,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 674, col: 28, offset: 21790},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 676, col: 9, offset: 21844},
																																							run: (*parser).callonRelativeLink83,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 676, col: 9, offset: 21844},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 670, col: 79, offset: 21672},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 659, col: 5, offset: 21191},
																												run: (*parser).callonRelativeLink87,
																												expr: &seqExpr{
																													pos: position{line: 659, col: 5, offset: 21191},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 659, col: 5, offset: 21191},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 659, col: 9, offset: 21195},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 332, col: 18, offset: 10393},
																																run: (*parser).callonRelativeLink91,
																																expr: &seqExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 332, col: 18, offset: 10393},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 332, col: 28, offset: 10403},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 332, col: 29, offset: 10404},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 659, col: 28, offset: 21214},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2599, col: 5, offset: 86909},
																						run: (*parser).callonRelativeLink97,
																						expr: &seqExpr{
																							pos: position{line: 2599, col: 5, offset: 86909},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2599, col: 5, offset: 86909},
																									run: (*parser).callonRelativeLink99,
																								},
																								&labeledExpr{
																									pos:   position{line: 2602, col: 5, offset: 86985},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2604, col: 9, offset: 87083},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2604, col: 9, offset: 87083},
																												run: (*parser).callonRelativeLink102,
																												expr: &choiceExpr{
																													pos: position{line: 694, col: 27, offset: 22498},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 694, col: 27, offset: 22498},
																															run: (*parser).callonRelativeLink104,
																															expr: &seqExpr{
																																pos: position{line: 694, col: 27, offset: 22498},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 694, col: 27, offset: 22498},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 32, offset: 22503},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2884, col: 7, offset: 95839},
																																			run: (*parser).callonRelativeLink108,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2884, col: 7, offset: 95839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2884, col: 7, offset: 95839},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 694, col: 40, offset: 22511},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonRelativeLink112,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 47, offset: 22518},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 51, offset: 22522},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 704, col: 24, offset: 22923},
																																			expr: &choiceExpr{
																																				pos: position{line: 705, col: 5, offset: 22929},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 705, col: 6, offset: 22930},
																																						run: (*parser).callonRelativeLink118,
																																						expr: &seqExpr{
																																							pos: position{line: 705, col: 6, offset: 22930},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 705, col: 6, offset: 22930},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 705, col: 14, offset: 22938},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 705, col: 14, offset: 22938},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 659, col: 5, offset: 21191},
																																						run: (*parser).callonRelativeLink123,
																																						expr: &seqExpr{
																																							pos: position{line: 659, col: 5, offset: 21191},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 659, col: 5, offset: 21191},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 659, col: 9, offset: 21195},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 332, col: 18, offset: 10393},
																																										run: (*parser).callonRelativeLink127,
																																										expr: &seqExpr{
																																											pos: position{line: 332, col: 18, offset: 10393},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 332, col: 18, offset: 10393},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 332, col: 28, offset: 10403},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 332, col: 29, offset: 10404},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 659, col: 28, offset: 21214},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 709, col: 8, offset: 23164},
																																						run: (*parser).callonRelativeLink133,
																																						expr: &litMatcher{
																																							pos:        position{line: 709, col: 8, offset: 23164},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 79, offset: 22550},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 696, col: 9, offset: 22623},
																															run: (*parser).callonRelativeLink136,
																															expr: &seqExpr{
																																pos: position{line: 696, col: 9, offset: 22623},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 696, col: 9, offset: 22623},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 696, col: 14, offset: 22628},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 2884, col: 7, offset: 95839},
																																			run: (*parser).callonRelativeLink140,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 2884, col: 7, offset: 95839},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2884, col: 7, offset: 95839},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 696, col: 22, offset: 22636},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2607, col: 11, offset: 87187},
																												run: (*parser).callonRelativeLink144,
																												expr: &charClassMatcher{
																													pos:        position{line: 2607, col: 12, offset: 87188},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2878, col: 11, offset: 95683},
																						run: (*parser).callonRelativeLink146,
																						expr: &litMatcher{
																							pos:        position{line: 2878, col: 11, offset: 95683},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1122, col: 23, offset: 34991},
															run: (*parser).callonRelativeLink148,
															expr: &seqExpr{
																pos: position{line: 1122, col: 23, offset: 34991},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1120, col: 32, offset: 34959},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1122, col: 51, offset: 35019},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1122, col: 56, offset: 35024},
																			run: (*parser).callonRelativeLink152,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1122, col: 56, offset: 35024},
																				expr: &charClassMatcher{
																					pos:        position{line: 1122, col: 56, offset: 35024},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1120, col: 32, offset: 34959},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1319, col: 40, offset: 43156},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1319, col: 52, offset: 43168},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1323, col: 1, offset: 43284},
			expr: &actionExpr{
				pos: position{line: 1323, col: 17, offset: 43300},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1323, col: 17, offset: 43300},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1323, col: 17, offset: 43300},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2863, col: 23, offset: 95072},
								run: (*parser).callonExternalLink4,
								expr: &seqExpr{
									pos: position{line: 2863, col: 23, offset: 95072},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2863, col: 23, offset: 95072},
											expr: &litMatcher{
												pos:        position{line: 2863, col: 24, offset: 95073},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
										},
										&labeledExpr{
											pos:   position{line: 2863, col: 28, offset: 95077},
											label: "scheme",
											expr: &choiceExpr{
												pos: position{line: 2867, col: 11, offset: 95192},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2867, col: 11, offset: 95192},
														val:        "http://",
														ignoreCase: false,
														want:       "\"http://\"",
													},
													&litMatcher{
														pos:        position{line: 2867, col: 23, offset: 95204},
														val:        "https://",
														ignoreCase: false,
														want:       "\"https://\"",
													},
													&litMatcher{
														pos:        position{line: 2867, col: 36, offset: 95217},
														val:        "ftp://",
														ignoreCase: false,
														want:       "\"ftp://\"",
													},
													&litMatcher{
														pos:        position{line: 2867, col: 47, offset: 95228},
														val:        "irc://",
														ignoreCase: false,
														want:       "\"irc://\"",
													},
													&litMatcher{
														pos:        position{line: 2867, col: 58, offset: 95239},
														val:        "mailto:",
														ignoreCase: false,
														want:       "\"mailto:\"",
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2863, col: 44, offset: 95093},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2863, col: 49, offset: 95098},
												expr: &actionExpr{
													pos: position{line: 2870, col: 5, offset: 95267},
													run: (*parser).callonExternalLink17,
													expr: &seqExpr{
														pos: position{line: 2870, col: 5, offset: 95267},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 2870, col: 5, offset: 95267},
																expr: &litMatcher{
																	pos:        position{line: 2870, col: 6, offset: 95268},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
															&labeledExpr{
																pos:   position{line: 2871, col: 5, offset: 95292},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2871, col: 14, offset: 95301},
																	expr: &choiceExpr{
																		pos: position{line: 2872, col: 9, offset: 95311},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2872, col: 9, offset: 95311},
																				run: (*parser).callonExternalLink24,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2872, col: 9, offset: 95311},
																					expr: &charClassMatcher{
																						pos:        position{line: 2872, col: 10, offset: 95312},
																						val:        "[^\\r\\n[]�{.,;?!<> ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2875, col: 11, offset: 95577},
																				exprs: []interface{}{
																					&actionExpr{
																						pos: position{line: 2845, col: 25, offset: 94548},
																						run: (*parser).callonExternalLink28,
																						expr: &charClassMatcher{
																							pos:        position{line: 2845, col: 25, offset: 94548},
																							val:        "[.,;?!]",
																							chars:      []rune{'.', ',', ';', '?', '!'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&andExpr{
																						pos: position{line: 2875, col: 32, offset: 95598},
																						expr: &notExpr{
																							pos: position{line: 2875, col: 34, offset: 95600},
																							expr: &choiceExpr{
																								pos: position{line: 2875, col: 36, offset: 95602},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonExternalLink35,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 651, col: 5, offset: 21000},
																				run: (*parser).callonExternalLink37,
																				expr: &seqExpr{
																					pos: position{line: 651, col: 5, offset: 21000},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 651, col: 5, offset: 21000},
																							run: (*parser).callonExternalLink39,
																						},
																						&labeledExpr{
																							pos:   position{line: 654, col: 5, offset: 21069},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 654, col: 14, offset: 21078},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 666, col: 25, offset: 21447},
																										run: (*parser).callonExternalLink42,
																										expr: &seqExpr{
																											pos: position{line: 666, col: 25, offset: 21447},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 666, col: 25, offset: 21447},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 666, col: 37, offset: 21459},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonExternalLink46,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 666, col: 56, offset: 21478},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 666, col: 62, offset: 21484},
																														expr: &actionExpr{
																															pos: position{line: 674, col: 17, offset: 21779},
																															run: (*parser).callonExternalLink53,
																															expr: &seqExpr{
																																pos: position{line: 674, col: 17, offset: 21779},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 674, col: 17, offset: 21779},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 674, col: 21, offset: 21783},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 674, col: 28, offset: 21790},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					run: (*parser).callonExternalLink58,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 674, col: 28, offset: 21790},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 676, col: 9, offset: 21844},
																																					run: (*parser).callonExternalLink60,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 676, col: 9, offset: 21844},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 676, col: 9, offset: 21844},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 666, col: 78, offset: 21500},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 670, col: 25, offset: 21618},
																										run: (*parser).callonExternalLink64,
																										expr: &seqExpr{
																											pos: position{line: 670, col: 25, offset: 21618},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 670, col: 25, offset: 21618},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 670, col: 38, offset: 21631},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonExternalLink68,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 670, col: 57, offset: 21650},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 670, col: 63, offset: 21656},
																														expr: &actionExpr{
																															pos: position{line: 674, col: 17, offset: 21779},
																															run: (*parser).callonExternalLink75,
																															expr: &seqExpr{
																																pos: position{line: 674, col: 17, offset: 21779},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 674, col: 17, offset: 21779},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 674, col: 21, offset: 21783},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 674, col: 28, offset: 21790},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 674, col: 28, offset: 21790},
																																					run: (*parser).callonExternalLink80,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 674, col: 28, offset: 21790},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 676, col: 9, offset: 21844},
																																					run: (*parser).callonExternalLink82,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 676, col: 9, offset: 21844},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 676, col: 9, offset: 21844},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 670, col: 79, offset: 21672},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 659, col: 5, offset: 21191},
																										run: (*parser).callonExternalLink86,
																										expr: &seqExpr{
																											pos: position{line: 659, col: 5, offset: 21191},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 659, col: 5, offset: 21191},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 659, col: 9, offset: 21195},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonExternalLink90,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 659, col: 28, offset: 21214},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2599, col: 5, offset: 86909},
																				run: (*parser).callonExternalLink96,
																				expr: &seqExpr{
																					pos: position{line: 2599, col: 5, offset: 86909},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2599, col: 5, offset: 86909},
																							run: (*parser).callonExternalLink98,
																						},
																						&labeledExpr{
																							pos:   position{line: 2602, col: 5, offset: 86985},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2604, col: 9, offset: 87083},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2604, col: 9, offset: 87083},
																										run: (*parser).callonExternalLink101,
																										expr: &choiceExpr{
																											pos: position{line: 694, col: 27, offset: 22498},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 694, col: 27, offset: 22498},
																													run: (*parser).callonExternalLink103,
																													expr: &seqExpr{
																														pos: position{line: 694, col: 27, offset: 22498},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 694, col: 27, offset: 22498},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 694, col: 32, offset: 22503},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2884, col: 7, offset: 95839},
																																	run: (*parser).callonExternalLink107,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2884, col: 7, offset: 95839},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2884, col: 7, offset: 95839},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 694, col: 40, offset: 22511},
																																expr: &actionExpr{
																																	pos: position{line: 2899, col: 10, offset: 96187},
																																	run: (*parser).callonExternalLink111,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2899, col: 11, offset: 96188},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 694, col: 47, offset: 22518},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 694, col: 51, offset: 22522},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 704, col: 24, offset: 22923},
																																	expr: &choiceExpr{
																																		pos: position{line: 705, col: 5, offset: 22929},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 705, col: 6, offset: 22930},
																																				run: (*parser).callonExternalLink117,
																																				expr: &seqExpr{
																																					pos: position{line: 705, col: 6, offset: 22930},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 705, col: 6, offset: 22930},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 705, col: 14, offset: 22938},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 705, col: 14, offset: 22938},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 659, col: 5, offset: 21191},
																																				run: (*parser).callonExternalLink122,
																																				expr: &seqExpr{
																																					pos: position{line: 659, col: 5, offset: 21191},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 659, col: 5, offset: 21191},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 659, col: 9, offset: 21195},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 332, col: 18, offset: 10393},
																																								run: (*parser).callonExternalLink126,
																																								expr: &seqExpr{
																																									pos: position{line: 332, col: 18, offset: 10393},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 332, col: 18, offset: 10393},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 332, col: 28, offset: 10403},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 332, col: 29, offset: 10404},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 659, col: 28, offset: 21214},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 709, col: 8, offset: 23164},
																																				run: (*parser).callonExternalLink132,
																																				expr: &litMatcher{
																																					pos:        position{line: 709, col: 8, offset: 23164},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 694, col: 79, offset: 22550},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 696, col: 9, offset: 22623},
																													run: (*parser).callonExternalLink135,
																													expr: &seqExpr{
																														pos: position{line: 696, col: 9, offset: 22623},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 696, col: 9, offset: 22623},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 696, col: 14, offset: 22628},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 2884, col: 7, offset: 95839},
																																	run: (*parser).callonExternalLink139,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2884, col: 7, offset: 95839},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2884, col: 7, offset: 95839},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 696, col: 22, offset: 22636},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2607, col: 11, offset: 87187},
																										run: (*parser).callonExternalLink143,
																										expr: &charClassMatcher{
																											pos:        position{line: 2607, col: 12, offset: 87188},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2878, col: 11, offset: 95683},
																				run: (*parser).callonExternalLink145,
																				expr: &litMatcher{
																					pos:        position{line: 2878, col: 11, offset: 95683},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1323, col: 42, offset: 43325},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1323, col: 53, offset: 43336},
								expr: &ruleRefExpr{
									pos:  position{line: 1323, col: 54, offset: 43337},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 1331, col: 1, offset: 43691},
			expr: &actionExpr{
				pos: position{line: 1332, col: 5, offset: 43712},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 5, offset: 43712},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1332, col: 5, offset: 43712},
							label: "firstElement",
							expr: &choiceExpr{
								pos: position{line: 1338, col: 5, offset: 43914},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1485, col: 5, offset: 48721},
										run: (*parser).callonListElements5,
										expr: &seqExpr{
											pos: position{line: 1485, col: 5, offset: 48721},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1485, col: 5, offset: 48721},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1492, col: 5, offset: 48929},
														run: (*parser).callonListElements8,
														expr: &seqExpr{
															pos: position{line: 1492, col: 5, offset: 48929},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1492, col: 5, offset: 48929},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonListElements11,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1492, col: 12, offset: 48936},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1494, col: 9, offset: 48999},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1494, col: 9, offset: 48999},
																				run: (*parser).callonListElements15,
																				expr: &seqExpr{
																					pos: position{line: 1494, col: 9, offset: 48999},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1494, col: 9, offset: 48999},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1494, col: 16, offset: 49006},
																								run: (*parser).callonListElements18,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1494, col: 16, offset: 49006},
																									expr: &litMatcher{
																										pos:        position{line: 1494, col: 17, offset: 49007},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1498, col: 9, offset: 49107},
																							run: (*parser).callonListElements21,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1517, col: 11, offset: 49824},
																				run: (*parser).callonListElements22,
																				expr: &seqExpr{
																					pos: position{line: 1517, col: 11, offset: 49824},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1517, col: 11, offset: 49824},
																							expr: &charClassMatcher{
																								pos:        position{line: 1517, col: 12, offset: 49825},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1517, col: 20, offset: 49833},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1519, col: 13, offset: 49950},
																				run: (*parser).callonListElements27,
																				expr: &seqExpr{
																					pos: position{line: 1519, col: 13, offset: 49950},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1519, col: 14, offset: 49951},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1519, col: 21, offset: 49958},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1521, col: 13, offset: 50078},
																				run: (*parser).callonListElements31,
																				expr: &seqExpr{
																					pos: position{line: 1521, col: 13, offset: 50078},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1521, col: 14, offset: 50079},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1521, col: 21, offset: 50086},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1523, col: 13, offset: 50206},
																				run: (*parser).callonListElements35,
																				expr: &seqExpr{
																					pos: position{line: 1523, col: 13, offset: 50206},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1523, col: 13, offset: 50206},
																							expr: &charClassMatcher{
																								pos:        position{line: 1523, col: 14, offset: 50207},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1523, col: 26, offset: 50219},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1525, col: 13, offset: 50339},
																				run: (*parser).callonListElements40,
																				expr: &seqExpr{
																					pos: position{line: 1525, col: 13, offset: 50339},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1525, col: 13, offset: 50339},
																							expr: &charClassMatcher{
																								pos:        position{line: 1525, col: 14, offset: 50340},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1525, col: 26, offset: 50352},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2903, col: 11, offset: 96254},
																	run: (*parser).callonListElements45,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2903, col: 11, offset: 96254},
																		expr: &charClassMatcher{
																			pos:        position{line: 2903, col: 12, offset: 96255},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1486, col: 5, offset: 48760},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1426, col: 5, offset: 46956},
														run: (*parser).callonListElements49,
														expr: &seqExpr{
															pos: position{line: 1426, col: 5, offset: 46956},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1426, col: 5, offset: 46956},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1426, col: 14, offset: 46965},
																		run: (*parser).callonListElements52,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1426, col: 14, offset: 46965},
																			expr: &charClassMatcher{
																				pos:        position{line: 1426, col: 14, offset: 46965},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElements56,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1535, col: 5, offset: 50618},
										run: (*parser).callonListElements63,
										expr: &seqExpr{
											pos: position{line: 1535, col: 5, offset: 50618},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1535, col: 5, offset: 50618},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1542, col: 5, offset: 50891},
														run: (*parser).callonListElements66,
														expr: &seqExpr{
															pos: position{line: 1542, col: 5, offset: 50891},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1542, col: 5, offset: 50891},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonListElements69,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1542, col: 12, offset: 50898},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1542, col: 20, offset: 50906},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1544, col: 9, offset: 50963},
																				run: (*parser).callonListElements73,
																				expr: &seqExpr{
																					pos: position{line: 1544, col: 9, offset: 50963},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1544, col: 9, offset: 50963},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1544, col: 16, offset: 50970},
																								run: (*parser).callonListElements76,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1544, col: 16, offset: 50970},
																									expr: &litMatcher{
																										pos:        position{line: 1544, col: 17, offset: 50971},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1548, col: 9, offset: 51071},
																							run: (*parser).callonListElements79,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1565, col: 14, offset: 51778},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1565, col: 21, offset: 51785},
																					run: (*parser).callonListElements81,
																					expr: &litMatcher{
																						pos:        position{line: 1565, col: 22, offset: 51786},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2903, col: 11, offset: 96254},
																	run: (*parser).callonListElements83,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2903, col: 11, offset: 96254},
																		expr: &charClassMatcher{
																			pos:        position{line: 2903, col: 12, offset: 96255},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1536, col: 5, offset: 50659},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1536, col: 16, offset: 50670},
														expr: &actionExpr{
															pos: position{line: 1572, col: 5, offset: 51947},
															run: (*parser).callonListElements88,
															expr: &seqExpr{
																pos: position{line: 1572, col: 5, offset: 51947},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1572, col: 5, offset: 51947},
																		expr: &litMatcher{
																			pos:        position{line: 1572, col: 6, offset: 51948},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1572, col: 10, offset: 51952},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1573, col: 7, offset: 51966},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1573, col: 7, offset: 51966},
																					run: (*parser).callonListElements94,
																					expr: &litMatcher{
																						pos:        position{line: 1573, col: 7, offset: 51966},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1574, col: 7, offset: 52011},
																					run: (*parser).callonListElements96,
																					expr: &litMatcher{
																						pos:        position{line: 1574, col: 7, offset: 52011},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1575, col: 7, offset: 52054},
																					run: (*parser).callonListElements98,
																					expr: &litMatcher{
																						pos:        position{line: 1575, col: 7, offset: 52054},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2903, col: 11, offset: 96254},
																		run: (*parser).callonListElements100,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2903, col: 11, offset: 96254},
																			expr: &charClassMatcher{
																				pos:        position{line: 2903, col: 12, offset: 96255},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1537, col: 5, offset: 50709},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1426, col: 5, offset: 46956},
														run: (*parser).callonListElements104,
														expr: &seqExpr{
															pos: position{line: 1426, col: 5, offset: 46956},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1426, col: 5, offset: 46956},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1426, col: 14, offset: 46965},
																		run: (*parser).callonListElements107,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1426, col: 14, offset: 46965},
																			expr: &charClassMatcher{
																				pos:        position{line: 1426, col: 14, offset: 46965},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElements111,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1642, col: 5, offset: 53927},
										run: (*parser).callonListElements118,
										expr: &seqExpr{
											pos: position{line: 1642, col: 5, offset: 53927},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1642, col: 5, offset: 53927},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1648, col: 5, offset: 54128},
														run: (*parser).callonListElements121,
														expr: &seqExpr{
															pos: position{line: 1648, col: 5, offset: 54128},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1648, col: 5, offset: 54128},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1648, col: 9, offset: 54132},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1648, col: 14, offset: 54137},
																		run: (*parser).callonListElements125,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1648, col: 14, offset: 54137},
																			expr: &charClassMatcher{
																				pos:        position{line: 1648, col: 14, offset: 54137},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1648, col: 62, offset: 54185},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2903, col: 11, offset: 96254},
																	run: (*parser).callonListElements129,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2903, col: 11, offset: 96254},
																		expr: &charClassMatcher{
																			pos:        position{line: 2903, col: 12, offset: 96255},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1643, col: 5, offset: 53963},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1653, col: 5, offset: 54311},
														run: (*parser).callonListElements133,
														expr: &seqExpr{
															pos: position{line: 1653, col: 5, offset: 54311},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1653, col: 5, offset: 54311},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1653, col: 14, offset: 54320},
																		run: (*parser).callonListElements136,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1653, col: 14, offset: 54320},
																			expr: &charClassMatcher{
																				pos:        position{line: 1653, col: 14, offset: 54320},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElements140,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1584, col: 5, offset: 52247},
										run: (*parser).callonListElements147,
										expr: &seqExpr{
											pos: position{line: 1584, col: 5, offset: 52247},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1584, col: 5, offset: 52247},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1592, col: 5, offset: 52506},
														run: (*parser).callonListElements150,
														expr: &oneOrMoreExpr{
															pos: position{line: 1592, col: 5, offset: 52506},
															expr: &seqExpr{
																pos: position{line: 1592, col: 6, offset: 52507},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1592, col: 6, offset: 52507},
																		expr: &actionExpr{
																			pos: position{line: 1597, col: 5, offset: 52657},
																			run: (*parser).callonListElements154,
																			expr: &seqExpr{
																				pos: position{line: 1597, col: 5, offset: 52657},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1597, col: 5, offset: 52657},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1597, col: 16, offset: 52668},
																							run: (*parser).callonListElements157,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1597, col: 16, offset: 52668},
																								expr: &litMatcher{
																									pos:        position{line: 1597, col: 17, offset: 52669},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1600, col: 5, offset: 52726},
																						run: (*parser).callonListElements160,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1592, col: 35, offset: 52536},
																		expr: &choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElements163,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1592, col: 40, offset: 52541,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1585, col: 5, offset: 52282},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1597, col: 5, offset: 52657},
														run: (*parser).callonListElements172,
														expr: &seqExpr{
															pos: position{line: 1597, col: 5, offset: 52657},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1597, col: 5, offset: 52657},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1597, col: 16, offset: 52668},
																		run: (*parser).callonListElements175,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1597, col: 16, offset: 52668},
																			expr: &litMatcher{
																				pos:        position{line: 1597, col: 17, offset: 52669},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1600, col: 5, offset: 52726},
																	run: (*parser).callonListElements178,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1586, col: 5, offset: 52327},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1608, col: 5, offset: 52976},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1610, col: 9, offset: 53041},
																run: (*parser).callonListElements181,
																expr: &seqExpr{
																	pos: position{line: 1610, col: 9, offset: 53041},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1610, col: 9, offset: 53041},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElements184,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElements187,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1611, col: 9, offset: 53061},
																			expr: &actionExpr{
																				pos: position{line: 685, col: 14, offset: 22145},
																				run: (*parser).callonListElements195,
																				expr: &seqExpr{
																					pos: position{line: 685, col: 14, offset: 22145},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 685, col: 14, offset: 22145},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 685, col: 19, offset: 22150},
																							expr: &actionExpr{
																								pos: position{line: 2899, col: 10, offset: 96187},
																								run: (*parser).callonListElements201,
																								expr: &charClassMatcher{
																									pos:        position{line: 2899, col: 11, offset: 96188},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonListElements204,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1612, col: 9, offset: 53081},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1612, col: 17, offset: 53089},
																				expr: &choiceExpr{
																					pos: position{line: 1406, col: 5, offset: 46323},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 1406, col: 5, offset: 46323},
																							run: (*parser).callonListElements214,
																							expr: &actionExpr{
																								pos: position{line: 2616, col: 22, offset: 87547},
																								run: (*parser).callonListElements215,
																								expr: &seqExpr{
																									pos: position{line: 2616, col: 22, offset: 87547},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2621, col: 31, offset: 87768},
																											val:        "//",
																											ignoreCase: false,
																											want:       "\"//\"",
																										},
																										&notExpr{
																											pos: position{line: 2621, col: 36, offset: 87773},
																											expr: &litMatcher{
																												pos:        position{line: 2621, col: 37, offset: 87774},
																												val:        "//",
																												ignoreCase: false,
																												want:       "\"//\"",
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 2616, col: 49, offset: 87574},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2623, col: 29, offset: 87809},
																												run: (*parser).callonListElements221,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 2623, col: 29, offset: 87809},
																													expr: &charClassMatcher{
																														pos:        position{line: 2623, col: 29, offset: 87809},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonListElements225,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1410, col: 9, offset: 46476},
																							run: (*parser).callonListElements232,
																							expr: &seqExpr{
																								pos: position{line: 1410, col: 9, offset: 46476},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1410, col: 9, offset: 46476},
																										expr: &actionExpr{
																											pos: position{line: 685, col: 14, offset: 22145},
																											run: (*parser).callonListElements235,
																											expr: &seqExpr{
																												pos: position{line: 685, col: 14, offset: 22145},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 685, col: 14, offset: 22145},
																														expr: &notExpr{
																															pos: position{line: 2912, col: 8, offset: 96461},
																															expr: &anyMatcher{
																																line: 2912, col: 9, offset: 96462,
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 685, col: 19, offset: 22150},
																														expr: &actionExpr{
																															pos: position{line: 2899, col: 10, offset: 96187},
																															run: (*parser).callonListElements241,
																															expr: &charClassMatcher{
																																pos:        position{line: 2899, col: 11, offset: 96188},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2915, col: 8, offset: 96511},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2908, col: 12, offset: 96371},
																																run: (*parser).callonListElements244,
																																expr: &choiceExpr{
																																	pos: position{line: 2908, col: 13, offset: 96372},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 13, offset: 96372},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 20, offset: 96379},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 29, offset: 96388},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2912, col: 8, offset: 96461},
																																expr: &anyMatcher{
																																	line: 2912, col: 9, offset: 96462,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1411, col: 9, offset: 46495},
																										expr: &seqExpr{
																											pos: position{line: 1444, col: 34, offset: 47455},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 1444, col: 34, offset: 47455},
																													val:        "+",
																													ignoreCase: false,
																													want:       "\"+\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1444, col: 38, offset: 47459},
																													expr: &actionExpr{
																														pos: position{line: 2899, col: 10, offset: 96187},
																														run: (*parser).callonListElements255,
																														expr: &charClassMatcher{
																															pos:        position{line: 2899, col: 11, offset: 96188},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonListElements257,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1412, col: 9, offset: 46534},
																										expr: &actionExpr{
																											pos: position{line: 1492, col: 5, offset: 48929},
																											run: (*parser).callonListElements263,
																											expr: &seqExpr{
																												pos: position{line: 1492, col: 5, offset: 48929},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1492, col: 5, offset: 48929},
																														expr: &actionExpr{
																															pos: position{line: 2899, col: 10, offset: 96187},
																															run: (*parser).callonListElements266,
																															expr: &charClassMatcher{
																																pos:        position{line: 2899, col: 11, offset: 96188},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1492, col: 12, offset: 48936},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1494, col: 9, offset: 48999},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1494, col: 9, offset: 48999},
																																	run: (*parser).callonListElements270,
																																	expr: &seqExpr{
																																		pos: position{line: 1494, col: 9, offset: 48999},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1494, col: 9, offset: 48999},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1494, col: 16, offset: 49006},
																																					run: (*parser).callonListElements273,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1494, col: 16, offset: 49006},
																																						expr: &litMatcher{
																																							pos:        position{line: 1494, col: 17, offset: 49007},
																																							val:        ".",
																																							ignoreCase: false,
																																							want:       "\".\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1498, col: 9, offset: 49107},
																																				run: (*parser).callonListElements276,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1517, col: 11, offset: 49824},
																																	run: (*parser).callonListElements277,
																																	expr: &seqExpr{
																																		pos: position{line: 1517, col: 11, offset: 49824},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1517, col: 11, offset: 49824},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1517, col: 12, offset: 49825},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1517, col: 20, offset: 49833},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1519, col: 13, offset: 49950},
																																	run: (*parser).callonListElements282,
																																	expr: &seqExpr{
																																		pos: position{line: 1519, col: 13, offset: 49950},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1519, col: 14, offset: 49951},
																																				val:        "[a-z]",
																																				ranges:     []rune{'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1519, col: 21, offset: 49958},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1521, col: 13, offset: 50078},
																																	run: (*parser).callonListElements286,
																																	expr: &seqExpr{
																																		pos: position{line: 1521, col: 13, offset: 50078},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1521, col: 14, offset: 50079},
																																				val:        "[A-Z]",
																																				ranges:     []rune{'A', 'Z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1521, col: 21, offset: 50086},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1523, col: 13, offset: 50206},
																																	run: (*parser).callonListElements290,
																																	expr: &seqExpr{
																																		pos: position{line: 1523, col: 13, offset: 50206},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1523, col: 13, offset: 50206},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1523, col: 14, offset: 50207},
																																					val:        "[ivxdlcm]",
																																					chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1523, col: 26, offset: 50219},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1525, col: 13, offset: 50339},
																																	run: (*parser).callonListElements295,
																																	expr: &seqExpr{
																																		pos: position{line: 1525, col: 13, offset: 50339},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1525, col: 13, offset: 50339},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1525, col: 14, offset: 50340},
																																					val:        "[IVXDLCM]",
																																					chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1525, col: 26, offset: 50352},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2903, col: 11, offset: 96254},
																														run: (*parser).callonListElements300,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2903, col: 11, offset: 96254},
																															expr: &charClassMatcher{
																																pos:        position{line: 2903, col: 12, offset: 96255},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1413, col: 9, offset: 46568},
																										expr: &actionExpr{
																											pos: position{line: 1542, col: 5, offset: 50891},
																											run: (*parser).callonListElements304,
																											expr: &seqExpr{
																												pos: position{line: 1542, col: 5, offset: 50891},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1542, col: 5, offset: 50891},
																														expr: &actionExpr{
																															pos: position{line: 2899, col: 10, offset: 96187},
																															run: (*parser).callonListElements307,
																															expr: &charClassMatcher{
																																pos:        position{line: 2899, col: 11, offset: 96188},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1542, col: 12, offset: 50898},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1542, col: 20, offset: 50906},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1544, col: 9, offset: 50963},
																																	run: (*parser).callonListElements311,
																																	expr: &seqExpr{
																																		pos: position{line: 1544, col: 9, offset: 50963},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1544, col: 9, offset: 50963},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1544, col: 16, offset: 50970},
																																					run: (*parser).callonListElements314,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1544, col: 16, offset: 50970},
																																						expr: &litMatcher{
																																							pos:        position{line: 1544, col: 17, offset: 50971},
																																							val:        "*",
																																							ignoreCase: false,
																																							want:       "\"*\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1548, col: 9, offset: 51071},
																																				run: (*parser).callonListElements317,
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 1565, col: 14, offset: 51778},
																																	label: "depth",
																																	expr: &actionExpr{
																																		pos: position{line: 1565, col: 21, offset: 51785},
																																		run: (*parser).callonListElements319,
																																		expr: &litMatcher{
																																			pos:        position{line: 1565, col: 22, offset: 51786},
																																			val:        "-",
																																			ignoreCase: false,
																																			want:       "\"-\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2903, col: 11, offset: 96254},
																														run: (*parser).callonListElements321,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2903, col: 11, offset: 96254},
																															expr: &charClassMatcher{
																																pos:        position{line: 2903, col: 12, offset: 96255},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1414, col: 9, offset: 46604},
																										expr: &actionExpr{
																											pos: position{line: 1648, col: 5, offset: 54128},
																											run: (*parser).callonListElements325,
																											expr: &seqExpr{
																												pos: position{line: 1648, col: 5, offset: 54128},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 1648, col: 5, offset: 54128},
																														val:        "<",
																														ignoreCase: false,
																														want:       "\"<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 1648, col: 9, offset: 54132},
																														label: "ref",
																														expr: &actionExpr{
																															pos: position{line: 1648, col: 14, offset: 54137},
																															run: (*parser).callonListElements329,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1648, col: 14, offset: 54137},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1648, col: 14, offset: 54137},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 1648, col: 62, offset: 54185},
																														val:        ">",
																														ignoreCase: false,
																														want:       "\">\"",
																													},
																													&actionExpr{
																														pos: position{line: 2903, col: 11, offset: 96254},
																														run: (*parser).callonListElements333,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2903, col: 11, offset: 96254},
																															expr: &charClassMatcher{
																																pos:        position{line: 2903, col: 12, offset: 96255},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1415, col: 9, offset: 46638},
																										expr: &seqExpr{
																											pos: position{line: 1415, col: 11, offset: 46640},
																											exprs: []interface{}{
																												&actionExpr{
																													pos: position{line: 1592, col: 5, offset: 52506},
																													run: (*parser).callonListElements338,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1592, col: 5, offset: 52506},
																														expr: &seqExpr{
																															pos: position{line: 1592, col: 6, offset: 52507},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 1592, col: 6, offset: 52507},
																																	expr: &actionExpr{
																																		pos: position{line: 1597, col: 5, offset: 52657},
																																		run: (*parser).callonListElements342,
																																		expr: &seqExpr{
																																			pos: position{line: 1597, col: 5, offset: 52657},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 1597, col: 5, offset: 52657},
																																					label: "separator",
																																					expr: &actionExpr{
																																						pos: position{line: 1597, col: 16, offset: 52668},
																																						run: (*parser).callonListElements345,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1597, col: 16, offset: 52668},
																																							expr: &litMatcher{
																																								pos:        position{line: 1597, col: 17, offset: 52669},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																						},
																																					},
																																				},
																																				&andCodeExpr{
																																					pos: position{line: 1600, col: 5, offset: 52726},
																																					run: (*parser).callonListElements348,
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 1592, col: 35, offset: 52536},
																																	expr: &choiceExpr{
																																		pos: position{line: 2915, col: 8, offset: 96511},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2908, col: 12, offset: 96371},
																																				run: (*parser).callonListElements351,
																																				expr: &choiceExpr{
																																					pos: position{line: 2908, col: 13, offset: 96372},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 13, offset: 96372},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 20, offset: 96379},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 29, offset: 96388},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2912, col: 8, offset: 96461},
																																				expr: &anyMatcher{
																																					line: 2912, col: 9, offset: 96462,
																																				},
																																			},
																																		},
																																	},
																																},
																																&anyMatcher{
																																	line: 1592, col: 40, offset: 52541,
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 1597, col: 5, offset: 52657},
																													run: (*parser).callonListElements359,
																													expr: &seqExpr{
																														pos: position{line: 1597, col: 5, offset: 52657},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 1597, col: 5, offset: 52657},
																																label: "separator",
																																expr: &actionExpr{
																																	pos: position{line: 1597, col: 16, offset: 52668},
																																	run: (*parser).callonListElements362,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1597, col: 16, offset: 52668},
																																		expr: &litMatcher{
																																			pos:        position{line: 1597, col: 17, offset: 52669},
																																			val:        ":",
																																			ignoreCase: false,
																																			want:       "\":\"",
																																		},
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 1600, col: 5, offset: 52726},
																																run: (*parser).callonListElements365,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1416, col: 9, offset: 46700},
																										expr: &actionExpr{
																											pos: position{line: 731, col: 5, offset: 23680},
																											run: (*parser).callonListElements367,
																											expr: &seqExpr{
																												pos: position{line: 731, col: 5, offset: 23680},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 731, col: 5, offset: 23680},
																														expr: &charClassMatcher{
																															pos:        position{line: 2813, col: 13, offset: 93503},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 732, col: 5, offset: 23710},
																														label: "delimiter",
																														expr: &choiceExpr{
																															pos: position{line: 733, col: 9, offset: 23730},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 746, col: 26, offset: 24217},
																																	run: (*parser).callonListElements373,
																																	expr: &seqExpr{
																																		pos: position{line: 746, col: 26, offset: 24217},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 746, col: 26, offset: 24217},
																																				val:        "////",
																																				ignoreCase: false,
																																				want:       "\"////\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 746, col: 33, offset: 24224},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElements377,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElements380,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 750, col: 26, offset: 24331},
																																	run: (*parser).callonListElements387,
																																	expr: &seqExpr{
																																		pos: position{line: 750, col: 26, offset: 24331},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 750, col: 26, offset: 24331},
																																				val:        "====",
																																				ignoreCase: false,
																																				want:       "\"====\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 750, col: 33, offset: 24338},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElements391,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElements394,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 758, col: 26, offset: 24556},
																																	run: (*parser).callonListElements401,
																																	expr: &seqExpr{
																																		pos: position{line: 758, col: 26, offset: 24556},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 758, col: 26, offset: 24556},
																																				val:        "```",
																																				ignoreCase: false,
																																				want:       "\"```\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 758, col: 32, offset: 24562},
																																				label: "language",
																																				expr: &actionExpr{
																																					pos: position{line: 762, col: 13, offset: 24692},
																																					run: (*parser).callonListElements405,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 762, col: 14, offset: 24693},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 762, col: 14, offset: 24693},
																																							val:        "[^\\r\\n ]",
																																							chars:      []rune{'\r', '\n', ' '},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 758, col: 52, offset: 24582},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElements409,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElements412,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 754, col: 25, offset: 24444},
																																	run: (*parser).callonListElements419,
																																	expr: &seqExpr{
																																		pos: position{line: 754, col: 25, offset: 24444},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 754, col: 25, offset: 24444},
																																				val:        "```",
																																				ignoreCase: false,
																																				want:       "\"```\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 754, col: 31, offset: 24450},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElements423,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElements426,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 766, col: 26, offset: 24765},
																																	run: (*parser).callonListElements433,
																																	expr: &seqExpr{
																																		pos: position{line: 766, col: 26, offset: 24765},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 766, col: 26, offset: 24765},
																																				val:        "----",
																																				ignoreCase: false,
																																				want:       "\"----\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 766, col: 33, offset: 24772},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElements437,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElements440,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 770, col: 26, offset: 24879},
																																	run: (*parser).callonListElements447,
																																	expr: &seqExpr{
																																		pos: position{line: 770, col: 26, offset: 24879},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 770, col: 26, offset: 24879},
																																				val:        "....",
																																				ignoreCase: false,
																																				want:       "\"....\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 770, col: 33, offset: 24886},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElements451,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElements454,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 774, col: 30, offset: 24997},
																																	run: (*parser).callonListElements461,
																																	expr: &seqExpr{
																																		pos: position{line: 774, col: 30, offset: 24997},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 774, col: 30, offset: 24997},
																																				val:        "++++",
																																				ignoreCase: false,
																																				want:       "\"++++\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 774, col: 37, offset: 25004},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElements465,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElements468,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 778, col: 24, offset: 25113},
																																	run: (*parser).callonListElements475,
																																	expr: &seqExpr{
																																		pos: position{line: 778, col: 24, offset: 25113},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 778, col: 24, offset: 25113},
																																				val:        "____",
																																				ignoreCase: false,
																																				want:       "\"____\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 778, col: 31, offset: 25120},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElements479,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElements482,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 782, col: 26, offset: 25225},
																																	run: (*parser).callonListElements489,
																																	expr: &seqExpr{
																																		pos: position{line: 782, col: 26, offset: 25225},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 782, col: 26, offset: 25225},
																																				val:        "****",
																																				ignoreCase: false,
																																				want:       "\"****\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 782, col: 33, offset: 25232},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElements493,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElements496,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1417, col: 9, offset: 46724},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 1417, col: 18, offset: 46733},
																											run: (*parser).callonListElements504,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1417, col: 18, offset: 46733},
																												expr: &charClassMatcher{
																													pos:        position{line: 1417, col: 18, offset: 46733},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2915, col: 8, offset: 96511},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2908, col: 12, offset: 96371},
																												run: (*parser).callonListElements508,
																												expr: &choiceExpr{
																													pos: position{line: 2908, col: 13, offset: 96372},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2908, col: 13, offset: 96372},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 20, offset: 96379},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 29, offset: 96388},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1620, col: 9, offset: 53324},
																run: (*parser).callonListElements515,
																expr: &seqExpr{
																	pos: position{line: 1620, col: 9, offset: 53324},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2903, col: 11, offset: 96254},
																			run: (*parser).callonListElements517,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2903, col: 11, offset: 96254},
																				expr: &charClassMatcher{
																					pos:        position{line: 2903, col: 12, offset: 96255},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1621, col: 9, offset: 53376},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1621, col: 18, offset: 53385},
																				run: (*parser).callonListElements521,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1621, col: 18, offset: 53385},
																					expr: &charClassMatcher{
																						pos:        position{line: 1621, col: 18, offset: 53385},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElements525,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1333, col: 5, offset: 43743},
							label: "extraElements",
							expr: &ruleRefExpr{
								pos:  position{line: 1333, col: 20, offset: 43758},
								name: "ExtraListElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ExtraListElements",
			pos:  position{line: 1343, col: 1, offset: 44013},
			expr: &actionExpr{
				pos: position{line: 1343, col: 22, offset: 44034},
				run: (*parser).callonExtraListElements1,
				expr: &labeledExpr{
					pos:   position{line: 1343, col: 22, offset: 44034},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1343, col: 31, offset: 44043},
						expr: &ruleRefExpr{
							pos:  position{line: 1343, col: 32, offset: 44044},
							name: "ExtraListElement",
						},
					},
				},
			},
		},
		{
			name: "ExtraListElement",
			pos:  position{line: 1347, col: 1, offset: 44124},
			expr: &actionExpr{
				pos: position{line: 1348, col: 5, offset: 44263},
				run: (*parser).callonExtraListElement1,
				expr: &seqExpr{
					pos: position{line: 1348, col: 5, offset: 44263},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1348, col: 5, offset: 44263},
							expr: &notExpr{
								pos: position{line: 2912, col: 8, offset: 96461},
								expr: &anyMatcher{
									line: 2912, col: 9, offset: 96462,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 5, offset: 44273},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1350, col: 9, offset: 44291},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1350, col: 13, offset: 44295},
										run: (*parser).callonExtraListElement8,
										expr: &seqExpr{
											pos: position{line: 1350, col: 13, offset: 44295},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1350, col: 13, offset: 44295},
													expr: &actionExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														run: (*parser).callonExtraListElement11,
														expr: &seqExpr{
															pos: position{line: 685, col: 14, offset: 22145},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 685, col: 14, offset: 22145},
																	expr: &notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 685, col: 19, offset: 22150},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonExtraListElement17,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonExtraListElement20,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1351, col: 13, offset: 44319},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1485, col: 5, offset: 48721},
														run: (*parser).callonExtraListElement28,
														expr: &seqExpr{
															pos: position{line: 1485, col: 5, offset: 48721},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1485, col: 5, offset: 48721},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1492, col: 5, offset: 48929},
																		run: (*parser).callonExtraListElement31,
																		expr: &seqExpr{
																			pos: position{line: 1492, col: 5, offset: 48929},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1492, col: 5, offset: 48929},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonExtraListElement34,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1492, col: 12, offset: 48936},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1494, col: 9, offset: 48999},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1494, col: 9, offset: 48999},
																								run: (*parser).callonExtraListElement38,
																								expr: &seqExpr{
																									pos: position{line: 1494, col: 9, offset: 48999},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1494, col: 9, offset: 48999},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1494, col: 16, offset: 49006},
																												run: (*parser).callonExtraListElement41,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1494, col: 16, offset: 49006},
																													expr: &litMatcher{
																														pos:        position{line: 1494, col: 17, offset: 49007},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1498, col: 9, offset: 49107},
																											run: (*parser).callonExtraListElement44,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1517, col: 11, offset: 49824},
																								run: (*parser).callonExtraListElement45,
																								expr: &seqExpr{
																									pos: position{line: 1517, col: 11, offset: 49824},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1517, col: 11, offset: 49824},
																											expr: &charClassMatcher{
																												pos:        position{line: 1517, col: 12, offset: 49825},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1517, col: 20, offset: 49833},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1519, col: 13, offset: 49950},
																								run: (*parser).callonExtraListElement50,
																								expr: &seqExpr{
																									pos: position{line: 1519, col: 13, offset: 49950},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1519, col: 14, offset: 49951},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1519, col: 21, offset: 49958},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1521, col: 13, offset: 50078},
																								run: (*parser).callonExtraListElement54,
																								expr: &seqExpr{
																									pos: position{line: 1521, col: 13, offset: 50078},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1521, col: 14, offset: 50079},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1521, col: 21, offset: 50086},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1523, col: 13, offset: 50206},
																								run: (*parser).callonExtraListElement58,
																								expr: &seqExpr{
																									pos: position{line: 1523, col: 13, offset: 50206},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1523, col: 13, offset: 50206},
																											expr: &charClassMatcher{
																												pos:        position{line: 1523, col: 14, offset: 50207},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1523, col: 26, offset: 50219},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1525, col: 13, offset: 50339},
																								run: (*parser).callonExtraListElement63,
																								expr: &seqExpr{
																									pos: position{line: 1525, col: 13, offset: 50339},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1525, col: 13, offset: 50339},
																											expr: &charClassMatcher{
																												pos:        position{line: 1525, col: 14, offset: 50340},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1525, col: 26, offset: 50352},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2903, col: 11, offset: 96254},
																					run: (*parser).callonExtraListElement68,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						expr: &charClassMatcher{
																							pos:        position{line: 2903, col: 12, offset: 96255},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1486, col: 5, offset: 48760},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1426, col: 5, offset: 46956},
																		run: (*parser).callonExtraListElement72,
																		expr: &seqExpr{
																			pos: position{line: 1426, col: 5, offset: 46956},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1426, col: 5, offset: 46956},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1426, col: 14, offset: 46965},
																						run: (*parser).callonExtraListElement75,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1426, col: 14, offset: 46965},
																							expr: &charClassMatcher{
																								pos:        position{line: 1426, col: 14, offset: 46965},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonExtraListElement79,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1354, col: 13, offset: 44411},
										run: (*parser).callonExtraListElement86,
										expr: &seqExpr{
											pos: position{line: 1354, col: 13, offset: 44411},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1354, col: 13, offset: 44411},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1354, col: 24, offset: 44422},
														expr: &ruleRefExpr{
															pos:  position{line: 1354, col: 25, offset: 44423},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1355, col: 13, offset: 44454},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1485, col: 5, offset: 48721},
														run: (*parser).callonExtraListElement92,
														expr: &seqExpr{
															pos: position{line: 1485, col: 5, offset: 48721},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1485, col: 5, offset: 48721},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1492, col: 5, offset: 48929},
																		run: (*parser).callonExtraListElement95,
																		expr: &seqExpr{
																			pos: position{line: 1492, col: 5, offset: 48929},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1492, col: 5, offset: 48929},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonExtraListElement98,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1492, col: 12, offset: 48936},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1494, col: 9, offset: 48999},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1494, col: 9, offset: 48999},
																								run: (*parser).callonExtraListElement102,
																								expr: &seqExpr{
																									pos: position{line: 1494, col: 9, offset: 48999},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1494, col: 9, offset: 48999},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1494, col: 16, offset: 49006},
																												run: (*parser).callonExtraListElement105,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1494, col: 16, offset: 49006},
																													expr: &litMatcher{
																														pos:        position{line: 1494, col: 17, offset: 49007},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1498, col: 9, offset: 49107},
																											run: (*parser).callonExtraListElement108,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1517, col: 11, offset: 49824},
																								run: (*parser).callonExtraListElement109,
																								expr: &seqExpr{
																									pos: position{line: 1517, col: 11, offset: 49824},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1517, col: 11, offset: 49824},
																											expr: &charClassMatcher{
																												pos:        position{line: 1517, col: 12, offset: 49825},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1517, col: 20, offset: 49833},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1519, col: 13, offset: 49950},
																								run: (*parser).callonExtraListElement114,
																								expr: &seqExpr{
																									pos: position{line: 1519, col: 13, offset: 49950},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1519, col: 14, offset: 49951},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1519, col: 21, offset: 49958},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1521, col: 13, offset: 50078},
																								run: (*parser).callonExtraListElement118,
																								expr: &seqExpr{
																									pos: position{line: 1521, col: 13, offset: 50078},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1521, col: 14, offset: 50079},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1521, col: 21, offset: 50086},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1523, col: 13, offset: 50206},
																								run: (*parser).callonExtraListElement122,
																								expr: &seqExpr{
																									pos: position{line: 1523, col: 13, offset: 50206},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1523, col: 13, offset: 50206},
																											expr: &charClassMatcher{
																												pos:        position{line: 1523, col: 14, offset: 50207},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1523, col: 26, offset: 50219},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1525, col: 13, offset: 50339},
																								run: (*parser).callonExtraListElement127,
																								expr: &seqExpr{
																									pos: position{line: 1525, col: 13, offset: 50339},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1525, col: 13, offset: 50339},
																											expr: &charClassMatcher{
																												pos:        position{line: 1525, col: 14, offset: 50340},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1525, col: 26, offset: 50352},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2903, col: 11, offset: 96254},
																					run: (*parser).callonExtraListElement132,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						expr: &charClassMatcher{
																							pos:        position{line: 2903, col: 12, offset: 96255},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1486, col: 5, offset: 48760},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1426, col: 5, offset: 46956},
																		run: (*parser).callonExtraListElement136,
																		expr: &seqExpr{
																			pos: position{line: 1426, col: 5, offset: 46956},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1426, col: 5, offset: 46956},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1426, col: 14, offset: 46965},
																						run: (*parser).callonExtraListElement139,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1426, col: 14, offset: 46965},
																							expr: &charClassMatcher{
																								pos:        position{line: 1426, col: 14, offset: 46965},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonExtraListElement143,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1358, col: 13, offset: 44582},
										run: (*parser).callonExtraListElement150,
										expr: &seqExpr{
											pos: position{line: 1358, col: 13, offset: 44582},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1358, col: 13, offset: 44582},
													expr: &actionExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														run: (*parser).callonExtraListElement153,
														expr: &seqExpr{
															pos: position{line: 685, col: 14, offset: 22145},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 685, col: 14, offset: 22145},
																	expr: &notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 685, col: 19, offset: 22150},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonExtraListElement159,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonExtraListElement162,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1359, col: 13, offset: 44606},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1535, col: 5, offset: 50618},
														run: (*parser).callonExtraListElement170,
														expr: &seqExpr{
															pos: position{line: 1535, col: 5, offset: 50618},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1535, col: 5, offset: 50618},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1542, col: 5, offset: 50891},
																		run: (*parser).callonExtraListElement173,
																		expr: &seqExpr{
																			pos: position{line: 1542, col: 5, offset: 50891},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1542, col: 5, offset: 50891},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonExtraListElement176,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1542, col: 12, offset: 50898},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1542, col: 20, offset: 50906},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1544, col: 9, offset: 50963},
																								run: (*parser).callonExtraListElement180,
																								expr: &seqExpr{
																									pos: position{line: 1544, col: 9, offset: 50963},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1544, col: 9, offset: 50963},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1544, col: 16, offset: 50970},
																												run: (*parser).callonExtraListElement183,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1544, col: 16, offset: 50970},
																													expr: &litMatcher{
																														pos:        position{line: 1544, col: 17, offset: 50971},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1548, col: 9, offset: 51071},
																											run: (*parser).callonExtraListElement186,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1565, col: 14, offset: 51778},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1565, col: 21, offset: 51785},
																									run: (*parser).callonExtraListElement188,
																									expr: &litMatcher{
																										pos:        position{line: 1565, col: 22, offset: 51786},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2903, col: 11, offset: 96254},
																					run: (*parser).callonExtraListElement190,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						expr: &charClassMatcher{
																							pos:        position{line: 2903, col: 12, offset: 96255},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1536, col: 5, offset: 50659},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1536, col: 16, offset: 50670},
																		expr: &actionExpr{
																			pos: position{line: 1572, col: 5, offset: 51947},
																			run: (*parser).callonExtraListElement195,
																			expr: &seqExpr{
																				pos: position{line: 1572, col: 5, offset: 51947},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1572, col: 5, offset: 51947},
																						expr: &litMatcher{
																							pos:        position{line: 1572, col: 6, offset: 51948},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1572, col: 10, offset: 51952},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1573, col: 7, offset: 51966},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1573, col: 7, offset: 51966},
																									run: (*parser).callonExtraListElement201,
																									expr: &litMatcher{
																										pos:        position{line: 1573, col: 7, offset: 51966},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1574, col: 7, offset: 52011},
																									run: (*parser).callonExtraListElement203,
																									expr: &litMatcher{
																										pos:        position{line: 1574, col: 7, offset: 52011},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1575, col: 7, offset: 52054},
																									run: (*parser).callonExtraListElement205,
																									expr: &litMatcher{
																										pos:        position{line: 1575, col: 7, offset: 52054},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						run: (*parser).callonExtraListElement207,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2903, col: 11, offset: 96254},
																							expr: &charClassMatcher{
																								pos:        position{line: 2903, col: 12, offset: 96255},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1537, col: 5, offset: 50709},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1426, col: 5, offset: 46956},
																		run: (*parser).callonExtraListElement211,
																		expr: &seqExpr{
																			pos: position{line: 1426, col: 5, offset: 46956},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1426, col: 5, offset: 46956},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1426, col: 14, offset: 46965},
																						run: (*parser).callonExtraListElement214,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1426, col: 14, offset: 46965},
																							expr: &charClassMatcher{
																								pos:        position{line: 1426, col: 14, offset: 46965},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonExtraListElement218,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1362, col: 13, offset: 44700},
										run: (*parser).callonExtraListElement225,
										expr: &seqExpr{
											pos: position{line: 1362, col: 13, offset: 44700},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1362, col: 13, offset: 44700},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1362, col: 24, offset: 44711},
														expr: &ruleRefExpr{
															pos:  position{line: 1362, col: 25, offset: 44712},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1363, col: 13, offset: 44743},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1535, col: 5, offset: 50618},
														run: (*parser).callonExtraListElement231,
														expr: &seqExpr{
															pos: position{line: 1535, col: 5, offset: 50618},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1535, col: 5, offset: 50618},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1542, col: 5, offset: 50891},
																		run: (*parser).callonExtraListElement234,
																		expr: &seqExpr{
																			pos: position{line: 1542, col: 5, offset: 50891},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1542, col: 5, offset: 50891},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonExtraListElement237,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1542, col: 12, offset: 50898},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1542, col: 20, offset: 50906},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1544, col: 9, offset: 50963},
																								run: (*parser).callonExtraListElement241,
																								expr: &seqExpr{
																									pos: position{line: 1544, col: 9, offset: 50963},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1544, col: 9, offset: 50963},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1544, col: 16, offset: 50970},
																												run: (*parser).callonExtraListElement244,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1544, col: 16, offset: 50970},
																													expr: &litMatcher{
																														pos:        position{line: 1544, col: 17, offset: 50971},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1548, col: 9, offset: 51071},
																											run: (*parser).callonExtraListElement247,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1565, col: 14, offset: 51778},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1565, col: 21, offset: 51785},
																									run: (*parser).callonExtraListElement249,
																									expr: &litMatcher{
																										pos:        position{line: 1565, col: 22, offset: 51786},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2903, col: 11, offset: 96254},
																					run: (*parser).callonExtraListElement251,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						expr: &charClassMatcher{
																							pos:        position{line: 2903, col: 12, offset: 96255},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1536, col: 5, offset: 50659},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1536, col: 16, offset: 50670},
																		expr: &actionExpr{
																			pos: position{line: 1572, col: 5, offset: 51947},
																			run: (*parser).callonExtraListElement256,
																			expr: &seqExpr{
																				pos: position{line: 1572, col: 5, offset: 51947},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1572, col: 5, offset: 51947},
																						expr: &litMatcher{
																							pos:        position{line: 1572, col: 6, offset: 51948},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1572, col: 10, offset: 51952},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1573, col: 7, offset: 51966},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1573, col: 7, offset: 51966},
																									run: (*parser).callonExtraListElement262,
																									expr: &litMatcher{
																										pos:        position{line: 1573, col: 7, offset: 51966},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1574, col: 7, offset: 52011},
																									run: (*parser).callonExtraListElement264,
																									expr: &litMatcher{
																										pos:        position{line: 1574, col: 7, offset: 52011},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1575, col: 7, offset: 52054},
																									run: (*parser).callonExtraListElement266,
																									expr: &litMatcher{
																										pos:        position{line: 1575, col: 7, offset: 52054},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						run: (*parser).callonExtraListElement268,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2903, col: 11, offset: 96254},
																							expr: &charClassMatcher{
																								pos:        position{line: 2903, col: 12, offset: 96255},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1537, col: 5, offset: 50709},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1426, col: 5, offset: 46956},
																		run: (*parser).callonExtraListElement272,
																		expr: &seqExpr{
																			pos: position{line: 1426, col: 5, offset: 46956},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1426, col: 5, offset: 46956},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1426, col: 14, offset: 46965},
																						run: (*parser).callonExtraListElement275,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1426, col: 14, offset: 46965},
																							expr: &charClassMatcher{
																								pos:        position{line: 1426, col: 14, offset: 46965},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonExtraListElement279,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1366, col: 13, offset: 44873},
										run: (*parser).callonExtraListElement286,
										expr: &seqExpr{
											pos: position{line: 1366, col: 13, offset: 44873},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1366, col: 13, offset: 44873},
													expr: &actionExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														run: (*parser).callonExtraListElement289,
														expr: &seqExpr{
															pos: position{line: 685, col: 14, offset: 22145},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 685, col: 14, offset: 22145},
																	expr: &notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 685, col: 19, offset: 22150},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonExtraListElement295,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonExtraListElement298,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1367, col: 13, offset: 44897},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1642, col: 5, offset: 53927},
														run: (*parser).callonExtraListElement306,
														expr: &seqExpr{
															pos: position{line: 1642, col: 5, offset: 53927},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1642, col: 5, offset: 53927},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1648, col: 5, offset: 54128},
																		run: (*parser).callonExtraListElement309,
																		expr: &seqExpr{
																			pos: position{line: 1648, col: 5, offset: 54128},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1648, col: 5, offset: 54128},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1648, col: 9, offset: 54132},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1648, col: 14, offset: 54137},
																						run: (*parser).callonExtraListElement313,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1648, col: 14, offset: 54137},
																							expr: &charClassMatcher{
																								pos:        position{line: 1648, col: 14, offset: 54137},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1648, col: 62, offset: 54185},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2903, col: 11, offset: 96254},
																					run: (*parser).callonExtraListElement317,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						expr: &charClassMatcher{
																							pos:        position{line: 2903, col: 12, offset: 96255},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1643, col: 5, offset: 53963},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1653, col: 5, offset: 54311},
																		run: (*parser).callonExtraListElement321,
																		expr: &seqExpr{
																			pos: position{line: 1653, col: 5, offset: 54311},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1653, col: 5, offset: 54311},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1653, col: 14, offset: 54320},
																						run: (*parser).callonExtraListElement324,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1653, col: 14, offset: 54320},
																							expr: &charClassMatcher{
																								pos:        position{line: 1653, col: 14, offset: 54320},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonExtraListElement328,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1370, col: 13, offset: 44989},
										run: (*parser).callonExtraListElement335,
										expr: &seqExpr{
											pos: position{line: 1370, col: 13, offset: 44989},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1370, col: 13, offset: 44989},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1370, col: 24, offset: 45000},
														expr: &ruleRefExpr{
															pos:  position{line: 1370, col: 25, offset: 45001},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1371, col: 13, offset: 45032},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1642, col: 5, offset: 53927},
														run: (*parser).callonExtraListElement341,
														expr: &seqExpr{
															pos: position{line: 1642, col: 5, offset: 53927},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1642, col: 5, offset: 53927},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1648, col: 5, offset: 54128},
																		run: (*parser).callonExtraListElement344,
																		expr: &seqExpr{
																			pos: position{line: 1648, col: 5, offset: 54128},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1648, col: 5, offset: 54128},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1648, col: 9, offset: 54132},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1648, col: 14, offset: 54137},
																						run: (*parser).callonExtraListElement348,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1648, col: 14, offset: 54137},
																							expr: &charClassMatcher{
																								pos:        position{line: 1648, col: 14, offset: 54137},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1648, col: 62, offset: 54185},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2903, col: 11, offset: 96254},
																					run: (*parser).callonExtraListElement352,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						expr: &charClassMatcher{
																							pos:        position{line: 2903, col: 12, offset: 96255},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1643, col: 5, offset: 53963},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1653, col: 5, offset: 54311},
																		run: (*parser).callonExtraListElement356,
																		expr: &seqExpr{
																			pos: position{line: 1653, col: 5, offset: 54311},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1653, col: 5, offset: 54311},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1653, col: 14, offset: 54320},
																						run: (*parser).callonExtraListElement359,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1653, col: 14, offset: 54320},
																							expr: &charClassMatcher{
																								pos:        position{line: 1653, col: 14, offset: 54320},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonExtraListElement363,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1374, col: 11, offset: 45158},
										name: "ListElementContinuation",
									},
									&actionExpr{
										pos: position{line: 1375, col: 13, offset: 45194},
										run: (*parser).callonExtraListElement371,
										expr: &seqExpr{
											pos: position{line: 1375, col: 13, offset: 45194},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1375, col: 13, offset: 45194},
													expr: &actionExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														run: (*parser).callonExtraListElement374,
														expr: &seqExpr{
															pos: position{line: 685, col: 14, offset: 22145},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 685, col: 14, offset: 22145},
																	expr: &notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 685, col: 19, offset: 22150},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonExtraListElement380,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonExtraListElement383,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1376, col: 13, offset: 45218},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1584, col: 5, offset: 52247},
														run: (*parser).callonExtraListElement391,
														expr: &seqExpr{
															pos: position{line: 1584, col: 5, offset: 52247},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1584, col: 5, offset: 52247},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1592, col: 5, offset: 52506},
																		run: (*parser).callonExtraListElement394,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1592, col: 5, offset: 52506},
																			expr: &seqExpr{
																				pos: position{line: 1592, col: 6, offset: 52507},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1592, col: 6, offset: 52507},
																						expr: &actionExpr{
																							pos: position{line: 1597, col: 5, offset: 52657},
																							run: (*parser).callonExtraListElement398,
																							expr: &seqExpr{
																								pos: position{line: 1597, col: 5, offset: 52657},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1597, col: 5, offset: 52657},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1597, col: 16, offset: 52668},
																											run: (*parser).callonExtraListElement401,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1597, col: 16, offset: 52668},
																												expr: &litMatcher{
																													pos:        position{line: 1597, col: 17, offset: 52669},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1600, col: 5, offset: 52726},
																										run: (*parser).callonExtraListElement404,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1592, col: 35, offset: 52536},
																						expr: &choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonExtraListElement407,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1592, col: 40, offset: 52541,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1585, col: 5, offset: 52282},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1597, col: 5, offset: 52657},
																		run: (*parser).callonExtraListElement416,
																		expr: &seqExpr{
																			pos: position{line: 1597, col: 5, offset: 52657},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1597, col: 5, offset: 52657},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1597, col: 16, offset: 52668},
																						run: (*parser).callonExtraListElement419,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1597, col: 16, offset: 52668},
																							expr: &litMatcher{
																								pos:        position{line: 1597, col: 17, offset: 52669},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1600, col: 5, offset: 52726},
																					run: (*parser).callonExtraListElement422,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1586, col: 5, offset: 52327},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1608, col: 5, offset: 52976},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1610, col: 9, offset: 53041},
																				run: (*parser).callonExtraListElement425,
																				expr: &seqExpr{
																					pos: position{line: 1610, col: 9, offset: 53041},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1610, col: 9, offset: 53041},
																							expr: &actionExpr{
																								pos: position{line: 2899, col: 10, offset: 96187},
																								run: (*parser).callonExtraListElement428,
																								expr: &charClassMatcher{
																									pos:        position{line: 2899, col: 11, offset: 96188},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonExtraListElement431,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1611, col: 9, offset: 53061},
																							expr: &actionExpr{
																								pos: position{line: 685, col: 14, offset: 22145},
																								run: (*parser).callonExtraListElement439,
																								expr: &seqExpr{
																									pos: position{line: 685, col: 14, offset: 22145},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 685, col: 14, offset: 22145},
																											expr: &notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 685, col: 19, offset: 22150},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement445,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement448,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1612, col: 9, offset: 53081},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1612, col: 17, offset: 53089},
																								expr: &choiceExpr{
																									pos: position{line: 1406, col: 5, offset: 46323},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 1406, col: 5, offset: 46323},
																											run: (*parser).callonExtraListElement458,
																											expr: &actionExpr{
																												pos: position{line: 2616, col: 22, offset: 87547},
																												run: (*parser).callonExtraListElement459,
																												expr: &seqExpr{
																													pos: position{line: 2616, col: 22, offset: 87547},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2621, col: 31, offset: 87768},
																															val:        "//",
																															ignoreCase: false,
																															want:       "\"//\"",
																														},
																														&notExpr{
																															pos: position{line: 2621, col: 36, offset: 87773},
																															expr: &litMatcher{
																																pos:        position{line: 2621, col: 37, offset: 87774},
																																val:        "//",
																																ignoreCase: false,
																																want:       "\"//\"",
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 2616, col: 49, offset: 87574},
																															label: "content",
																															expr: &actionExpr{
																																pos: position{line: 2623, col: 29, offset: 87809},
																																run: (*parser).callonExtraListElement465,
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 2623, col: 29, offset: 87809},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2623, col: 29, offset: 87809},
																																		val:        "[^\\r\\n]",
																																		chars:      []rune{'\r', '\n'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2915, col: 8, offset: 96511},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 2908, col: 12, offset: 96371},
																																	run: (*parser).callonExtraListElement469,
																																	expr: &choiceExpr{
																																		pos: position{line: 2908, col: 13, offset: 96372},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 13, offset: 96372},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 20, offset: 96379},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 29, offset: 96388},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2912, col: 8, offset: 96461},
																																	expr: &anyMatcher{
																																		line: 2912, col: 9, offset: 96462,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1410, col: 9, offset: 46476},
																											run: (*parser).callonExtraListElement476,
																											expr: &seqExpr{
																												pos: position{line: 1410, col: 9, offset: 46476},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 1410, col: 9, offset: 46476},
																														expr: &actionExpr{
																															pos: position{line: 685, col: 14, offset: 22145},
																															run: (*parser).callonExtraListElement479,
																															expr: &seqExpr{
																																pos: position{line: 685, col: 14, offset: 22145},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 685, col: 14, offset: 22145},
																																		expr: &notExpr{
																																			pos: position{line: 2912, col: 8, offset: 96461},
																																			expr: &anyMatcher{
																																				line: 2912, col: 9, offset: 96462,
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 685, col: 19, offset: 22150},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonExtraListElement485,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2915, col: 8, offset: 96511},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2908, col: 12, offset: 96371},
																																				run: (*parser).callonExtraListElement488,
																																				expr: &choiceExpr{
																																					pos: position{line: 2908, col: 13, offset: 96372},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 13, offset: 96372},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 20, offset: 96379},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 29, offset: 96388},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2912, col: 8, offset: 96461},
																																				expr: &anyMatcher{
																																					line: 2912, col: 9, offset: 96462,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1411, col: 9, offset: 46495},
																														expr: &seqExpr{
																															pos: position{line: 1444, col: 34, offset: 47455},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1444, col: 34, offset: 47455},
																																	val:        "+",
																																	ignoreCase: false,
																																	want:       "\"+\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1444, col: 38, offset: 47459},
																																	expr: &actionExpr{
																																		pos: position{line: 2899, col: 10, offset: 96187},
																																		run: (*parser).callonExtraListElement499,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2899, col: 11, offset: 96188},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2908, col: 12, offset: 96371},
																																	run: (*parser).callonExtraListElement501,
																																	expr: &choiceExpr{
																																		pos: position{line: 2908, col: 13, offset: 96372},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 13, offset: 96372},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 20, offset: 96379},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 29, offset: 96388},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1412, col: 9, offset: 46534},
																														expr: &actionExpr{
																															pos: position{line: 1492, col: 5, offset: 48929},
																															run: (*parser).callonExtraListElement507,
																															expr: &seqExpr{
																																pos: position{line: 1492, col: 5, offset: 48929},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1492, col: 5, offset: 48929},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonExtraListElement510,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1492, col: 12, offset: 48936},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1494, col: 9, offset: 48999},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1494, col: 9, offset: 48999},
																																					run: (*parser).callonExtraListElement514,
																																					expr: &seqExpr{
																																						pos: position{line: 1494, col: 9, offset: 48999},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1494, col: 9, offset: 48999},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1494, col: 16, offset: 49006},
																																									run: (*parser).callonExtraListElement517,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1494, col: 16, offset: 49006},
																																										expr: &litMatcher{
																																											pos:        position{line: 1494, col: 17, offset: 49007},
																																											val:        ".",
																																											ignoreCase: false,
																																											want:       "\".\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1498, col: 9, offset: 49107},
																																								run: (*parser).callonExtraListElement520,
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1517, col: 11, offset: 49824},
																																					run: (*parser).callonExtraListElement521,
																																					expr: &seqExpr{
																																						pos: position{line: 1517, col: 11, offset: 49824},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1517, col: 11, offset: 49824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1517, col: 12, offset: 49825},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1517, col: 20, offset: 49833},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1519, col: 13, offset: 49950},
																																					run: (*parser).callonExtraListElement526,
																																					expr: &seqExpr{
																																						pos: position{line: 1519, col: 13, offset: 49950},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1519, col: 14, offset: 49951},
																																								val:        "[a-z]",
																																								ranges:     []rune{'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1519, col: 21, offset: 49958},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1521, col: 13, offset: 50078},
																																					run: (*parser).callonExtraListElement530,
																																					expr: &seqExpr{
																																						pos: position{line: 1521, col: 13, offset: 50078},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1521, col: 14, offset: 50079},
																																								val:        "[A-Z]",
																																								ranges:     []rune{'A', 'Z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1521, col: 21, offset: 50086},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1523, col: 13, offset: 50206},
																																					run: (*parser).callonExtraListElement534,
																																					expr: &seqExpr{
																																						pos: position{line: 1523, col: 13, offset: 50206},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1523, col: 13, offset: 50206},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1523, col: 14, offset: 50207},
																																									val:        "[ivxdlcm]",
																																									chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1523, col: 26, offset: 50219},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1525, col: 13, offset: 50339},
																																					run: (*parser).callonExtraListElement539,
																																					expr: &seqExpr{
																																						pos: position{line: 1525, col: 13, offset: 50339},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1525, col: 13, offset: 50339},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1525, col: 14, offset: 50340},
																																									val:        "[IVXDLCM]",
																																									chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1525, col: 26, offset: 50352},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 2903, col: 11, offset: 96254},
																																		run: (*parser).callonExtraListElement544,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 2903, col: 11, offset: 96254},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2903, col: 12, offset: 96255},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1413, col: 9, offset: 46568},
																														expr: &actionExpr{
																															pos: position{line: 1542, col: 5, offset: 50891},
																															run: (*parser).callonExtraListElement548,
																															expr: &seqExpr{
																																pos: position{line: 1542, col: 5, offset: 50891},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1542, col: 5, offset: 50891},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonExtraListElement551,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1542, col: 12, offset: 50898},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1542, col: 20, offset: 50906},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1544, col: 9, offset: 50963},
																																					run: (*parser).callonExtraListElement555,
																																					expr: &seqExpr{
																																						pos: position{line: 1544, col: 9, offset: 50963},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1544, col: 9, offset: 50963},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1544, col: 16, offset: 50970},
																																									run: (*parser).callonExtraListElement558,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1544, col: 16, offset: 50970},
																																										expr: &litMatcher{
																																											pos:        position{line: 1544, col: 17, offset: 50971},
																																											val:        "*",
																																											ignoreCase: false,
																																											want:       "\"*\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1548, col: 9, offset: 51071},
																																								run: (*parser).callonExtraListElement561,
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1565, col: 14, offset: 51778},
																																					label: "depth",
																																					expr: &actionExpr{
																																						pos: position{line: 1565, col: 21, offset: 51785},
																																						run: (*parser).callonExtraListElement563,
																																						expr: &litMatcher{
																																							pos:        position{line: 1565, col: 22, offset: 51786},
																																							val:        "-",
																																							ignoreCase: false,
																																							want:       "\"-\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 2903, col: 11, offset: 96254},
																																		run: (*parser).callonExtraListElement565,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 2903, col: 11, offset: 96254},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2903, col: 12, offset: 96255},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1414, col: 9, offset: 46604},
																														expr: &actionExpr{
																															pos: position{line: 1648, col: 5, offset: 54128},
																															run: (*parser).callonExtraListElement569,
																															expr: &seqExpr{
																																pos: position{line: 1648, col: 5, offset: 54128},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 1648, col: 5, offset: 54128},
																																		val:        "<",
																																		ignoreCase: false,
																																		want:       "\"<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1648, col: 9, offset: 54132},
																																		label: "ref",
																																		expr: &actionExpr{
																																			pos: position{line: 1648, col: 14, offset: 54137},
																																			run: (*parser).callonExtraListElement573,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1648, col: 14, offset: 54137},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1648, col: 14, offset: 54137},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1648, col: 62, offset: 54185},
																																		val:        ">",
																																		ignoreCase: false,
																																		want:       "\">\"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2903, col: 11, offset: 96254},
																																		run: (*parser).callonExtraListElement577,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 2903, col: 11, offset: 96254},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2903, col: 12, offset: 96255},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1415, col: 9, offset: 46638},
																														expr: &seqExpr{
																															pos: position{line: 1415, col: 11, offset: 46640},
																															exprs: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1592, col: 5, offset: 52506},
																																	run: (*parser).callonExtraListElement582,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1592, col: 5, offset: 52506},
																																		expr: &seqExpr{
																																			pos: position{line: 1592, col: 6, offset: 52507},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 1592, col: 6, offset: 52507},
																																					expr: &actionExpr{
																																						pos: position{line: 1597, col: 5, offset: 52657},
																																						run: (*parser).callonExtraListElement586,
																																						expr: &seqExpr{
																																							pos: position{line: 1597, col: 5, offset: 52657},
																																							exprs: []interface{}{
																																								&labeledExpr{
																																									pos:   position{line: 1597, col: 5, offset: 52657},
																																									label: "separator",
																																									expr: &actionExpr{
																																										pos: position{line: 1597, col: 16, offset: 52668},
																																										run: (*parser).callonExtraListElement589,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 1597, col: 16, offset: 52668},
																																											expr: &litMatcher{
																																												pos:        position{line: 1597, col: 17, offset: 52669},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																										},
																																									},
																																								},
																																								&andCodeExpr{
																																									pos: position{line: 1600, col: 5, offset: 52726},
																																									run: (*parser).callonExtraListElement592,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 1592, col: 35, offset: 52536},
																																					expr: &choiceExpr{
																																						pos: position{line: 2915, col: 8, offset: 96511},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 2908, col: 12, offset: 96371},
																																								run: (*parser).callonExtraListElement595,
																																								expr: &choiceExpr{
																																									pos: position{line: 2908, col: 13, offset: 96372},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2908, col: 13, offset: 96372},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2908, col: 20, offset: 96379},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2908, col: 29, offset: 96388},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2912, col: 8, offset: 96461},
																																								expr: &anyMatcher{
																																									line: 2912, col: 9, offset: 96462,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&anyMatcher{
																																					line: 1592, col: 40, offset: 52541,
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1597, col: 5, offset: 52657},
																																	run: (*parser).callonExtraListElement603,
																																	expr: &seqExpr{
																																		pos: position{line: 1597, col: 5, offset: 52657},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1597, col: 5, offset: 52657},
																																				label: "separator",
																																				expr: &actionExpr{
																																					pos: position{line: 1597, col: 16, offset: 52668},
																																					run: (*parser).callonExtraListElement606,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1597, col: 16, offset: 52668},
																																						expr: &litMatcher{
																																							pos:        position{line: 1597, col: 17, offset: 52669},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1600, col: 5, offset: 52726},
																																				run: (*parser).callonExtraListElement609,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1416, col: 9, offset: 46700},
																														expr: &actionExpr{
																															pos: position{line: 731, col: 5, offset: 23680},
																															run: (*parser).callonExtraListElement611,
																															expr: &seqExpr{
																																pos: position{line: 731, col: 5, offset: 23680},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 731, col: 5, offset: 23680},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2813, col: 13, offset: 93503},
																																			val:        "[0-9\\pL]",
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 732, col: 5, offset: 23710},
																																		label: "delimiter",
																																		expr: &choiceExpr{
																																			pos: position{line: 733, col: 9, offset: 23730},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 746, col: 26, offset: 24217},
																																					run: (*parser).callonExtraListElement617,
																																					expr: &seqExpr{
																																						pos: position{line: 746, col: 26, offset: 24217},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 746, col: 26, offset: 24217},
																																								val:        "////",
																																								ignoreCase: false,
																																								want:       "\"////\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 746, col: 33, offset: 24224},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement621,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement624,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 750, col: 26, offset: 24331},
																																					run: (*parser).callonExtraListElement631,
																																					expr: &seqExpr{
																																						pos: position{line: 750, col: 26, offset: 24331},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 750, col: 26, offset: 24331},
																																								val:        "====",
																																								ignoreCase: false,
																																								want:       "\"====\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 750, col: 33, offset: 24338},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement635,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement638,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 758, col: 26, offset: 24556},
																																					run: (*parser).callonExtraListElement645,
																																					expr: &seqExpr{
																																						pos: position{line: 758, col: 26, offset: 24556},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 758, col: 26, offset: 24556},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 758, col: 32, offset: 24562},
																																								label: "language",
																																								expr: &actionExpr{
																																									pos: position{line: 762, col: 13, offset: 24692},
																																									run: (*parser).callonExtraListElement649,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 762, col: 14, offset: 24693},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 762, col: 14, offset: 24693},
																																											val:        "[^\\r\\n ]",
																																											chars:      []rune{'\r', '\n', ' '},
																																											ignoreCase: false,
																																											inverted:   true,
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 758, col: 52, offset: 24582},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement653,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement656,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 754, col: 25, offset: 24444},
																																					run: (*parser).callonExtraListElement663,
																																					expr: &seqExpr{
																																						pos: position{line: 754, col: 25, offset: 24444},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 754, col: 25, offset: 24444},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 754, col: 31, offset: 24450},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement667,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement670,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 766, col: 26, offset: 24765},
																																					run: (*parser).callonExtraListElement677,
																																					expr: &seqExpr{
																																						pos: position{line: 766, col: 26, offset: 24765},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 766, col: 26, offset: 24765},
																																								val:        "----",
																																								ignoreCase: false,
																																								want:       "\"----\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 766, col: 33, offset: 24772},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement681,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement684,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 770, col: 26, offset: 24879},
																																					run: (*parser).callonExtraListElement691,
																																					expr: &seqExpr{
																																						pos: position{line: 770, col: 26, offset: 24879},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 770, col: 26, offset: 24879},
																																								val:        "....",
																																								ignoreCase: false,
																																								want:       "\"....\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 770, col: 33, offset: 24886},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement695,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement698,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 774, col: 30, offset: 24997},
																																					run: (*parser).callonExtraListElement705,
																																					expr: &seqExpr{
																																						pos: position{line: 774, col: 30, offset: 24997},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 774, col: 30, offset: 24997},
																																								val:        "++++",
																																								ignoreCase: false,
																																								want:       "\"++++\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 774, col: 37, offset: 25004},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement709,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement712,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 778, col: 24, offset: 25113},
																																					run: (*parser).callonExtraListElement719,
																																					expr: &seqExpr{
																																						pos: position{line: 778, col: 24, offset: 25113},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 778, col: 24, offset: 25113},
																																								val:        "____",
																																								ignoreCase: false,
																																								want:       "\"____\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 778, col: 31, offset: 25120},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement723,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement726,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 782, col: 26, offset: 25225},
																																					run: (*parser).callonExtraListElement733,
																																					expr: &seqExpr{
																																						pos: position{line: 782, col: 26, offset: 25225},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 782, col: 26, offset: 25225},
																																								val:        "****",
																																								ignoreCase: false,
																																								want:       "\"****\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 782, col: 33, offset: 25232},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement737,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement740,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1417, col: 9, offset: 46724},
																														label: "content",
																														expr: &actionExpr{
																															pos: position{line: 1417, col: 18, offset: 46733},
																															run: (*parser).callonExtraListElement748,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1417, col: 18, offset: 46733},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1417, col: 18, offset: 46733},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2915, col: 8, offset: 96511},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2908, col: 12, offset: 96371},
																																run: (*parser).callonExtraListElement752,
																																expr: &choiceExpr{
																																	pos: position{line: 2908, col: 13, offset: 96372},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 13, offset: 96372},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 20, offset: 96379},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 29, offset: 96388},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2912, col: 8, offset: 96461},
																																expr: &anyMatcher{
																																	line: 2912, col: 9, offset: 96462,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1620, col: 9, offset: 53324},
																				run: (*parser).callonExtraListElement759,
																				expr: &seqExpr{
																					pos: position{line: 1620, col: 9, offset: 53324},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 2903, col: 11, offset: 96254},
																							run: (*parser).callonExtraListElement761,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2903, col: 11, offset: 96254},
																								expr: &charClassMatcher{
																									pos:        position{line: 2903, col: 12, offset: 96255},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1621, col: 9, offset: 53376},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1621, col: 18, offset: 53385},
																								run: (*parser).callonExtraListElement765,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1621, col: 18, offset: 53385},
																									expr: &charClassMatcher{
																										pos:        position{line: 1621, col: 18, offset: 53385},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonExtraListElement769,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1379, col: 13, offset: 45310},
										run: (*parser).callonExtraListElement776,
										expr: &seqExpr{
											pos: position{line: 1379, col: 13, offset: 45310},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1379, col: 13, offset: 45310},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1379, col: 24, offset: 45321},
														expr: &ruleRefExpr{
															pos:  position{line: 1379, col: 25, offset: 45322},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1380, col: 13, offset: 45353},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1584, col: 5, offset: 52247},
														run: (*parser).callonExtraListElement782,
														expr: &seqExpr{
															pos: position{line: 1584, col: 5, offset: 52247},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1584, col: 5, offset: 52247},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1592, col: 5, offset: 52506},
																		run: (*parser).callonExtraListElement785,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1592, col: 5, offset: 52506},
																			expr: &seqExpr{
																				pos: position{line: 1592, col: 6, offset: 52507},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1592, col: 6, offset: 52507},
																						expr: &actionExpr{
																							pos: position{line: 1597, col: 5, offset: 52657},
																							run: (*parser).callonExtraListElement789,
																							expr: &seqExpr{
																								pos: position{line: 1597, col: 5, offset: 52657},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1597, col: 5, offset: 52657},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1597, col: 16, offset: 52668},
																											run: (*parser).callonExtraListElement792,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1597, col: 16, offset: 52668},
																												expr: &litMatcher{
																													pos:        position{line: 1597, col: 17, offset: 52669},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1600, col: 5, offset: 52726},
																										run: (*parser).callonExtraListElement795,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1592, col: 35, offset: 52536},
																						expr: &choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonExtraListElement798,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1592, col: 40, offset: 52541,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1585, col: 5, offset: 52282},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1597, col: 5, offset: 52657},
																		run: (*parser).callonExtraListElement807,
																		expr: &seqExpr{
																			pos: position{line: 1597, col: 5, offset: 52657},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1597, col: 5, offset: 52657},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1597, col: 16, offset: 52668},
																						run: (*parser).callonExtraListElement810,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1597, col: 16, offset: 52668},
																							expr: &litMatcher{
																								pos:        position{line: 1597, col: 17, offset: 52669},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1600, col: 5, offset: 52726},
																					run: (*parser).callonExtraListElement813,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1586, col: 5, offset: 52327},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1608, col: 5, offset: 52976},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1610, col: 9, offset: 53041},
																				run: (*parser).callonExtraListElement816,
																				expr: &seqExpr{
																					pos: position{line: 1610, col: 9, offset: 53041},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1610, col: 9, offset: 53041},
																							expr: &actionExpr{
																								pos: position{line: 2899, col: 10, offset: 96187},
																								run: (*parser).callonExtraListElement819,
																								expr: &charClassMatcher{
																									pos:        position{line: 2899, col: 11, offset: 96188},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonExtraListElement822,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1611, col: 9, offset: 53061},
																							expr: &actionExpr{
																								pos: position{line: 685, col: 14, offset: 22145},
																								run: (*parser).callonExtraListElement830,
																								expr: &seqExpr{
																									pos: position{line: 685, col: 14, offset: 22145},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 685, col: 14, offset: 22145},
																											expr: &notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 685, col: 19, offset: 22150},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement836,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement839,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1612, col: 9, offset: 53081},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1612, col: 17, offset: 53089},
																								expr: &choiceExpr{
																									pos: position{line: 1406, col: 5, offset: 46323},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 1406, col: 5, offset: 46323},
																											run: (*parser).callonExtraListElement849,
																											expr: &actionExpr{
																												pos: position{line: 2616, col: 22, offset: 87547},
																												run: (*parser).callonExtraListElement850,
																												expr: &seqExpr{
																													pos: position{line: 2616, col: 22, offset: 87547},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2621, col: 31, offset: 87768},
																															val:        "//",
																															ignoreCase: false,
																															want:       "\"//\"",
																														},
																														&notExpr{
																															pos: position{line: 2621, col: 36, offset: 87773},
																															expr: &litMatcher{
																																pos:        position{line: 2621, col: 37, offset: 87774},
																																val:        "//",
																																ignoreCase: false,
																																want:       "\"//\"",
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 2616, col: 49, offset: 87574},
																															label: "content",
																															expr: &actionExpr{
																																pos: position{line: 2623, col: 29, offset: 87809},
																																run: (*parser).callonExtraListElement856,
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 2623, col: 29, offset: 87809},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2623, col: 29, offset: 87809},
																																		val:        "[^\\r\\n]",
																																		chars:      []rune{'\r', '\n'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2915, col: 8, offset: 96511},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 2908, col: 12, offset: 96371},
																																	run: (*parser).callonExtraListElement860,
																																	expr: &choiceExpr{
																																		pos: position{line: 2908, col: 13, offset: 96372},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 13, offset: 96372},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 20, offset: 96379},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 29, offset: 96388},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2912, col: 8, offset: 96461},
																																	expr: &anyMatcher{
																																		line: 2912, col: 9, offset: 96462,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1410, col: 9, offset: 46476},
																											run: (*parser).callonExtraListElement867,
																											expr: &seqExpr{
																												pos: position{line: 1410, col: 9, offset: 46476},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 1410, col: 9, offset: 46476},
																														expr: &actionExpr{
																															pos: position{line: 685, col: 14, offset: 22145},
																															run: (*parser).callonExtraListElement870,
																															expr: &seqExpr{
																																pos: position{line: 685, col: 14, offset: 22145},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 685, col: 14, offset: 22145},
																																		expr: &notExpr{
																																			pos: position{line: 2912, col: 8, offset: 96461},
																																			expr: &anyMatcher{
																																				line: 2912, col: 9, offset: 96462,
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 685, col: 19, offset: 22150},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonExtraListElement876,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2915, col: 8, offset: 96511},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2908, col: 12, offset: 96371},
																																				run: (*parser).callonExtraListElement879,
																																				expr: &choiceExpr{
																																					pos: position{line: 2908, col: 13, offset: 96372},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 13, offset: 96372},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 20, offset: 96379},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 29, offset: 96388},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2912, col: 8, offset: 96461},
																																				expr: &anyMatcher{
																																					line: 2912, col: 9, offset: 96462,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1411, col: 9, offset: 46495},
																														expr: &seqExpr{
																															pos: position{line: 1444, col: 34, offset: 47455},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1444, col: 34, offset: 47455},
																																	val:        "+",
																																	ignoreCase: false,
																																	want:       "\"+\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1444, col: 38, offset: 47459},
																																	expr: &actionExpr{
																																		pos: position{line: 2899, col: 10, offset: 96187},
																																		run: (*parser).callonExtraListElement890,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2899, col: 11, offset: 96188},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2908, col: 12, offset: 96371},
																																	run: (*parser).callonExtraListElement892,
																																	expr: &choiceExpr{
																																		pos: position{line: 2908, col: 13, offset: 96372},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 13, offset: 96372},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 20, offset: 96379},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2908, col: 29, offset: 96388},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1412, col: 9, offset: 46534},
																														expr: &actionExpr{
																															pos: position{line: 1492, col: 5, offset: 48929},
																															run: (*parser).callonExtraListElement898,
																															expr: &seqExpr{
																																pos: position{line: 1492, col: 5, offset: 48929},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1492, col: 5, offset: 48929},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonExtraListElement901,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1492, col: 12, offset: 48936},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1494, col: 9, offset: 48999},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1494, col: 9, offset: 48999},
																																					run: (*parser).callonExtraListElement905,
																																					expr: &seqExpr{
																																						pos: position{line: 1494, col: 9, offset: 48999},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1494, col: 9, offset: 48999},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1494, col: 16, offset: 49006},
																																									run: (*parser).callonExtraListElement908,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1494, col: 16, offset: 49006},
																																										expr: &litMatcher{
																																											pos:        position{line: 1494, col: 17, offset: 49007},
																																											val:        ".",
																																											ignoreCase: false,
																																											want:       "\".\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1498, col: 9, offset: 49107},
																																								run: (*parser).callonExtraListElement911,
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1517, col: 11, offset: 49824},
																																					run: (*parser).callonExtraListElement912,
																																					expr: &seqExpr{
																																						pos: position{line: 1517, col: 11, offset: 49824},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1517, col: 11, offset: 49824},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1517, col: 12, offset: 49825},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1517, col: 20, offset: 49833},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1519, col: 13, offset: 49950},
																																					run: (*parser).callonExtraListElement917,
																																					expr: &seqExpr{
																																						pos: position{line: 1519, col: 13, offset: 49950},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1519, col: 14, offset: 49951},
																																								val:        "[a-z]",
																																								ranges:     []rune{'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1519, col: 21, offset: 49958},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1521, col: 13, offset: 50078},
																																					run: (*parser).callonExtraListElement921,
																																					expr: &seqExpr{
																																						pos: position{line: 1521, col: 13, offset: 50078},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1521, col: 14, offset: 50079},
																																								val:        "[A-Z]",
																																								ranges:     []rune{'A', 'Z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1521, col: 21, offset: 50086},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1523, col: 13, offset: 50206},
																																					run: (*parser).callonExtraListElement925,
																																					expr: &seqExpr{
																																						pos: position{line: 1523, col: 13, offset: 50206},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1523, col: 13, offset: 50206},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1523, col: 14, offset: 50207},
																																									val:        "[ivxdlcm]",
																																									chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1523, col: 26, offset: 50219},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1525, col: 13, offset: 50339},
																																					run: (*parser).callonExtraListElement930,
																																					expr: &seqExpr{
																																						pos: position{line: 1525, col: 13, offset: 50339},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1525, col: 13, offset: 50339},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1525, col: 14, offset: 50340},
																																									val:        "[IVXDLCM]",
																																									chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1525, col: 26, offset: 50352},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 2903, col: 11, offset: 96254},
																																		run: (*parser).callonExtraListElement935,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 2903, col: 11, offset: 96254},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2903, col: 12, offset: 96255},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1413, col: 9, offset: 46568},
																														expr: &actionExpr{
																															pos: position{line: 1542, col: 5, offset: 50891},
																															run: (*parser).callonExtraListElement939,
																															expr: &seqExpr{
																																pos: position{line: 1542, col: 5, offset: 50891},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1542, col: 5, offset: 50891},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonExtraListElement942,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1542, col: 12, offset: 50898},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1542, col: 20, offset: 50906},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1544, col: 9, offset: 50963},
																																					run: (*parser).callonExtraListElement946,
																																					expr: &seqExpr{
																																						pos: position{line: 1544, col: 9, offset: 50963},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1544, col: 9, offset: 50963},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1544, col: 16, offset: 50970},
																																									run: (*parser).callonExtraListElement949,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1544, col: 16, offset: 50970},
																																										expr: &litMatcher{
																																											pos:        position{line: 1544, col: 17, offset: 50971},
																																											val:        "*",
																																											ignoreCase: false,
																																											want:       "\"*\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1548, col: 9, offset: 51071},
																																								run: (*parser).callonExtraListElement952,
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1565, col: 14, offset: 51778},
																																					label: "depth",
																																					expr: &actionExpr{
																																						pos: position{line: 1565, col: 21, offset: 51785},
																																						run: (*parser).callonExtraListElement954,
																																						expr: &litMatcher{
																																							pos:        position{line: 1565, col: 22, offset: 51786},
																																							val:        "-",
																																							ignoreCase: false,
																																							want:       "\"-\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 2903, col: 11, offset: 96254},
																																		run: (*parser).callonExtraListElement956,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 2903, col: 11, offset: 96254},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2903, col: 12, offset: 96255},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1414, col: 9, offset: 46604},
																														expr: &actionExpr{
																															pos: position{line: 1648, col: 5, offset: 54128},
																															run: (*parser).callonExtraListElement960,
																															expr: &seqExpr{
																																pos: position{line: 1648, col: 5, offset: 54128},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 1648, col: 5, offset: 54128},
																																		val:        "<",
																																		ignoreCase: false,
																																		want:       "\"<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1648, col: 9, offset: 54132},
																																		label: "ref",
																																		expr: &actionExpr{
																																			pos: position{line: 1648, col: 14, offset: 54137},
																																			run: (*parser).callonExtraListElement964,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1648, col: 14, offset: 54137},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1648, col: 14, offset: 54137},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1648, col: 62, offset: 54185},
																																		val:        ">",
																																		ignoreCase: false,
																																		want:       "\">\"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 2903, col: 11, offset: 96254},
																																		run: (*parser).callonExtraListElement968,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 2903, col: 11, offset: 96254},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2903, col: 12, offset: 96255},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1415, col: 9, offset: 46638},
																														expr: &seqExpr{
																															pos: position{line: 1415, col: 11, offset: 46640},
																															exprs: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1592, col: 5, offset: 52506},
																																	run: (*parser).callonExtraListElement973,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1592, col: 5, offset: 52506},
																																		expr: &seqExpr{
																																			pos: position{line: 1592, col: 6, offset: 52507},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 1592, col: 6, offset: 52507},
																																					expr: &actionExpr{
																																						pos: position{line: 1597, col: 5, offset: 52657},
																																						run: (*parser).callonExtraListElement977,
																																						expr: &seqExpr{
																																							pos: position{line: 1597, col: 5, offset: 52657},
																																							exprs: []interface{}{
																																								&labeledExpr{
																																									pos:   position{line: 1597, col: 5, offset: 52657},
																																									label: "separator",
																																									expr: &actionExpr{
																																										pos: position{line: 1597, col: 16, offset: 52668},
																																										run: (*parser).callonExtraListElement980,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 1597, col: 16, offset: 52668},
																																											expr: &litMatcher{
																																												pos:        position{line: 1597, col: 17, offset: 52669},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																										},
																																									},
																																								},
																																								&andCodeExpr{
																																									pos: position{line: 1600, col: 5, offset: 52726},
																																									run: (*parser).callonExtraListElement983,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 1592, col: 35, offset: 52536},
																																					expr: &choiceExpr{
																																						pos: position{line: 2915, col: 8, offset: 96511},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 2908, col: 12, offset: 96371},
																																								run: (*parser).callonExtraListElement986,
																																								expr: &choiceExpr{
																																									pos: position{line: 2908, col: 13, offset: 96372},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2908, col: 13, offset: 96372},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2908, col: 20, offset: 96379},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2908, col: 29, offset: 96388},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2912, col: 8, offset: 96461},
																																								expr: &anyMatcher{
																																									line: 2912, col: 9, offset: 96462,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&anyMatcher{
																																					line: 1592, col: 40, offset: 52541,
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1597, col: 5, offset: 52657},
																																	run: (*parser).callonExtraListElement994,
																																	expr: &seqExpr{
																																		pos: position{line: 1597, col: 5, offset: 52657},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1597, col: 5, offset: 52657},
																																				label: "separator",
																																				expr: &actionExpr{
																																					pos: position{line: 1597, col: 16, offset: 52668},
																																					run: (*parser).callonExtraListElement997,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1597, col: 16, offset: 52668},
																																						expr: &litMatcher{
																																							pos:        position{line: 1597, col: 17, offset: 52669},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1600, col: 5, offset: 52726},
																																				run: (*parser).callonExtraListElement1000,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1416, col: 9, offset: 46700},
																														expr: &actionExpr{
																															pos: position{line: 731, col: 5, offset: 23680},
																															run: (*parser).callonExtraListElement1002,
																															expr: &seqExpr{
																																pos: position{line: 731, col: 5, offset: 23680},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 731, col: 5, offset: 23680},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2813, col: 13, offset: 93503},
																																			val:        "[0-9\\pL]",
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 732, col: 5, offset: 23710},
																																		label: "delimiter",
																																		expr: &choiceExpr{
																																			pos: position{line: 733, col: 9, offset: 23730},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 746, col: 26, offset: 24217},
																																					run: (*parser).callonExtraListElement1008,
																																					expr: &seqExpr{
																																						pos: position{line: 746, col: 26, offset: 24217},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 746, col: 26, offset: 24217},
																																								val:        "////",
																																								ignoreCase: false,
																																								want:       "\"////\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 746, col: 33, offset: 24224},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement1012,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement1015,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 750, col: 26, offset: 24331},
																																					run: (*parser).callonExtraListElement1022,
																																					expr: &seqExpr{
																																						pos: position{line: 750, col: 26, offset: 24331},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 750, col: 26, offset: 24331},
																																								val:        "====",
																																								ignoreCase: false,
																																								want:       "\"====\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 750, col: 33, offset: 24338},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement1026,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement1029,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 758, col: 26, offset: 24556},
																																					run: (*parser).callonExtraListElement1036,
																																					expr: &seqExpr{
																																						pos: position{line: 758, col: 26, offset: 24556},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 758, col: 26, offset: 24556},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 758, col: 32, offset: 24562},
																																								label: "language",
																																								expr: &actionExpr{
																																									pos: position{line: 762, col: 13, offset: 24692},
																																									run: (*parser).callonExtraListElement1040,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 762, col: 14, offset: 24693},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 762, col: 14, offset: 24693},
																																											val:        "[^\\r\\n ]",
																																											chars:      []rune{'\r', '\n', ' '},
																																											ignoreCase: false,
																																											inverted:   true,
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 758, col: 52, offset: 24582},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement1044,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement1047,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 754, col: 25, offset: 24444},
																																					run: (*parser).callonExtraListElement1054,
																																					expr: &seqExpr{
																																						pos: position{line: 754, col: 25, offset: 24444},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 754, col: 25, offset: 24444},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 754, col: 31, offset: 24450},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement1058,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement1061,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 766, col: 26, offset: 24765},
																																					run: (*parser).callonExtraListElement1068,
																																					expr: &seqExpr{
																																						pos: position{line: 766, col: 26, offset: 24765},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 766, col: 26, offset: 24765},
																																								val:        "----",
																																								ignoreCase: false,
																																								want:       "\"----\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 766, col: 33, offset: 24772},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement1072,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement1075,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 770, col: 26, offset: 24879},
																																					run: (*parser).callonExtraListElement1082,
																																					expr: &seqExpr{
																																						pos: position{line: 770, col: 26, offset: 24879},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 770, col: 26, offset: 24879},
																																								val:        "....",
																																								ignoreCase: false,
																																								want:       "\"....\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 770, col: 33, offset: 24886},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement1086,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement1089,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 774, col: 30, offset: 24997},
																																					run: (*parser).callonExtraListElement1096,
																																					expr: &seqExpr{
																																						pos: position{line: 774, col: 30, offset: 24997},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 774, col: 30, offset: 24997},
																																								val:        "++++",
																																								ignoreCase: false,
																																								want:       "\"++++\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 774, col: 37, offset: 25004},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement1100,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement1103,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 778, col: 24, offset: 25113},
																																					run: (*parser).callonExtraListElement1110,
																																					expr: &seqExpr{
																																						pos: position{line: 778, col: 24, offset: 25113},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 778, col: 24, offset: 25113},
																																								val:        "____",
																																								ignoreCase: false,
																																								want:       "\"____\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 778, col: 31, offset: 25120},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement1114,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement1117,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 782, col: 26, offset: 25225},
																																					run: (*parser).callonExtraListElement1124,
																																					expr: &seqExpr{
																																						pos: position{line: 782, col: 26, offset: 25225},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 782, col: 26, offset: 25225},
																																								val:        "****",
																																								ignoreCase: false,
																																								want:       "\"****\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 782, col: 33, offset: 25232},
																																								expr: &actionExpr{
																																									pos: position{line: 2899, col: 10, offset: 96187},
																																									run: (*parser).callonExtraListElement1128,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2899, col: 11, offset: 96188},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2915, col: 8, offset: 96511},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2908, col: 12, offset: 96371},
																																										run: (*parser).callonExtraListElement1131,
																																										expr: &choiceExpr{
																																											pos: position{line: 2908, col: 13, offset: 96372},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 13, offset: 96372},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 20, offset: 96379},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2908, col: 29, offset: 96388},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2912, col: 8, offset: 96461},
																																										expr: &anyMatcher{
																																											line: 2912, col: 9, offset: 96462,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1417, col: 9, offset: 46724},
																														label: "content",
																														expr: &actionExpr{
																															pos: position{line: 1417, col: 18, offset: 46733},
																															run: (*parser).callonExtraListElement1139,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1417, col: 18, offset: 46733},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1417, col: 18, offset: 46733},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2915, col: 8, offset: 96511},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2908, col: 12, offset: 96371},
																																run: (*parser).callonExtraListElement1143,
																																expr: &choiceExpr{
																																	pos: position{line: 2908, col: 13, offset: 96372},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 13, offset: 96372},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 20, offset: 96379},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 29, offset: 96388},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2912, col: 8, offset: 96461},
																																expr: &anyMatcher{
																																	line: 2912, col: 9, offset: 96462,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1620, col: 9, offset: 53324},
																				run: (*parser).callonExtraListElement1150,
																				expr: &seqExpr{
																					pos: position{line: 1620, col: 9, offset: 53324},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 2903, col: 11, offset: 96254},
																							run: (*parser).callonExtraListElement1152,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2903, col: 11, offset: 96254},
																								expr: &charClassMatcher{
																									pos:        position{line: 2903, col: 12, offset: 96255},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1621, col: 9, offset: 53376},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1621, col: 18, offset: 53385},
																								run: (*parser).callonExtraListElement1156,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1621, col: 18, offset: 53385},
																									expr: &charClassMatcher{
																										pos:        position{line: 1621, col: 18, offset: 53385},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonExtraListElement1160,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2616, col: 22, offset: 87547},
										run: (*parser).callonExtraListElement1167,
										expr: &seqExpr{
											pos: position{line: 2616, col: 22, offset: 87547},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2621, col: 31, offset: 87768},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2621, col: 36, offset: 87773},
													expr: &litMatcher{
														pos:        position{line: 2621, col: 37, offset: 87774},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2616, col: 49, offset: 87574},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2623, col: 29, offset: 87809},
														run: (*parser).callonExtraListElement1173,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2623, col: 29, offset: 87809},
															expr: &charClassMatcher{
																pos:        position{line: 2623, col: 29, offset: 87809},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonExtraListElement1177,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1384, col: 13, offset: 45509},
										run: (*parser).callonExtraListElement1184,
										expr: &seqExpr{
											pos: position{line: 1384, col: 13, offset: 45509},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1384, col: 13, offset: 45509},
													expr: &actionExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														run: (*parser).callonExtraListElement1187,
														expr: &seqExpr{
															pos: position{line: 685, col: 14, offset: 22145},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 685, col: 14, offset: 22145},
																	expr: &notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 685, col: 19, offset: 22150},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonExtraListElement1193,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonExtraListElement1196,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1385, col: 13, offset: 45532},
													label: "attributes",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1385, col: 24, offset: 45543},
														expr: &ruleRefExpr{
															pos:  position{line: 1385, col: 25, offset: 45544},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1386, col: 13, offset: 45575},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1727, col: 5, offset: 56735},
														run: (*parser).callonExtraListElement1207,
														expr: &seqExpr{
															pos: position{line: 1727, col: 5, offset: 56735},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1727, col: 5, offset: 56735},
																	label: "firstLine",
																	expr: &actionExpr{
																		pos: position{line: 1734, col: 5, offset: 57020},
																		run: (*parser).callonExtraListElement1210,
																		expr: &seqExpr{
																			pos: position{line: 1734, col: 5, offset: 57020},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1734, col: 5, offset: 57020},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1734, col: 14, offset: 57029},
																						run: (*parser).callonExtraListElement1213,
																						expr: &seqExpr{
																							pos: position{line: 1734, col: 14, offset: 57029},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2903, col: 11, offset: 96254},
																									run: (*parser).callonExtraListElement1215,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2903, col: 11, offset: 96254},
																										expr: &charClassMatcher{
																											pos:        position{line: 2903, col: 12, offset: 96255},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 1734, col: 21, offset: 57036},
																									expr: &charClassMatcher{
																										pos:        position{line: 1734, col: 21, offset: 57036},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1737, col: 5, offset: 57093},
																					run: (*parser).callonExtraListElement1220,
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonExtraListElement1222,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1728, col: 5, offset: 56776},
																	label: "otherLines",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 1728, col: 16, offset: 56787},
																		expr: &choiceExpr{
																			pos: position{line: 1728, col: 17, offset: 56788},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2616, col: 22, offset: 87547},
																					run: (*parser).callonExtraListElement1232,
																					expr: &seqExpr{
																						pos: position{line: 2616, col: 22, offset: 87547},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2621, col: 31, offset: 87768},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2621, col: 36, offset: 87773},
																								expr: &litMatcher{
																									pos:        position{line: 2621, col: 37, offset: 87774},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2616, col: 49, offset: 87574},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2623, col: 29, offset: 87809},
																									run: (*parser).callonExtraListElement1238,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2623, col: 29, offset: 87809},
																										expr: &charClassMatcher{
																											pos:        position{line: 2623, col: 29, offset: 87809},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonExtraListElement1242,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1716, col: 5, offset: 56453},
																					run: (*parser).callonExtraListElement1249,
																					expr: &seqExpr{
																						pos: position{line: 1716, col: 5, offset: 56453},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1716, col: 5, offset: 56453},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1716, col: 14, offset: 56462},
																									run: (*parser).callonExtraListElement1252,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1716, col: 14, offset: 56462},
																										expr: &charClassMatcher{
																											pos:        position{line: 1716, col: 14, offset: 56462},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1719, col: 5, offset: 56569},
																								run: (*parser).callonExtraListElement1255,
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonExtraListElement1257,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1398, col: 13, offset: 46122},
										run: (*parser).callonExtraListElement1264,
										expr: &labeledExpr{
											pos:   position{line: 1398, col: 13, offset: 46122},
											label: "element",
											expr: &choiceExpr{
												pos: position{line: 1406, col: 5, offset: 46323},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 1406, col: 5, offset: 46323},
														run: (*parser).callonExtraListElement1267,
														expr: &actionExpr{
															pos: position{line: 2616, col: 22, offset: 87547},
															run: (*parser).callonExtraListElement1268,
															expr: &seqExpr{
																pos: position{line: 2616, col: 22, offset: 87547},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2621, col: 31, offset: 87768},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2621, col: 36, offset: 87773},
																		expr: &litMatcher{
																			pos:        position{line: 2621, col: 37, offset: 87774},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2616, col: 49, offset: 87574},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2623, col: 29, offset: 87809},
																			run: (*parser).callonExtraListElement1274,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2623, col: 29, offset: 87809},
																				expr: &charClassMatcher{
																					pos:        position{line: 2623, col: 29, offset: 87809},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonExtraListElement1278,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1410, col: 9, offset: 46476},
														run: (*parser).callonExtraListElement1285,
														expr: &seqExpr{
															pos: position{line: 1410, col: 9, offset: 46476},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1410, col: 9, offset: 46476},
																	expr: &actionExpr{
																		pos: position{line: 685, col: 14, offset: 22145},
																		run: (*parser).callonExtraListElement1288,
																		expr: &seqExpr{
																			pos: position{line: 685, col: 14, offset: 22145},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 685, col: 14, offset: 22145},
																					expr: &notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 685, col: 19, offset: 22150},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonExtraListElement1294,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonExtraListElement1297,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1411, col: 9, offset: 46495},
																	expr: &seqExpr{
																		pos: position{line: 1444, col: 34, offset: 47455},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1444, col: 34, offset: 47455},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1444, col: 38, offset: 47459},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonExtraListElement1308,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonExtraListElement1310,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1412, col: 9, offset: 46534},
																	expr: &actionExpr{
																		pos: position{line: 1492, col: 5, offset: 48929},
																		run: (*parser).callonExtraListElement1316,
																		expr: &seqExpr{
																			pos: position{line: 1492, col: 5, offset: 48929},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1492, col: 5, offset: 48929},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonExtraListElement1319,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1492, col: 12, offset: 48936},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1494, col: 9, offset: 48999},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1494, col: 9, offset: 48999},
																								run: (*parser).callonExtraListElement1323,
																								expr: &seqExpr{
																									pos: position{line: 1494, col: 9, offset: 48999},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1494, col: 9, offset: 48999},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1494, col: 16, offset: 49006},
																												run: (*parser).callonExtraListElement1326,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1494, col: 16, offset: 49006},
																													expr: &litMatcher{
																														pos:        position{line: 1494, col: 17, offset: 49007},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1498, col: 9, offset: 49107},
																											run: (*parser).callonExtraListElement1329,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1517, col: 11, offset: 49824},
																								run: (*parser).callonExtraListElement1330,
																								expr: &seqExpr{
																									pos: position{line: 1517, col: 11, offset: 49824},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1517, col: 11, offset: 49824},
																											expr: &charClassMatcher{
																												pos:        position{line: 1517, col: 12, offset: 49825},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1517, col: 20, offset: 49833},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1519, col: 13, offset: 49950},
																								run: (*parser).callonExtraListElement1335,
																								expr: &seqExpr{
																									pos: position{line: 1519, col: 13, offset: 49950},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1519, col: 14, offset: 49951},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1519, col: 21, offset: 49958},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1521, col: 13, offset: 50078},
																								run: (*parser).callonExtraListElement1339,
																								expr: &seqExpr{
																									pos: position{line: 1521, col: 13, offset: 50078},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1521, col: 14, offset: 50079},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1521, col: 21, offset: 50086},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1523, col: 13, offset: 50206},
																								run: (*parser).callonExtraListElement1343,
																								expr: &seqExpr{
																									pos: position{line: 1523, col: 13, offset: 50206},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1523, col: 13, offset: 50206},
																											expr: &charClassMatcher{
																												pos:        position{line: 1523, col: 14, offset: 50207},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1523, col: 26, offset: 50219},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1525, col: 13, offset: 50339},
																								run: (*parser).callonExtraListElement1348,
																								expr: &seqExpr{
																									pos: position{line: 1525, col: 13, offset: 50339},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1525, col: 13, offset: 50339},
																											expr: &charClassMatcher{
																												pos:        position{line: 1525, col: 14, offset: 50340},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1525, col: 26, offset: 50352},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2903, col: 11, offset: 96254},
																					run: (*parser).callonExtraListElement1353,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						expr: &charClassMatcher{
																							pos:        position{line: 2903, col: 12, offset: 96255},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1413, col: 9, offset: 46568},
																	expr: &actionExpr{
																		pos: position{line: 1542, col: 5, offset: 50891},
																		run: (*parser).callonExtraListElement1357,
																		expr: &seqExpr{
																			pos: position{line: 1542, col: 5, offset: 50891},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1542, col: 5, offset: 50891},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonExtraListElement1360,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1542, col: 12, offset: 50898},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1542, col: 20, offset: 50906},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1544, col: 9, offset: 50963},
																								run: (*parser).callonExtraListElement1364,
																								expr: &seqExpr{
																									pos: position{line: 1544, col: 9, offset: 50963},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1544, col: 9, offset: 50963},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1544, col: 16, offset: 50970},
																												run: (*parser).callonExtraListElement1367,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1544, col: 16, offset: 50970},
																													expr: &litMatcher{
																														pos:        position{line: 1544, col: 17, offset: 50971},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1548, col: 9, offset: 51071},
																											run: (*parser).callonExtraListElement1370,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1565, col: 14, offset: 51778},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1565, col: 21, offset: 51785},
																									run: (*parser).callonExtraListElement1372,
																									expr: &litMatcher{
																										pos:        position{line: 1565, col: 22, offset: 51786},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2903, col: 11, offset: 96254},
																					run: (*parser).callonExtraListElement1374,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						expr: &charClassMatcher{
																							pos:        position{line: 2903, col: 12, offset: 96255},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1414, col: 9, offset: 46604},
																	expr: &actionExpr{
																		pos: position{line: 1648, col: 5, offset: 54128},
																		run: (*parser).callonExtraListElement1378,
																		expr: &seqExpr{
																			pos: position{line: 1648, col: 5, offset: 54128},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1648, col: 5, offset: 54128},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1648, col: 9, offset: 54132},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1648, col: 14, offset: 54137},
																						run: (*parser).callonExtraListElement1382,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1648, col: 14, offset: 54137},
																							expr: &charClassMatcher{
																								pos:        position{line: 1648, col: 14, offset: 54137},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1648, col: 62, offset: 54185},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2903, col: 11, offset: 96254},
																					run: (*parser).callonExtraListElement1386,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						expr: &charClassMatcher{
																							pos:        position{line: 2903, col: 12, offset: 96255},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1415, col: 9, offset: 46638},
																	expr: &seqExpr{
																		pos: position{line: 1415, col: 11, offset: 46640},
																		exprs: []interface{}{
																			&actionExpr{
																				pos: position{line: 1592, col: 5, offset: 52506},
																				run: (*parser).callonExtraListElement1391,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1592, col: 5, offset: 52506},
																					expr: &seqExpr{
																						pos: position{line: 1592, col: 6, offset: 52507},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1592, col: 6, offset: 52507},
																								expr: &actionExpr{
																									pos: position{line: 1597, col: 5, offset: 52657},
																									run: (*parser).callonExtraListElement1395,
																									expr: &seqExpr{
																										pos: position{line: 1597, col: 5, offset: 52657},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1597, col: 5, offset: 52657},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1597, col: 16, offset: 52668},
																													run: (*parser).callonExtraListElement1398,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1597, col: 16, offset: 52668},
																														expr: &litMatcher{
																															pos:        position{line: 1597, col: 17, offset: 52669},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1600, col: 5, offset: 52726},
																												run: (*parser).callonExtraListElement1401,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1592, col: 35, offset: 52536},
																								expr: &choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonExtraListElement1404,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1592, col: 40, offset: 52541,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1597, col: 5, offset: 52657},
																				run: (*parser).callonExtraListElement1412,
																				expr: &seqExpr{
																					pos: position{line: 1597, col: 5, offset: 52657},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1597, col: 5, offset: 52657},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1597, col: 16, offset: 52668},
																								run: (*parser).callonExtraListElement1415,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1597, col: 16, offset: 52668},
																									expr: &litMatcher{
																										pos:        position{line: 1597, col: 17, offset: 52669},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1600, col: 5, offset: 52726},
																							run: (*parser).callonExtraListElement1418,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1416, col: 9, offset: 46700},
																	expr: &actionExpr{
																		pos: position{line: 731, col: 5, offset: 23680},
																		run: (*parser).callonExtraListElement1420,
																		expr: &seqExpr{
																			pos: position{line: 731, col: 5, offset: 23680},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 731, col: 5, offset: 23680},
																					expr: &charClassMatcher{
																						pos:        position{line: 2813, col: 13, offset: 93503},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 732, col: 5, offset: 23710},
																					label: "delimiter",
																					expr: &choiceExpr{
																						pos: position{line: 733, col: 9, offset: 23730},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 746, col: 26, offset: 24217},
																								run: (*parser).callonExtraListElement1426,
																								expr: &seqExpr{
																									pos: position{line: 746, col: 26, offset: 24217},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 746, col: 26, offset: 24217},
																											val:        "////",
																											ignoreCase: false,
																											want:       "\"////\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 746, col: 33, offset: 24224},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement1430,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement1433,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 750, col: 26, offset: 24331},
																								run: (*parser).callonExtraListElement1440,
																								expr: &seqExpr{
																									pos: position{line: 750, col: 26, offset: 24331},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 750, col: 26, offset: 24331},
																											val:        "====",
																											ignoreCase: false,
																											want:       "\"====\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 750, col: 33, offset: 24338},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement1444,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement1447,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 758, col: 26, offset: 24556},
																								run: (*parser).callonExtraListElement1454,
																								expr: &seqExpr{
																									pos: position{line: 758, col: 26, offset: 24556},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 758, col: 26, offset: 24556},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 758, col: 32, offset: 24562},
																											label: "language",
																											expr: &actionExpr{
																												pos: position{line: 762, col: 13, offset: 24692},
																												run: (*parser).callonExtraListElement1458,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 762, col: 14, offset: 24693},
																													expr: &charClassMatcher{
																														pos:        position{line: 762, col: 14, offset: 24693},
																														val:        "[^\\r\\n ]",
																														chars:      []rune{'\r', '\n', ' '},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 758, col: 52, offset: 24582},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement1462,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement1465,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 754, col: 25, offset: 24444},
																								run: (*parser).callonExtraListElement1472,
																								expr: &seqExpr{
																									pos: position{line: 754, col: 25, offset: 24444},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 754, col: 25, offset: 24444},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 754, col: 31, offset: 24450},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement1476,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement1479,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 766, col: 26, offset: 24765},
																								run: (*parser).callonExtraListElement1486,
																								expr: &seqExpr{
																									pos: position{line: 766, col: 26, offset: 24765},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 766, col: 26, offset: 24765},
																											val:        "----",
																											ignoreCase: false,
																											want:       "\"----\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 766, col: 33, offset: 24772},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement1490,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement1493,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 770, col: 26, offset: 24879},
																								run: (*parser).callonExtraListElement1500,
																								expr: &seqExpr{
																									pos: position{line: 770, col: 26, offset: 24879},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 770, col: 26, offset: 24879},
																											val:        "....",
																											ignoreCase: false,
																											want:       "\"....\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 770, col: 33, offset: 24886},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement1504,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement1507,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 774, col: 30, offset: 24997},
																								run: (*parser).callonExtraListElement1514,
																								expr: &seqExpr{
																									pos: position{line: 774, col: 30, offset: 24997},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 774, col: 30, offset: 24997},
																											val:        "++++",
																											ignoreCase: false,
																											want:       "\"++++\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 774, col: 37, offset: 25004},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement1518,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement1521,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 778, col: 24, offset: 25113},
																								run: (*parser).callonExtraListElement1528,
																								expr: &seqExpr{
																									pos: position{line: 778, col: 24, offset: 25113},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 778, col: 24, offset: 25113},
																											val:        "____",
																											ignoreCase: false,
																											want:       "\"____\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 778, col: 31, offset: 25120},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement1532,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement1535,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 782, col: 26, offset: 25225},
																								run: (*parser).callonExtraListElement1542,
																								expr: &seqExpr{
																									pos: position{line: 782, col: 26, offset: 25225},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 782, col: 26, offset: 25225},
																											val:        "****",
																											ignoreCase: false,
																											want:       "\"****\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 782, col: 33, offset: 25232},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonExtraListElement1546,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonExtraListElement1549,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1417, col: 9, offset: 46724},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1417, col: 18, offset: 46733},
																		run: (*parser).callonExtraListElement1557,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1417, col: 18, offset: 46733},
																			expr: &charClassMatcher{
																				pos:        position{line: 1417, col: 18, offset: 46733},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonExtraListElement1561,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuation",
			pos:  position{line: 1436, col: 1, offset: 47183},
			expr: &actionExpr{
				pos: position{line: 1437, col: 5, offset: 47215},
				run: (*parser).callonListElementContinuation1,
				expr: &seqExpr{
					pos: position{line: 1437, col: 5, offset: 47215},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1437, col: 5, offset: 47215},
							label: "offset",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1437, col: 12, offset: 47222},
								expr: &seqExpr{
									pos: position{line: 1437, col: 13, offset: 47223},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1437, col: 13, offset: 47223},
											expr: &actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonListElementContinuation7,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2908, col: 12, offset: 96371},
											run: (*parser).callonListElementContinuation9,
											expr: &choiceExpr{
												pos: position{line: 2908, col: 13, offset: 96372},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2908, col: 13, offset: 96372},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2908, col: 20, offset: 96379},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2908, col: 29, offset: 96388},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1444, col: 34, offset: 47455},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1444, col: 38, offset: 47459},
							expr: &actionExpr{
								pos: position{line: 2899, col: 10, offset: 96187},
								run: (*parser).callonListElementContinuation16,
								expr: &charClassMatcher{
									pos:        position{line: 2899, col: 11, offset: 96188},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&actionExpr{
							pos: position{line: 2908, col: 12, offset: 96371},
							run: (*parser).callonListElementContinuation18,
							expr: &choiceExpr{
								pos: position{line: 2908, col: 13, offset: 96372},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2908, col: 13, offset: 96372},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2908, col: 20, offset: 96379},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2908, col: 29, offset: 96388},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1439, col: 5, offset: 47279},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 1439, col: 13, offset: 47287},
								expr: &ruleRefExpr{
									pos:  position{line: 1439, col: 13, offset: 47287},
									name: "ListElementContinuationElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuationElement",
			pos:  position{line: 1446, col: 1, offset: 47475},
			expr: &actionExpr{
				pos: position{line: 1447, col: 5, offset: 47553},
				run: (*parser).callonListElementContinuationElement1,
				expr: &seqExpr{
					pos: position{line: 1447, col: 5, offset: 47553},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1447, col: 5, offset: 47553},
							expr: &notExpr{
								pos: position{line: 2912, col: 8, offset: 96461},
								expr: &anyMatcher{
									line: 2912, col: 9, offset: 96462,
								},
							},
						},
						&notExpr{
							pos: position{line: 1448, col: 5, offset: 47579},
							expr: &choiceExpr{
								pos: position{line: 1338, col: 5, offset: 43914},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1485, col: 5, offset: 48721},
										run: (*parser).callonListElementContinuationElement8,
										expr: &seqExpr{
											pos: position{line: 1485, col: 5, offset: 48721},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1485, col: 5, offset: 48721},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1492, col: 5, offset: 48929},
														run: (*parser).callonListElementContinuationElement11,
														expr: &seqExpr{
															pos: position{line: 1492, col: 5, offset: 48929},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1492, col: 5, offset: 48929},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonListElementContinuationElement14,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1492, col: 12, offset: 48936},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1494, col: 9, offset: 48999},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1494, col: 9, offset: 48999},
																				run: (*parser).callonListElementContinuationElement18,
																				expr: &seqExpr{
																					pos: position{line: 1494, col: 9, offset: 48999},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1494, col: 9, offset: 48999},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1494, col: 16, offset: 49006},
																								run: (*parser).callonListElementContinuationElement21,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1494, col: 16, offset: 49006},
																									expr: &litMatcher{
																										pos:        position{line: 1494, col: 17, offset: 49007},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1498, col: 9, offset: 49107},
																							run: (*parser).callonListElementContinuationElement24,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1517, col: 11, offset: 49824},
																				run: (*parser).callonListElementContinuationElement25,
																				expr: &seqExpr{
																					pos: position{line: 1517, col: 11, offset: 49824},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1517, col: 11, offset: 49824},
																							expr: &charClassMatcher{
																								pos:        position{line: 1517, col: 12, offset: 49825},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1517, col: 20, offset: 49833},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1519, col: 13, offset: 49950},
																				run: (*parser).callonListElementContinuationElement30,
																				expr: &seqExpr{
																					pos: position{line: 1519, col: 13, offset: 49950},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1519, col: 14, offset: 49951},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1519, col: 21, offset: 49958},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1521, col: 13, offset: 50078},
																				run: (*parser).callonListElementContinuationElement34,
																				expr: &seqExpr{
																					pos: position{line: 1521, col: 13, offset: 50078},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1521, col: 14, offset: 50079},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1521, col: 21, offset: 50086},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1523, col: 13, offset: 50206},
																				run: (*parser).callonListElementContinuationElement38,
																				expr: &seqExpr{
																					pos: position{line: 1523, col: 13, offset: 50206},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1523, col: 13, offset: 50206},
																							expr: &charClassMatcher{
																								pos:        position{line: 1523, col: 14, offset: 50207},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1523, col: 26, offset: 50219},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1525, col: 13, offset: 50339},
																				run: (*parser).callonListElementContinuationElement43,
																				expr: &seqExpr{
																					pos: position{line: 1525, col: 13, offset: 50339},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1525, col: 13, offset: 50339},
																							expr: &charClassMatcher{
																								pos:        position{line: 1525, col: 14, offset: 50340},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1525, col: 26, offset: 50352},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2903, col: 11, offset: 96254},
																	run: (*parser).callonListElementContinuationElement48,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2903, col: 11, offset: 96254},
																		expr: &charClassMatcher{
																			pos:        position{line: 2903, col: 12, offset: 96255},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1486, col: 5, offset: 48760},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1426, col: 5, offset: 46956},
														run: (*parser).callonListElementContinuationElement52,
														expr: &seqExpr{
															pos: position{line: 1426, col: 5, offset: 46956},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1426, col: 5, offset: 46956},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1426, col: 14, offset: 46965},
																		run: (*parser).callonListElementContinuationElement55,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1426, col: 14, offset: 46965},
																			expr: &charClassMatcher{
																				pos:        position{line: 1426, col: 14, offset: 46965},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElementContinuationElement59,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1535, col: 5, offset: 50618},
										run: (*parser).callonListElementContinuationElement66,
										expr: &seqExpr{
											pos: position{line: 1535, col: 5, offset: 50618},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1535, col: 5, offset: 50618},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1542, col: 5, offset: 50891},
														run: (*parser).callonListElementContinuationElement69,
														expr: &seqExpr{
															pos: position{line: 1542, col: 5, offset: 50891},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1542, col: 5, offset: 50891},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonListElementContinuationElement72,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1542, col: 12, offset: 50898},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1542, col: 20, offset: 50906},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1544, col: 9, offset: 50963},
																				run: (*parser).callonListElementContinuationElement76,
																				expr: &seqExpr{
																					pos: position{line: 1544, col: 9, offset: 50963},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1544, col: 9, offset: 50963},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1544, col: 16, offset: 50970},
																								run: (*parser).callonListElementContinuationElement79,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1544, col: 16, offset: 50970},
																									expr: &litMatcher{
																										pos:        position{line: 1544, col: 17, offset: 50971},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1548, col: 9, offset: 51071},
																							run: (*parser).callonListElementContinuationElement82,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1565, col: 14, offset: 51778},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1565, col: 21, offset: 51785},
																					run: (*parser).callonListElementContinuationElement84,
																					expr: &litMatcher{
																						pos:        position{line: 1565, col: 22, offset: 51786},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2903, col: 11, offset: 96254},
																	run: (*parser).callonListElementContinuationElement86,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2903, col: 11, offset: 96254},
																		expr: &charClassMatcher{
																			pos:        position{line: 2903, col: 12, offset: 96255},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1536, col: 5, offset: 50659},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1536, col: 16, offset: 50670},
														expr: &actionExpr{
															pos: position{line: 1572, col: 5, offset: 51947},
															run: (*parser).callonListElementContinuationElement91,
															expr: &seqExpr{
																pos: position{line: 1572, col: 5, offset: 51947},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1572, col: 5, offset: 51947},
																		expr: &litMatcher{
																			pos:        position{line: 1572, col: 6, offset: 51948},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1572, col: 10, offset: 51952},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1573, col: 7, offset: 51966},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1573, col: 7, offset: 51966},
																					run: (*parser).callonListElementContinuationElement97,
																					expr: &litMatcher{
																						pos:        position{line: 1573, col: 7, offset: 51966},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1574, col: 7, offset: 52011},
																					run: (*parser).callonListElementContinuationElement99,
																					expr: &litMatcher{
																						pos:        position{line: 1574, col: 7, offset: 52011},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1575, col: 7, offset: 52054},
																					run: (*parser).callonListElementContinuationElement101,
																					expr: &litMatcher{
																						pos:        position{line: 1575, col: 7, offset: 52054},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2903, col: 11, offset: 96254},
																		run: (*parser).callonListElementContinuationElement103,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2903, col: 11, offset: 96254},
																			expr: &charClassMatcher{
																				pos:        position{line: 2903, col: 12, offset: 96255},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1537, col: 5, offset: 50709},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1426, col: 5, offset: 46956},
														run: (*parser).callonListElementContinuationElement107,
														expr: &seqExpr{
															pos: position{line: 1426, col: 5, offset: 46956},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1426, col: 5, offset: 46956},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1426, col: 14, offset: 46965},
																		run: (*parser).callonListElementContinuationElement110,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1426, col: 14, offset: 46965},
																			expr: &charClassMatcher{
																				pos:        position{line: 1426, col: 14, offset: 46965},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElementContinuationElement114,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1642, col: 5, offset: 53927},
										run: (*parser).callonListElementContinuationElement121,
										expr: &seqExpr{
											pos: position{line: 1642, col: 5, offset: 53927},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1642, col: 5, offset: 53927},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1648, col: 5, offset: 54128},
														run: (*parser).callonListElementContinuationElement124,
														expr: &seqExpr{
															pos: position{line: 1648, col: 5, offset: 54128},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1648, col: 5, offset: 54128},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1648, col: 9, offset: 54132},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1648, col: 14, offset: 54137},
																		run: (*parser).callonListElementContinuationElement128,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1648, col: 14, offset: 54137},
																			expr: &charClassMatcher{
																				pos:        position{line: 1648, col: 14, offset: 54137},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1648, col: 62, offset: 54185},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2903, col: 11, offset: 96254},
																	run: (*parser).callonListElementContinuationElement132,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2903, col: 11, offset: 96254},
																		expr: &charClassMatcher{
																			pos:        position{line: 2903, col: 12, offset: 96255},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1643, col: 5, offset: 53963},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1653, col: 5, offset: 54311},
														run: (*parser).callonListElementContinuationElement136,
														expr: &seqExpr{
															pos: position{line: 1653, col: 5, offset: 54311},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1653, col: 5, offset: 54311},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1653, col: 14, offset: 54320},
																		run: (*parser).callonListElementContinuationElement139,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1653, col: 14, offset: 54320},
																			expr: &charClassMatcher{
																				pos:        position{line: 1653, col: 14, offset: 54320},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElementContinuationElement143,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1584, col: 5, offset: 52247},
										run: (*parser).callonListElementContinuationElement150,
										expr: &seqExpr{
											pos: position{line: 1584, col: 5, offset: 52247},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1584, col: 5, offset: 52247},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1592, col: 5, offset: 52506},
														run: (*parser).callonListElementContinuationElement153,
														expr: &oneOrMoreExpr{
															pos: position{line: 1592, col: 5, offset: 52506},
															expr: &seqExpr{
																pos: position{line: 1592, col: 6, offset: 52507},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1592, col: 6, offset: 52507},
																		expr: &actionExpr{
																			pos: position{line: 1597, col: 5, offset: 52657},
																			run: (*parser).callonListElementContinuationElement157,
																			expr: &seqExpr{
																				pos: position{line: 1597, col: 5, offset: 52657},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1597, col: 5, offset: 52657},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1597, col: 16, offset: 52668},
																							run: (*parser).callonListElementContinuationElement160,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1597, col: 16, offset: 52668},
																								expr: &litMatcher{
																									pos:        position{line: 1597, col: 17, offset: 52669},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1600, col: 5, offset: 52726},
																						run: (*parser).callonListElementContinuationElement163,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1592, col: 35, offset: 52536},
																		expr: &choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement166,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1592, col: 40, offset: 52541,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1585, col: 5, offset: 52282},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1597, col: 5, offset: 52657},
														run: (*parser).callonListElementContinuationElement175,
														expr: &seqExpr{
															pos: position{line: 1597, col: 5, offset: 52657},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1597, col: 5, offset: 52657},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1597, col: 16, offset: 52668},
																		run: (*parser).callonListElementContinuationElement178,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1597, col: 16, offset: 52668},
																			expr: &litMatcher{
																				pos:        position{line: 1597, col: 17, offset: 52669},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1600, col: 5, offset: 52726},
																	run: (*parser).callonListElementContinuationElement181,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1586, col: 5, offset: 52327},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1608, col: 5, offset: 52976},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1610, col: 9, offset: 53041},
																run: (*parser).callonListElementContinuationElement184,
																expr: &seqExpr{
																	pos: position{line: 1610, col: 9, offset: 53041},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1610, col: 9, offset: 53041},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElementContinuationElement187,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement190,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1611, col: 9, offset: 53061},
																			expr: &actionExpr{
																				pos: position{line: 685, col: 14, offset: 22145},
																				run: (*parser).callonListElementContinuationElement198,
																				expr: &seqExpr{
																					pos: position{line: 685, col: 14, offset: 22145},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 685, col: 14, offset: 22145},
																							expr: &notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 685, col: 19, offset: 22150},
																							expr: &actionExpr{
																								pos: position{line: 2899, col: 10, offset: 96187},
																								run: (*parser).callonListElementContinuationElement204,
																								expr: &charClassMatcher{
																									pos:        position{line: 2899, col: 11, offset: 96188},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2915, col: 8, offset: 96511},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2908, col: 12, offset: 96371},
																									run: (*parser).callonListElementContinuationElement207,
																									expr: &choiceExpr{
																										pos: position{line: 2908, col: 13, offset: 96372},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2908, col: 13, offset: 96372},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 20, offset: 96379},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2908, col: 29, offset: 96388},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1612, col: 9, offset: 53081},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1612, col: 17, offset: 53089},
																				expr: &choiceExpr{
																					pos: position{line: 1406, col: 5, offset: 46323},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 1406, col: 5, offset: 46323},
																							run: (*parser).callonListElementContinuationElement217,
																							expr: &actionExpr{
																								pos: position{line: 2616, col: 22, offset: 87547},
																								run: (*parser).callonListElementContinuationElement218,
																								expr: &seqExpr{
																									pos: position{line: 2616, col: 22, offset: 87547},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2621, col: 31, offset: 87768},
																											val:        "//",
																											ignoreCase: false,
																											want:       "\"//\"",
																										},
																										&notExpr{
																											pos: position{line: 2621, col: 36, offset: 87773},
																											expr: &litMatcher{
																												pos:        position{line: 2621, col: 37, offset: 87774},
																												val:        "//",
																												ignoreCase: false,
																												want:       "\"//\"",
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 2616, col: 49, offset: 87574},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2623, col: 29, offset: 87809},
																												run: (*parser).callonListElementContinuationElement224,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 2623, col: 29, offset: 87809},
																													expr: &charClassMatcher{
																														pos:        position{line: 2623, col: 29, offset: 87809},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonListElementContinuationElement228,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1410, col: 9, offset: 46476},
																							run: (*parser).callonListElementContinuationElement235,
																							expr: &seqExpr{
																								pos: position{line: 1410, col: 9, offset: 46476},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1410, col: 9, offset: 46476},
																										expr: &actionExpr{
																											pos: position{line: 685, col: 14, offset: 22145},
																											run: (*parser).callonListElementContinuationElement238,
																											expr: &seqExpr{
																												pos: position{line: 685, col: 14, offset: 22145},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 685, col: 14, offset: 22145},
																														expr: &notExpr{
																															pos: position{line: 2912, col: 8, offset: 96461},
																															expr: &anyMatcher{
																																line: 2912, col: 9, offset: 96462,
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 685, col: 19, offset: 22150},
																														expr: &actionExpr{
																															pos: position{line: 2899, col: 10, offset: 96187},
																															run: (*parser).callonListElementContinuationElement244,
																															expr: &charClassMatcher{
																																pos:        position{line: 2899, col: 11, offset: 96188},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2915, col: 8, offset: 96511},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2908, col: 12, offset: 96371},
																																run: (*parser).callonListElementContinuationElement247,
																																expr: &choiceExpr{
																																	pos: position{line: 2908, col: 13, offset: 96372},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 13, offset: 96372},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 20, offset: 96379},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 29, offset: 96388},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2912, col: 8, offset: 96461},
																																expr: &anyMatcher{
																																	line: 2912, col: 9, offset: 96462,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1411, col: 9, offset: 46495},
																										expr: &seqExpr{
																											pos: position{line: 1444, col: 34, offset: 47455},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 1444, col: 34, offset: 47455},
																													val:        "+",
																													ignoreCase: false,
																													want:       "\"+\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1444, col: 38, offset: 47459},
																													expr: &actionExpr{
																														pos: position{line: 2899, col: 10, offset: 96187},
																														run: (*parser).callonListElementContinuationElement258,
																														expr: &charClassMatcher{
																															pos:        position{line: 2899, col: 11, offset: 96188},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonListElementContinuationElement260,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1412, col: 9, offset: 46534},
																										expr: &actionExpr{
																											pos: position{line: 1492, col: 5, offset: 48929},
																											run: (*parser).callonListElementContinuationElement266,
																											expr: &seqExpr{
																												pos: position{line: 1492, col: 5, offset: 48929},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1492, col: 5, offset: 48929},
																														expr: &actionExpr{
																															pos: position{line: 2899, col: 10, offset: 96187},
																															run: (*parser).callonListElementContinuationElement269,
																															expr: &charClassMatcher{
																																pos:        position{line: 2899, col: 11, offset: 96188},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1492, col: 12, offset: 48936},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1494, col: 9, offset: 48999},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1494, col: 9, offset: 48999},
																																	run: (*parser).callonListElementContinuationElement273,
																																	expr: &seqExpr{
																																		pos: position{line: 1494, col: 9, offset: 48999},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1494, col: 9, offset: 48999},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1494, col: 16, offset: 49006},
																																					run: (*parser).callonListElementContinuationElement276,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1494, col: 16, offset: 49006},
																																						expr: &litMatcher{
																																							pos:        position{line: 1494, col: 17, offset: 49007},
																																							val:        ".",
																																							ignoreCase: false,
																																							want:       "\".\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1498, col: 9, offset: 49107},
																																				run: (*parser).callonListElementContinuationElement279,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1517, col: 11, offset: 49824},
																																	run: (*parser).callonListElementContinuationElement280,
																																	expr: &seqExpr{
																																		pos: position{line: 1517, col: 11, offset: 49824},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1517, col: 11, offset: 49824},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1517, col: 12, offset: 49825},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1517, col: 20, offset: 49833},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1519, col: 13, offset: 49950},
																																	run: (*parser).callonListElementContinuationElement285,
																																	expr: &seqExpr{
																																		pos: position{line: 1519, col: 13, offset: 49950},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1519, col: 14, offset: 49951},
																																				val:        "[a-z]",
																																				ranges:     []rune{'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1519, col: 21, offset: 49958},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1521, col: 13, offset: 50078},
																																	run: (*parser).callonListElementContinuationElement289,
																																	expr: &seqExpr{
																																		pos: position{line: 1521, col: 13, offset: 50078},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1521, col: 14, offset: 50079},
																																				val:        "[A-Z]",
																																				ranges:     []rune{'A', 'Z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1521, col: 21, offset: 50086},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1523, col: 13, offset: 50206},
																																	run: (*parser).callonListElementContinuationElement293,
																																	expr: &seqExpr{
																																		pos: position{line: 1523, col: 13, offset: 50206},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1523, col: 13, offset: 50206},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1523, col: 14, offset: 50207},
																																					val:        "[ivxdlcm]",
																																					chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1523, col: 26, offset: 50219},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1525, col: 13, offset: 50339},
																																	run: (*parser).callonListElementContinuationElement298,
																																	expr: &seqExpr{
																																		pos: position{line: 1525, col: 13, offset: 50339},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1525, col: 13, offset: 50339},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1525, col: 14, offset: 50340},
																																					val:        "[IVXDLCM]",
																																					chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1525, col: 26, offset: 50352},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2903, col: 11, offset: 96254},
																														run: (*parser).callonListElementContinuationElement303,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2903, col: 11, offset: 96254},
																															expr: &charClassMatcher{
																																pos:        position{line: 2903, col: 12, offset: 96255},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1413, col: 9, offset: 46568},
																										expr: &actionExpr{
																											pos: position{line: 1542, col: 5, offset: 50891},
																											run: (*parser).callonListElementContinuationElement307,
																											expr: &seqExpr{
																												pos: position{line: 1542, col: 5, offset: 50891},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1542, col: 5, offset: 50891},
																														expr: &actionExpr{
																															pos: position{line: 2899, col: 10, offset: 96187},
																															run: (*parser).callonListElementContinuationElement310,
																															expr: &charClassMatcher{
																																pos:        position{line: 2899, col: 11, offset: 96188},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1542, col: 12, offset: 50898},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1542, col: 20, offset: 50906},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1544, col: 9, offset: 50963},
																																	run: (*parser).callonListElementContinuationElement314,
																																	expr: &seqExpr{
																																		pos: position{line: 1544, col: 9, offset: 50963},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1544, col: 9, offset: 50963},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1544, col: 16, offset: 50970},
																																					run: (*parser).callonListElementContinuationElement317,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1544, col: 16, offset: 50970},
																																						expr: &litMatcher{
																																							pos:        position{line: 1544, col: 17, offset: 50971},
																																							val:        "*",
																																							ignoreCase: false,
																																							want:       "\"*\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1548, col: 9, offset: 51071},
																																				run: (*parser).callonListElementContinuationElement320,
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 1565, col: 14, offset: 51778},
																																	label: "depth",
																																	expr: &actionExpr{
																																		pos: position{line: 1565, col: 21, offset: 51785},
																																		run: (*parser).callonListElementContinuationElement322,
																																		expr: &litMatcher{
																																			pos:        position{line: 1565, col: 22, offset: 51786},
																																			val:        "-",
																																			ignoreCase: false,
																																			want:       "\"-\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2903, col: 11, offset: 96254},
																														run: (*parser).callonListElementContinuationElement324,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2903, col: 11, offset: 96254},
																															expr: &charClassMatcher{
																																pos:        position{line: 2903, col: 12, offset: 96255},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1414, col: 9, offset: 46604},
																										expr: &actionExpr{
																											pos: position{line: 1648, col: 5, offset: 54128},
																											run: (*parser).callonListElementContinuationElement328,
																											expr: &seqExpr{
																												pos: position{line: 1648, col: 5, offset: 54128},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 1648, col: 5, offset: 54128},
																														val:        "<",
																														ignoreCase: false,
																														want:       "\"<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 1648, col: 9, offset: 54132},
																														label: "ref",
																														expr: &actionExpr{
																															pos: position{line: 1648, col: 14, offset: 54137},
																															run: (*parser).callonListElementContinuationElement332,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1648, col: 14, offset: 54137},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1648, col: 14, offset: 54137},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 1648, col: 62, offset: 54185},
																														val:        ">",
																														ignoreCase: false,
																														want:       "\">\"",
																													},
																													&actionExpr{
																														pos: position{line: 2903, col: 11, offset: 96254},
																														run: (*parser).callonListElementContinuationElement336,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2903, col: 11, offset: 96254},
																															expr: &charClassMatcher{
																																pos:        position{line: 2903, col: 12, offset: 96255},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1415, col: 9, offset: 46638},
																										expr: &seqExpr{
																											pos: position{line: 1415, col: 11, offset: 46640},
																											exprs: []interface{}{
																												&actionExpr{
																													pos: position{line: 1592, col: 5, offset: 52506},
																													run: (*parser).callonListElementContinuationElement341,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1592, col: 5, offset: 52506},
																														expr: &seqExpr{
																															pos: position{line: 1592, col: 6, offset: 52507},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 1592, col: 6, offset: 52507},
																																	expr: &actionExpr{
																																		pos: position{line: 1597, col: 5, offset: 52657},
																																		run: (*parser).callonListElementContinuationElement345,
																																		expr: &seqExpr{
																																			pos: position{line: 1597, col: 5, offset: 52657},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 1597, col: 5, offset: 52657},
																																					label: "separator",
																																					expr: &actionExpr{
																																						pos: position{line: 1597, col: 16, offset: 52668},
																																						run: (*parser).callonListElementContinuationElement348,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1597, col: 16, offset: 52668},
																																							expr: &litMatcher{
																																								pos:        position{line: 1597, col: 17, offset: 52669},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																						},
																																					},
																																				},
																																				&andCodeExpr{
																																					pos: position{line: 1600, col: 5, offset: 52726},
																																					run: (*parser).callonListElementContinuationElement351,
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 1592, col: 35, offset: 52536},
																																	expr: &choiceExpr{
																																		pos: position{line: 2915, col: 8, offset: 96511},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2908, col: 12, offset: 96371},
																																				run: (*parser).callonListElementContinuationElement354,
																																				expr: &choiceExpr{
																																					pos: position{line: 2908, col: 13, offset: 96372},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 13, offset: 96372},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 20, offset: 96379},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 29, offset: 96388},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2912, col: 8, offset: 96461},
																																				expr: &anyMatcher{
																																					line: 2912, col: 9, offset: 96462,
																																				},
																																			},
																																		},
																																	},
																																},
																																&anyMatcher{
																																	line: 1592, col: 40, offset: 52541,
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 1597, col: 5, offset: 52657},
																													run: (*parser).callonListElementContinuationElement362,
																													expr: &seqExpr{
																														pos: position{line: 1597, col: 5, offset: 52657},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 1597, col: 5, offset: 52657},
																																label: "separator",
																																expr: &actionExpr{
																																	pos: position{line: 1597, col: 16, offset: 52668},
																																	run: (*parser).callonListElementContinuationElement365,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1597, col: 16, offset: 52668},
																																		expr: &litMatcher{
																																			pos:        position{line: 1597, col: 17, offset: 52669},
																																			val:        ":",
																																			ignoreCase: false,
																																			want:       "\":\"",
																																		},
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 1600, col: 5, offset: 52726},
																																run: (*parser).callonListElementContinuationElement368,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1416, col: 9, offset: 46700},
																										expr: &actionExpr{
																											pos: position{line: 731, col: 5, offset: 23680},
																											run: (*parser).callonListElementContinuationElement370,
																											expr: &seqExpr{
																												pos: position{line: 731, col: 5, offset: 23680},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 731, col: 5, offset: 23680},
																														expr: &charClassMatcher{
																															pos:        position{line: 2813, col: 13, offset: 93503},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 732, col: 5, offset: 23710},
																														label: "delimiter",
																														expr: &choiceExpr{
																															pos: position{line: 733, col: 9, offset: 23730},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 746, col: 26, offset: 24217},
																																	run: (*parser).callonListElementContinuationElement376,
																																	expr: &seqExpr{
																																		pos: position{line: 746, col: 26, offset: 24217},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 746, col: 26, offset: 24217},
																																				val:        "////",
																																				ignoreCase: false,
																																				want:       "\"////\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 746, col: 33, offset: 24224},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElementContinuationElement380,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElementContinuationElement383,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 750, col: 26, offset: 24331},
																																	run: (*parser).callonListElementContinuationElement390,
																																	expr: &seqExpr{
																																		pos: position{line: 750, col: 26, offset: 24331},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 750, col: 26, offset: 24331},
																																				val:        "====",
																																				ignoreCase: false,
																																				want:       "\"====\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 750, col: 33, offset: 24338},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElementContinuationElement394,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElementContinuationElement397,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 758, col: 26, offset: 24556},
																																	run: (*parser).callonListElementContinuationElement404,
																																	expr: &seqExpr{
																																		pos: position{line: 758, col: 26, offset: 24556},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 758, col: 26, offset: 24556},
																																				val:        "```",
																																				ignoreCase: false,
																																				want:       "\"```\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 758, col: 32, offset: 24562},
																																				label: "language",
																																				expr: &actionExpr{
																																					pos: position{line: 762, col: 13, offset: 24692},
																																					run: (*parser).callonListElementContinuationElement408,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 762, col: 14, offset: 24693},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 762, col: 14, offset: 24693},
																																							val:        "[^\\r\\n ]",
																																							chars:      []rune{'\r', '\n', ' '},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 758, col: 52, offset: 24582},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElementContinuationElement412,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElementContinuationElement415,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 754, col: 25, offset: 24444},
																																	run: (*parser).callonListElementContinuationElement422,
																																	expr: &seqExpr{
																																		pos: position{line: 754, col: 25, offset: 24444},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 754, col: 25, offset: 24444},
																																				val:        "```",
																																				ignoreCase: false,
																																				want:       "\"```\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 754, col: 31, offset: 24450},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElementContinuationElement426,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElementContinuationElement429,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 766, col: 26, offset: 24765},
																																	run: (*parser).callonListElementContinuationElement436,
																																	expr: &seqExpr{
																																		pos: position{line: 766, col: 26, offset: 24765},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 766, col: 26, offset: 24765},
																																				val:        "----",
																																				ignoreCase: false,
																																				want:       "\"----\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 766, col: 33, offset: 24772},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElementContinuationElement440,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElementContinuationElement443,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 770, col: 26, offset: 24879},
																																	run: (*parser).callonListElementContinuationElement450,
																																	expr: &seqExpr{
																																		pos: position{line: 770, col: 26, offset: 24879},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 770, col: 26, offset: 24879},
																																				val:        "....",
																																				ignoreCase: false,
																																				want:       "\"....\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 770, col: 33, offset: 24886},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElementContinuationElement454,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElementContinuationElement457,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 774, col: 30, offset: 24997},
																																	run: (*parser).callonListElementContinuationElement464,
																																	expr: &seqExpr{
																																		pos: position{line: 774, col: 30, offset: 24997},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 774, col: 30, offset: 24997},
																																				val:        "++++",
																																				ignoreCase: false,
																																				want:       "\"++++\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 774, col: 37, offset: 25004},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElementContinuationElement468,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElementContinuationElement471,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 778, col: 24, offset: 25113},
																																	run: (*parser).callonListElementContinuationElement478,
																																	expr: &seqExpr{
																																		pos: position{line: 778, col: 24, offset: 25113},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 778, col: 24, offset: 25113},
																																				val:        "____",
																																				ignoreCase: false,
																																				want:       "\"____\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 778, col: 31, offset: 25120},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElementContinuationElement482,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElementContinuationElement485,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 782, col: 26, offset: 25225},
																																	run: (*parser).callonListElementContinuationElement492,
																																	expr: &seqExpr{
																																		pos: position{line: 782, col: 26, offset: 25225},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 782, col: 26, offset: 25225},
																																				val:        "****",
																																				ignoreCase: false,
																																				want:       "\"****\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 782, col: 33, offset: 25232},
																																				expr: &actionExpr{
																																					pos: position{line: 2899, col: 10, offset: 96187},
																																					run: (*parser).callonListElementContinuationElement496,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2899, col: 11, offset: 96188},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2915, col: 8, offset: 96511},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 2908, col: 12, offset: 96371},
																																						run: (*parser).callonListElementContinuationElement499,
																																						expr: &choiceExpr{
																																							pos: position{line: 2908, col: 13, offset: 96372},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 13, offset: 96372},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 20, offset: 96379},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2908, col: 29, offset: 96388},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2912, col: 8, offset: 96461},
																																						expr: &anyMatcher{
																																							line: 2912, col: 9, offset: 96462,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1417, col: 9, offset: 46724},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 1417, col: 18, offset: 46733},
																											run: (*parser).callonListElementContinuationElement507,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1417, col: 18, offset: 46733},
																												expr: &charClassMatcher{
																													pos:        position{line: 1417, col: 18, offset: 46733},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2915, col: 8, offset: 96511},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2908, col: 12, offset: 96371},
																												run: (*parser).callonListElementContinuationElement511,
																												expr: &choiceExpr{
																													pos: position{line: 2908, col: 13, offset: 96372},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2908, col: 13, offset: 96372},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 20, offset: 96379},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 29, offset: 96388},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1620, col: 9, offset: 53324},
																run: (*parser).callonListElementContinuationElement518,
																expr: &seqExpr{
																	pos: position{line: 1620, col: 9, offset: 53324},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2903, col: 11, offset: 96254},
																			run: (*parser).callonListElementContinuationElement520,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2903, col: 11, offset: 96254},
																				expr: &charClassMatcher{
																					pos:        position{line: 2903, col: 12, offset: 96255},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1621, col: 9, offset: 53376},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1621, col: 18, offset: 53385},
																				run: (*parser).callonListElementContinuationElement524,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1621, col: 18, offset: 53385},
																					expr: &charClassMatcher{
																						pos:        position{line: 1621, col: 18, offset: 53385},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement528,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1449, col: 5, offset: 47596},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1449, col: 16, offset: 47607},
								expr: &ruleRefExpr{
									pos:  position{line: 1449, col: 17, offset: 47608},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1450, col: 5, offset: 47630},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1451, col: 9, offset: 47648},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 685, col: 14, offset: 22145},
										run: (*parser).callonListElementContinuationElement540,
										expr: &seqExpr{
											pos: position{line: 685, col: 14, offset: 22145},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 685, col: 14, offset: 22145},
													expr: &notExpr{
														pos: position{line: 2912, col: 8, offset: 96461},
														expr: &anyMatcher{
															line: 2912, col: 9, offset: 96462,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 685, col: 19, offset: 22150},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonListElementContinuationElement546,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonListElementContinuationElement549,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1452, col: 11, offset: 47668},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 372, col: 19, offset: 11492},
										run: (*parser).callonListElementContinuationElement557,
										expr: &seqExpr{
											pos: position{line: 372, col: 19, offset: 11492},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 372, col: 19, offset: 11492},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 372, col: 24, offset: 11497},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 332, col: 18, offset: 10393},
														run: (*parser).callonListElementContinuationElement561,
														expr: &seqExpr{
															pos: position{line: 332, col: 18, offset: 10393},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 332, col: 18, offset: 10393},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 332, col: 28, offset: 10403},
																	expr: &charClassMatcher{
																		pos:        position{line: 332, col: 29, offset: 10404},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 372, col: 45, offset: 11518},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 372, col: 49, offset: 11522},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonListElementContinuationElement568,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonListElementContinuationElement571,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 374, col: 5, offset: 11605},
										run: (*parser).callonListElementContinuationElement578,
										expr: &seqExpr{
											pos: position{line: 374, col: 5, offset: 11605},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 374, col: 5, offset: 11605},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 374, col: 9, offset: 11609},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 332, col: 18, offset: 10393},
														run: (*parser).callonListElementContinuationElement582,
														expr: &seqExpr{
															pos: position{line: 332, col: 18, offset: 10393},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 332, col: 18, offset: 10393},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 332, col: 28, offset: 10403},
																	expr: &charClassMatcher{
																		pos:        position{line: 332, col: 29, offset: 10404},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 374, col: 30, offset: 11630},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 374, col: 35, offset: 11635},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonListElementContinuationElement589,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonListElementContinuationElement592,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 798, col: 5, offset: 25649},
										run: (*parser).callonListElementContinuationElement599,
										expr: &seqExpr{
											pos: position{line: 798, col: 5, offset: 25649},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 746, col: 26, offset: 24217},
													run: (*parser).callonListElementContinuationElement601,
													expr: &seqExpr{
														pos: position{line: 746, col: 26, offset: 24217},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 746, col: 26, offset: 24217},
																val:        "////",
																ignoreCase: false,
																want:       "\"////\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 746, col: 33, offset: 24224},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonListElementContinuationElement605,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonListElementContinuationElement608,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 799, col: 5, offset: 25680},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 810, col: 5, offset: 26004},
														expr: &actionExpr{
															pos: position{line: 810, col: 6, offset: 26005},
															run: (*parser).callonListElementContinuationElement617,
															expr: &seqExpr{
																pos: position{line: 810, col: 6, offset: 26005},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 810, col: 6, offset: 26005},
																		expr: &choiceExpr{
																			pos: position{line: 807, col: 29, offset: 25947},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 746, col: 26, offset: 24217},
																					run: (*parser).callonListElementContinuationElement621,
																					expr: &seqExpr{
																						pos: position{line: 746, col: 26, offset: 24217},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 746, col: 26, offset: 24217},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 746, col: 33, offset: 24224},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement625,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement628,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 811, col: 5, offset: 26035},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 787, col: 5, offset: 25344},
																			run: (*parser).callonListElementContinuationElement638,
																			expr: &seqExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 787, col: 5, offset: 25344},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 788, col: 5, offset: 25417},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 788, col: 14, offset: 25426},
																							run: (*parser).callonListElementContinuationElement644,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								expr: &charClassMatcher{
																									pos:        position{line: 788, col: 14, offset: 25426},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonListElementContinuationElement648,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 800, col: 5, offset: 25714},
													expr: &choiceExpr{
														pos: position{line: 807, col: 29, offset: 25947},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 746, col: 26, offset: 24217},
																run: (*parser).callonListElementContinuationElement657,
																expr: &seqExpr{
																	pos: position{line: 746, col: 26, offset: 24217},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 746, col: 26, offset: 24217},
																			val:        "////",
																			ignoreCase: false,
																			want:       "\"////\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 746, col: 33, offset: 24224},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElementContinuationElement661,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement664,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 819, col: 5, offset: 26188},
										run: (*parser).callonListElementContinuationElement673,
										expr: &seqExpr{
											pos: position{line: 819, col: 5, offset: 26188},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 750, col: 26, offset: 24331},
													run: (*parser).callonListElementContinuationElement675,
													expr: &seqExpr{
														pos: position{line: 750, col: 26, offset: 24331},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 750, col: 26, offset: 24331},
																val:        "====",
																ignoreCase: false,
																want:       "\"====\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 750, col: 33, offset: 24338},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonListElementContinuationElement679,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonListElementContinuationElement682,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 820, col: 5, offset: 26219},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 831, col: 4, offset: 26542},
														expr: &actionExpr{
															pos: position{line: 831, col: 5, offset: 26543},
															run: (*parser).callonListElementContinuationElement691,
															expr: &seqExpr{
																pos: position{line: 831, col: 5, offset: 26543},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 831, col: 5, offset: 26543},
																		expr: &choiceExpr{
																			pos: position{line: 828, col: 29, offset: 26486},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 750, col: 26, offset: 24331},
																					run: (*parser).callonListElementContinuationElement695,
																					expr: &seqExpr{
																						pos: position{line: 750, col: 26, offset: 24331},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 750, col: 26, offset: 24331},
																								val:        "====",
																								ignoreCase: false,
																								want:       "\"====\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 750, col: 33, offset: 24338},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement699,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement702,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 832, col: 5, offset: 26573},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 787, col: 5, offset: 25344},
																			run: (*parser).callonListElementContinuationElement712,
																			expr: &seqExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 787, col: 5, offset: 25344},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 788, col: 5, offset: 25417},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 788, col: 14, offset: 25426},
																							run: (*parser).callonListElementContinuationElement718,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								expr: &charClassMatcher{
																									pos:        position{line: 788, col: 14, offset: 25426},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonListElementContinuationElement722,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 821, col: 5, offset: 26253},
													expr: &choiceExpr{
														pos: position{line: 828, col: 29, offset: 26486},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 750, col: 26, offset: 24331},
																run: (*parser).callonListElementContinuationElement731,
																expr: &seqExpr{
																	pos: position{line: 750, col: 26, offset: 24331},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 750, col: 26, offset: 24331},
																			val:        "====",
																			ignoreCase: false,
																			want:       "\"====\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 750, col: 33, offset: 24338},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElementContinuationElement735,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement738,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 903, col: 5, offset: 28353},
										run: (*parser).callonListElementContinuationElement747,
										expr: &seqExpr{
											pos: position{line: 903, col: 5, offset: 28353},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 903, col: 5, offset: 28353},
													label: "delimiter",
													expr: &actionExpr{
														pos: position{line: 758, col: 26, offset: 24556},
														run: (*parser).callonListElementContinuationElement750,
														expr: &seqExpr{
															pos: position{line: 758, col: 26, offset: 24556},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 758, col: 26, offset: 24556},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&labeledExpr{
																	pos:   position{line: 758, col: 32, offset: 24562},
																	label: "language",
																	expr: &actionExpr{
																		pos: position{line: 762, col: 13, offset: 24692},
																		run: (*parser).callonListElementContinuationElement754,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 762, col: 14, offset: 24693},
																			expr: &charClassMatcher{
																				pos:        position{line: 762, col: 14, offset: 24693},
																				val:        "[^\\r\\n ]",
																				chars:      []rune{'\r', '\n', ' '},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 758, col: 52, offset: 24582},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonListElementContinuationElement758,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElementContinuationElement761,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 904, col: 5, offset: 28399},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 918, col: 5, offset: 28916},
														expr: &actionExpr{
															pos: position{line: 918, col: 6, offset: 28917},
															run: (*parser).callonListElementContinuationElement770,
															expr: &seqExpr{
																pos: position{line: 918, col: 6, offset: 28917},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 918, col: 6, offset: 28917},
																		expr: &choiceExpr{
																			pos: position{line: 849, col: 28, offset: 27022},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 754, col: 25, offset: 24444},
																					run: (*parser).callonListElementContinuationElement774,
																					expr: &seqExpr{
																						pos: position{line: 754, col: 25, offset: 24444},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 754, col: 25, offset: 24444},
																								val:        "```",
																								ignoreCase: false,
																								want:       "\"```\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 754, col: 31, offset: 24450},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement778,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement781,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 919, col: 5, offset: 28952},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 787, col: 5, offset: 25344},
																			run: (*parser).callonListElementContinuationElement791,
																			expr: &seqExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 787, col: 5, offset: 25344},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 788, col: 5, offset: 25417},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 788, col: 14, offset: 25426},
																							run: (*parser).callonListElementContinuationElement797,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								expr: &charClassMatcher{
																									pos:        position{line: 788, col: 14, offset: 25426},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonListElementContinuationElement801,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 905, col: 5, offset: 28438},
													expr: &choiceExpr{
														pos: position{line: 849, col: 28, offset: 27022},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 754, col: 25, offset: 24444},
																run: (*parser).callonListElementContinuationElement810,
																expr: &seqExpr{
																	pos: position{line: 754, col: 25, offset: 24444},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 754, col: 25, offset: 24444},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 754, col: 31, offset: 24450},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElementContinuationElement814,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement817,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 840, col: 5, offset: 26726},
										run: (*parser).callonListElementContinuationElement826,
										expr: &seqExpr{
											pos: position{line: 840, col: 5, offset: 26726},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 754, col: 25, offset: 24444},
													run: (*parser).callonListElementContinuationElement828,
													expr: &seqExpr{
														pos: position{line: 754, col: 25, offset: 24444},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 754, col: 25, offset: 24444},
																val:        "```",
																ignoreCase: false,
																want:       "\"```\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 754, col: 31, offset: 24450},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonListElementContinuationElement832,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonListElementContinuationElement835,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 841, col: 5, offset: 26756},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 852, col: 5, offset: 27077},
														expr: &actionExpr{
															pos: position{line: 852, col: 6, offset: 27078},
															run: (*parser).callonListElementContinuationElement844,
															expr: &seqExpr{
																pos: position{line: 852, col: 6, offset: 27078},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 852, col: 6, offset: 27078},
																		expr: &choiceExpr{
																			pos: position{line: 849, col: 28, offset: 27022},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 754, col: 25, offset: 24444},
																					run: (*parser).callonListElementContinuationElement848,
																					expr: &seqExpr{
																						pos: position{line: 754, col: 25, offset: 24444},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 754, col: 25, offset: 24444},
																								val:        "```",
																								ignoreCase: false,
																								want:       "\"```\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 754, col: 31, offset: 24450},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement852,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement855,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 853, col: 5, offset: 27107},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 787, col: 5, offset: 25344},
																			run: (*parser).callonListElementContinuationElement865,
																			expr: &seqExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 787, col: 5, offset: 25344},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 788, col: 5, offset: 25417},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 788, col: 14, offset: 25426},
																							run: (*parser).callonListElementContinuationElement871,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								expr: &charClassMatcher{
																									pos:        position{line: 788, col: 14, offset: 25426},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonListElementContinuationElement875,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 842, col: 5, offset: 26789},
													expr: &choiceExpr{
														pos: position{line: 849, col: 28, offset: 27022},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 754, col: 25, offset: 24444},
																run: (*parser).callonListElementContinuationElement884,
																expr: &seqExpr{
																	pos: position{line: 754, col: 25, offset: 24444},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 754, col: 25, offset: 24444},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 754, col: 31, offset: 24450},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElementContinuationElement888,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement891,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 861, col: 5, offset: 27262},
										run: (*parser).callonListElementContinuationElement900,
										expr: &seqExpr{
											pos: position{line: 861, col: 5, offset: 27262},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 766, col: 26, offset: 24765},
													run: (*parser).callonListElementContinuationElement902,
													expr: &seqExpr{
														pos: position{line: 766, col: 26, offset: 24765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 766, col: 26, offset: 24765},
																val:        "----",
																ignoreCase: false,
																want:       "\"----\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 766, col: 33, offset: 24772},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonListElementContinuationElement906,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonListElementContinuationElement909,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 862, col: 5, offset: 27293},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 873, col: 5, offset: 27622},
														expr: &actionExpr{
															pos: position{line: 873, col: 6, offset: 27623},
															run: (*parser).callonListElementContinuationElement918,
															expr: &seqExpr{
																pos: position{line: 873, col: 6, offset: 27623},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 873, col: 6, offset: 27623},
																		expr: &choiceExpr{
																			pos: position{line: 870, col: 29, offset: 27565},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 766, col: 26, offset: 24765},
																					run: (*parser).callonListElementContinuationElement922,
																					expr: &seqExpr{
																						pos: position{line: 766, col: 26, offset: 24765},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 766, col: 26, offset: 24765},
																								val:        "----",
																								ignoreCase: false,
																								want:       "\"----\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 766, col: 33, offset: 24772},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement926,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement929,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 874, col: 5, offset: 27653},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 787, col: 5, offset: 25344},
																			run: (*parser).callonListElementContinuationElement939,
																			expr: &seqExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 787, col: 5, offset: 25344},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 788, col: 5, offset: 25417},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 788, col: 14, offset: 25426},
																							run: (*parser).callonListElementContinuationElement945,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								expr: &charClassMatcher{
																									pos:        position{line: 788, col: 14, offset: 25426},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonListElementContinuationElement949,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 863, col: 5, offset: 27327},
													expr: &choiceExpr{
														pos: position{line: 870, col: 29, offset: 27565},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 766, col: 26, offset: 24765},
																run: (*parser).callonListElementContinuationElement958,
																expr: &seqExpr{
																	pos: position{line: 766, col: 26, offset: 24765},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 766, col: 26, offset: 24765},
																			val:        "----",
																			ignoreCase: false,
																			want:       "\"----\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 766, col: 33, offset: 24772},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElementContinuationElement962,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement965,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 882, col: 5, offset: 27808},
										run: (*parser).callonListElementContinuationElement974,
										expr: &seqExpr{
											pos: position{line: 882, col: 5, offset: 27808},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 770, col: 26, offset: 24879},
													run: (*parser).callonListElementContinuationElement976,
													expr: &seqExpr{
														pos: position{line: 770, col: 26, offset: 24879},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 770, col: 26, offset: 24879},
																val:        "....",
																ignoreCase: false,
																want:       "\"....\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 770, col: 33, offset: 24886},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonListElementContinuationElement980,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonListElementContinuationElement983,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 883, col: 5, offset: 27839},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 894, col: 5, offset: 28163},
														expr: &actionExpr{
															pos: position{line: 894, col: 6, offset: 28164},
															run: (*parser).callonListElementContinuationElement992,
															expr: &seqExpr{
																pos: position{line: 894, col: 6, offset: 28164},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 894, col: 6, offset: 28164},
																		expr: &choiceExpr{
																			pos: position{line: 891, col: 29, offset: 28106},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 770, col: 26, offset: 24879},
																					run: (*parser).callonListElementContinuationElement996,
																					expr: &seqExpr{
																						pos: position{line: 770, col: 26, offset: 24879},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 770, col: 26, offset: 24879},
																								val:        "....",
																								ignoreCase: false,
																								want:       "\"....\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 770, col: 33, offset: 24886},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement1000,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement1003,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 895, col: 5, offset: 28194},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 787, col: 5, offset: 25344},
																			run: (*parser).callonListElementContinuationElement1013,
																			expr: &seqExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 787, col: 5, offset: 25344},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 788, col: 5, offset: 25417},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 788, col: 14, offset: 25426},
																							run: (*parser).callonListElementContinuationElement1019,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								expr: &charClassMatcher{
																									pos:        position{line: 788, col: 14, offset: 25426},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonListElementContinuationElement1023,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 884, col: 5, offset: 27873},
													expr: &choiceExpr{
														pos: position{line: 891, col: 29, offset: 28106},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 770, col: 26, offset: 24879},
																run: (*parser).callonListElementContinuationElement1032,
																expr: &seqExpr{
																	pos: position{line: 770, col: 26, offset: 24879},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 770, col: 26, offset: 24879},
																			val:        "....",
																			ignoreCase: false,
																			want:       "\"....\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 770, col: 33, offset: 24886},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElementContinuationElement1036,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement1039,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 927, col: 5, offset: 29121},
										run: (*parser).callonListElementContinuationElement1048,
										expr: &seqExpr{
											pos: position{line: 927, col: 5, offset: 29121},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 927, col: 5, offset: 29121},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 934, col: 5, offset: 29380},
														run: (*parser).callonListElementContinuationElement1051,
														expr: &seqExpr{
															pos: position{line: 934, col: 5, offset: 29380},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 934, col: 5, offset: 29380},
																	expr: &actionExpr{
																		pos: position{line: 685, col: 14, offset: 22145},
																		run: (*parser).callonListElementContinuationElement1054,
																		expr: &seqExpr{
																			pos: position{line: 685, col: 14, offset: 22145},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 685, col: 14, offset: 22145},
																					expr: &notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 685, col: 19, offset: 22150},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonListElementContinuationElement1060,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2915, col: 8, offset: 96511},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonListElementContinuationElement1063,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 935, col: 5, offset: 29395},
																	val:        "> ",
																	ignoreCase: false,
																	want:       "\"> \"",
																},
																&labeledExpr{
																	pos:   position{line: 936, col: 5, offset: 29405},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 936, col: 14, offset: 29414},
																		run: (*parser).callonListElementContinuationElement1072,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 936, col: 15, offset: 29415},
																			expr: &charClassMatcher{
																				pos:        position{line: 936, col: 15, offset: 29415},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElementContinuationElement1076,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 928, col: 5, offset: 29158},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 928, col: 16, offset: 29169},
														expr: &choiceExpr{
															pos: position{line: 928, col: 17, offset: 29170},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 934, col: 5, offset: 29380},
																	run: (*parser).callonListElementContinuationElement1086,
																	expr: &seqExpr{
																		pos: position{line: 934, col: 5, offset: 29380},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 934, col: 5, offset: 29380},
																				expr: &actionExpr{
																					pos: position{line: 685, col: 14, offset: 22145},
																					run: (*parser).callonListElementContinuationElement1089,
																					expr: &seqExpr{
																						pos: position{line: 685, col: 14, offset: 22145},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 685, col: 14, offset: 22145},
																								expr: &notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 685, col: 19, offset: 22150},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement1095,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement1098,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 935, col: 5, offset: 29395},
																				val:        "> ",
																				ignoreCase: false,
																				want:       "\"> \"",
																			},
																			&labeledExpr{
																				pos:   position{line: 936, col: 5, offset: 29405},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 936, col: 14, offset: 29414},
																					run: (*parser).callonListElementContinuationElement1107,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 936, col: 15, offset: 29415},
																						expr: &charClassMatcher{
																							pos:        position{line: 936, col: 15, offset: 29415},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonListElementContinuationElement1111,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1716, col: 5, offset: 56453},
																	run: (*parser).callonListElementContinuationElement1118,
																	expr: &seqExpr{
																		pos: position{line: 1716, col: 5, offset: 56453},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1716, col: 5, offset: 56453},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1716, col: 14, offset: 56462},
																					run: (*parser).callonListElementContinuationElement1121,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1716, col: 14, offset: 56462},
																						expr: &charClassMatcher{
																							pos:        position{line: 1716, col: 14, offset: 56462},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1719, col: 5, offset: 56569},
																				run: (*parser).callonListElementContinuationElement1124,
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonListElementContinuationElement1126,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 953, col: 5, offset: 29773},
										run: (*parser).callonListElementContinuationElement1133,
										expr: &seqExpr{
											pos: position{line: 953, col: 5, offset: 29773},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 774, col: 30, offset: 24997},
													run: (*parser).callonListElementContinuationElement1135,
													expr: &seqExpr{
														pos: position{line: 774, col: 30, offset: 24997},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 774, col: 30, offset: 24997},
																val:        "++++",
																ignoreCase: false,
																want:       "\"++++\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 774, col: 37, offset: 25004},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonListElementContinuationElement1139,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonListElementContinuationElement1142,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 954, col: 5, offset: 29808},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 965, col: 5, offset: 30164},
														expr: &actionExpr{
															pos: position{line: 965, col: 6, offset: 30165},
															run: (*parser).callonListElementContinuationElement1151,
															expr: &seqExpr{
																pos: position{line: 965, col: 6, offset: 30165},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 965, col: 6, offset: 30165},
																		expr: &choiceExpr{
																			pos: position{line: 962, col: 33, offset: 30099},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 774, col: 30, offset: 24997},
																					run: (*parser).callonListElementContinuationElement1155,
																					expr: &seqExpr{
																						pos: position{line: 774, col: 30, offset: 24997},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 774, col: 30, offset: 24997},
																								val:        "++++",
																								ignoreCase: false,
																								want:       "\"++++\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 774, col: 37, offset: 25004},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement1159,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement1162,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 966, col: 5, offset: 30199},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 787, col: 5, offset: 25344},
																			run: (*parser).callonListElementContinuationElement1172,
																			expr: &seqExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 787, col: 5, offset: 25344},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 788, col: 5, offset: 25417},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 788, col: 14, offset: 25426},
																							run: (*parser).callonListElementContinuationElement1178,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								expr: &charClassMatcher{
																									pos:        position{line: 788, col: 14, offset: 25426},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonListElementContinuationElement1182,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 955, col: 5, offset: 29846},
													expr: &choiceExpr{
														pos: position{line: 962, col: 33, offset: 30099},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 774, col: 30, offset: 24997},
																run: (*parser).callonListElementContinuationElement1191,
																expr: &seqExpr{
																	pos: position{line: 774, col: 30, offset: 24997},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 774, col: 30, offset: 24997},
																			val:        "++++",
																			ignoreCase: false,
																			want:       "\"++++\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 774, col: 37, offset: 25004},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElementContinuationElement1195,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement1198,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 974, col: 5, offset: 30350},
										run: (*parser).callonListElementContinuationElement1207,
										expr: &seqExpr{
											pos: position{line: 974, col: 5, offset: 30350},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 778, col: 24, offset: 25113},
													run: (*parser).callonListElementContinuationElement1209,
													expr: &seqExpr{
														pos: position{line: 778, col: 24, offset: 25113},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 778, col: 24, offset: 25113},
																val:        "____",
																ignoreCase: false,
																want:       "\"____\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 778, col: 31, offset: 25120},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonListElementContinuationElement1213,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonListElementContinuationElement1216,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 975, col: 5, offset: 30379},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 986, col: 4, offset: 30686},
														expr: &actionExpr{
															pos: position{line: 986, col: 5, offset: 30687},
															run: (*parser).callonListElementContinuationElement1225,
															expr: &seqExpr{
																pos: position{line: 986, col: 5, offset: 30687},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 986, col: 5, offset: 30687},
																		expr: &choiceExpr{
																			pos: position{line: 983, col: 27, offset: 30634},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 778, col: 24, offset: 25113},
																					run: (*parser).callonListElementContinuationElement1229,
																					expr: &seqExpr{
																						pos: position{line: 778, col: 24, offset: 25113},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 778, col: 24, offset: 25113},
																								val:        "____",
																								ignoreCase: false,
																								want:       "\"____\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 778, col: 31, offset: 25120},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement1233,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement1236,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 987, col: 5, offset: 30715},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 787, col: 5, offset: 25344},
																			run: (*parser).callonListElementContinuationElement1246,
																			expr: &seqExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 787, col: 5, offset: 25344},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 788, col: 5, offset: 25417},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 788, col: 14, offset: 25426},
																							run: (*parser).callonListElementContinuationElement1252,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								expr: &charClassMatcher{
																									pos:        position{line: 788, col: 14, offset: 25426},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonListElementContinuationElement1256,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 976, col: 5, offset: 30411},
													expr: &choiceExpr{
														pos: position{line: 983, col: 27, offset: 30634},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 778, col: 24, offset: 25113},
																run: (*parser).callonListElementContinuationElement1265,
																expr: &seqExpr{
																	pos: position{line: 778, col: 24, offset: 25113},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 778, col: 24, offset: 25113},
																			val:        "____",
																			ignoreCase: false,
																			want:       "\"____\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 778, col: 31, offset: 25120},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElementContinuationElement1269,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement1272,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 995, col: 5, offset: 30870},
										run: (*parser).callonListElementContinuationElement1281,
										expr: &seqExpr{
											pos: position{line: 995, col: 5, offset: 30870},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 782, col: 26, offset: 25225},
													run: (*parser).callonListElementContinuationElement1283,
													expr: &seqExpr{
														pos: position{line: 782, col: 26, offset: 25225},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 782, col: 26, offset: 25225},
																val:        "****",
																ignoreCase: false,
																want:       "\"****\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 782, col: 33, offset: 25232},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonListElementContinuationElement1287,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonListElementContinuationElement1290,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 996, col: 5, offset: 30901},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1007, col: 4, offset: 31226},
														expr: &actionExpr{
															pos: position{line: 1007, col: 5, offset: 31227},
															run: (*parser).callonListElementContinuationElement1299,
															expr: &seqExpr{
																pos: position{line: 1007, col: 5, offset: 31227},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1007, col: 5, offset: 31227},
																		expr: &choiceExpr{
																			pos: position{line: 1004, col: 29, offset: 31169},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 782, col: 26, offset: 25225},
																					run: (*parser).callonListElementContinuationElement1303,
																					expr: &seqExpr{
																						pos: position{line: 782, col: 26, offset: 25225},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 782, col: 26, offset: 25225},
																								val:        "****",
																								ignoreCase: false,
																								want:       "\"****\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 782, col: 33, offset: 25232},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement1307,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement1310,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1008, col: 5, offset: 31257},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 787, col: 5, offset: 25344},
																			run: (*parser).callonListElementContinuationElement1320,
																			expr: &seqExpr{
																				pos: position{line: 787, col: 5, offset: 25344},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 787, col: 5, offset: 25344},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 788, col: 5, offset: 25417},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 788, col: 14, offset: 25426},
																							run: (*parser).callonListElementContinuationElement1326,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 788, col: 14, offset: 25426},
																								expr: &charClassMatcher{
																									pos:        position{line: 788, col: 14, offset: 25426},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonListElementContinuationElement1330,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 997, col: 5, offset: 30935},
													expr: &choiceExpr{
														pos: position{line: 1004, col: 29, offset: 31169},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 782, col: 26, offset: 25225},
																run: (*parser).callonListElementContinuationElement1339,
																expr: &seqExpr{
																	pos: position{line: 782, col: 26, offset: 25225},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 782, col: 26, offset: 25225},
																			val:        "****",
																			ignoreCase: false,
																			want:       "\"****\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 782, col: 33, offset: 25232},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonListElementContinuationElement1343,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement1346,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2768, col: 18, offset: 91974},
										run: (*parser).callonListElementContinuationElement1355,
										expr: &seqExpr{
											pos: position{line: 2768, col: 18, offset: 91974},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2769, col: 9, offset: 91984},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2769, col: 9, offset: 91984},
															val:        "'''",
															ignoreCase: false,
															want:       "\"'''\"",
														},
														&litMatcher{
															pos:        position{line: 2770, col: 11, offset: 92020},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2770, col: 19, offset: 92028},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2770, col: 29, offset: 92038},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2770, col: 37, offset: 92046},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2770, col: 47, offset: 92056},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2770, col: 55, offset: 92064},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2771, col: 11, offset: 92122},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonListElementContinuationElement1366,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonListElementContinuationElement1369,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonListElementContinuationElement1377,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1456, col: 11, offset: 47810},
										name: "ImageBlock",
									},
									&actionExpr{
										pos: position{line: 2666, col: 5, offset: 89103},
										run: (*parser).callonListElementContinuationElement1385,
										expr: &seqExpr{
											pos: position{line: 2666, col: 5, offset: 89103},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2674, col: 19, offset: 89280},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2674, col: 26, offset: 89287},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonListElementContinuationElement1389,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonListElementContinuationElement1392,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2667, col: 5, offset: 89127},
													label: "header",
													expr: &zeroOrOneExpr{
														pos: position{line: 2667, col: 12, offset: 89134},
														expr: &actionExpr{
															pos: position{line: 2682, col: 5, offset: 89447},
															run: (*parser).callonListElementContinuationElement1401,
															expr: &seqExpr{
																pos: position{line: 2682, col: 5, offset: 89447},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2682, col: 5, offset: 89447},
																		label: "cells",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2682, col: 11, offset: 89453},
																			expr: &actionExpr{
																				pos: position{line: 2688, col: 5, offset: 89570},
																				run: (*parser).callonListElementContinuationElement1405,
																				expr: &seqExpr{
																					pos: position{line: 2688, col: 5, offset: 89570},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2688, col: 5, offset: 89570},
																							val:        "|",
																							ignoreCase: false,
																							want:       "\"|\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2688, col: 9, offset: 89574},
																							expr: &actionExpr{
																								pos: position{line: 2899, col: 10, offset: 96187},
																								run: (*parser).callonListElementContinuationElement1409,
																								expr: &charClassMatcher{
																									pos:        position{line: 2899, col: 11, offset: 96188},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2689, col: 5, offset: 89586},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 2689, col: 14, offset: 89595},
																								expr: &actionExpr{
																									pos: position{line: 2721, col: 5, offset: 90383},
																									run: (*parser).callonListElementContinuationElement1413,
																									expr: &labeledExpr{
																										pos:   position{line: 2721, col: 5, offset: 90383},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 2721, col: 14, offset: 90392},
																											run: (*parser).callonListElementContinuationElement1415,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2721, col: 14, offset: 90392},
																												expr: &charClassMatcher{
																													pos:        position{line: 2721, col: 14, offset: 90392},
																													val:        "[^\\r\\n|]",
																													chars:      []rune{'\r', '\n', '|'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonListElementContinuationElement1419,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2683, col: 5, offset: 89475},
																		expr: &actionExpr{
																			pos: position{line: 685, col: 14, offset: 22145},
																			run: (*parser).callonListElementContinuationElement1427,
																			expr: &seqExpr{
																				pos: position{line: 685, col: 14, offset: 22145},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 685, col: 14, offset: 22145},
																						expr: &notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 685, col: 19, offset: 22150},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonListElementContinuationElement1433,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2915, col: 8, offset: 96511},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2908, col: 12, offset: 96371},
																								run: (*parser).callonListElementContinuationElement1436,
																								expr: &choiceExpr{
																									pos: position{line: 2908, col: 13, offset: 96372},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2908, col: 13, offset: 96372},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 20, offset: 96379},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2908, col: 29, offset: 96388},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2912, col: 8, offset: 96461},
																								expr: &anyMatcher{
																									line: 2912, col: 9, offset: 96462,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2668, col: 5, offset: 89153},
													label: "rows",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2668, col: 10, offset: 89158},
														expr: &choiceExpr{
															pos: position{line: 2693, col: 13, offset: 89692},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2703, col: 5, offset: 89911},
																	run: (*parser).callonListElementContinuationElement1446,
																	expr: &seqExpr{
																		pos: position{line: 2703, col: 5, offset: 89911},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2703, col: 5, offset: 89911},
																				expr: &choiceExpr{
																					pos: position{line: 2678, col: 22, offset: 89360},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2674, col: 19, offset: 89280},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2674, col: 19, offset: 89280},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2674, col: 26, offset: 89287},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonListElementContinuationElement1453,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonListElementContinuationElement1456,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2704, col: 5, offset: 89934},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2704, col: 11, offset: 89940},
																					expr: &actionExpr{
																						pos: position{line: 2704, col: 12, offset: 89941},
																						run: (*parser).callonListElementContinuationElement1467,
																						expr: &seqExpr{
																							pos: position{line: 2704, col: 12, offset: 89941},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 2704, col: 12, offset: 89941},
																									label: "cell",
																									expr: &actionExpr{
																										pos: position{line: 2713, col: 5, offset: 90182},
																										run: (*parser).callonListElementContinuationElement1470,
																										expr: &seqExpr{
																											pos: position{line: 2713, col: 5, offset: 90182},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 2713, col: 5, offset: 90182},
																													expr: &choiceExpr{
																														pos: position{line: 2678, col: 22, offset: 89360},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 2674, col: 19, offset: 89280},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2674, col: 19, offset: 89280},
																																		val:        "|===",
																																		ignoreCase: false,
																																		want:       "\"|===\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2674, col: 26, offset: 89287},
																																		expr: &actionExpr{
																																			pos: position{line: 2899, col: 10, offset: 96187},
																																			run: (*parser).callonListElementContinuationElement1477,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2899, col: 11, offset: 96188},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2915, col: 8, offset: 96511},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 2908, col: 12, offset: 96371},
																																				run: (*parser).callonListElementContinuationElement1480,
																																				expr: &choiceExpr{
																																					pos: position{line: 2908, col: 13, offset: 96372},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 13, offset: 96372},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 20, offset: 96379},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2908, col: 29, offset: 96388},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2912, col: 8, offset: 96461},
																																				expr: &anyMatcher{
																																					line: 2912, col: 9, offset: 96462,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2912, col: 8, offset: 96461},
																																expr: &anyMatcher{
																																	line: 2912, col: 9, offset: 96462,
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2714, col: 5, offset: 90205},
																													expr: &actionExpr{
																														pos: position{line: 685, col: 14, offset: 22145},
																														run: (*parser).callonListElementContinuationElement1490,
																														expr: &seqExpr{
																															pos: position{line: 685, col: 14, offset: 22145},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 685, col: 14, offset: 22145},
																																	expr: &notExpr{
																																		pos: position{line: 2912, col: 8, offset: 96461},
																																		expr: &anyMatcher{
																																			line: 2912, col: 9, offset: 96462,
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 685, col: 19, offset: 22150},
																																	expr: &actionExpr{
																																		pos: position{line: 2899, col: 10, offset: 96187},
																																		run: (*parser).callonListElementContinuationElement1496,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2899, col: 11, offset: 96188},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2915, col: 8, offset: 96511},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 2908, col: 12, offset: 96371},
																																			run: (*parser).callonListElementContinuationElement1499,
																																			expr: &choiceExpr{
																																				pos: position{line: 2908, col: 13, offset: 96372},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2908, col: 13, offset: 96372},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2908, col: 20, offset: 96379},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2908, col: 29, offset: 96388},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2912, col: 8, offset: 96461},
																																			expr: &anyMatcher{
																																				line: 2912, col: 9, offset: 96462,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2715, col: 5, offset: 90220},
																													val:        "|",
																													ignoreCase: false,
																													want:       "\"|\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 2715, col: 9, offset: 90224},
																													expr: &actionExpr{
																														pos: position{line: 2899, col: 10, offset: 96187},
																														run: (*parser).callonListElementContinuationElement1508,
																														expr: &charClassMatcher{
																															pos:        position{line: 2899, col: 11, offset: 96188},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 2715, col: 16, offset: 90231},
																													label: "content",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 2715, col: 25, offset: 90240},
																														expr: &actionExpr{
																															pos: position{line: 2721, col: 5, offset: 90383},
																															run: (*parser).callonListElementContinuationElement1512,
																															expr: &labeledExpr{
																																pos:   position{line: 2721, col: 5, offset: 90383},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 2721, col: 14, offset: 90392},
																																	run: (*parser).callonListElementContinuationElement1514,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2721, col: 14, offset: 90392},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2721, col: 14, offset: 90392},
																																			val:        "[^\\r\\n|]",
																																			chars:      []rune{'\r', '\n', '|'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonListElementContinuationElement1518,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2707, col: 6, offset: 90003},
																				alternatives: []interface{}{
																					&oneOrMoreExpr{
																						pos: position{line: 2707, col: 6, offset: 90003},
																						expr: &actionExpr{
																							pos: position{line: 685, col: 14, offset: 22145},
																							run: (*parser).callonListElementContinuationElement1527,
																							expr: &seqExpr{
																								pos: position{line: 685, col: 14, offset: 22145},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 685, col: 14, offset: 22145},
																										expr: &notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 685, col: 19, offset: 22150},
																										expr: &actionExpr{
																											pos: position{line: 2899, col: 10, offset: 96187},
																											run: (*parser).callonListElementContinuationElement1533,
																											expr: &charClassMatcher{
																												pos:        position{line: 2899, col: 11, offset: 96188},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2915, col: 8, offset: 96511},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2908, col: 12, offset: 96371},
																												run: (*parser).callonListElementContinuationElement1536,
																												expr: &choiceExpr{
																													pos: position{line: 2908, col: 13, offset: 96372},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2908, col: 13, offset: 96372},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 20, offset: 96379},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2908, col: 29, offset: 96388},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2707, col: 19, offset: 90016},
																						expr: &choiceExpr{
																							pos: position{line: 2678, col: 22, offset: 89360},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2674, col: 19, offset: 89280},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2674, col: 19, offset: 89280},
																											val:        "|===",
																											ignoreCase: false,
																											want:       "\"|===\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2674, col: 26, offset: 89287},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonListElementContinuationElement1548,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2915, col: 8, offset: 96511},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2908, col: 12, offset: 96371},
																													run: (*parser).callonListElementContinuationElement1551,
																													expr: &choiceExpr{
																														pos: position{line: 2908, col: 13, offset: 96372},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2908, col: 13, offset: 96372},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 20, offset: 96379},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2908, col: 29, offset: 96388},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2912, col: 8, offset: 96461},
																													expr: &anyMatcher{
																														line: 2912, col: 9, offset: 96462,
																													},
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2696, col: 5, offset: 89759},
																	run: (*parser).callonListElementContinuationElement1560,
																	expr: &seqExpr{
																		pos: position{line: 2696, col: 5, offset: 89759},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2696, col: 5, offset: 89759},
																				expr: &choiceExpr{
																					pos: position{line: 2678, col: 22, offset: 89360},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2674, col: 19, offset: 89280},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2674, col: 19, offset: 89280},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2674, col: 26, offset: 89287},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonListElementContinuationElement1567,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2915, col: 8, offset: 96511},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2908, col: 12, offset: 96371},
																											run: (*parser).callonListElementContinuationElement1570,
																											expr: &choiceExpr{
																												pos: position{line: 2908, col: 13, offset: 96372},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2908, col: 13, offset: 96372},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 20, offset: 96379},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2908, col: 29, offset: 96388},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2912, col: 8, offset: 96461},
																											expr: &anyMatcher{
																												line: 2912, col: 9, offset: 96462,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2697, col: 5, offset: 89782},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2697, col: 11, offset: 89788},
																					expr: &actionExpr{
																						pos: position{line: 2713, col: 5, offset: 90182},
																						run: (*parser).callonListElementContinuationElement1581,
																						expr: &seqExpr{
																							pos: position{line: 2713, col: 5, offset: 90182},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2713, col: 5, offset: 90182},
																									expr: &choiceExpr{
																										pos: position{line: 2678, col: 22, offset: 89360},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2674, col: 19, offset: 89280},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2674, col: 19, offset: 89280},
																														val:        "|===",
																														ignoreCase: false,
																														want:       "\"|===\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2674, col: 26, offset: 89287},
																														expr: &actionExpr{
																															pos: position{line: 2899, col: 10, offset: 96187},
																															run: (*parser).callonListElementContinuationElement1588,
																															expr: &charClassMatcher{
																																pos:        position{line: 2899, col: 11, offset: 96188},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2915, col: 8, offset: 96511},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2908, col: 12, offset: 96371},
																																run: (*parser).callonListElementContinuationElement1591,
																																expr: &choiceExpr{
																																	pos: position{line: 2908, col: 13, offset: 96372},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 13, offset: 96372},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 20, offset: 96379},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2908, col: 29, offset: 96388},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2912, col: 8, offset: 96461},
																																expr: &anyMatcher{
																																	line: 2912, col: 9, offset: 96462,
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2912, col: 8, offset: 96461},
																												expr: &anyMatcher{
																													line: 2912, col: 9, offset: 96462,
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2714, col: 5, offset: 90205},
																									expr: &actionExpr{
																										pos: position{line: 685, col: 14, offset: 22145},
																										run: (*parser).callonListElementContinuationElement1601,
																										expr: &seqExpr{
																											pos: position{line: 685, col: 14, offset: 22145},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 685, col: 14, offset: 22145},
																													expr: &notExpr{
																														pos: position{line: 2912, col: 8, offset: 96461},
																														expr: &anyMatcher{
																															line: 2912, col: 9, offset: 96462,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 685, col: 19, offset: 22150},
																													expr: &actionExpr{
																														pos: position{line: 2899, col: 10, offset: 96187},
																														run: (*parser).callonListElementContinuationElement1607,
																														expr: &charClassMatcher{
																															pos:        position{line: 2899, col: 11, offset: 96188},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2915, col: 8, offset: 96511},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2908, col: 12, offset: 96371},
																															run: (*parser).callonListElementContinuationElement1610,
																															expr: &choiceExpr{
																																pos: position{line: 2908, col: 13, offset: 96372},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2908, col: 13, offset: 96372},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2908, col: 20, offset: 96379},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2908, col: 29, offset: 96388},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2912, col: 8, offset: 96461},
																															expr: &anyMatcher{
																																line: 2912, col: 9, offset: 96462,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2715, col: 5, offset: 90220},
																									val:        "|",
																									ignoreCase: false,
																									want:       "\"|\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2715, col: 9, offset: 90224},
																									expr: &actionExpr{
																										pos: position{line: 2899, col: 10, offset: 96187},
																										run: (*parser).callonListElementContinuationElement1619,
																										expr: &charClassMatcher{
																											pos:        position{line: 2899, col: 11, offset: 96188},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2715, col: 16, offset: 90231},
																									label: "content",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 2715, col: 25, offset: 90240},
																										expr: &actionExpr{
																											pos: position{line: 2721, col: 5, offset: 90383},
																											run: (*parser).callonListElementContinuationElement1623,
																											expr: &labeledExpr{
																												pos:   position{line: 2721, col: 5, offset: 90383},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 2721, col: 14, offset: 90392},
																													run: (*parser).callonListElementContinuationElement1625,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2721, col: 14, offset: 90392},
																														expr: &charClassMatcher{
																															pos:        position{line: 2721, col: 14, offset: 90392},
																															val:        "[^\\r\\n|]",
																															chars:      []rune{'\r', '\n', '|'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonListElementContinuationElement1629,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2698, col: 5, offset: 89809},
																				expr: &actionExpr{
																					pos: position{line: 685, col: 14, offset: 22145},
																					run: (*parser).callonListElementContinuationElement1637,
																					expr: &seqExpr{
																						pos: position{line: 685, col: 14, offset: 22145},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 685, col: 14, offset: 22145},
																								expr: &notExpr{
																									pos: position{line: 2912, col: 8, offset: 96461},
																									expr: &anyMatcher{
																										line: 2912, col: 9, offset: 96462,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 685, col: 19, offset: 22150},
																								expr: &actionExpr{
																									pos: position{line: 2899, col: 10, offset: 96187},
																									run: (*parser).callonListElementContinuationElement1643,
																									expr: &charClassMatcher{
																										pos:        position{line: 2899, col: 11, offset: 96188},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement1646,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2678, col: 22, offset: 89360},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2674, col: 19, offset: 89280},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2674, col: 19, offset: 89280},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2674, col: 26, offset: 89287},
																	expr: &actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonListElementContinuationElement1657,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElementContinuationElement1660,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2616, col: 22, offset: 87547},
										run: (*parser).callonListElementContinuationElement1669,
										expr: &seqExpr{
											pos: position{line: 2616, col: 22, offset: 87547},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2621, col: 31, offset: 87768},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2621, col: 36, offset: 87773},
													expr: &litMatcher{
														pos:        position{line: 2621, col: 37, offset: 87774},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2616, col: 49, offset: 87574},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2623, col: 29, offset: 87809},
														run: (*parser).callonListElementContinuationElement1675,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2623, col: 29, offset: 87809},
															expr: &charClassMatcher{
																pos:        position{line: 2623, col: 29, offset: 87809},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonListElementContinuationElement1679,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1704, col: 5, offset: 56077},
										run: (*parser).callonListElementContinuationElement1686,
										expr: &seqExpr{
											pos: position{line: 1704, col: 5, offset: 56077},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1704, col: 5, offset: 56077},
													label: "kind",
													expr: &choiceExpr{
														pos: position{line: 301, col: 19, offset: 9383},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 301, col: 19, offset: 9383},
																run: (*parser).callonListElementContinuationElement1690,
																expr: &litMatcher{
																	pos:        position{line: 301, col: 19, offset: 9383},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 303, col: 5, offset: 9421},
																run: (*parser).callonListElementContinuationElement1692,
																expr: &litMatcher{
																	pos:        position{line: 303, col: 5, offset: 9421},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 305, col: 5, offset: 9461},
																run: (*parser).callonListElementContinuationElement1694,
																expr: &litMatcher{
																	pos:        position{line: 305, col: 5, offset: 9461},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 307, col: 5, offset: 9511},
																run: (*parser).callonListElementContinuationElement1696,
																expr: &litMatcher{
																	pos:        position{line: 307, col: 5, offset: 9511},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 309, col: 5, offset: 9557},
																run: (*parser).callonListElementContinuationElement1698,
																expr: &litMatcher{
																	pos:        position{line: 309, col: 5, offset: 9557},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1704, col: 27, offset: 56099},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 1705, col: 5, offset: 56109},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1716, col: 5, offset: 56453},
														run: (*parser).callonListElementContinuationElement1702,
														expr: &seqExpr{
															pos: position{line: 1716, col: 5, offset: 56453},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1716, col: 5, offset: 56453},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1716, col: 14, offset: 56462},
																		run: (*parser).callonListElementContinuationElement1705,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1716, col: 14, offset: 56462},
																			expr: &charClassMatcher{
																				pos:        position{line: 1716, col: 14, offset: 56462},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1719, col: 5, offset: 56569},
																	run: (*parser).callonListElementContinuationElement1708,
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElementContinuationElement1710,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1706, col: 5, offset: 56143},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1706, col: 16, offset: 56154},
														expr: &actionExpr{
															pos: position{line: 1707, col: 9, offset: 56164},
															run: (*parser).callonListElementContinuationElement1719,
															expr: &seqExpr{
																pos: position{line: 1707, col: 9, offset: 56164},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1707, col: 9, offset: 56164},
																		expr: &seqExpr{
																			pos: position{line: 1444, col: 34, offset: 47455},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1444, col: 34, offset: 47455},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1444, col: 38, offset: 47459},
																					expr: &actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonListElementContinuationElement1725,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonListElementContinuationElement1727,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1708, col: 9, offset: 56203},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1708, col: 15, offset: 56209},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2616, col: 22, offset: 87547},
																					run: (*parser).callonListElementContinuationElement1734,
																					expr: &seqExpr{
																						pos: position{line: 2616, col: 22, offset: 87547},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2621, col: 31, offset: 87768},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2621, col: 36, offset: 87773},
																								expr: &litMatcher{
																									pos:        position{line: 2621, col: 37, offset: 87774},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2616, col: 49, offset: 87574},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2623, col: 29, offset: 87809},
																									run: (*parser).callonListElementContinuationElement1740,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2623, col: 29, offset: 87809},
																										expr: &charClassMatcher{
																											pos:        position{line: 2623, col: 29, offset: 87809},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement1744,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1716, col: 5, offset: 56453},
																					run: (*parser).callonListElementContinuationElement1751,
																					expr: &seqExpr{
																						pos: position{line: 1716, col: 5, offset: 56453},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1716, col: 5, offset: 56453},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1716, col: 14, offset: 56462},
																									run: (*parser).callonListElementContinuationElement1754,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1716, col: 14, offset: 56462},
																										expr: &charClassMatcher{
																											pos:        position{line: 1716, col: 14, offset: 56462},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1719, col: 5, offset: 56569},
																								run: (*parser).callonListElementContinuationElement1757,
																							},
																							&choiceExpr{
																								pos: position{line: 2915, col: 8, offset: 96511},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2908, col: 12, offset: 96371},
																										run: (*parser).callonListElementContinuationElement1759,
																										expr: &choiceExpr{
																											pos: position{line: 2908, col: 13, offset: 96372},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2908, col: 13, offset: 96372},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 20, offset: 96379},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2908, col: 29, offset: 96388},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2912, col: 8, offset: 96461},
																										expr: &anyMatcher{
																											line: 2912, col: 9, offset: 96462,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1727, col: 5, offset: 56735},
										run: (*parser).callonListElementContinuationElement1766,
										expr: &seqExpr{
											pos: position{line: 1727, col: 5, offset: 56735},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1727, col: 5, offset: 56735},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1734, col: 5, offset: 57020},
														run: (*parser).callonListElementContinuationElement1769,
														expr: &seqExpr{
															pos: position{line: 1734, col: 5, offset: 57020},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1734, col: 5, offset: 57020},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1734, col: 14, offset: 57029},
																		run: (*parser).callonListElementContinuationElement1772,
																		expr: &seqExpr{
																			pos: position{line: 1734, col: 14, offset: 57029},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 2903, col: 11, offset: 96254},
																					run: (*parser).callonListElementContinuationElement1774,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2903, col: 11, offset: 96254},
																						expr: &charClassMatcher{
																							pos:        position{line: 2903, col: 12, offset: 96255},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1734, col: 21, offset: 57036},
																					expr: &charClassMatcher{
																						pos:        position{line: 1734, col: 21, offset: 57036},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1737, col: 5, offset: 57093},
																	run: (*parser).callonListElementContinuationElement1779,
																},
																&choiceExpr{
																	pos: position{line: 2915, col: 8, offset: 96511},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2908, col: 12, offset: 96371},
																			run: (*parser).callonListElementContinuationElement1781,
																			expr: &choiceExpr{
																				pos: position{line: 2908, col: 13, offset: 96372},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2908, col: 13, offset: 96372},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 20, offset: 96379},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2908, col: 29, offset: 96388},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2912, col: 8, offset: 96461},
																			expr: &anyMatcher{
																				line: 2912, col: 9, offset: 96462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1728, col: 5, offset: 56776},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1728, col: 16, offset: 56787},
														expr: &choiceExpr{
															pos: position{line: 1728, col: 17, offset: 56788},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2616, col: 22, offset: 87547},
																	run: (*parser).callonListElementContinuationElement1791,
																	expr: &seqExpr{
																		pos: position{line: 2616, col: 22, offset: 87547},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2621, col: 31, offset: 87768},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&notExpr{
																				pos: position{line: 2621, col: 36, offset: 87773},
																				expr: &litMatcher{
																					pos:        position{line: 2621, col: 37, offset: 87774},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2616, col: 49, offset: 87574},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2623, col: 29, offset: 87809},
																					run: (*parser).callonListElementContinuationElement1797,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 2623, col: 29, offset: 87809},
																						expr: &charClassMatcher{
																							pos:        position{line: 2623, col: 29, offset: 87809},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonListElementContinuationElement1801,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1716, col: 5, offset: 56453},
																	run: (*parser).callonListElementContinuationElement1808,
																	expr: &seqExpr{
																		pos: position{line: 1716, col: 5, offset: 56453},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1716, col: 5, offset: 56453},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1716, col: 14, offset: 56462},
																					run: (*parser).callonListElementContinuationElement1811,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1716, col: 14, offset: 56462},
																						expr: &charClassMatcher{
																							pos:        position{line: 1716, col: 14, offset: 56462},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1719, col: 5, offset: 56569},
																				run: (*parser).callonListElementContinuationElement1814,
																			},
																			&choiceExpr{
																				pos: position{line: 2915, col: 8, offset: 96511},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2908, col: 12, offset: 96371},
																						run: (*parser).callonListElementContinuationElement1816,
																						expr: &choiceExpr{
																							pos: position{line: 2908, col: 13, offset: 96372},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2908, col: 13, offset: 96372},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 20, offset: 96379},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2908, col: 29, offset: 96388},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1474, col: 5, offset: 48436},
										run: (*parser).callonListElementContinuationElement1823,
										expr: &seqExpr{
											pos: position{line: 1474, col: 5, offset: 48436},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1474, col: 5, offset: 48436},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1474, col: 14, offset: 48445},
														run: (*parser).callonListElementContinuationElement1826,
														expr: &oneOrMoreExpr{
															pos: position{line: 1474, col: 14, offset: 48445},
															expr: &charClassMatcher{
																pos:        position{line: 1474, col: 14, offset: 48445},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2915, col: 8, offset: 96511},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonListElementContinuationElement1830,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2912, col: 8, offset: 96461},
															expr: &anyMatcher{
																line: 2912, col: 9, offset: 96462,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1632, col: 1, offset: 53618},
			expr: &actionExpr{
				pos: position{line: 1634, col: 5, offset: 53696},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1634, col: 5, offset: 53696},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1634, col: 5, offset: 53696},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1637, col: 5, offset: 53763},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1637, col: 9, offset: 53767},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1637, col: 14, offset: 53772},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1637, col: 14, offset: 53772},
									expr: &charClassMatcher{
										pos:        position{line: 1637, col: 14, offset: 53772},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1637, col: 62, offset: 53820},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1637, col: 66, offset: 53824},
							expr: &actionExpr{
								pos: position{line: 2899, col: 10, offset: 96187},
								run: (*parser).callonCallout11,
								expr: &charClassMatcher{
									pos:        position{line: 2899, col: 11, offset: 96188},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andExpr{
							pos: position{line: 1637, col: 73, offset: 53831},
							expr: &choiceExpr{
								pos: position{line: 1637, col: 75, offset: 53833},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2908, col: 12, offset: 96371},
										run: (*parser).callonCallout15,
										expr: &choiceExpr{
											pos: position{line: 2908, col: 13, offset: 96372},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2908, col: 13, offset: 96372},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2908, col: 20, offset: 96379},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2908, col: 29, offset: 96388},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2912, col: 8, offset: 96461},
										expr: &anyMatcher{
											line: 2912, col: 9, offset: 96462,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1637, col: 81, offset: 53839},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortcutParagraph",
			pos:  position{line: 1663, col: 1, offset: 54700},
			expr: &actionExpr{
				pos: position{line: 1664, col: 5, offset: 54726},
				run: (*parser).callonShortcutParagraph1,
				expr: &seqExpr{
					pos: position{line: 1664, col: 5, offset: 54726},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1664, col: 5, offset: 54726},
							expr: &charClassMatcher{
								pos:        position{line: 2813, col: 13, offset: 93503},
								val:        "[0-9\\pL]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1665, col: 5, offset: 54837},
							expr: &notExpr{
								pos: position{line: 1665, col: 7, offset: 54839},
								expr: &actionExpr{
									pos: position{line: 1492, col: 5, offset: 48929},
									run: (*parser).callonShortcutParagraph7,
									expr: &seqExpr{
										pos: position{line: 1492, col: 5, offset: 48929},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1492, col: 5, offset: 48929},
												expr: &actionExpr{
													pos: position{line: 2899, col: 10, offset: 96187},
													run: (*parser).callonShortcutParagraph10,
													expr: &charClassMatcher{
														pos:        position{line: 2899, col: 11, offset: 96188},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1492, col: 12, offset: 48936},
												label: "prefix",
												expr: &choiceExpr{
													pos: position{line: 1494, col: 9, offset: 48999},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1494, col: 9, offset: 48999},
															run: (*parser).callonShortcutParagraph14,
															expr: &seqExpr{
																pos: position{line: 1494, col: 9, offset: 48999},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1494, col: 9, offset: 48999},
																		label: "depth",
																		expr: &actionExpr{
																			pos: position{line: 1494, col: 16, offset: 49006},
																			run: (*parser).callonShortcutParagraph17,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1494, col: 16, offset: 49006},
																				expr: &litMatcher{
																					pos:        position{line: 1494, col: 17, offset: 49007},
																					val:        ".",
																					ignoreCase: false,
																					want:       "\".\"",
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1498, col: 9, offset: 49107},
																		run: (*parser).callonShortcutParagraph20,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1517, col: 11, offset: 49824},
															run: (*parser).callonShortcutParagraph21,
															expr: &seqExpr{
																pos: position{line: 1517, col: 11, offset: 49824},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1517, col: 11, offset: 49824},
																		expr: &charClassMatcher{
																			pos:        position{line: 1517, col: 12, offset: 49825},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1517, col: 20, offset: 49833},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1519, col: 13, offset: 49950},
															run: (*parser).callonShortcutParagraph26,
															expr: &seqExpr{
																pos: position{line: 1519, col: 13, offset: 49950},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1519, col: 14, offset: 49951},
																		val:        "[a-z]",
																		ranges:     []rune{'a', 'z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&litMatcher{
																		pos:        position{line: 1519, col: 21, offset: 49958},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1521, col: 13, offset: 50078},
															run: (*parser).callonShortcutParagraph30,
															expr: &seqExpr{
																pos: position{line: 1521, col: 13, offset: 50078},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1521, col: 14, offset: 50079},
																		val:        "[A-Z]",
																		ranges:     []rune{'A', 'Z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&litMatcher{
																		pos:        position{line: 1521, col: 21, offset: 50086},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1523, col: 13, offset: 50206},
															run: (*parser).callonShortcutParagraph34,
															expr: &seqExpr{
																pos: position{line: 1523, col: 13, offset: 50206},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1523, col: 13, offset: 50206},
																		expr: &charClassMatcher{
																			pos:        position{line: 1523, col: 14, offset: 50207},
																			val:        "[ivxdlcm]",
																			chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1523, col: 26, offset: 50219},
																		val:        ")",
																		ignoreCase: false,
																		want:       "\")\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1525, col: 13, offset: 50339},
															run: (*parser).callonShortcutParagraph39,
															expr: &seqExpr{
																pos: position{line: 1525, col: 13, offset: 50339},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1525, col: 13, offset: 50339},
																		expr: &charClassMatcher{
																			pos:        position{line: 1525, col: 14, offset: 50340},
																			val:        "[IVXDLCM]",
																			chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1525, col: 26, offset: 50352},
																		val:        ")",
																		ignoreCase: false,
																		want:       "\")\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2903, col: 11, offset: 96254},
												run: (*parser).callonShortcutParagraph44,
												expr: &oneOrMoreExpr{
													pos: position{line: 2903, col: 11, offset: 96254},
													expr: &charClassMatcher{
														pos:        position{line: 2903, col: 12, offset: 96255},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1666, col: 5, offset: 54870},
							expr: &notExpr{
								pos: position{line: 1666, col: 7, offset: 54872},
								expr: &actionExpr{
									pos: position{line: 1542, col: 5, offset: 50891},
									run: (*parser).callonShortcutParagraph49,
									expr: &seqExpr{
										pos: position{line: 1542, col: 5, offset: 50891},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1542, col: 5, offset: 50891},
												expr: &actionExpr{
													pos: position{line: 2899, col: 10, offset: 96187},
													run: (*parser).callonShortcutParagraph52,
													expr: &charClassMatcher{
														pos:        position{line: 2899, col: 11, offset: 96188},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1542, col: 12, offset: 50898},
												label: "prefix",
												expr: &choiceExpr{
													pos: position{line: 1542, col: 20, offset: 50906},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1544, col: 9, offset: 50963},
															run: (*parser).callonShortcutParagraph56,
															expr: &seqExpr{
																pos: position{line: 1544, col: 9, offset: 50963},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1544, col: 9, offset: 50963},
																		label: "depth",
																		expr: &actionExpr{
																			pos: position{line: 1544, col: 16, offset: 50970},
																			run: (*parser).callonShortcutParagraph59,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1544, col: 16, offset: 50970},
																				expr: &litMatcher{
																					pos:        position{line: 1544, col: 17, offset: 50971},
																					val:        "*",
																					ignoreCase: false,
																					want:       "\"*\"",
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1548, col: 9, offset: 51071},
																		run: (*parser).callonShortcutParagraph62,
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 1565, col: 14, offset: 51778},
															label: "depth",
															expr: &actionExpr{
																pos: position{line: 1565, col: 21, offset: 51785},
																run: (*parser).callonShortcutParagraph64,
																expr: &litMatcher{
																	pos:        position{line: 1565, col: 22, offset: 51786},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2903, col: 11, offset: 96254},
												run: (*parser).callonShortcutParagraph66,
												expr: &oneOrMoreExpr{
													pos: position{line: 2903, col: 11, offset: 96254},
													expr: &charClassMatcher{
														pos:        position{line: 2903, col: 12, offset: 96255},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1667, col: 5, offset: 54905},
							expr: &notExpr{
								pos: position{line: 1667, col: 7, offset: 54907},
								expr: &choiceExpr{
									pos: position{line: 301, col: 19, offset: 9383},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 301, col: 19, offset: 9383},
											run: (*parser).callonShortcutParagraph72,
											expr: &litMatcher{
												pos:        position{line: 301, col: 19, offset: 9383},
												val:        "TIP",
												ignoreCase: false,
												want:       "\"TIP\"",
											},
										},
										&actionExpr{
											pos: position{line: 303, col: 5, offset: 9421},
											run: (*parser).callonShortcutParagraph74,
											expr: &litMatcher{
												pos:        position{line: 303, col: 5, offset: 9421},
												val:        "NOTE",
												ignoreCase: false,
												want:       "\"NOTE\"",
											},
										},
										&actionExpr{
											pos: position{line: 305, col: 5, offset: 9461},
											run: (*parser).callonShortcutParagraph76,
											expr: &litMatcher{
												pos:        position{line: 305, col: 5, offset: 9461},
												val:        "IMPORTANT",
												ignoreCase: false,
												want:       "\"IMPORTANT\"",
											},
										},
										&actionExpr{
											pos: position{line: 307, col: 5, offset: 9511},
											run: (*parser).callonShortcutParagraph78,
											expr: &litMatcher{
												pos:        position{line: 307, col: 5, offset: 9511},
												val:        "WARNING",
												ignoreCase: false,
												want:       "\"WARNING\"",
											},
										},
										&actionExpr{
											pos: position{line: 309, col: 5, offset: 9557},
											run: (*parser).callonShortcutParagraph80,
											expr: &litMatcher{
												pos:        position{line: 309, col: 5, offset: 9557},
												val:        "CAUTION",
												ignoreCase: false,
												want:       "\"CAUTION\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 5, offset: 54928},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1716, col: 5, offset: 56453},
								run: (*parser).callonShortcutParagraph83,
								expr: &seqExpr{
									pos: position{line: 1716, col: 5, offset: 56453},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1716, col: 5, offset: 56453},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 1716, col: 14, offset: 56462},
												run: (*parser).callonShortcutParagraph86,
												expr: &oneOrMoreExpr{
													pos: position{line: 1716, col: 14, offset: 56462},
													expr: &charClassMatcher{
														pos:        position{line: 1716, col: 14, offset: 56462},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1719, col: 5, offset: 56569},
											run: (*parser).callonShortcutParagraph89,
										},
										&choiceExpr{
											pos: position{line: 2915, col: 8, offset: 96511},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonShortcutParagraph91,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1669, col: 5, offset: 54962},
							run: (*parser).callonShortcutParagraph98,
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 5, offset: 55324},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1676, col: 16, offset: 55335},
								expr: &actionExpr{
									pos: position{line: 1677, col: 9, offset: 55345},
									run: (*parser).callonShortcutParagraph101,
									expr: &seqExpr{
										pos: position{line: 1677, col: 9, offset: 55345},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1677, col: 9, offset: 55345},
												expr: &notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
											&notExpr{
												pos: position{line: 1678, col: 9, offset: 55359},
												expr: &actionExpr{
													pos: position{line: 685, col: 14, offset: 22145},
													run: (*parser).callonShortcutParagraph107,
													expr: &seqExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 685, col: 14, offset: 22145},
																expr: &notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 685, col: 19, offset: 22150},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonShortcutParagraph113,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonShortcutParagraph116,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1679, col: 9, offset: 55378},
												expr: &ruleRefExpr{
													pos:  position{line: 1679, col: 10, offset: 55379},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1680, col: 9, offset: 55403},
												expr: &seqExpr{
													pos: position{line: 1444, col: 34, offset: 47455},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1444, col: 34, offset: 47455},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1444, col: 38, offset: 47459},
															expr: &actionExpr{
																pos: position{line: 2899, col: 10, offset: 96187},
																run: (*parser).callonShortcutParagraph129,
																expr: &charClassMatcher{
																	pos:        position{line: 2899, col: 11, offset: 96188},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonShortcutParagraph131,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1681, col: 9, offset: 55442},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1681, col: 15, offset: 55448},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2616, col: 22, offset: 87547},
															run: (*parser).callonShortcutParagraph138,
															expr: &seqExpr{
																pos: position{line: 2616, col: 22, offset: 87547},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2621, col: 31, offset: 87768},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2621, col: 36, offset: 87773},
																		expr: &litMatcher{
																			pos:        position{line: 2621, col: 37, offset: 87774},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2616, col: 49, offset: 87574},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2623, col: 29, offset: 87809},
																			run: (*parser).callonShortcutParagraph144,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2623, col: 29, offset: 87809},
																				expr: &charClassMatcher{
																					pos:        position{line: 2623, col: 29, offset: 87809},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonShortcutParagraph148,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1716, col: 5, offset: 56453},
															run: (*parser).callonShortcutParagraph155,
															expr: &seqExpr{
																pos: position{line: 1716, col: 5, offset: 56453},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1716, col: 5, offset: 56453},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1716, col: 14, offset: 56462},
																			run: (*parser).callonShortcutParagraph158,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1716, col: 14, offset: 56462},
																				expr: &charClassMatcher{
																					pos:        position{line: 1716, col: 14, offset: 56462},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1719, col: 5, offset: 56569},
																		run: (*parser).callonShortcutParagraph161,
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonShortcutParagraph163,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1688, col: 1, offset: 55645},
			expr: &actionExpr{
				pos: position{line: 1689, col: 5, offset: 55663},
				run: (*parser).callonParagraph1,
				expr: &seqExpr{
					pos: position{line: 1689, col: 5, offset: 55663},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1689, col: 5, offset: 55663},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1716, col: 5, offset: 56453},
								run: (*parser).callonParagraph4,
								expr: &seqExpr{
									pos: position{line: 1716, col: 5, offset: 56453},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1716, col: 5, offset: 56453},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 1716, col: 14, offset: 56462},
												run: (*parser).callonParagraph7,
												expr: &oneOrMoreExpr{
													pos: position{line: 1716, col: 14, offset: 56462},
													expr: &charClassMatcher{
														pos:        position{line: 1716, col: 14, offset: 56462},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1719, col: 5, offset: 56569},
											run: (*parser).callonParagraph10,
										},
										&choiceExpr{
											pos: position{line: 2915, col: 8, offset: 96511},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonParagraph12,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1690, col: 5, offset: 55697},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1690, col: 16, offset: 55708},
								expr: &actionExpr{
									pos: position{line: 1691, col: 9, offset: 55718},
									run: (*parser).callonParagraph21,
									expr: &seqExpr{
										pos: position{line: 1691, col: 9, offset: 55718},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1691, col: 9, offset: 55718},
												expr: &notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
											&notExpr{
												pos: position{line: 1692, col: 9, offset: 55731},
												expr: &actionExpr{
													pos: position{line: 685, col: 14, offset: 22145},
													run: (*parser).callonParagraph27,
													expr: &seqExpr{
														pos: position{line: 685, col: 14, offset: 22145},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 685, col: 14, offset: 22145},
																expr: &notExpr{
																	pos: position{line: 2912, col: 8, offset: 96461},
																	expr: &anyMatcher{
																		line: 2912, col: 9, offset: 96462,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 685, col: 19, offset: 22150},
																expr: &actionExpr{
																	pos: position{line: 2899, col: 10, offset: 96187},
																	run: (*parser).callonParagraph33,
																	expr: &charClassMatcher{
																		pos:        position{line: 2899, col: 11, offset: 96188},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonParagraph36,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1693, col: 9, offset: 55750},
												expr: &ruleRefExpr{
													pos:  position{line: 1693, col: 10, offset: 55751},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1694, col: 9, offset: 55775},
												expr: &seqExpr{
													pos: position{line: 1444, col: 34, offset: 47455},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1444, col: 34, offset: 47455},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1444, col: 38, offset: 47459},
															expr: &actionExpr{
																pos: position{line: 2899, col: 10, offset: 96187},
																run: (*parser).callonParagraph49,
																expr: &charClassMatcher{
																	pos:        position{line: 2899, col: 11, offset: 96188},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonParagraph51,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1695, col: 9, offset: 55814},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1695, col: 15, offset: 55820},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2616, col: 22, offset: 87547},
															run: (*parser).callonParagraph58,
															expr: &seqExpr{
																pos: position{line: 2616, col: 22, offset: 87547},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2621, col: 31, offset: 87768},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2621, col: 36, offset: 87773},
																		expr: &litMatcher{
																			pos:        position{line: 2621, col: 37, offset: 87774},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2616, col: 49, offset: 87574},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2623, col: 29, offset: 87809},
																			run: (*parser).callonParagraph64,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2623, col: 29, offset: 87809},
																				expr: &charClassMatcher{
																					pos:        position{line: 2623, col: 29, offset: 87809},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonParagraph68,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1716, col: 5, offset: 56453},
															run: (*parser).callonParagraph75,
															expr: &seqExpr{
																pos: position{line: 1716, col: 5, offset: 56453},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1716, col: 5, offset: 56453},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1716, col: 14, offset: 56462},
																			run: (*parser).callonParagraph78,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1716, col: 14, offset: 56462},
																				expr: &charClassMatcher{
																					pos:        position{line: 1716, col: 14, offset: 56462},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1719, col: 5, offset: 56569},
																		run: (*parser).callonParagraph81,
																	},
																	&choiceExpr{
																		pos: position{line: 2915, col: 8, offset: 96511},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonParagraph83,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2912, col: 8, offset: 96461},
																				expr: &anyMatcher{
																					line: 2912, col: 9, offset: 96462,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1747, col: 1, offset: 57555},
			expr: &choiceExpr{
				pos: position{line: 1748, col: 5, offset: 57574},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1749, col: 9, offset: 57584},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1749, col: 9, offset: 57584},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1749, col: 9, offset: 57584},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1749, col: 20, offset: 57595},
										expr: &ruleRefExpr{
											pos:  position{line: 1749, col: 21, offset: 57596},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1750, col: 9, offset: 57722},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1750, col: 15, offset: 57728},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1750, col: 15, offset: 57728},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1750, col: 41, offset: 57754},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1754, col: 7, offset: 57873},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1760, col: 1, offset: 58064},
			expr: &choiceExpr{
				pos: position{line: 1761, col: 5, offset: 58094},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1761, col: 5, offset: 58094},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1762, col: 7, offset: 58121},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1763, col: 7, offset: 58149},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1764, col: 7, offset: 58177},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1765, col: 7, offset: 58209},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1766, col: 7, offset: 58230},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1768, col: 1, offset: 58248},
			expr: &choiceExpr{
				pos: position{line: 1769, col: 5, offset: 58280},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1769, col: 5, offset: 58280},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1770, col: 7, offset: 58306},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1771, col: 7, offset: 58334},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1772, col: 7, offset: 58362},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1774, col: 1, offset: 58388},
			expr: &actionExpr{
				pos: position{line: 1775, col: 5, offset: 58469},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1775, col: 5, offset: 58469},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1775, col: 5, offset: 58469},
							expr: &litMatcher{
								pos:        position{line: 1775, col: 7, offset: 58471},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1776, col: 5, offset: 58480},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1777, col: 9, offset: 58498},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1777, col: 9, offset: 58498},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1778, col: 11, offset: 58525},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1779, col: 11, offset: 58553},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1780, col: 11, offset: 58581},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1781, col: 11, offset: 58613},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1782, col: 11, offset: 58645},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1802, col: 1, offset: 59172},
			expr: &choiceExpr{
				pos: position{line: 1802, col: 13, offset: 59184},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1802, col: 13, offset: 59184},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1802, col: 35, offset: 59206},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1816, col: 1, offset: 59568},
			expr: &actionExpr{
				pos: position{line: 1817, col: 5, offset: 59596},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1817, col: 5, offset: 59596},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1814, col: 33, offset: 59562},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1818, col: 5, offset: 59630},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1818, col: 15, offset: 59640},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1814, col: 33, offset: 59562},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1823, col: 1, offset: 59797},
			expr: &oneOrMoreExpr{
				pos: position{line: 1823, col: 32, offset: 59828},
				expr: &ruleRefExpr{
					pos:  position{line: 1823, col: 32, offset: 59828},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1825, col: 1, offset: 59859},
			expr: &actionExpr{
				pos: position{line: 1826, col: 5, offset: 59894},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1826, col: 5, offset: 59894},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1826, col: 5, offset: 59894},
							expr: &litMatcher{
								pos:        position{line: 1814, col: 33, offset: 59562},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1827, col: 5, offset: 59928},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1828, col: 9, offset: 59946},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1807, col: 5, offset: 59320},
										run: (*parser).callonDoubleQuoteBoldTextElement7,
										expr: &seqExpr{
											pos: position{line: 1807, col: 5, offset: 59320},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1807, col: 5, offset: 59320},
													expr: &charClassMatcher{
														pos:        position{line: 1807, col: 5, offset: 59320},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1807, col: 19, offset: 59334},
													expr: &choiceExpr{
														pos: position{line: 1807, col: 21, offset: 59336},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2899, col: 10, offset: 96187},
																run: (*parser).callonDoubleQuoteBoldTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2899, col: 11, offset: 96188},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1804, col: 22, offset: 59294},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2903, col: 11, offset: 96254},
										run: (*parser).callonDoubleQuoteBoldTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2903, col: 11, offset: 96254},
											expr: &charClassMatcher{
												pos:        position{line: 2903, col: 12, offset: 96255},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1830, col: 11, offset: 60019},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2908, col: 12, offset: 96371},
												run: (*parser).callonDoubleQuoteBoldTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2908, col: 13, offset: 96372},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2908, col: 13, offset: 96372},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 20, offset: 96379},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 29, offset: 96388},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1830, col: 19, offset: 60027},
												expr: &actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonDoubleQuoteBoldTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 651, col: 5, offset: 21000},
										run: (*parser).callonDoubleQuoteBoldTextElement31,
										expr: &seqExpr{
											pos: position{line: 651, col: 5, offset: 21000},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 651, col: 5, offset: 21000},
													run: (*parser).callonDoubleQuoteBoldTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 654, col: 5, offset: 21069},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 654, col: 14, offset: 21078},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 666, col: 25, offset: 21447},
																run: (*parser).callonDoubleQuoteBoldTextElement36,
																expr: &seqExpr{
																	pos: position{line: 666, col: 25, offset: 21447},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 666, col: 25, offset: 21447},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 37, offset: 21459},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteBoldTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 56, offset: 21478},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 666, col: 62, offset: 21484},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonDoubleQuoteBoldTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonDoubleQuoteBoldTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonDoubleQuoteBoldTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 666, col: 78, offset: 21500},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 670, col: 25, offset: 21618},
																run: (*parser).callonDoubleQuoteBoldTextElement58,
																expr: &seqExpr{
																	pos: position{line: 670, col: 25, offset: 21618},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 670, col: 25, offset: 21618},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 38, offset: 21631},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteBoldTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 57, offset: 21650},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 670, col: 63, offset: 21656},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonDoubleQuoteBoldTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonDoubleQuoteBoldTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonDoubleQuoteBoldTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 670, col: 79, offset: 21672},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 659, col: 5, offset: 21191},
																run: (*parser).callonDoubleQuoteBoldTextElement80,
																expr: &seqExpr{
																	pos: position{line: 659, col: 5, offset: 21191},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 659, col: 5, offset: 21191},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 659, col: 9, offset: 21195},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteBoldTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 659, col: 28, offset: 21214},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1832, col: 11, offset: 60109},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2599, col: 5, offset: 86909},
										run: (*parser).callonDoubleQuoteBoldTextElement91,
										expr: &seqExpr{
											pos: position{line: 2599, col: 5, offset: 86909},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2599, col: 5, offset: 86909},
													run: (*parser).callonDoubleQuoteBoldTextElement93,
												},
												&labeledExpr{
													pos:   position{line: 2602, col: 5, offset: 86985},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2604, col: 9, offset: 87083},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2604, col: 9, offset: 87083},
																run: (*parser).callonDoubleQuoteBoldTextElement96,
																expr: &choiceExpr{
																	pos: position{line: 694, col: 27, offset: 22498},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 694, col: 27, offset: 22498},
																			run: (*parser).callonDoubleQuoteBoldTextElement98,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 27, offset: 22498},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 27, offset: 22498},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 32, offset: 22503},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonDoubleQuoteBoldTextElement102,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 694, col: 40, offset: 22511},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonDoubleQuoteBoldTextElement106,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 47, offset: 22518},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 51, offset: 22522},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 704, col: 24, offset: 22923},
																							expr: &choiceExpr{
																								pos: position{line: 705, col: 5, offset: 22929},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 705, col: 6, offset: 22930},
																										run: (*parser).callonDoubleQuoteBoldTextElement112,
																										expr: &seqExpr{
																											pos: position{line: 705, col: 6, offset: 22930},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 705, col: 6, offset: 22930},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 705, col: 14, offset: 22938},
																													expr: &charClassMatcher{
																														pos:        position{line: 705, col: 14, offset: 22938},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 659, col: 5, offset: 21191},
																										run: (*parser).callonDoubleQuoteBoldTextElement117,
																										expr: &seqExpr{
																											pos: position{line: 659, col: 5, offset: 21191},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 659, col: 5, offset: 21191},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 659, col: 9, offset: 21195},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonDoubleQuoteBoldTextElement121,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 659, col: 28, offset: 21214},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 709, col: 8, offset: 23164},
																										run: (*parser).callonDoubleQuoteBoldTextElement127,
																										expr: &litMatcher{
																											pos:        position{line: 709, col: 8, offset: 23164},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 79, offset: 22550},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 696, col: 9, offset: 22623},
																			run: (*parser).callonDoubleQuoteBoldTextElement130,
																			expr: &seqExpr{
																				pos: position{line: 696, col: 9, offset: 22623},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 696, col: 9, offset: 22623},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 696, col: 14, offset: 22628},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonDoubleQuoteBoldTextElement134,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 696, col: 22, offset: 22636},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2607, col: 11, offset: 87187},
																run: (*parser).callonDoubleQuoteBoldTextElement138,
																expr: &charClassMatcher{
																	pos:        position{line: 2607, col: 12, offset: 87188},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2632, col: 15, offset: 88155},
										run: (*parser).callonDoubleQuoteBoldTextElement140,
										expr: &litMatcher{
											pos:        position{line: 2632, col: 15, offset: 88155},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 14, offset: 88270},
										run: (*parser).callonDoubleQuoteBoldTextElement142,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 14, offset: 88270},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2642, col: 14, offset: 88346},
										run: (*parser).callonDoubleQuoteBoldTextElement144,
										expr: &litMatcher{
											pos:        position{line: 2642, col: 14, offset: 88346},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 15, offset: 88424},
										run: (*parser).callonDoubleQuoteBoldTextElement146,
										expr: &litMatcher{
											pos:        position{line: 2646, col: 15, offset: 88424},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 13, offset: 88499},
										run: (*parser).callonDoubleQuoteBoldTextElement148,
										expr: &litMatcher{
											pos:        position{line: 2650, col: 13, offset: 88499},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2658, col: 22, offset: 88805},
										run: (*parser).callonDoubleQuoteBoldTextElement150,
										expr: &seqExpr{
											pos: position{line: 2658, col: 22, offset: 88805},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2813, col: 13, offset: 93503},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2658, col: 31, offset: 88814},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2658, col: 35, offset: 88818},
													expr: &charClassMatcher{
														pos:        position{line: 2658, col: 36, offset: 88819},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1835, col: 11, offset: 60225},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1836, col: 11, offset: 60248},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&actionExpr{
										pos: position{line: 1122, col: 23, offset: 34991},
										run: (*parser).callonDoubleQuoteBoldTextElement158,
										expr: &seqExpr{
											pos: position{line: 1122, col: 23, offset: 34991},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1120, col: 32, offset: 34959},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1122, col: 51, offset: 35019},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1122, col: 56, offset: 35024},
														run: (*parser).callonDoubleQuoteBoldTextElement162,
														expr: &oneOrMoreExpr{
															pos: position{line: 1122, col: 56, offset: 35024},
															expr: &charClassMatcher{
																pos:        position{line: 1122, col: 56, offset: 35024},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1120, col: 32, offset: 34959},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1855, col: 5, offset: 60760},
										val:        "[^\\r\\n*]",
										chars:      []rune{'\r', '\n', '*'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1856, col: 7, offset: 60857},
										run: (*parser).callonDoubleQuoteBoldTextElement167,
										expr: &seqExpr{
											pos: position{line: 1856, col: 7, offset: 60857},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1814, col: 33, offset: 59562},
													val:        "**",
													ignoreCase: false,
													want:       "\"**\"",
												},
												&actionExpr{
													pos: position{line: 2817, col: 14, offset: 93577},
													run: (*parser).callonDoubleQuoteBoldTextElement170,
													expr: &oneOrMoreExpr{
														pos: position{line: 2817, col: 14, offset: 93577},
														expr: &charClassMatcher{
															pos:        position{line: 2817, col: 14, offset: 93577},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1842, col: 1, offset: 60402},
			expr: &actionExpr{
				pos: position{line: 1843, col: 5, offset: 60442},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1843, col: 5, offset: 60442},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1843, col: 5, offset: 60442},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1843, col: 16, offset: 60453},
								expr: &ruleRefExpr{
									pos:  position{line: 1843, col: 17, offset: 60454},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1844, col: 5, offset: 60480},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1845, col: 9, offset: 60495},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1845, col: 9, offset: 60495},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1846, col: 11, offset: 60525},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1847, col: 11, offset: 60546},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1848, col: 11, offset: 60567},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1849, col: 11, offset: 60591},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1850, col: 11, offset: 60615},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1867, col: 1, offset: 61244},
			expr: &actionExpr{
				pos: position{line: 1868, col: 5, offset: 61272},
				run: (*parser).callonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1868, col: 5, offset: 61272},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1863, col: 38, offset: 61198},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&labeledExpr{
							pos:   position{line: 1869, col: 5, offset: 61310},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 15, offset: 61320},
								name: "SingleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1865, col: 36, offset: 61238},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1874, col: 1, offset: 61480},
			expr: &actionExpr{
				pos: position{line: 1875, col: 5, offset: 61517},
				run: (*parser).callonSingleQuoteBoldTextElements1,
				expr: &seqExpr{
					pos: position{line: 1875, col: 5, offset: 61517},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1875, col: 5, offset: 61517},
							expr: &notExpr{
								pos: position{line: 2912, col: 8, offset: 96461},
								expr: &anyMatcher{
									line: 2912, col: 9, offset: 96462,
								},
							},
						},
						&notExpr{
							pos: position{line: 1875, col: 10, offset: 61522},
							expr: &actionExpr{
								pos: position{line: 2899, col: 10, offset: 96187},
								run: (*parser).callonSingleQuoteBoldTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2899, col: 11, offset: 96188},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1876, col: 5, offset: 61561},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1876, col: 14, offset: 61570},
								expr: &ruleRefExpr{
									pos:  position{line: 1876, col: 15, offset: 61571},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1877, col: 5, offset: 61605},
							run: (*parser).callonSingleQuoteBoldTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1883, col: 1, offset: 61746},
			expr: &choiceExpr{
				pos: position{line: 1884, col: 5, offset: 61781},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1807, col: 5, offset: 59320},
						run: (*parser).callonSingleQuoteBoldTextElement2,
						expr: &seqExpr{
							pos: position{line: 1807, col: 5, offset: 59320},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1807, col: 5, offset: 59320},
									expr: &charClassMatcher{
										pos:        position{line: 1807, col: 5, offset: 59320},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1807, col: 19, offset: 59334},
									expr: &choiceExpr{
										pos: position{line: 1807, col: 21, offset: 59336},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonSingleQuoteBoldTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1804, col: 22, offset: 59294},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2903, col: 11, offset: 96254},
						run: (*parser).callonSingleQuoteBoldTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 2903, col: 11, offset: 96254},
							expr: &charClassMatcher{
								pos:        position{line: 2903, col: 12, offset: 96255},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 1886, col: 7, offset: 61813},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2908, col: 12, offset: 96371},
								run: (*parser).callonSingleQuoteBoldTextElement15,
								expr: &choiceExpr{
									pos: position{line: 2908, col: 13, offset: 96372},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2908, col: 13, offset: 96372},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2908, col: 20, offset: 96379},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2908, col: 29, offset: 96388},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1886, col: 15, offset: 61821},
								expr: &actionExpr{
									pos: position{line: 2908, col: 12, offset: 96371},
									run: (*parser).callonSingleQuoteBoldTextElement21,
									expr: &choiceExpr{
										pos: position{line: 2908, col: 13, offset: 96372},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2908, col: 13, offset: 96372},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 20, offset: 96379},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 29, offset: 96388},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 651, col: 5, offset: 21000},
						run: (*parser).callonSingleQuoteBoldTextElement26,
						expr: &seqExpr{
							pos: position{line: 651, col: 5, offset: 21000},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 651, col: 5, offset: 21000},
									run: (*parser).callonSingleQuoteBoldTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 654, col: 5, offset: 21069},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 654, col: 14, offset: 21078},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 666, col: 25, offset: 21447},
												run: (*parser).callonSingleQuoteBoldTextElement31,
												expr: &seqExpr{
													pos: position{line: 666, col: 25, offset: 21447},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 666, col: 25, offset: 21447},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 666, col: 37, offset: 21459},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteBoldTextElement35,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 666, col: 56, offset: 21478},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 666, col: 62, offset: 21484},
																expr: &actionExpr{
																	pos: position{line: 674, col: 17, offset: 21779},
																	run: (*parser).callonSingleQuoteBoldTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 674, col: 17, offset: 21779},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 674, col: 17, offset: 21779},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 674, col: 21, offset: 21783},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 674, col: 28, offset: 21790},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 674, col: 28, offset: 21790},
																							run: (*parser).callonSingleQuoteBoldTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 674, col: 28, offset: 21790},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 676, col: 9, offset: 21844},
																							run: (*parser).callonSingleQuoteBoldTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 676, col: 9, offset: 21844},
																								expr: &charClassMatcher{
																									pos:        position{line: 676, col: 9, offset: 21844},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 666, col: 78, offset: 21500},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 670, col: 25, offset: 21618},
												run: (*parser).callonSingleQuoteBoldTextElement53,
												expr: &seqExpr{
													pos: position{line: 670, col: 25, offset: 21618},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 670, col: 25, offset: 21618},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 670, col: 38, offset: 21631},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteBoldTextElement57,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 670, col: 57, offset: 21650},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 670, col: 63, offset: 21656},
																expr: &actionExpr{
																	pos: position{line: 674, col: 17, offset: 21779},
																	run: (*parser).callonSingleQuoteBoldTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 674, col: 17, offset: 21779},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 674, col: 17, offset: 21779},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 674, col: 21, offset: 21783},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 674, col: 28, offset: 21790},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 674, col: 28, offset: 21790},
																							run: (*parser).callonSingleQuoteBoldTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 674, col: 28, offset: 21790},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 676, col: 9, offset: 21844},
																							run: (*parser).callonSingleQuoteBoldTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 676, col: 9, offset: 21844},
																								expr: &charClassMatcher{
																									pos:        position{line: 676, col: 9, offset: 21844},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 670, col: 79, offset: 21672},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 659, col: 5, offset: 21191},
												run: (*parser).callonSingleQuoteBoldTextElement75,
												expr: &seqExpr{
													pos: position{line: 659, col: 5, offset: 21191},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 659, col: 5, offset: 21191},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 659, col: 9, offset: 21195},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteBoldTextElement79,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 659, col: 28, offset: 21214},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1888, col: 7, offset: 61895},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2599, col: 5, offset: 86909},
						run: (*parser).callonSingleQuoteBoldTextElement86,
						expr: &seqExpr{
							pos: position{line: 2599, col: 5, offset: 86909},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2599, col: 5, offset: 86909},
									run: (*parser).callonSingleQuoteBoldTextElement88,
								},
								&labeledExpr{
									pos:   position{line: 2602, col: 5, offset: 86985},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2604, col: 9, offset: 87083},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2604, col: 9, offset: 87083},
												run: (*parser).callonSingleQuoteBoldTextElement91,
												expr: &choiceExpr{
													pos: position{line: 694, col: 27, offset: 22498},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 694, col: 27, offset: 22498},
															run: (*parser).callonSingleQuoteBoldTextElement93,
															expr: &seqExpr{
																pos: position{line: 694, col: 27, offset: 22498},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 694, col: 27, offset: 22498},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 32, offset: 22503},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2884, col: 7, offset: 95839},
																			run: (*parser).callonSingleQuoteBoldTextElement97,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2884, col: 7, offset: 95839},
																				expr: &charClassMatcher{
																					pos:        position{line: 2884, col: 7, offset: 95839},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 694, col: 40, offset: 22511},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonSingleQuoteBoldTextElement101,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 47, offset: 22518},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 51, offset: 22522},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 704, col: 24, offset: 22923},
																			expr: &choiceExpr{
																				pos: position{line: 705, col: 5, offset: 22929},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 705, col: 6, offset: 22930},
																						run: (*parser).callonSingleQuoteBoldTextElement107,
																						expr: &seqExpr{
																							pos: position{line: 705, col: 6, offset: 22930},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 705, col: 6, offset: 22930},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 705, col: 14, offset: 22938},
																									expr: &charClassMatcher{
																										pos:        position{line: 705, col: 14, offset: 22938},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 659, col: 5, offset: 21191},
																						run: (*parser).callonSingleQuoteBoldTextElement112,
																						expr: &seqExpr{
																							pos: position{line: 659, col: 5, offset: 21191},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 659, col: 5, offset: 21191},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 659, col: 9, offset: 21195},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 332, col: 18, offset: 10393},
																										run: (*parser).callonSingleQuoteBoldTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 332, col: 18, offset: 10393},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 332, col: 18, offset: 10393},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 332, col: 28, offset: 10403},
																													expr: &charClassMatcher{
																														pos:        position{line: 332, col: 29, offset: 10404},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 659, col: 28, offset: 21214},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 709, col: 8, offset: 23164},
																						run: (*parser).callonSingleQuoteBoldTextElement122,
																						expr: &litMatcher{
																							pos:        position{line: 709, col: 8, offset: 23164},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 79, offset: 22550},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 696, col: 9, offset: 22623},
															run: (*parser).callonSingleQuoteBoldTextElement125,
															expr: &seqExpr{
																pos: position{line: 696, col: 9, offset: 22623},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 696, col: 9, offset: 22623},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 696, col: 14, offset: 22628},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2884, col: 7, offset: 95839},
																			run: (*parser).callonSingleQuoteBoldTextElement129,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2884, col: 7, offset: 95839},
																				expr: &charClassMatcher{
																					pos:        position{line: 2884, col: 7, offset: 95839},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 696, col: 22, offset: 22636},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2607, col: 11, offset: 87187},
												run: (*parser).callonSingleQuoteBoldTextElement133,
												expr: &charClassMatcher{
													pos:        position{line: 2607, col: 12, offset: 87188},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2632, col: 15, offset: 88155},
						run: (*parser).callonSingleQuoteBoldTextElement135,
						expr: &litMatcher{
							pos:        position{line: 2632, col: 15, offset: 88155},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2638, col: 14, offset: 88270},
						run: (*parser).callonSingleQuoteBoldTextElement137,
						expr: &litMatcher{
							pos:        position{line: 2638, col: 14, offset: 88270},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2642, col: 14, offset: 88346},
						run: (*parser).callonSingleQuoteBoldTextElement139,
						expr: &litMatcher{
							pos:        position{line: 2642, col: 14, offset: 88346},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2646, col: 15, offset: 88424},
						run: (*parser).callonSingleQuoteBoldTextElement141,
						expr: &litMatcher{
							pos:        position{line: 2646, col: 15, offset: 88424},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2650, col: 13, offset: 88499},
						run: (*parser).callonSingleQuoteBoldTextElement143,
						expr: &litMatcher{
							pos:        position{line: 2650, col: 13, offset: 88499},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2658, col: 22, offset: 88805},
						run: (*parser).callonSingleQuoteBoldTextElement145,
						expr: &seqExpr{
							pos: position{line: 2658, col: 22, offset: 88805},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2813, col: 13, offset: 93503},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2658, col: 31, offset: 88814},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2658, col: 35, offset: 88818},
									expr: &charClassMatcher{
										pos:        position{line: 2658, col: 36, offset: 88819},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1891, col: 7, offset: 61999},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1892, col: 7, offset: 62018},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&actionExpr{
						pos: position{line: 1122, col: 23, offset: 34991},
						run: (*parser).callonSingleQuoteBoldTextElement153,
						expr: &seqExpr{
							pos: position{line: 1122, col: 23, offset: 34991},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1120, col: 32, offset: 34959},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1122, col: 51, offset: 35019},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1122, col: 56, offset: 35024},
										run: (*parser).callonSingleQuoteBoldTextElement157,
										expr: &oneOrMoreExpr{
											pos: position{line: 1122, col: 56, offset: 35024},
											expr: &charClassMatcher{
												pos:        position{line: 1122, col: 56, offset: 35024},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1120, col: 32, offset: 34959},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1908, col: 5, offset: 62476},
						val:        "[^\\r\\n *]",
						chars:      []rune{'\r', '\n', ' ', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1909, col: 7, offset: 62581},
						run: (*parser).callonSingleQuoteBoldTextElement162,
						expr: &seqExpr{
							pos: position{line: 1909, col: 7, offset: 62581},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1909, col: 7, offset: 62581},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&actionExpr{
									pos: position{line: 2817, col: 14, offset: 93577},
									run: (*parser).callonSingleQuoteBoldTextElement165,
									expr: &oneOrMoreExpr{
										pos: position{line: 2817, col: 14, offset: 93577},
										expr: &charClassMatcher{
											pos:        position{line: 2817, col: 14, offset: 93577},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1896, col: 1, offset: 62119},
			expr: &actionExpr{
				pos: position{line: 1897, col: 5, offset: 62159},
				run: (*parser).callonQuotedTextInSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1897, col: 5, offset: 62159},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1897, col: 5, offset: 62159},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1897, col: 16, offset: 62170},
								expr: &ruleRefExpr{
									pos:  position{line: 1897, col: 17, offset: 62171},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1898, col: 5, offset: 62197},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1899, col: 9, offset: 62212},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1899, col: 9, offset: 62212},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1900, col: 11, offset: 62242},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1901, col: 11, offset: 62263},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1902, col: 11, offset: 62287},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1903, col: 11, offset: 62308},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1904, col: 11, offset: 62332},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1913, col: 1, offset: 62756},
			expr: &choiceExpr{
				pos: position{line: 1914, col: 5, offset: 62780},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1914, col: 5, offset: 62780},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1914, col: 5, offset: 62780},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1914, col: 5, offset: 62780},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1795, col: 25, offset: 58988},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1795, col: 25, offset: 58988},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1795, col: 25, offset: 58988},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1795, col: 30, offset: 58993},
													expr: &litMatcher{
														pos:        position{line: 1795, col: 30, offset: 58993},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1914, col: 40, offset: 62815},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1914, col: 45, offset: 62820},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1914, col: 55, offset: 62830},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1914, col: 84, offset: 62859},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1916, col: 9, offset: 63016},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 1916, col: 9, offset: 63016},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1916, col: 9, offset: 63016},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1791, col: 25, offset: 58915},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1791, col: 25, offset: 58915},
											expr: &litMatcher{
												pos:        position{line: 1791, col: 25, offset: 58915},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1916, col: 44, offset: 63051},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1916, col: 49, offset: 63056},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1916, col: 59, offset: 63066},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1916, col: 88, offset: 63095},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1919, col: 9, offset: 63295},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 1919, col: 9, offset: 63295},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1919, col: 9, offset: 63295},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1791, col: 25, offset: 58915},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1791, col: 25, offset: 58915},
											expr: &litMatcher{
												pos:        position{line: 1791, col: 25, offset: 58915},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1919, col: 44, offset: 63330},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1919, col: 48, offset: 63334},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1919, col: 58, offset: 63344},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1919, col: 87, offset: 63373},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1927, col: 1, offset: 63671},
			expr: &choiceExpr{
				pos: position{line: 1927, col: 15, offset: 63685},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1927, col: 15, offset: 63685},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1927, col: 39, offset: 63709},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1941, col: 1, offset: 64037},
			expr: &actionExpr{
				pos: position{line: 1942, col: 5, offset: 64067},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1942, col: 5, offset: 64067},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1939, col: 35, offset: 64031},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1943, col: 5, offset: 64103},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1943, col: 15, offset: 64113},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1939, col: 35, offset: 64031},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1948, col: 1, offset: 64321},
			expr: &oneOrMoreExpr{
				pos: position{line: 1948, col: 34, offset: 64354},
				expr: &ruleRefExpr{
					pos:  position{line: 1948, col: 34, offset: 64354},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1950, col: 1, offset: 64386},
			expr: &actionExpr{
				pos: position{line: 1951, col: 5, offset: 64423},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1951, col: 5, offset: 64423},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1951, col: 5, offset: 64423},
							expr: &litMatcher{
								pos:        position{line: 1939, col: 35, offset: 64031},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1952, col: 5, offset: 64459},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1953, col: 9, offset: 64477},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1932, col: 5, offset: 63783},
										run: (*parser).callonDoubleQuoteItalicTextElement7,
										expr: &seqExpr{
											pos: position{line: 1932, col: 5, offset: 63783},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1932, col: 5, offset: 63783},
													expr: &charClassMatcher{
														pos:        position{line: 1932, col: 5, offset: 63783},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1932, col: 15, offset: 63793},
													expr: &choiceExpr{
														pos: position{line: 1932, col: 17, offset: 63795},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2899, col: 10, offset: 96187},
																run: (*parser).callonDoubleQuoteItalicTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2899, col: 11, offset: 96188},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1929, col: 24, offset: 63755},
																val:        "_",
																ignoreCase: false,
																want:       "\"_\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2903, col: 11, offset: 96254},
										run: (*parser).callonDoubleQuoteItalicTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2903, col: 11, offset: 96254},
											expr: &charClassMatcher{
												pos:        position{line: 2903, col: 12, offset: 96255},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1955, col: 11, offset: 64552},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2908, col: 12, offset: 96371},
												run: (*parser).callonDoubleQuoteItalicTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2908, col: 13, offset: 96372},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2908, col: 13, offset: 96372},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 20, offset: 96379},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 29, offset: 96388},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1955, col: 19, offset: 64560},
												expr: &actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonDoubleQuoteItalicTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 651, col: 5, offset: 21000},
										run: (*parser).callonDoubleQuoteItalicTextElement31,
										expr: &seqExpr{
											pos: position{line: 651, col: 5, offset: 21000},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 651, col: 5, offset: 21000},
													run: (*parser).callonDoubleQuoteItalicTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 654, col: 5, offset: 21069},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 654, col: 14, offset: 21078},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 666, col: 25, offset: 21447},
																run: (*parser).callonDoubleQuoteItalicTextElement36,
																expr: &seqExpr{
																	pos: position{line: 666, col: 25, offset: 21447},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 666, col: 25, offset: 21447},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 37, offset: 21459},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteItalicTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 56, offset: 21478},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 666, col: 62, offset: 21484},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonDoubleQuoteItalicTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonDoubleQuoteItalicTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonDoubleQuoteItalicTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 666, col: 78, offset: 21500},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 670, col: 25, offset: 21618},
																run: (*parser).callonDoubleQuoteItalicTextElement58,
																expr: &seqExpr{
																	pos: position{line: 670, col: 25, offset: 21618},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 670, col: 25, offset: 21618},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 38, offset: 21631},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteItalicTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 57, offset: 21650},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 670, col: 63, offset: 21656},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonDoubleQuoteItalicTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonDoubleQuoteItalicTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonDoubleQuoteItalicTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 670, col: 79, offset: 21672},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 659, col: 5, offset: 21191},
																run: (*parser).callonDoubleQuoteItalicTextElement80,
																expr: &seqExpr{
																	pos: position{line: 659, col: 5, offset: 21191},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 659, col: 5, offset: 21191},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 659, col: 9, offset: 21195},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteItalicTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 659, col: 28, offset: 21214},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1957, col: 11, offset: 64642},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2599, col: 5, offset: 86909},
										run: (*parser).callonDoubleQuoteItalicTextElement91,
										expr: &seqExpr{
											pos: position{line: 2599, col: 5, offset: 86909},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2599, col: 5, offset: 86909},
													run: (*parser).callonDoubleQuoteItalicTextElement93,
												},
												&labeledExpr{
													pos:   position{line: 2602, col: 5, offset: 86985},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2604, col: 9, offset: 87083},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2604, col: 9, offset: 87083},
																run: (*parser).callonDoubleQuoteItalicTextElement96,
																expr: &choiceExpr{
																	pos: position{line: 694, col: 27, offset: 22498},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 694, col: 27, offset: 22498},
																			run: (*parser).callonDoubleQuoteItalicTextElement98,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 27, offset: 22498},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 27, offset: 22498},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 32, offset: 22503},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonDoubleQuoteItalicTextElement102,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 694, col: 40, offset: 22511},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonDoubleQuoteItalicTextElement106,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 47, offset: 22518},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 51, offset: 22522},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 704, col: 24, offset: 22923},
																							expr: &choiceExpr{
																								pos: position{line: 705, col: 5, offset: 22929},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 705, col: 6, offset: 22930},
																										run: (*parser).callonDoubleQuoteItalicTextElement112,
																										expr: &seqExpr{
																											pos: position{line: 705, col: 6, offset: 22930},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 705, col: 6, offset: 22930},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 705, col: 14, offset: 22938},
																													expr: &charClassMatcher{
																														pos:        position{line: 705, col: 14, offset: 22938},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 659, col: 5, offset: 21191},
																										run: (*parser).callonDoubleQuoteItalicTextElement117,
																										expr: &seqExpr{
																											pos: position{line: 659, col: 5, offset: 21191},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 659, col: 5, offset: 21191},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 659, col: 9, offset: 21195},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonDoubleQuoteItalicTextElement121,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 659, col: 28, offset: 21214},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 709, col: 8, offset: 23164},
																										run: (*parser).callonDoubleQuoteItalicTextElement127,
																										expr: &litMatcher{
																											pos:        position{line: 709, col: 8, offset: 23164},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 79, offset: 22550},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 696, col: 9, offset: 22623},
																			run: (*parser).callonDoubleQuoteItalicTextElement130,
																			expr: &seqExpr{
																				pos: position{line: 696, col: 9, offset: 22623},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 696, col: 9, offset: 22623},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 696, col: 14, offset: 22628},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonDoubleQuoteItalicTextElement134,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 696, col: 22, offset: 22636},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2607, col: 11, offset: 87187},
																run: (*parser).callonDoubleQuoteItalicTextElement138,
																expr: &charClassMatcher{
																	pos:        position{line: 2607, col: 12, offset: 87188},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2632, col: 15, offset: 88155},
										run: (*parser).callonDoubleQuoteItalicTextElement140,
										expr: &litMatcher{
											pos:        position{line: 2632, col: 15, offset: 88155},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 14, offset: 88270},
										run: (*parser).callonDoubleQuoteItalicTextElement142,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 14, offset: 88270},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2642, col: 14, offset: 88346},
										run: (*parser).callonDoubleQuoteItalicTextElement144,
										expr: &litMatcher{
											pos:        position{line: 2642, col: 14, offset: 88346},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 15, offset: 88424},
										run: (*parser).callonDoubleQuoteItalicTextElement146,
										expr: &litMatcher{
											pos:        position{line: 2646, col: 15, offset: 88424},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 13, offset: 88499},
										run: (*parser).callonDoubleQuoteItalicTextElement148,
										expr: &litMatcher{
											pos:        position{line: 2650, col: 13, offset: 88499},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2658, col: 22, offset: 88805},
										run: (*parser).callonDoubleQuoteItalicTextElement150,
										expr: &seqExpr{
											pos: position{line: 2658, col: 22, offset: 88805},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2813, col: 13, offset: 93503},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2658, col: 31, offset: 88814},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2658, col: 35, offset: 88818},
													expr: &charClassMatcher{
														pos:        position{line: 2658, col: 36, offset: 88819},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1960, col: 11, offset: 64758},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1961, col: 11, offset: 64781},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&actionExpr{
										pos: position{line: 1122, col: 23, offset: 34991},
										run: (*parser).callonDoubleQuoteItalicTextElement158,
										expr: &seqExpr{
											pos: position{line: 1122, col: 23, offset: 34991},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1120, col: 32, offset: 34959},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1122, col: 51, offset: 35019},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1122, col: 56, offset: 35024},
														run: (*parser).callonDoubleQuoteItalicTextElement162,
														expr: &oneOrMoreExpr{
															pos: position{line: 1122, col: 56, offset: 35024},
															expr: &charClassMatcher{
																pos:        position{line: 1122, col: 56, offset: 35024},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1120, col: 32, offset: 34959},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1979, col: 5, offset: 65292},
										val:        "[^\\r\\n_]",
										chars:      []rune{'\r', '\n', '_'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1980, col: 7, offset: 65391},
										run: (*parser).callonDoubleQuoteItalicTextElement167,
										expr: &seqExpr{
											pos: position{line: 1980, col: 7, offset: 65391},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1980, col: 7, offset: 65391},
													val:        "__",
													ignoreCase: false,
													want:       "\"__\"",
												},
												&actionExpr{
													pos: position{line: 2817, col: 14, offset: 93577},
													run: (*parser).callonDoubleQuoteItalicTextElement170,
													expr: &oneOrMoreExpr{
														pos: position{line: 2817, col: 14, offset: 93577},
														expr: &charClassMatcher{
															pos:        position{line: 2817, col: 14, offset: 93577},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 1967, col: 1, offset: 64939},
			expr: &actionExpr{
				pos: position{line: 1968, col: 5, offset: 64981},
				run: (*parser).callonQuotedTextInDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1968, col: 5, offset: 64981},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1968, col: 5, offset: 64981},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1968, col: 16, offset: 64992},
								expr: &ruleRefExpr{
									pos:  position{line: 1968, col: 17, offset: 64993},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1969, col: 5, offset: 65019},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1969, col: 11, offset: 65025},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1969, col: 11, offset: 65025},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1970, col: 11, offset: 65057},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1971, col: 11, offset: 65076},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1972, col: 11, offset: 65097},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1973, col: 11, offset: 65121},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1974, col: 11, offset: 65145},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1991, col: 1, offset: 65767},
			expr: &actionExpr{
				pos: position{line: 1992, col: 5, offset: 65797},
				run: (*parser).callonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1992, col: 5, offset: 65797},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1987, col: 40, offset: 65718},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&labeledExpr{
							pos:   position{line: 1993, col: 5, offset: 65837},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1993, col: 15, offset: 65847},
								name: "SingleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1989, col: 38, offset: 65761},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1998, col: 1, offset: 66014},
			expr: &actionExpr{
				pos: position{line: 1999, col: 5, offset: 66052},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 1999, col: 5, offset: 66052},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1999, col: 5, offset: 66052},
							expr: &notExpr{
								pos: position{line: 2912, col: 8, offset: 96461},
								expr: &anyMatcher{
									line: 2912, col: 9, offset: 96462,
								},
							},
						},
						&notExpr{
							pos: position{line: 1999, col: 10, offset: 66057},
							expr: &actionExpr{
								pos: position{line: 2899, col: 10, offset: 96187},
								run: (*parser).callonSingleQuoteItalicTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2899, col: 11, offset: 96188},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2000, col: 5, offset: 66096},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2000, col: 14, offset: 66105},
								expr: &ruleRefExpr{
									pos:  position{line: 2000, col: 15, offset: 66106},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2001, col: 5, offset: 66141},
							run: (*parser).callonSingleQuoteItalicTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 2007, col: 1, offset: 66282},
			expr: &choiceExpr{
				pos: position{line: 2008, col: 5, offset: 66319},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1932, col: 5, offset: 63783},
						run: (*parser).callonSingleQuoteItalicTextElement2,
						expr: &seqExpr{
							pos: position{line: 1932, col: 5, offset: 63783},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1932, col: 5, offset: 63783},
									expr: &charClassMatcher{
										pos:        position{line: 1932, col: 5, offset: 63783},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1932, col: 15, offset: 63793},
									expr: &choiceExpr{
										pos: position{line: 1932, col: 17, offset: 63795},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonSingleQuoteItalicTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1929, col: 24, offset: 63755},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2903, col: 11, offset: 96254},
						run: (*parser).callonSingleQuoteItalicTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 2903, col: 11, offset: 96254},
							expr: &charClassMatcher{
								pos:        position{line: 2903, col: 12, offset: 96255},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2010, col: 7, offset: 66353},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2908, col: 12, offset: 96371},
								run: (*parser).callonSingleQuoteItalicTextElement15,
								expr: &choiceExpr{
									pos: position{line: 2908, col: 13, offset: 96372},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2908, col: 13, offset: 96372},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2908, col: 20, offset: 96379},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2908, col: 29, offset: 96388},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2010, col: 15, offset: 66361},
								expr: &actionExpr{
									pos: position{line: 2908, col: 12, offset: 96371},
									run: (*parser).callonSingleQuoteItalicTextElement21,
									expr: &choiceExpr{
										pos: position{line: 2908, col: 13, offset: 96372},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2908, col: 13, offset: 96372},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 20, offset: 96379},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 29, offset: 96388},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 651, col: 5, offset: 21000},
						run: (*parser).callonSingleQuoteItalicTextElement26,
						expr: &seqExpr{
							pos: position{line: 651, col: 5, offset: 21000},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 651, col: 5, offset: 21000},
									run: (*parser).callonSingleQuoteItalicTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 654, col: 5, offset: 21069},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 654, col: 14, offset: 21078},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 666, col: 25, offset: 21447},
												run: (*parser).callonSingleQuoteItalicTextElement31,
												expr: &seqExpr{
													pos: position{line: 666, col: 25, offset: 21447},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 666, col: 25, offset: 21447},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 666, col: 37, offset: 21459},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteItalicTextElement35,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 666, col: 56, offset: 21478},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 666, col: 62, offset: 21484},
																expr: &actionExpr{
																	pos: position{line: 674, col: 17, offset: 21779},
																	run: (*parser).callonSingleQuoteItalicTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 674, col: 17, offset: 21779},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 674, col: 17, offset: 21779},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 674, col: 21, offset: 21783},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 674, col: 28, offset: 21790},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 674, col: 28, offset: 21790},
																							run: (*parser).callonSingleQuoteItalicTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 674, col: 28, offset: 21790},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 676, col: 9, offset: 21844},
																							run: (*parser).callonSingleQuoteItalicTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 676, col: 9, offset: 21844},
																								expr: &charClassMatcher{
																									pos:        position{line: 676, col: 9, offset: 21844},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 666, col: 78, offset: 21500},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 670, col: 25, offset: 21618},
												run: (*parser).callonSingleQuoteItalicTextElement53,
												expr: &seqExpr{
													pos: position{line: 670, col: 25, offset: 21618},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 670, col: 25, offset: 21618},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 670, col: 38, offset: 21631},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteItalicTextElement57,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 670, col: 57, offset: 21650},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 670, col: 63, offset: 21656},
																expr: &actionExpr{
																	pos: position{line: 674, col: 17, offset: 21779},
																	run: (*parser).callonSingleQuoteItalicTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 674, col: 17, offset: 21779},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 674, col: 17, offset: 21779},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 674, col: 21, offset: 21783},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 674, col: 28, offset: 21790},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 674, col: 28, offset: 21790},
																							run: (*parser).callonSingleQuoteItalicTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 674, col: 28, offset: 21790},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 676, col: 9, offset: 21844},
																							run: (*parser).callonSingleQuoteItalicTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 676, col: 9, offset: 21844},
																								expr: &charClassMatcher{
																									pos:        position{line: 676, col: 9, offset: 21844},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 670, col: 79, offset: 21672},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 659, col: 5, offset: 21191},
												run: (*parser).callonSingleQuoteItalicTextElement75,
												expr: &seqExpr{
													pos: position{line: 659, col: 5, offset: 21191},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 659, col: 5, offset: 21191},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 659, col: 9, offset: 21195},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteItalicTextElement79,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 659, col: 28, offset: 21214},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2012, col: 7, offset: 66435},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2599, col: 5, offset: 86909},
						run: (*parser).callonSingleQuoteItalicTextElement86,
						expr: &seqExpr{
							pos: position{line: 2599, col: 5, offset: 86909},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2599, col: 5, offset: 86909},
									run: (*parser).callonSingleQuoteItalicTextElement88,
								},
								&labeledExpr{
									pos:   position{line: 2602, col: 5, offset: 86985},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2604, col: 9, offset: 87083},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2604, col: 9, offset: 87083},
												run: (*parser).callonSingleQuoteItalicTextElement91,
												expr: &choiceExpr{
													pos: position{line: 694, col: 27, offset: 22498},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 694, col: 27, offset: 22498},
															run: (*parser).callonSingleQuoteItalicTextElement93,
															expr: &seqExpr{
																pos: position{line: 694, col: 27, offset: 22498},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 694, col: 27, offset: 22498},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 32, offset: 22503},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2884, col: 7, offset: 95839},
																			run: (*parser).callonSingleQuoteItalicTextElement97,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2884, col: 7, offset: 95839},
																				expr: &charClassMatcher{
																					pos:        position{line: 2884, col: 7, offset: 95839},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 694, col: 40, offset: 22511},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonSingleQuoteItalicTextElement101,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 47, offset: 22518},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 51, offset: 22522},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 704, col: 24, offset: 22923},
																			expr: &choiceExpr{
																				pos: position{line: 705, col: 5, offset: 22929},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 705, col: 6, offset: 22930},
																						run: (*parser).callonSingleQuoteItalicTextElement107,
																						expr: &seqExpr{
																							pos: position{line: 705, col: 6, offset: 22930},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 705, col: 6, offset: 22930},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 705, col: 14, offset: 22938},
																									expr: &charClassMatcher{
																										pos:        position{line: 705, col: 14, offset: 22938},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 659, col: 5, offset: 21191},
																						run: (*parser).callonSingleQuoteItalicTextElement112,
																						expr: &seqExpr{
																							pos: position{line: 659, col: 5, offset: 21191},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 659, col: 5, offset: 21191},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 659, col: 9, offset: 21195},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 332, col: 18, offset: 10393},
																										run: (*parser).callonSingleQuoteItalicTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 332, col: 18, offset: 10393},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 332, col: 18, offset: 10393},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 332, col: 28, offset: 10403},
																													expr: &charClassMatcher{
																														pos:        position{line: 332, col: 29, offset: 10404},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 659, col: 28, offset: 21214},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 709, col: 8, offset: 23164},
																						run: (*parser).callonSingleQuoteItalicTextElement122,
																						expr: &litMatcher{
																							pos:        position{line: 709, col: 8, offset: 23164},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 79, offset: 22550},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 696, col: 9, offset: 22623},
															run: (*parser).callonSingleQuoteItalicTextElement125,
															expr: &seqExpr{
																pos: position{line: 696, col: 9, offset: 22623},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 696, col: 9, offset: 22623},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 696, col: 14, offset: 22628},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2884, col: 7, offset: 95839},
																			run: (*parser).callonSingleQuoteItalicTextElement129,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2884, col: 7, offset: 95839},
																				expr: &charClassMatcher{
																					pos:        position{line: 2884, col: 7, offset: 95839},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 696, col: 22, offset: 22636},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2607, col: 11, offset: 87187},
												run: (*parser).callonSingleQuoteItalicTextElement133,
												expr: &charClassMatcher{
													pos:        position{line: 2607, col: 12, offset: 87188},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2632, col: 15, offset: 88155},
						run: (*parser).callonSingleQuoteItalicTextElement135,
						expr: &litMatcher{
							pos:        position{line: 2632, col: 15, offset: 88155},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2638, col: 14, offset: 88270},
						run: (*parser).callonSingleQuoteItalicTextElement137,
						expr: &litMatcher{
							pos:        position{line: 2638, col: 14, offset: 88270},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2642, col: 14, offset: 88346},
						run: (*parser).callonSingleQuoteItalicTextElement139,
						expr: &litMatcher{
							pos:        position{line: 2642, col: 14, offset: 88346},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2646, col: 15, offset: 88424},
						run: (*parser).callonSingleQuoteItalicTextElement141,
						expr: &litMatcher{
							pos:        position{line: 2646, col: 15, offset: 88424},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2650, col: 13, offset: 88499},
						run: (*parser).callonSingleQuoteItalicTextElement143,
						expr: &litMatcher{
							pos:        position{line: 2650, col: 13, offset: 88499},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2658, col: 22, offset: 88805},
						run: (*parser).callonSingleQuoteItalicTextElement145,
						expr: &seqExpr{
							pos: position{line: 2658, col: 22, offset: 88805},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2813, col: 13, offset: 93503},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2658, col: 31, offset: 88814},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2658, col: 35, offset: 88818},
									expr: &charClassMatcher{
										pos:        position{line: 2658, col: 36, offset: 88819},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2015, col: 7, offset: 66539},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2016, col: 7, offset: 66558},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&actionExpr{
						pos: position{line: 1122, col: 23, offset: 34991},
						run: (*parser).callonSingleQuoteItalicTextElement153,
						expr: &seqExpr{
							pos: position{line: 1122, col: 23, offset: 34991},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1120, col: 32, offset: 34959},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1122, col: 51, offset: 35019},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1122, col: 56, offset: 35024},
										run: (*parser).callonSingleQuoteItalicTextElement157,
										expr: &oneOrMoreExpr{
											pos: position{line: 1122, col: 56, offset: 35024},
											expr: &charClassMatcher{
												pos:        position{line: 1122, col: 56, offset: 35024},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1120, col: 32, offset: 34959},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 2032, col: 5, offset: 67015},
						val:        "[^\\r\\n _]",
						chars:      []rune{'\r', '\n', ' ', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2033, col: 7, offset: 67122},
						run: (*parser).callonSingleQuoteItalicTextElement162,
						expr: &seqExpr{
							pos: position{line: 2033, col: 7, offset: 67122},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2033, col: 7, offset: 67122},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&actionExpr{
									pos: position{line: 2817, col: 14, offset: 93577},
									run: (*parser).callonSingleQuoteItalicTextElement165,
									expr: &oneOrMoreExpr{
										pos: position{line: 2817, col: 14, offset: 93577},
										expr: &charClassMatcher{
											pos:        position{line: 2817, col: 14, offset: 93577},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 2020, col: 1, offset: 66663},
			expr: &actionExpr{
				pos: position{line: 2021, col: 5, offset: 66704},
				run: (*parser).callonQuotedTextInSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 2021, col: 5, offset: 66704},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2021, col: 5, offset: 66704},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2021, col: 16, offset: 66715},
								expr: &ruleRefExpr{
									pos:  position{line: 2021, col: 17, offset: 66716},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2022, col: 5, offset: 66742},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2022, col: 11, offset: 66748},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2022, col: 11, offset: 66748},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2023, col: 11, offset: 66767},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2024, col: 11, offset: 66799},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2025, col: 11, offset: 66820},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2026, col: 11, offset: 66844},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2027, col: 11, offset: 66868},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 2037, col: 1, offset: 67300},
			expr: &choiceExpr{
				pos: position{line: 2038, col: 5, offset: 67326},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2038, col: 5, offset: 67326},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 2038, col: 5, offset: 67326},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2038, col: 5, offset: 67326},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1795, col: 25, offset: 58988},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1795, col: 25, offset: 58988},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1795, col: 25, offset: 58988},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1795, col: 30, offset: 58993},
													expr: &litMatcher{
														pos:        position{line: 1795, col: 30, offset: 58993},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2038, col: 40, offset: 67361},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2038, col: 45, offset: 67366},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2038, col: 55, offset: 67376},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2038, col: 86, offset: 67407},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2040, col: 9, offset: 67564},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 2040, col: 9, offset: 67564},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2040, col: 9, offset: 67564},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1791, col: 25, offset: 58915},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1791, col: 25, offset: 58915},
											expr: &litMatcher{
												pos:        position{line: 1791, col: 25, offset: 58915},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2040, col: 44, offset: 67599},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2040, col: 49, offset: 67604},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2040, col: 59, offset: 67614},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2040, col: 90, offset: 67645},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2043, col: 9, offset: 67845},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 2043, col: 9, offset: 67845},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2043, col: 9, offset: 67845},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1791, col: 25, offset: 58915},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1791, col: 25, offset: 58915},
											expr: &litMatcher{
												pos:        position{line: 1791, col: 25, offset: 58915},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2043, col: 44, offset: 67880},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 2043, col: 48, offset: 67884},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2043, col: 58, offset: 67894},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2043, col: 89, offset: 67925},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 2050, col: 1, offset: 68244},
			expr: &choiceExpr{
				pos: position{line: 2050, col: 18, offset: 68261},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2050, col: 18, offset: 68261},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 2050, col: 45, offset: 68288},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 2064, col: 1, offset: 68640},
			expr: &actionExpr{
				pos: position{line: 2065, col: 5, offset: 68673},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2065, col: 5, offset: 68673},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2062, col: 38, offset: 68634},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 2066, col: 5, offset: 68712},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2066, col: 15, offset: 68722},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2062, col: 38, offset: 68634},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 2071, col: 1, offset: 68894},
			expr: &oneOrMoreExpr{
				pos: position{line: 2071, col: 37, offset: 68930},
				expr: &ruleRefExpr{
					pos:  position{line: 2071, col: 37, offset: 68930},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 2073, col: 1, offset: 68997},
			expr: &actionExpr{
				pos: position{line: 2074, col: 5, offset: 69037},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2074, col: 5, offset: 69037},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2074, col: 5, offset: 69037},
							expr: &litMatcher{
								pos:        position{line: 2062, col: 38, offset: 68634},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2075, col: 5, offset: 69076},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2076, col: 9, offset: 69094},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2055, col: 5, offset: 68371},
										run: (*parser).callonDoubleQuoteMonospaceTextElement7,
										expr: &seqExpr{
											pos: position{line: 2055, col: 5, offset: 68371},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2055, col: 5, offset: 68371},
													expr: &charClassMatcher{
														pos:        position{line: 2055, col: 5, offset: 68371},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2055, col: 15, offset: 68381},
													expr: &choiceExpr{
														pos: position{line: 2055, col: 17, offset: 68383},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2899, col: 10, offset: 96187},
																run: (*parser).callonDoubleQuoteMonospaceTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2899, col: 11, offset: 96188},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2052, col: 27, offset: 68340},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2903, col: 11, offset: 96254},
										run: (*parser).callonDoubleQuoteMonospaceTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2903, col: 11, offset: 96254},
											expr: &charClassMatcher{
												pos:        position{line: 2903, col: 12, offset: 96255},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2078, col: 11, offset: 69172},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2908, col: 12, offset: 96371},
												run: (*parser).callonDoubleQuoteMonospaceTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2908, col: 13, offset: 96372},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2908, col: 13, offset: 96372},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 20, offset: 96379},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 29, offset: 96388},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2078, col: 19, offset: 69180},
												expr: &actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonDoubleQuoteMonospaceTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 651, col: 5, offset: 21000},
										run: (*parser).callonDoubleQuoteMonospaceTextElement31,
										expr: &seqExpr{
											pos: position{line: 651, col: 5, offset: 21000},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 651, col: 5, offset: 21000},
													run: (*parser).callonDoubleQuoteMonospaceTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 654, col: 5, offset: 21069},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 654, col: 14, offset: 21078},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 666, col: 25, offset: 21447},
																run: (*parser).callonDoubleQuoteMonospaceTextElement36,
																expr: &seqExpr{
																	pos: position{line: 666, col: 25, offset: 21447},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 666, col: 25, offset: 21447},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 37, offset: 21459},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 56, offset: 21478},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 666, col: 62, offset: 21484},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 666, col: 78, offset: 21500},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 670, col: 25, offset: 21618},
																run: (*parser).callonDoubleQuoteMonospaceTextElement58,
																expr: &seqExpr{
																	pos: position{line: 670, col: 25, offset: 21618},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 670, col: 25, offset: 21618},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 38, offset: 21631},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 57, offset: 21650},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 670, col: 63, offset: 21656},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 670, col: 79, offset: 21672},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 659, col: 5, offset: 21191},
																run: (*parser).callonDoubleQuoteMonospaceTextElement80,
																expr: &seqExpr{
																	pos: position{line: 659, col: 5, offset: 21191},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 659, col: 5, offset: 21191},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 659, col: 9, offset: 21195},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 659, col: 28, offset: 21214},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2080, col: 11, offset: 69262},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2599, col: 5, offset: 86909},
										run: (*parser).callonDoubleQuoteMonospaceTextElement91,
										expr: &seqExpr{
											pos: position{line: 2599, col: 5, offset: 86909},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2599, col: 5, offset: 86909},
													run: (*parser).callonDoubleQuoteMonospaceTextElement93,
												},
												&labeledExpr{
													pos:   position{line: 2602, col: 5, offset: 86985},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2604, col: 9, offset: 87083},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2604, col: 9, offset: 87083},
																run: (*parser).callonDoubleQuoteMonospaceTextElement96,
																expr: &choiceExpr{
																	pos: position{line: 694, col: 27, offset: 22498},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 694, col: 27, offset: 22498},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement98,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 27, offset: 22498},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 27, offset: 22498},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 32, offset: 22503},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement102,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 694, col: 40, offset: 22511},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement106,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 47, offset: 22518},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 51, offset: 22522},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 704, col: 24, offset: 22923},
																							expr: &choiceExpr{
																								pos: position{line: 705, col: 5, offset: 22929},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 705, col: 6, offset: 22930},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement112,
																										expr: &seqExpr{
																											pos: position{line: 705, col: 6, offset: 22930},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 705, col: 6, offset: 22930},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 705, col: 14, offset: 22938},
																													expr: &charClassMatcher{
																														pos:        position{line: 705, col: 14, offset: 22938},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 659, col: 5, offset: 21191},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement117,
																										expr: &seqExpr{
																											pos: position{line: 659, col: 5, offset: 21191},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 659, col: 5, offset: 21191},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 659, col: 9, offset: 21195},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonDoubleQuoteMonospaceTextElement121,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 659, col: 28, offset: 21214},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 709, col: 8, offset: 23164},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement127,
																										expr: &litMatcher{
																											pos:        position{line: 709, col: 8, offset: 23164},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 79, offset: 22550},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 696, col: 9, offset: 22623},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement130,
																			expr: &seqExpr{
																				pos: position{line: 696, col: 9, offset: 22623},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 696, col: 9, offset: 22623},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 696, col: 14, offset: 22628},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement134,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 696, col: 22, offset: 22636},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2607, col: 11, offset: 87187},
																run: (*parser).callonDoubleQuoteMonospaceTextElement138,
																expr: &charClassMatcher{
																	pos:        position{line: 2607, col: 12, offset: 87188},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2632, col: 15, offset: 88155},
										run: (*parser).callonDoubleQuoteMonospaceTextElement140,
										expr: &litMatcher{
											pos:        position{line: 2632, col: 15, offset: 88155},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 14, offset: 88270},
										run: (*parser).callonDoubleQuoteMonospaceTextElement142,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 14, offset: 88270},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2642, col: 14, offset: 88346},
										run: (*parser).callonDoubleQuoteMonospaceTextElement144,
										expr: &litMatcher{
											pos:        position{line: 2642, col: 14, offset: 88346},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 15, offset: 88424},
										run: (*parser).callonDoubleQuoteMonospaceTextElement146,
										expr: &litMatcher{
											pos:        position{line: 2646, col: 15, offset: 88424},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 13, offset: 88499},
										run: (*parser).callonDoubleQuoteMonospaceTextElement148,
										expr: &litMatcher{
											pos:        position{line: 2650, col: 13, offset: 88499},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2658, col: 22, offset: 88805},
										run: (*parser).callonDoubleQuoteMonospaceTextElement150,
										expr: &seqExpr{
											pos: position{line: 2658, col: 22, offset: 88805},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2813, col: 13, offset: 93503},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2658, col: 31, offset: 88814},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2658, col: 35, offset: 88818},
													expr: &charClassMatcher{
														pos:        position{line: 2658, col: 36, offset: 88819},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2083, col: 11, offset: 69378},
										name: "QuotedString",
									},
									&litMatcher{
										pos:        position{line: 2636, col: 18, offset: 88234},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
									&ruleRefExpr{
										pos:  position{line: 2085, col: 11, offset: 69468},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&actionExpr{
										pos: position{line: 1122, col: 23, offset: 34991},
										run: (*parser).callonDoubleQuoteMonospaceTextElement159,
										expr: &seqExpr{
											pos: position{line: 1122, col: 23, offset: 34991},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1120, col: 32, offset: 34959},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1122, col: 51, offset: 35019},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1122, col: 56, offset: 35024},
														run: (*parser).callonDoubleQuoteMonospaceTextElement163,
														expr: &oneOrMoreExpr{
															pos: position{line: 1122, col: 56, offset: 35024},
															expr: &charClassMatcher{
																pos:        position{line: 1122, col: 56, offset: 35024},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1120, col: 32, offset: 34959},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2104, col: 5, offset: 70000},
										val:        "[^\\r\\n`]",
										chars:      []rune{'\r', '\n', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2105, col: 7, offset: 70102},
										run: (*parser).callonDoubleQuoteMonospaceTextElement168,
										expr: &seqExpr{
											pos: position{line: 2105, col: 7, offset: 70102},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2105, col: 7, offset: 70102},
													val:        "``",
													ignoreCase: false,
													want:       "\"``\"",
												},
												&actionExpr{
													pos: position{line: 2817, col: 14, offset: 93577},
													run: (*parser).callonDoubleQuoteMonospaceTextElement171,
													expr: &oneOrMoreExpr{
														pos: position{line: 2817, col: 14, offset: 93577},
														expr: &charClassMatcher{
															pos:        position{line: 2817, col: 14, offset: 93577},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 2091, col: 1, offset: 69632},
			expr: &actionExpr{
				pos: position{line: 2092, col: 5, offset: 69676},
				run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2092, col: 5, offset: 69676},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2092, col: 5, offset: 69676},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2092, col: 16, offset: 69687},
								expr: &ruleRefExpr{
									pos:  position{line: 2092, col: 17, offset: 69688},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2093, col: 5, offset: 69714},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2094, col: 9, offset: 69729},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2094, col: 9, offset: 69729},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2095, col: 11, offset: 69764},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2096, col: 11, offset: 69783},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2097, col: 11, offset: 69804},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2098, col: 11, offset: 69825},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2099, col: 11, offset: 69849},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 2118, col: 1, offset: 70588},
			expr: &actionExpr{
				pos: position{line: 2119, col: 5, offset: 70621},
				run: (*parser).callonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2119, col: 5, offset: 70621},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2114, col: 43, offset: 70536},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 2120, col: 5, offset: 70665},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2120, col: 15, offset: 70675},
								name: "SingleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2116, col: 41, offset: 70582},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 2125, col: 1, offset: 70851},
			expr: &actionExpr{
				pos: position{line: 2126, col: 5, offset: 70892},
				run: (*parser).callonSingleQuoteMonospaceTextElements1,
				expr: &seqExpr{
					pos: position{line: 2126, col: 5, offset: 70892},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2126, col: 5, offset: 70892},
							expr: &notExpr{
								pos: position{line: 2912, col: 8, offset: 96461},
								expr: &anyMatcher{
									line: 2912, col: 9, offset: 96462,
								},
							},
						},
						&notExpr{
							pos: position{line: 2126, col: 10, offset: 70897},
							expr: &actionExpr{
								pos: position{line: 2899, col: 10, offset: 96187},
								run: (*parser).callonSingleQuoteMonospaceTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2899, col: 11, offset: 96188},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2127, col: 5, offset: 70936},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2127, col: 14, offset: 70945},
								expr: &ruleRefExpr{
									pos:  position{line: 2127, col: 15, offset: 70946},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2128, col: 5, offset: 70984},
							run: (*parser).callonSingleQuoteMonospaceTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 2134, col: 1, offset: 71125},
			expr: &choiceExpr{
				pos: position{line: 2135, col: 5, offset: 71166},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2825, col: 5, offset: 93958},
						run: (*parser).callonSingleQuoteMonospaceTextElement2,
						expr: &seqExpr{
							pos: position{line: 2825, col: 5, offset: 93958},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2825, col: 5, offset: 93958},
									expr: &charClassMatcher{
										pos:        position{line: 2825, col: 5, offset: 93958},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2825, col: 15, offset: 93968},
									expr: &choiceExpr{
										pos: position{line: 2825, col: 17, offset: 93970},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2825, col: 17, offset: 93970},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 2912, col: 8, offset: 96461},
												expr: &anyMatcher{
													line: 2912, col: 9, offset: 96462,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2827, col: 9, offset: 94052},
						run: (*parser).callonSingleQuoteMonospaceTextElement11,
						expr: &seqExpr{
							pos: position{line: 2827, col: 9, offset: 94052},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2827, col: 9, offset: 94052},
									expr: &charClassMatcher{
										pos:        position{line: 2827, col: 9, offset: 94052},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2827, col: 19, offset: 94062},
									expr: &seqExpr{
										pos: position{line: 2827, col: 20, offset: 94063},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2827, col: 20, offset: 94063},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2827, col: 27, offset: 94070},
												expr: &charClassMatcher{
													pos:        position{line: 2827, col: 27, offset: 94070},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2903, col: 11, offset: 96254},
						run: (*parser).callonSingleQuoteMonospaceTextElement20,
						expr: &oneOrMoreExpr{
							pos: position{line: 2903, col: 11, offset: 96254},
							expr: &charClassMatcher{
								pos:        position{line: 2903, col: 12, offset: 96255},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2137, col: 7, offset: 71191},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2908, col: 12, offset: 96371},
								run: (*parser).callonSingleQuoteMonospaceTextElement24,
								expr: &choiceExpr{
									pos: position{line: 2908, col: 13, offset: 96372},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2908, col: 13, offset: 96372},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2908, col: 20, offset: 96379},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2908, col: 29, offset: 96388},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2137, col: 15, offset: 71199},
								expr: &actionExpr{
									pos: position{line: 2908, col: 12, offset: 96371},
									run: (*parser).callonSingleQuoteMonospaceTextElement30,
									expr: &choiceExpr{
										pos: position{line: 2908, col: 13, offset: 96372},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2908, col: 13, offset: 96372},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 20, offset: 96379},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 29, offset: 96388},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 651, col: 5, offset: 21000},
						run: (*parser).callonSingleQuoteMonospaceTextElement35,
						expr: &seqExpr{
							pos: position{line: 651, col: 5, offset: 21000},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 651, col: 5, offset: 21000},
									run: (*parser).callonSingleQuoteMonospaceTextElement37,
								},
								&labeledExpr{
									pos:   position{line: 654, col: 5, offset: 21069},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 654, col: 14, offset: 21078},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 666, col: 25, offset: 21447},
												run: (*parser).callonSingleQuoteMonospaceTextElement40,
												expr: &seqExpr{
													pos: position{line: 666, col: 25, offset: 21447},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 666, col: 25, offset: 21447},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 666, col: 37, offset: 21459},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteMonospaceTextElement44,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 666, col: 56, offset: 21478},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 666, col: 62, offset: 21484},
																expr: &actionExpr{
																	pos: position{line: 674, col: 17, offset: 21779},
																	run: (*parser).callonSingleQuoteMonospaceTextElement51,
																	expr: &seqExpr{
																		pos: position{line: 674, col: 17, offset: 21779},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 674, col: 17, offset: 21779},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 674, col: 21, offset: 21783},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 674, col: 28, offset: 21790},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 674, col: 28, offset: 21790},
																							run: (*parser).callonSingleQuoteMonospaceTextElement56,
																							expr: &charClassMatcher{
																								pos:        position{line: 674, col: 28, offset: 21790},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 676, col: 9, offset: 21844},
																							run: (*parser).callonSingleQuoteMonospaceTextElement58,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 676, col: 9, offset: 21844},
																								expr: &charClassMatcher{
																									pos:        position{line: 676, col: 9, offset: 21844},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 666, col: 78, offset: 21500},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 670, col: 25, offset: 21618},
												run: (*parser).callonSingleQuoteMonospaceTextElement62,
												expr: &seqExpr{
													pos: position{line: 670, col: 25, offset: 21618},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 670, col: 25, offset: 21618},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 670, col: 38, offset: 21631},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteMonospaceTextElement66,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 670, col: 57, offset: 21650},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 670, col: 63, offset: 21656},
																expr: &actionExpr{
																	pos: position{line: 674, col: 17, offset: 21779},
																	run: (*parser).callonSingleQuoteMonospaceTextElement73,
																	expr: &seqExpr{
																		pos: position{line: 674, col: 17, offset: 21779},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 674, col: 17, offset: 21779},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 674, col: 21, offset: 21783},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 674, col: 28, offset: 21790},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 674, col: 28, offset: 21790},
																							run: (*parser).callonSingleQuoteMonospaceTextElement78,
																							expr: &charClassMatcher{
																								pos:        position{line: 674, col: 28, offset: 21790},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 676, col: 9, offset: 21844},
																							run: (*parser).callonSingleQuoteMonospaceTextElement80,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 676, col: 9, offset: 21844},
																								expr: &charClassMatcher{
																									pos:        position{line: 676, col: 9, offset: 21844},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 670, col: 79, offset: 21672},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 659, col: 5, offset: 21191},
												run: (*parser).callonSingleQuoteMonospaceTextElement84,
												expr: &seqExpr{
													pos: position{line: 659, col: 5, offset: 21191},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 659, col: 5, offset: 21191},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 659, col: 9, offset: 21195},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteMonospaceTextElement88,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 659, col: 28, offset: 21214},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2139, col: 7, offset: 71273},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2599, col: 5, offset: 86909},
						run: (*parser).callonSingleQuoteMonospaceTextElement95,
						expr: &seqExpr{
							pos: position{line: 2599, col: 5, offset: 86909},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2599, col: 5, offset: 86909},
									run: (*parser).callonSingleQuoteMonospaceTextElement97,
								},
								&labeledExpr{
									pos:   position{line: 2602, col: 5, offset: 86985},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2604, col: 9, offset: 87083},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2604, col: 9, offset: 87083},
												run: (*parser).callonSingleQuoteMonospaceTextElement100,
												expr: &choiceExpr{
													pos: position{line: 694, col: 27, offset: 22498},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 694, col: 27, offset: 22498},
															run: (*parser).callonSingleQuoteMonospaceTextElement102,
															expr: &seqExpr{
																pos: position{line: 694, col: 27, offset: 22498},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 694, col: 27, offset: 22498},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 32, offset: 22503},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2884, col: 7, offset: 95839},
																			run: (*parser).callonSingleQuoteMonospaceTextElement106,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2884, col: 7, offset: 95839},
																				expr: &charClassMatcher{
																					pos:        position{line: 2884, col: 7, offset: 95839},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 694, col: 40, offset: 22511},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonSingleQuoteMonospaceTextElement110,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 47, offset: 22518},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 51, offset: 22522},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 704, col: 24, offset: 22923},
																			expr: &choiceExpr{
																				pos: position{line: 705, col: 5, offset: 22929},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 705, col: 6, offset: 22930},
																						run: (*parser).callonSingleQuoteMonospaceTextElement116,
																						expr: &seqExpr{
																							pos: position{line: 705, col: 6, offset: 22930},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 705, col: 6, offset: 22930},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 705, col: 14, offset: 22938},
																									expr: &charClassMatcher{
																										pos:        position{line: 705, col: 14, offset: 22938},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 659, col: 5, offset: 21191},
																						run: (*parser).callonSingleQuoteMonospaceTextElement121,
																						expr: &seqExpr{
																							pos: position{line: 659, col: 5, offset: 21191},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 659, col: 5, offset: 21191},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 659, col: 9, offset: 21195},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 332, col: 18, offset: 10393},
																										run: (*parser).callonSingleQuoteMonospaceTextElement125,
																										expr: &seqExpr{
																											pos: position{line: 332, col: 18, offset: 10393},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 332, col: 18, offset: 10393},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 332, col: 28, offset: 10403},
																													expr: &charClassMatcher{
																														pos:        position{line: 332, col: 29, offset: 10404},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 659, col: 28, offset: 21214},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 709, col: 8, offset: 23164},
																						run: (*parser).callonSingleQuoteMonospaceTextElement131,
																						expr: &litMatcher{
																							pos:        position{line: 709, col: 8, offset: 23164},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 79, offset: 22550},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 696, col: 9, offset: 22623},
															run: (*parser).callonSingleQuoteMonospaceTextElement134,
															expr: &seqExpr{
																pos: position{line: 696, col: 9, offset: 22623},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 696, col: 9, offset: 22623},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 696, col: 14, offset: 22628},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2884, col: 7, offset: 95839},
																			run: (*parser).callonSingleQuoteMonospaceTextElement138,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2884, col: 7, offset: 95839},
																				expr: &charClassMatcher{
																					pos:        position{line: 2884, col: 7, offset: 95839},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 696, col: 22, offset: 22636},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2607, col: 11, offset: 87187},
												run: (*parser).callonSingleQuoteMonospaceTextElement142,
												expr: &charClassMatcher{
													pos:        position{line: 2607, col: 12, offset: 87188},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2632, col: 15, offset: 88155},
						run: (*parser).callonSingleQuoteMonospaceTextElement144,
						expr: &litMatcher{
							pos:        position{line: 2632, col: 15, offset: 88155},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2638, col: 14, offset: 88270},
						run: (*parser).callonSingleQuoteMonospaceTextElement146,
						expr: &litMatcher{
							pos:        position{line: 2638, col: 14, offset: 88270},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2642, col: 14, offset: 88346},
						run: (*parser).callonSingleQuoteMonospaceTextElement148,
						expr: &litMatcher{
							pos:        position{line: 2642, col: 14, offset: 88346},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2646, col: 15, offset: 88424},
						run: (*parser).callonSingleQuoteMonospaceTextElement150,
						expr: &litMatcher{
							pos:        position{line: 2646, col: 15, offset: 88424},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2650, col: 13, offset: 88499},
						run: (*parser).callonSingleQuoteMonospaceTextElement152,
						expr: &litMatcher{
							pos:        position{line: 2650, col: 13, offset: 88499},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2658, col: 22, offset: 88805},
						run: (*parser).callonSingleQuoteMonospaceTextElement154,
						expr: &seqExpr{
							pos: position{line: 2658, col: 22, offset: 88805},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2813, col: 13, offset: 93503},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2658, col: 31, offset: 88814},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2658, col: 35, offset: 88818},
									expr: &charClassMatcher{
										pos:        position{line: 2658, col: 36, offset: 88819},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2142, col: 7, offset: 71377},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2143, col: 7, offset: 71396},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&litMatcher{
						pos:        position{line: 2636, col: 18, offset: 88234},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
					&actionExpr{
						pos: position{line: 1122, col: 23, offset: 34991},
						run: (*parser).callonSingleQuoteMonospaceTextElement163,
						expr: &seqExpr{
							pos: position{line: 1122, col: 23, offset: 34991},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1120, col: 32, offset: 34959},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1122, col: 51, offset: 35019},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1122, col: 56, offset: 35024},
										run: (*parser).callonSingleQuoteMonospaceTextElement167,
										expr: &oneOrMoreExpr{
											pos: position{line: 1122, col: 56, offset: 35024},
											expr: &charClassMatcher{
												pos:        position{line: 1122, col: 56, offset: 35024},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1120, col: 32, offset: 34959},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2161, col: 5, offset: 71895},
						run: (*parser).callonSingleQuoteMonospaceTextElement171,
						expr: &choiceExpr{
							pos: position{line: 2161, col: 6, offset: 71896},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2161, col: 6, offset: 71896},
									val:        "[^\\r\\n` ]",
									chars:      []rune{'\r', '\n', '`', ' '},
									ignoreCase: false,
									inverted:   true,
								},
								&seqExpr{
									pos: position{line: 2162, col: 7, offset: 72008},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2052, col: 27, offset: 68340},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&actionExpr{
											pos: position{line: 2817, col: 14, offset: 93577},
											run: (*parser).callonSingleQuoteMonospaceTextElement176,
											expr: &oneOrMoreExpr{
												pos: position{line: 2817, col: 14, offset: 93577},
												expr: &charClassMatcher{
													pos:        position{line: 2817, col: 14, offset: 93577},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 2148, col: 1, offset: 71527},
			expr: &actionExpr{
				pos: position{line: 2149, col: 5, offset: 71571},
				run: (*parser).callonQuotedTextInSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2149, col: 5, offset: 71571},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2149, col: 5, offset: 71571},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2149, col: 16, offset: 71582},
								expr: &ruleRefExpr{
									pos:  position{line: 2149, col: 17, offset: 71583},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2150, col: 5, offset: 71609},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2151, col: 9, offset: 71624},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2151, col: 9, offset: 71624},
										name: "DoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2152, col: 11, offset: 71659},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2153, col: 11, offset: 71678},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2154, col: 11, offset: 71699},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2155, col: 11, offset: 71720},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2156, col: 11, offset: 71744},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 2166, col: 1, offset: 72209},
			expr: &choiceExpr{
				pos: position{line: 2167, col: 5, offset: 72238},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2167, col: 5, offset: 72238},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2167, col: 5, offset: 72238},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2167, col: 5, offset: 72238},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1795, col: 25, offset: 58988},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1795, col: 25, offset: 58988},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1795, col: 25, offset: 58988},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1795, col: 30, offset: 58993},
													expr: &litMatcher{
														pos:        position{line: 1795, col: 30, offset: 58993},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2167, col: 40, offset: 72273},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2167, col: 45, offset: 72278},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2167, col: 55, offset: 72288},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2167, col: 89, offset: 72322},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2169, col: 9, offset: 72479},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 2169, col: 9, offset: 72479},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2169, col: 9, offset: 72479},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1791, col: 25, offset: 58915},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1791, col: 25, offset: 58915},
											expr: &litMatcher{
												pos:        position{line: 1791, col: 25, offset: 58915},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2169, col: 44, offset: 72514},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2169, col: 49, offset: 72519},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2169, col: 59, offset: 72529},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2169, col: 93, offset: 72563},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2172, col: 9, offset: 72763},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 2172, col: 9, offset: 72763},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2172, col: 9, offset: 72763},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1791, col: 25, offset: 58915},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1791, col: 25, offset: 58915},
											expr: &litMatcher{
												pos:        position{line: 1791, col: 25, offset: 58915},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2172, col: 44, offset: 72798},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 2172, col: 48, offset: 72802},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2172, col: 58, offset: 72812},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2172, col: 92, offset: 72846},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 2179, col: 1, offset: 73143},
			expr: &choiceExpr{
				pos: position{line: 2179, col: 15, offset: 73157},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2179, col: 15, offset: 73157},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 2179, col: 39, offset: 73181},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 2193, col: 1, offset: 73519},
			expr: &actionExpr{
				pos: position{line: 2194, col: 5, offset: 73549},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2194, col: 5, offset: 73549},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2191, col: 35, offset: 73513},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 2195, col: 5, offset: 73585},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2195, col: 15, offset: 73595},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2191, col: 35, offset: 73513},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 2200, col: 1, offset: 73758},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2200, col: 34, offset: 73791},
				expr: &ruleRefExpr{
					pos:  position{line: 2200, col: 34, offset: 73791},
					name: "DoubleQuoteMarkedTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 2202, col: 1, offset: 73822},
			expr: &actionExpr{
				pos: position{line: 2203, col: 5, offset: 73891},
				run: (*parser).callonDoubleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2203, col: 5, offset: 73891},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2203, col: 5, offset: 73891},
							expr: &litMatcher{
								pos:        position{line: 2191, col: 35, offset: 73513},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2204, col: 5, offset: 73927},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2205, col: 9, offset: 73945},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2184, col: 5, offset: 73255},
										run: (*parser).callonDoubleQuoteMarkedTextElement7,
										expr: &seqExpr{
											pos: position{line: 2184, col: 5, offset: 73255},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2184, col: 5, offset: 73255},
													expr: &charClassMatcher{
														pos:        position{line: 2184, col: 5, offset: 73255},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2184, col: 19, offset: 73269},
													expr: &choiceExpr{
														pos: position{line: 2184, col: 21, offset: 73271},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2899, col: 10, offset: 96187},
																run: (*parser).callonDoubleQuoteMarkedTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2899, col: 11, offset: 96188},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2181, col: 24, offset: 73227},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2903, col: 11, offset: 96254},
										run: (*parser).callonDoubleQuoteMarkedTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 2903, col: 11, offset: 96254},
											expr: &charClassMatcher{
												pos:        position{line: 2903, col: 12, offset: 96255},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2207, col: 11, offset: 74020},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2908, col: 12, offset: 96371},
												run: (*parser).callonDoubleQuoteMarkedTextElement20,
												expr: &choiceExpr{
													pos: position{line: 2908, col: 13, offset: 96372},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2908, col: 13, offset: 96372},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 20, offset: 96379},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 29, offset: 96388},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2207, col: 19, offset: 74028},
												expr: &actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonDoubleQuoteMarkedTextElement26,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 651, col: 5, offset: 21000},
										run: (*parser).callonDoubleQuoteMarkedTextElement31,
										expr: &seqExpr{
											pos: position{line: 651, col: 5, offset: 21000},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 651, col: 5, offset: 21000},
													run: (*parser).callonDoubleQuoteMarkedTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 654, col: 5, offset: 21069},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 654, col: 14, offset: 21078},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 666, col: 25, offset: 21447},
																run: (*parser).callonDoubleQuoteMarkedTextElement36,
																expr: &seqExpr{
																	pos: position{line: 666, col: 25, offset: 21447},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 666, col: 25, offset: 21447},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 37, offset: 21459},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteMarkedTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 56, offset: 21478},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 666, col: 62, offset: 21484},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonDoubleQuoteMarkedTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonDoubleQuoteMarkedTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonDoubleQuoteMarkedTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 666, col: 78, offset: 21500},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 670, col: 25, offset: 21618},
																run: (*parser).callonDoubleQuoteMarkedTextElement58,
																expr: &seqExpr{
																	pos: position{line: 670, col: 25, offset: 21618},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 670, col: 25, offset: 21618},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 38, offset: 21631},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteMarkedTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 57, offset: 21650},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 670, col: 63, offset: 21656},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonDoubleQuoteMarkedTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonDoubleQuoteMarkedTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonDoubleQuoteMarkedTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 670, col: 79, offset: 21672},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 659, col: 5, offset: 21191},
																run: (*parser).callonDoubleQuoteMarkedTextElement80,
																expr: &seqExpr{
																	pos: position{line: 659, col: 5, offset: 21191},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 659, col: 5, offset: 21191},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 659, col: 9, offset: 21195},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuoteMarkedTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 659, col: 28, offset: 21214},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2209, col: 11, offset: 74110},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2599, col: 5, offset: 86909},
										run: (*parser).callonDoubleQuoteMarkedTextElement91,
										expr: &seqExpr{
											pos: position{line: 2599, col: 5, offset: 86909},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2599, col: 5, offset: 86909},
													run: (*parser).callonDoubleQuoteMarkedTextElement93,
												},
												&labeledExpr{
													pos:   position{line: 2602, col: 5, offset: 86985},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2604, col: 9, offset: 87083},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2604, col: 9, offset: 87083},
																run: (*parser).callonDoubleQuoteMarkedTextElement96,
																expr: &choiceExpr{
																	pos: position{line: 694, col: 27, offset: 22498},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 694, col: 27, offset: 22498},
																			run: (*parser).callonDoubleQuoteMarkedTextElement98,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 27, offset: 22498},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 27, offset: 22498},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 32, offset: 22503},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonDoubleQuoteMarkedTextElement102,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 694, col: 40, offset: 22511},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonDoubleQuoteMarkedTextElement106,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 47, offset: 22518},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 51, offset: 22522},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 704, col: 24, offset: 22923},
																							expr: &choiceExpr{
																								pos: position{line: 705, col: 5, offset: 22929},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 705, col: 6, offset: 22930},
																										run: (*parser).callonDoubleQuoteMarkedTextElement112,
																										expr: &seqExpr{
																											pos: position{line: 705, col: 6, offset: 22930},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 705, col: 6, offset: 22930},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 705, col: 14, offset: 22938},
																													expr: &charClassMatcher{
																														pos:        position{line: 705, col: 14, offset: 22938},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 659, col: 5, offset: 21191},
																										run: (*parser).callonDoubleQuoteMarkedTextElement117,
																										expr: &seqExpr{
																											pos: position{line: 659, col: 5, offset: 21191},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 659, col: 5, offset: 21191},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 659, col: 9, offset: 21195},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonDoubleQuoteMarkedTextElement121,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 659, col: 28, offset: 21214},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 709, col: 8, offset: 23164},
																										run: (*parser).callonDoubleQuoteMarkedTextElement127,
																										expr: &litMatcher{
																											pos:        position{line: 709, col: 8, offset: 23164},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 79, offset: 22550},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 696, col: 9, offset: 22623},
																			run: (*parser).callonDoubleQuoteMarkedTextElement130,
																			expr: &seqExpr{
																				pos: position{line: 696, col: 9, offset: 22623},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 696, col: 9, offset: 22623},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 696, col: 14, offset: 22628},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonDoubleQuoteMarkedTextElement134,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 696, col: 22, offset: 22636},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2607, col: 11, offset: 87187},
																run: (*parser).callonDoubleQuoteMarkedTextElement138,
																expr: &charClassMatcher{
																	pos:        position{line: 2607, col: 12, offset: 87188},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2632, col: 15, offset: 88155},
										run: (*parser).callonDoubleQuoteMarkedTextElement140,
										expr: &litMatcher{
											pos:        position{line: 2632, col: 15, offset: 88155},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 14, offset: 88270},
										run: (*parser).callonDoubleQuoteMarkedTextElement142,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 14, offset: 88270},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2642, col: 14, offset: 88346},
										run: (*parser).callonDoubleQuoteMarkedTextElement144,
										expr: &litMatcher{
											pos:        position{line: 2642, col: 14, offset: 88346},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 15, offset: 88424},
										run: (*parser).callonDoubleQuoteMarkedTextElement146,
										expr: &litMatcher{
											pos:        position{line: 2646, col: 15, offset: 88424},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 13, offset: 88499},
										run: (*parser).callonDoubleQuoteMarkedTextElement148,
										expr: &litMatcher{
											pos:        position{line: 2650, col: 13, offset: 88499},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2658, col: 22, offset: 88805},
										run: (*parser).callonDoubleQuoteMarkedTextElement150,
										expr: &seqExpr{
											pos: position{line: 2658, col: 22, offset: 88805},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2813, col: 13, offset: 93503},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2658, col: 31, offset: 88814},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2658, col: 35, offset: 88818},
													expr: &charClassMatcher{
														pos:        position{line: 2658, col: 36, offset: 88819},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2212, col: 11, offset: 74226},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2213, col: 11, offset: 74249},
										name: "QuotedTextInDoubleMarkedBoldText",
									},
									&actionExpr{
										pos: position{line: 1122, col: 23, offset: 34991},
										run: (*parser).callonDoubleQuoteMarkedTextElement158,
										expr: &seqExpr{
											pos: position{line: 1122, col: 23, offset: 34991},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1120, col: 32, offset: 34959},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1122, col: 51, offset: 35019},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1122, col: 56, offset: 35024},
														run: (*parser).callonDoubleQuoteMarkedTextElement162,
														expr: &oneOrMoreExpr{
															pos: position{line: 1122, col: 56, offset: 35024},
															expr: &charClassMatcher{
																pos:        position{line: 1122, col: 56, offset: 35024},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1120, col: 32, offset: 34959},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2233, col: 5, offset: 74764},
										val:        "[^\\r\\n#]",
										chars:      []rune{'\r', '\n', '#'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2234, col: 7, offset: 74863},
										run: (*parser).callonDoubleQuoteMarkedTextElement167,
										expr: &seqExpr{
											pos: position{line: 2234, col: 7, offset: 74863},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2191, col: 35, offset: 73513},
													val:        "##",
													ignoreCase: false,
													want:       "\"##\"",
												},
												&actionExpr{
													pos: position{line: 2817, col: 14, offset: 93577},
													run: (*parser).callonDoubleQuoteMarkedTextElement170,
													expr: &oneOrMoreExpr{
														pos: position{line: 2817, col: 14, offset: 93577},
														expr: &charClassMatcher{
															pos:        position{line: 2817, col: 14, offset: 93577},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleMarkedBoldText",
			pos:  position{line: 2220, col: 1, offset: 74403},
			expr: &actionExpr{
				pos: position{line: 2221, col: 5, offset: 74443},
				run: (*parser).callonQuotedTextInDoubleMarkedBoldText1,
				expr: &seqExpr{
					pos: position{line: 2221, col: 5, offset: 74443},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2221, col: 5, offset: 74443},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2221, col: 16, offset: 74454},
								expr: &ruleRefExpr{
									pos:  position{line: 2221, col: 17, offset: 74455},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2222, col: 5, offset: 74481},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2223, col: 9, offset: 74496},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2223, col: 9, offset: 74496},
										name: "SingleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2224, col: 11, offset: 74528},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2225, col: 11, offset: 74547},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2226, col: 11, offset: 74568},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2227, col: 11, offset: 74592},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2228, col: 11, offset: 74616},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 2245, col: 1, offset: 75270},
			expr: &actionExpr{
				pos: position{line: 2246, col: 5, offset: 75300},
				run: (*parser).callonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2246, col: 5, offset: 75300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2241, col: 40, offset: 75222},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 2247, col: 5, offset: 75340},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2247, col: 15, offset: 75350},
								name: "SingleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2243, col: 38, offset: 75264},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 2252, col: 1, offset: 75517},
			expr: &actionExpr{
				pos: position{line: 2253, col: 5, offset: 75555},
				run: (*parser).callonSingleQuoteMarkedTextElements1,
				expr: &seqExpr{
					pos: position{line: 2253, col: 5, offset: 75555},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2253, col: 5, offset: 75555},
							expr: &notExpr{
								pos: position{line: 2912, col: 8, offset: 96461},
								expr: &anyMatcher{
									line: 2912, col: 9, offset: 96462,
								},
							},
						},
						&notExpr{
							pos: position{line: 2253, col: 10, offset: 75560},
							expr: &actionExpr{
								pos: position{line: 2899, col: 10, offset: 96187},
								run: (*parser).callonSingleQuoteMarkedTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 2899, col: 11, offset: 96188},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2254, col: 5, offset: 75599},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2254, col: 14, offset: 75608},
								expr: &ruleRefExpr{
									pos:  position{line: 2254, col: 15, offset: 75609},
									name: "SingleQuoteMarkedTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2255, col: 5, offset: 75645},
							run: (*parser).callonSingleQuoteMarkedTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 2261, col: 1, offset: 75786},
			expr: &choiceExpr{
				pos: position{line: 2262, col: 5, offset: 75823},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2184, col: 5, offset: 73255},
						run: (*parser).callonSingleQuoteMarkedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2184, col: 5, offset: 73255},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2184, col: 5, offset: 73255},
									expr: &charClassMatcher{
										pos:        position{line: 2184, col: 5, offset: 73255},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2184, col: 19, offset: 73269},
									expr: &choiceExpr{
										pos: position{line: 2184, col: 21, offset: 73271},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonSingleQuoteMarkedTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2181, col: 24, offset: 73227},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2903, col: 11, offset: 96254},
						run: (*parser).callonSingleQuoteMarkedTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 2903, col: 11, offset: 96254},
							expr: &charClassMatcher{
								pos:        position{line: 2903, col: 12, offset: 96255},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2264, col: 7, offset: 75857},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 2908, col: 12, offset: 96371},
								run: (*parser).callonSingleQuoteMarkedTextElement15,
								expr: &choiceExpr{
									pos: position{line: 2908, col: 13, offset: 96372},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2908, col: 13, offset: 96372},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2908, col: 20, offset: 96379},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 2908, col: 29, offset: 96388},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2264, col: 15, offset: 75865},
								expr: &actionExpr{
									pos: position{line: 2908, col: 12, offset: 96371},
									run: (*parser).callonSingleQuoteMarkedTextElement21,
									expr: &choiceExpr{
										pos: position{line: 2908, col: 13, offset: 96372},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2908, col: 13, offset: 96372},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 20, offset: 96379},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 29, offset: 96388},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 651, col: 5, offset: 21000},
						run: (*parser).callonSingleQuoteMarkedTextElement26,
						expr: &seqExpr{
							pos: position{line: 651, col: 5, offset: 21000},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 651, col: 5, offset: 21000},
									run: (*parser).callonSingleQuoteMarkedTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 654, col: 5, offset: 21069},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 654, col: 14, offset: 21078},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 666, col: 25, offset: 21447},
												run: (*parser).callonSingleQuoteMarkedTextElement31,
												expr: &seqExpr{
													pos: position{line: 666, col: 25, offset: 21447},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 666, col: 25, offset: 21447},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 666, col: 37, offset: 21459},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteMarkedTextElement35,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 666, col: 56, offset: 21478},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 666, col: 62, offset: 21484},
																expr: &actionExpr{
																	pos: position{line: 674, col: 17, offset: 21779},
																	run: (*parser).callonSingleQuoteMarkedTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 674, col: 17, offset: 21779},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 674, col: 17, offset: 21779},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 674, col: 21, offset: 21783},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 674, col: 28, offset: 21790},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 674, col: 28, offset: 21790},
																							run: (*parser).callonSingleQuoteMarkedTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 674, col: 28, offset: 21790},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 676, col: 9, offset: 21844},
																							run: (*parser).callonSingleQuoteMarkedTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 676, col: 9, offset: 21844},
																								expr: &charClassMatcher{
																									pos:        position{line: 676, col: 9, offset: 21844},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 666, col: 78, offset: 21500},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 670, col: 25, offset: 21618},
												run: (*parser).callonSingleQuoteMarkedTextElement53,
												expr: &seqExpr{
													pos: position{line: 670, col: 25, offset: 21618},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 670, col: 25, offset: 21618},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 670, col: 38, offset: 21631},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteMarkedTextElement57,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 670, col: 57, offset: 21650},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 670, col: 63, offset: 21656},
																expr: &actionExpr{
																	pos: position{line: 674, col: 17, offset: 21779},
																	run: (*parser).callonSingleQuoteMarkedTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 674, col: 17, offset: 21779},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 674, col: 17, offset: 21779},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 674, col: 21, offset: 21783},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 674, col: 28, offset: 21790},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 674, col: 28, offset: 21790},
																							run: (*parser).callonSingleQuoteMarkedTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 674, col: 28, offset: 21790},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 676, col: 9, offset: 21844},
																							run: (*parser).callonSingleQuoteMarkedTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 676, col: 9, offset: 21844},
																								expr: &charClassMatcher{
																									pos:        position{line: 676, col: 9, offset: 21844},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 670, col: 79, offset: 21672},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 659, col: 5, offset: 21191},
												run: (*parser).callonSingleQuoteMarkedTextElement75,
												expr: &seqExpr{
													pos: position{line: 659, col: 5, offset: 21191},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 659, col: 5, offset: 21191},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 659, col: 9, offset: 21195},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 332, col: 18, offset: 10393},
																run: (*parser).callonSingleQuoteMarkedTextElement79,
																expr: &seqExpr{
																	pos: position{line: 332, col: 18, offset: 10393},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 332, col: 18, offset: 10393},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 332, col: 28, offset: 10403},
																			expr: &charClassMatcher{
																				pos:        position{line: 332, col: 29, offset: 10404},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 659, col: 28, offset: 21214},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2266, col: 7, offset: 75939},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2599, col: 5, offset: 86909},
						run: (*parser).callonSingleQuoteMarkedTextElement86,
						expr: &seqExpr{
							pos: position{line: 2599, col: 5, offset: 86909},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2599, col: 5, offset: 86909},
									run: (*parser).callonSingleQuoteMarkedTextElement88,
								},
								&labeledExpr{
									pos:   position{line: 2602, col: 5, offset: 86985},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2604, col: 9, offset: 87083},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2604, col: 9, offset: 87083},
												run: (*parser).callonSingleQuoteMarkedTextElement91,
												expr: &choiceExpr{
													pos: position{line: 694, col: 27, offset: 22498},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 694, col: 27, offset: 22498},
															run: (*parser).callonSingleQuoteMarkedTextElement93,
															expr: &seqExpr{
																pos: position{line: 694, col: 27, offset: 22498},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 694, col: 27, offset: 22498},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 32, offset: 22503},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2884, col: 7, offset: 95839},
																			run: (*parser).callonSingleQuoteMarkedTextElement97,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2884, col: 7, offset: 95839},
																				expr: &charClassMatcher{
																					pos:        position{line: 2884, col: 7, offset: 95839},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 694, col: 40, offset: 22511},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonSingleQuoteMarkedTextElement101,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 47, offset: 22518},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 51, offset: 22522},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 704, col: 24, offset: 22923},
																			expr: &choiceExpr{
																				pos: position{line: 705, col: 5, offset: 22929},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 705, col: 6, offset: 22930},
																						run: (*parser).callonSingleQuoteMarkedTextElement107,
																						expr: &seqExpr{
																							pos: position{line: 705, col: 6, offset: 22930},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 705, col: 6, offset: 22930},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 705, col: 14, offset: 22938},
																									expr: &charClassMatcher{
																										pos:        position{line: 705, col: 14, offset: 22938},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 659, col: 5, offset: 21191},
																						run: (*parser).callonSingleQuoteMarkedTextElement112,
																						expr: &seqExpr{
																							pos: position{line: 659, col: 5, offset: 21191},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 659, col: 5, offset: 21191},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 659, col: 9, offset: 21195},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 332, col: 18, offset: 10393},
																										run: (*parser).callonSingleQuoteMarkedTextElement116,
																										expr: &seqExpr{
																											pos: position{line: 332, col: 18, offset: 10393},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 332, col: 18, offset: 10393},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 332, col: 28, offset: 10403},
																													expr: &charClassMatcher{
																														pos:        position{line: 332, col: 29, offset: 10404},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 659, col: 28, offset: 21214},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 709, col: 8, offset: 23164},
																						run: (*parser).callonSingleQuoteMarkedTextElement122,
																						expr: &litMatcher{
																							pos:        position{line: 709, col: 8, offset: 23164},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 79, offset: 22550},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 696, col: 9, offset: 22623},
															run: (*parser).callonSingleQuoteMarkedTextElement125,
															expr: &seqExpr{
																pos: position{line: 696, col: 9, offset: 22623},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 696, col: 9, offset: 22623},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 696, col: 14, offset: 22628},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 2884, col: 7, offset: 95839},
																			run: (*parser).callonSingleQuoteMarkedTextElement129,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2884, col: 7, offset: 95839},
																				expr: &charClassMatcher{
																					pos:        position{line: 2884, col: 7, offset: 95839},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 696, col: 22, offset: 22636},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2607, col: 11, offset: 87187},
												run: (*parser).callonSingleQuoteMarkedTextElement133,
												expr: &charClassMatcher{
													pos:        position{line: 2607, col: 12, offset: 87188},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2632, col: 15, offset: 88155},
						run: (*parser).callonSingleQuoteMarkedTextElement135,
						expr: &litMatcher{
							pos:        position{line: 2632, col: 15, offset: 88155},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2638, col: 14, offset: 88270},
						run: (*parser).callonSingleQuoteMarkedTextElement137,
						expr: &litMatcher{
							pos:        position{line: 2638, col: 14, offset: 88270},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2642, col: 14, offset: 88346},
						run: (*parser).callonSingleQuoteMarkedTextElement139,
						expr: &litMatcher{
							pos:        position{line: 2642, col: 14, offset: 88346},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2646, col: 15, offset: 88424},
						run: (*parser).callonSingleQuoteMarkedTextElement141,
						expr: &litMatcher{
							pos:        position{line: 2646, col: 15, offset: 88424},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2650, col: 13, offset: 88499},
						run: (*parser).callonSingleQuoteMarkedTextElement143,
						expr: &litMatcher{
							pos:        position{line: 2650, col: 13, offset: 88499},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2658, col: 22, offset: 88805},
						run: (*parser).callonSingleQuoteMarkedTextElement145,
						expr: &seqExpr{
							pos: position{line: 2658, col: 22, offset: 88805},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2813, col: 13, offset: 93503},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2658, col: 31, offset: 88814},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2658, col: 35, offset: 88818},
									expr: &charClassMatcher{
										pos:        position{line: 2658, col: 36, offset: 88819},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2269, col: 7, offset: 76043},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2270, col: 7, offset: 76062},
						name: "QuotedTextInSingleQuoteMarkedText",
					},
					&actionExpr{
						pos: position{line: 1122, col: 23, offset: 34991},
						run: (*parser).callonSingleQuoteMarkedTextElement153,
						expr: &seqExpr{
							pos: position{line: 1122, col: 23, offset: 34991},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1120, col: 32, offset: 34959},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1122, col: 51, offset: 35019},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1122, col: 56, offset: 35024},
										run: (*parser).callonSingleQuoteMarkedTextElement157,
										expr: &oneOrMoreExpr{
											pos: position{line: 1122, col: 56, offset: 35024},
											expr: &charClassMatcher{
												pos:        position{line: 1122, col: 56, offset: 35024},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1120, col: 32, offset: 34959},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 2287, col: 5, offset: 76529},
						val:        "[^\\r\\n #]",
						chars:      []rune{'\r', '\n', ' ', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2288, col: 7, offset: 76634},
						run: (*parser).callonSingleQuoteMarkedTextElement162,
						expr: &seqExpr{
							pos: position{line: 2288, col: 7, offset: 76634},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2288, col: 7, offset: 76634},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&actionExpr{
									pos: position{line: 2817, col: 14, offset: 93577},
									run: (*parser).callonSingleQuoteMarkedTextElement165,
									expr: &oneOrMoreExpr{
										pos: position{line: 2817, col: 14, offset: 93577},
										expr: &charClassMatcher{
											pos:        position{line: 2817, col: 14, offset: 93577},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMarkedText",
			pos:  position{line: 2274, col: 1, offset: 76167},
			expr: &actionExpr{
				pos: position{line: 2275, col: 5, offset: 76208},
				run: (*parser).callonQuotedTextInSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2275, col: 5, offset: 76208},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2275, col: 5, offset: 76208},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2275, col: 16, offset: 76219},
								expr: &ruleRefExpr{
									pos:  position{line: 2275, col: 17, offset: 76220},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2276, col: 5, offset: 76246},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2277, col: 9, offset: 76261},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2277, col: 9, offset: 76261},
										name: "DoubleQuoteMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2278, col: 11, offset: 76293},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2279, col: 11, offset: 76312},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2280, col: 11, offset: 76333},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2281, col: 11, offset: 76357},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2282, col: 11, offset: 76381},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 2292, col: 1, offset: 76809},
			expr: &choiceExpr{
				pos: position{line: 2293, col: 5, offset: 76834},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2293, col: 5, offset: 76834},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2293, col: 5, offset: 76834},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2293, col: 5, offset: 76834},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1795, col: 25, offset: 58988},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1795, col: 25, offset: 58988},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1795, col: 25, offset: 58988},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1795, col: 30, offset: 58993},
													expr: &litMatcher{
														pos:        position{line: 1795, col: 30, offset: 58993},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2293, col: 40, offset: 76869},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2293, col: 45, offset: 76874},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2293, col: 55, offset: 76884},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2293, col: 86, offset: 76915},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2295, col: 9, offset: 77072},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 2295, col: 9, offset: 77072},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2295, col: 9, offset: 77072},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1791, col: 25, offset: 58915},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1791, col: 25, offset: 58915},
											expr: &litMatcher{
												pos:        position{line: 1791, col: 25, offset: 58915},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2295, col: 44, offset: 77107},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2295, col: 49, offset: 77112},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2295, col: 59, offset: 77122},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2295, col: 90, offset: 77153},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2298, col: 9, offset: 77353},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 2298, col: 9, offset: 77353},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2298, col: 9, offset: 77353},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1791, col: 25, offset: 58915},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1791, col: 25, offset: 58915},
											expr: &litMatcher{
												pos:        position{line: 1791, col: 25, offset: 58915},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2298, col: 44, offset: 77388},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 2298, col: 48, offset: 77392},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2298, col: 58, offset: 77402},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2298, col: 89, offset: 77433},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 2305, col: 1, offset: 77745},
			expr: &actionExpr{
				pos: position{line: 2306, col: 5, offset: 77767},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2306, col: 5, offset: 77767},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2312, col: 27, offset: 77982},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2307, col: 5, offset: 77794},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2307, col: 14, offset: 77803},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2312, col: 27, offset: 77982},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 2314, col: 1, offset: 77987},
			expr: &choiceExpr{
				pos: position{line: 2314, col: 25, offset: 78011},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2314, col: 25, offset: 78011},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2316, col: 21, offset: 78063},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2316, col: 21, offset: 78063},
							expr: &charClassMatcher{
								pos:        position{line: 2316, col: 21, offset: 78063},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 2320, col: 1, offset: 78148},
			expr: &actionExpr{
				pos: position{line: 2321, col: 5, offset: 78177},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2321, col: 5, offset: 78177},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2321, col: 5, offset: 78177},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1791, col: 25, offset: 58915},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1791, col: 25, offset: 58915},
									expr: &litMatcher{
										pos:        position{line: 1791, col: 25, offset: 58915},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2312, col: 27, offset: 77982},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2323, col: 5, offset: 78245},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2323, col: 14, offset: 78254},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2312, col: 27, offset: 77982},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 2331, col: 1, offset: 78517},
			expr: &actionExpr{
				pos: position{line: 2332, col: 5, offset: 78541},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2332, col: 5, offset: 78541},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2338, col: 29, offset: 78768},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2333, col: 5, offset: 78571},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2333, col: 14, offset: 78580},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2338, col: 29, offset: 78768},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 2340, col: 1, offset: 78773},
			expr: &choiceExpr{
				pos: position{line: 2340, col: 27, offset: 78799},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2340, col: 27, offset: 78799},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2342, col: 23, offset: 78855},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2342, col: 23, offset: 78855},
							expr: &charClassMatcher{
								pos:        position{line: 2342, col: 23, offset: 78855},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 2346, col: 1, offset: 78940},
			expr: &actionExpr{
				pos: position{line: 2347, col: 5, offset: 78971},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2347, col: 5, offset: 78971},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2347, col: 5, offset: 78971},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1791, col: 25, offset: 58915},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1791, col: 25, offset: 58915},
									expr: &litMatcher{
										pos:        position{line: 1791, col: 25, offset: 58915},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2338, col: 29, offset: 78768},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2349, col: 5, offset: 79041},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2349, col: 14, offset: 79050},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2338, col: 29, offset: 78768},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 2358, col: 1, offset: 79498},
			expr: &choiceExpr{
				pos: position{line: 2358, col: 17, offset: 79514},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2358, col: 17, offset: 79514},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2358, col: 38, offset: 79535},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 2360, col: 1, offset: 79555},
			expr: &actionExpr{
				pos: position{line: 2361, col: 5, offset: 79582},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2361, col: 5, offset: 79582},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2373, col: 27, offset: 79957},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&notExpr{
							pos: position{line: 2373, col: 32, offset: 79962},
							expr: &charClassMatcher{
								pos:        position{line: 2373, col: 33, offset: 79963},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2362, col: 5, offset: 79610},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2362, col: 14, offset: 79619},
								name: "SingleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2375, col: 25, offset: 79998},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 2367, col: 1, offset: 79763},
			expr: &actionExpr{
				pos: position{line: 2368, col: 5, offset: 79798},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2368, col: 5, offset: 79798},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2368, col: 14, offset: 79807},
						expr: &ruleRefExpr{
							pos:  position{line: 2368, col: 15, offset: 79808},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 2382, col: 1, offset: 80211},
			expr: &actionExpr{
				pos: position{line: 2383, col: 5, offset: 80245},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2383, col: 5, offset: 80245},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2383, col: 5, offset: 80245},
							expr: &litMatcher{
								pos:        position{line: 2375, col: 25, offset: 79998},
								val:        "`'",
								ignoreCase: false,
								want:       "\"`'\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2384, col: 5, offset: 80271},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2385, col: 9, offset: 80289},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2377, col: 21, offset: 80024},
										run: (*parser).callonSingleQuotedStringElement7,
										expr: &seqExpr{
											pos: position{line: 2377, col: 21, offset: 80024},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2377, col: 21, offset: 80024},
													expr: &charClassMatcher{
														pos:        position{line: 2377, col: 21, offset: 80024},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2377, col: 31, offset: 80034},
													expr: &choiceExpr{
														pos: position{line: 2377, col: 33, offset: 80036},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2899, col: 10, offset: 96187},
																run: (*parser).callonSingleQuotedStringElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2899, col: 11, offset: 96188},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2375, col: 25, offset: 79998},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2386, col: 11, offset: 80316},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonSingleQuotedStringElement17,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&notExpr{
												pos: position{line: 2386, col: 17, offset: 80322},
												expr: &litMatcher{
													pos:        position{line: 2375, col: 25, offset: 79998},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2387, col: 11, offset: 80354},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2908, col: 12, offset: 96371},
												run: (*parser).callonSingleQuotedStringElement22,
												expr: &choiceExpr{
													pos: position{line: 2908, col: 13, offset: 96372},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2908, col: 13, offset: 96372},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 20, offset: 96379},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 29, offset: 96388},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2387, col: 19, offset: 80362},
												expr: &actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonSingleQuotedStringElement28,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 651, col: 5, offset: 21000},
										run: (*parser).callonSingleQuotedStringElement33,
										expr: &seqExpr{
											pos: position{line: 651, col: 5, offset: 21000},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 651, col: 5, offset: 21000},
													run: (*parser).callonSingleQuotedStringElement35,
												},
												&labeledExpr{
													pos:   position{line: 654, col: 5, offset: 21069},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 654, col: 14, offset: 21078},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 666, col: 25, offset: 21447},
																run: (*parser).callonSingleQuotedStringElement38,
																expr: &seqExpr{
																	pos: position{line: 666, col: 25, offset: 21447},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 666, col: 25, offset: 21447},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 37, offset: 21459},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonSingleQuotedStringElement42,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 56, offset: 21478},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 666, col: 62, offset: 21484},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonSingleQuotedStringElement49,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonSingleQuotedStringElement54,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonSingleQuotedStringElement56,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 666, col: 78, offset: 21500},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 670, col: 25, offset: 21618},
																run: (*parser).callonSingleQuotedStringElement60,
																expr: &seqExpr{
																	pos: position{line: 670, col: 25, offset: 21618},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 670, col: 25, offset: 21618},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 38, offset: 21631},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonSingleQuotedStringElement64,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 57, offset: 21650},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 670, col: 63, offset: 21656},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonSingleQuotedStringElement71,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonSingleQuotedStringElement76,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonSingleQuotedStringElement78,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 670, col: 79, offset: 21672},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 659, col: 5, offset: 21191},
																run: (*parser).callonSingleQuotedStringElement82,
																expr: &seqExpr{
																	pos: position{line: 659, col: 5, offset: 21191},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 659, col: 5, offset: 21191},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 659, col: 9, offset: 21195},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonSingleQuotedStringElement86,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 659, col: 28, offset: 21214},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2389, col: 11, offset: 80444},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2599, col: 5, offset: 86909},
										run: (*parser).callonSingleQuotedStringElement93,
										expr: &seqExpr{
											pos: position{line: 2599, col: 5, offset: 86909},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2599, col: 5, offset: 86909},
													run: (*parser).callonSingleQuotedStringElement95,
												},
												&labeledExpr{
													pos:   position{line: 2602, col: 5, offset: 86985},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2604, col: 9, offset: 87083},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2604, col: 9, offset: 87083},
																run: (*parser).callonSingleQuotedStringElement98,
																expr: &choiceExpr{
																	pos: position{line: 694, col: 27, offset: 22498},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 694, col: 27, offset: 22498},
																			run: (*parser).callonSingleQuotedStringElement100,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 27, offset: 22498},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 27, offset: 22498},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 32, offset: 22503},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonSingleQuotedStringElement104,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 694, col: 40, offset: 22511},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonSingleQuotedStringElement108,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 47, offset: 22518},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 51, offset: 22522},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 704, col: 24, offset: 22923},
																							expr: &choiceExpr{
																								pos: position{line: 705, col: 5, offset: 22929},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 705, col: 6, offset: 22930},
																										run: (*parser).callonSingleQuotedStringElement114,
																										expr: &seqExpr{
																											pos: position{line: 705, col: 6, offset: 22930},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 705, col: 6, offset: 22930},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 705, col: 14, offset: 22938},
																													expr: &charClassMatcher{
																														pos:        position{line: 705, col: 14, offset: 22938},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 659, col: 5, offset: 21191},
																										run: (*parser).callonSingleQuotedStringElement119,
																										expr: &seqExpr{
																											pos: position{line: 659, col: 5, offset: 21191},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 659, col: 5, offset: 21191},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 659, col: 9, offset: 21195},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonSingleQuotedStringElement123,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 659, col: 28, offset: 21214},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 709, col: 8, offset: 23164},
																										run: (*parser).callonSingleQuotedStringElement129,
																										expr: &litMatcher{
																											pos:        position{line: 709, col: 8, offset: 23164},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 79, offset: 22550},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 696, col: 9, offset: 22623},
																			run: (*parser).callonSingleQuotedStringElement132,
																			expr: &seqExpr{
																				pos: position{line: 696, col: 9, offset: 22623},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 696, col: 9, offset: 22623},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 696, col: 14, offset: 22628},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonSingleQuotedStringElement136,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 696, col: 22, offset: 22636},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2607, col: 11, offset: 87187},
																run: (*parser).callonSingleQuotedStringElement140,
																expr: &charClassMatcher{
																	pos:        position{line: 2607, col: 12, offset: 87188},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2391, col: 11, offset: 80543},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 1130, col: 5, offset: 35437},
												run: (*parser).callonSingleQuotedStringElement143,
												expr: &seqExpr{
													pos: position{line: 1130, col: 5, offset: 35437},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 1130, col: 5, offset: 35437},
															run: (*parser).callonSingleQuotedStringElement145,
														},
														&litMatcher{
															pos:        position{line: 1133, col: 5, offset: 35539},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1133, col: 9, offset: 35543},
															expr: &actionExpr{
																pos: position{line: 2899, col: 10, offset: 96187},
																run: (*parser).callonSingleQuotedStringElement148,
																expr: &charClassMatcher{
																	pos:        position{line: 2899, col: 11, offset: 96188},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&andExpr{
															pos: position{line: 1133, col: 16, offset: 35550},
															expr: &choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonSingleQuotedStringElement152,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2391, col: 21, offset: 80553},
												expr: &litMatcher{
													pos:        position{line: 2375, col: 25, offset: 79998},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2632, col: 15, offset: 88155},
										run: (*parser).callonSingleQuotedStringElement161,
										expr: &litMatcher{
											pos:        position{line: 2632, col: 15, offset: 88155},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2638, col: 14, offset: 88270},
										run: (*parser).callonSingleQuotedStringElement163,
										expr: &litMatcher{
											pos:        position{line: 2638, col: 14, offset: 88270},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2642, col: 14, offset: 88346},
										run: (*parser).callonSingleQuotedStringElement165,
										expr: &litMatcher{
											pos:        position{line: 2642, col: 14, offset: 88346},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2646, col: 15, offset: 88424},
										run: (*parser).callonSingleQuotedStringElement167,
										expr: &litMatcher{
											pos:        position{line: 2646, col: 15, offset: 88424},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2650, col: 13, offset: 88499},
										run: (*parser).callonSingleQuotedStringElement169,
										expr: &litMatcher{
											pos:        position{line: 2650, col: 13, offset: 88499},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2658, col: 22, offset: 88805},
										run: (*parser).callonSingleQuotedStringElement171,
										expr: &seqExpr{
											pos: position{line: 2658, col: 22, offset: 88805},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2813, col: 13, offset: 93503},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2658, col: 31, offset: 88814},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2658, col: 35, offset: 88818},
													expr: &charClassMatcher{
														pos:        position{line: 2658, col: 36, offset: 88819},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2393, col: 11, offset: 80602},
										name: "QuotedTextInSingleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2394, col: 11, offset: 80643},
										name: "DoubleQuotedString",
									},
									&charClassMatcher{
										pos:        position{line: 2412, col: 41, offset: 81161},
										val:        "[^\\r\\n\\t `]",
										chars:      []rune{'\r', '\n', '\t', ' ', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2412, col: 55, offset: 81175},
										run: (*parser).callonSingleQuotedStringElement180,
										expr: &seqExpr{
											pos: position{line: 2412, col: 55, offset: 81175},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2412, col: 55, offset: 81175},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&notExpr{
													pos: position{line: 2412, col: 59, offset: 81179},
													expr: &litMatcher{
														pos:        position{line: 2412, col: 60, offset: 81180},
														val:        "'",
														ignoreCase: false,
														want:       "\"'\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 2401, col: 1, offset: 80787},
			expr: &actionExpr{
				pos: position{line: 2402, col: 5, offset: 80825},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2402, col: 5, offset: 80825},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2402, col: 5, offset: 80825},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2402, col: 16, offset: 80836},
								expr: &ruleRefExpr{
									pos:  position{line: 2402, col: 17, offset: 80837},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2403, col: 5, offset: 80863},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2403, col: 11, offset: 80869},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2403, col: 11, offset: 80869},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2404, col: 11, offset: 80888},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2405, col: 12, offset: 80910},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2405, col: 12, offset: 80910},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2405, col: 12, offset: 80910},
													expr: &litMatcher{
														pos:        position{line: 2405, col: 13, offset: 80911},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2405, col: 18, offset: 80916},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2405, col: 27, offset: 80925},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2406, col: 11, offset: 80974},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2407, col: 11, offset: 80998},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2408, col: 11, offset: 81024},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 2416, col: 1, offset: 81252},
			expr: &actionExpr{
				pos: position{line: 2416, col: 23, offset: 81274},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2416, col: 23, offset: 81274},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2455, col: 27, offset: 82627},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&notExpr{
							pos: position{line: 2455, col: 33, offset: 82633},
							expr: &charClassMatcher{
								pos:        position{line: 2455, col: 34, offset: 82634},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2416, col: 46, offset: 81297},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2416, col: 55, offset: 81306},
								name: "DoubleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2457, col: 25, offset: 82669},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 2420, col: 1, offset: 81445},
			expr: &actionExpr{
				pos: position{line: 2420, col: 31, offset: 81475},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2420, col: 31, offset: 81475},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2420, col: 41, offset: 81485},
						expr: &ruleRefExpr{
							pos:  position{line: 2420, col: 41, offset: 81485},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 2426, col: 1, offset: 81690},
			expr: &actionExpr{
				pos: position{line: 2427, col: 5, offset: 81724},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2427, col: 5, offset: 81724},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2427, col: 5, offset: 81724},
							expr: &litMatcher{
								pos:        position{line: 2457, col: 25, offset: 82669},
								val:        "`\"",
								ignoreCase: false,
								want:       "\"`\\\"\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2428, col: 5, offset: 81750},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2429, col: 9, offset: 81768},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2377, col: 21, offset: 80024},
										run: (*parser).callonDoubleQuotedStringElement7,
										expr: &seqExpr{
											pos: position{line: 2377, col: 21, offset: 80024},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2377, col: 21, offset: 80024},
													expr: &charClassMatcher{
														pos:        position{line: 2377, col: 21, offset: 80024},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2377, col: 31, offset: 80034},
													expr: &choiceExpr{
														pos: position{line: 2377, col: 33, offset: 80036},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2899, col: 10, offset: 96187},
																run: (*parser).callonDoubleQuotedStringElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 2899, col: 11, offset: 96188},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2375, col: 25, offset: 79998},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2430, col: 11, offset: 81795},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2899, col: 10, offset: 96187},
												run: (*parser).callonDoubleQuotedStringElement17,
												expr: &charClassMatcher{
													pos:        position{line: 2899, col: 11, offset: 96188},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&notExpr{
												pos: position{line: 2430, col: 17, offset: 81801},
												expr: &litMatcher{
													pos:        position{line: 2457, col: 25, offset: 82669},
													val:        "`\"",
													ignoreCase: false,
													want:       "\"`\\\"\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2431, col: 11, offset: 81833},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2908, col: 12, offset: 96371},
												run: (*parser).callonDoubleQuotedStringElement22,
												expr: &choiceExpr{
													pos: position{line: 2908, col: 13, offset: 96372},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2908, col: 13, offset: 96372},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 20, offset: 96379},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2908, col: 29, offset: 96388},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2431, col: 19, offset: 81841},
												expr: &actionExpr{
													pos: position{line: 2908, col: 12, offset: 96371},
													run: (*parser).callonDoubleQuotedStringElement28,
													expr: &choiceExpr{
														pos: position{line: 2908, col: 13, offset: 96372},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2908, col: 13, offset: 96372},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 20, offset: 96379},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2908, col: 29, offset: 96388},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2432, col: 11, offset: 81894},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 1130, col: 5, offset: 35437},
												run: (*parser).callonDoubleQuotedStringElement34,
												expr: &seqExpr{
													pos: position{line: 1130, col: 5, offset: 35437},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 1130, col: 5, offset: 35437},
															run: (*parser).callonDoubleQuotedStringElement36,
														},
														&litMatcher{
															pos:        position{line: 1133, col: 5, offset: 35539},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1133, col: 9, offset: 35543},
															expr: &actionExpr{
																pos: position{line: 2899, col: 10, offset: 96187},
																run: (*parser).callonDoubleQuotedStringElement39,
																expr: &charClassMatcher{
																	pos:        position{line: 2899, col: 11, offset: 96188},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&andExpr{
															pos: position{line: 1133, col: 16, offset: 35550},
															expr: &choiceExpr{
																pos: position{line: 2915, col: 8, offset: 96511},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2908, col: 12, offset: 96371},
																		run: (*parser).callonDoubleQuotedStringElement43,
																		expr: &choiceExpr{
																			pos: position{line: 2908, col: 13, offset: 96372},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2908, col: 13, offset: 96372},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 20, offset: 96379},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2908, col: 29, offset: 96388},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2912, col: 8, offset: 96461},
																		expr: &anyMatcher{
																			line: 2912, col: 9, offset: 96462,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2432, col: 21, offset: 81904},
												expr: &litMatcher{
													pos:        position{line: 2375, col: 25, offset: 79998},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 651, col: 5, offset: 21000},
										run: (*parser).callonDoubleQuotedStringElement52,
										expr: &seqExpr{
											pos: position{line: 651, col: 5, offset: 21000},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 651, col: 5, offset: 21000},
													run: (*parser).callonDoubleQuotedStringElement54,
												},
												&labeledExpr{
													pos:   position{line: 654, col: 5, offset: 21069},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 654, col: 14, offset: 21078},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 666, col: 25, offset: 21447},
																run: (*parser).callonDoubleQuotedStringElement57,
																expr: &seqExpr{
																	pos: position{line: 666, col: 25, offset: 21447},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 666, col: 25, offset: 21447},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 37, offset: 21459},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuotedStringElement61,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 56, offset: 21478},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 666, col: 62, offset: 21484},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonDoubleQuotedStringElement68,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonDoubleQuotedStringElement73,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonDoubleQuotedStringElement75,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 666, col: 78, offset: 21500},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 670, col: 25, offset: 21618},
																run: (*parser).callonDoubleQuotedStringElement79,
																expr: &seqExpr{
																	pos: position{line: 670, col: 25, offset: 21618},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 670, col: 25, offset: 21618},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 38, offset: 21631},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuotedStringElement83,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 57, offset: 21650},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 670, col: 63, offset: 21656},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonDoubleQuotedStringElement90,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonDoubleQuotedStringElement95,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonDoubleQuotedStringElement97,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 670, col: 79, offset: 21672},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 659, col: 5, offset: 21191},
																run: (*parser).callonDoubleQuotedStringElement101,
																expr: &seqExpr{
																	pos: position{line: 659, col: 5, offset: 21191},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 659, col: 5, offset: 21191},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 659, col: 9, offset: 21195},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonDoubleQuotedStringElement105,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 659, col: 28, offset: 21214},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2434, col: 11, offset: 81966},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2599, col: 5, offset: 86909},
										run: (*parser).callonDoubleQuotedStringElement112,
										expr: &seqExpr{
											pos: position{line: 2599, col: 5, offset: 86909},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2599, col: 5, offset: 86909},
													run: (*parser).callonDoubleQuotedStringElement114,
												},
												&labeledExpr{
													pos:   position{line: 2602, col: 5, offset: 86985},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2604, col: 9, offset: 87083},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2604, col: 9, offset: 87083},
																run: (*parser).callonDoubleQuotedStringElement117,
																expr: &choiceExpr{
																	pos: position{line: 694, col: 27, offset: 22498},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 694, col: 27, offset: 22498},
																			run: (*parser).callonDoubleQuotedStringElement119,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 27, offset: 22498},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 27, offset: 22498},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 32, offset: 22503},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonDoubleQuotedStringElement123,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 694, col: 40, offset: 22511},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonDoubleQuotedStringElement127,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 47, offset: 22518},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 51, offset: 22522},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 704, col: 24, offset: 22923},
																							expr: &choiceExpr{
																								pos: position{line: 705, col: 5, offset: 22929},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 705, col: 6, offset: 22930},
																										run: (*parser).callonDoubleQuotedStringElement133,
																										expr: &seqExpr{
																											pos: position{line: 705, col: 6, offset: 22930},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 705, col: 6, offset: 22930},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 705, col: 14, offset: 22938},
																													expr: &charClassMatcher{
																														pos:        position{line: 705, col: 14, offset: 22938},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 659, col: 5, offset: 21191},
																										run: (*parser).callonDoubleQuotedStringElement138,
																										expr: &seqExpr{
																											pos: position{line: 659, col: 5, offset: 21191},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 659, col: 5, offset: 21191},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 659, col: 9, offset: 21195},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonDoubleQuotedStringElement142,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 659, col: 28, offset: 21214},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 709, col: 8, offset: 23164},
																										run: (*parser).callonDoubleQuotedStringElement148,
																										expr: &litMatcher{
																											pos:        position{line: 709, col: 8, offset: 23164},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 79, offset: 22550},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 696, col: 9, offset: 22623},
																			run: (*parser).callonDoubleQuotedStringElement151,
																			expr: &seqExpr{
																				pos: position{line: 696, col: 9, offset: 22623},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 696, col: 9, offset: 22623},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 696, col: 14, offset: 22628},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonDoubleQuotedStringElement155,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 696, col: 22, offset: 22636},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2607, col: 11, offset: 87187},
																run: (*parser).callonDoubleQuotedStringElement159,
																expr: &charClassMatcher{
																	pos:        position{line: 2607, col: 12, offset: 87188},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2436, col: 11, offset: 82065},
										name: "QuotedTextInDoubleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2437, col: 11, offset: 82106},
										name: "SingleQuotedString",
									},
									&actionExpr{
										pos: position{line: 2459, col: 41, offset: 82716},
										run: (*parser).callonDoubleQuotedStringElement163,
										expr: &choiceExpr{
											pos: position{line: 2459, col: 42, offset: 82717},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2459, col: 42, offset: 82717},
													val:        "[^\\r\\n\\t `]",
													chars:      []rune{'\r', '\n', '\t', ' ', '`'},
													ignoreCase: false,
													inverted:   true,
												},
												&seqExpr{
													pos: position{line: 2459, col: 56, offset: 82731},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2459, col: 56, offset: 82731},
															val:        "`",
															ignoreCase: false,
															want:       "\"`\"",
														},
														&notExpr{
															pos: position{line: 2459, col: 60, offset: 82735},
															expr: &litMatcher{
																pos:        position{line: 2459, col: 61, offset: 82736},
																val:        "\"",
																ignoreCase: false,
																want:       "\"\\\"\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 2443, col: 1, offset: 82257},
			expr: &actionExpr{
				pos: position{line: 2444, col: 5, offset: 82295},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2444, col: 5, offset: 82295},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2444, col: 5, offset: 82295},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2444, col: 16, offset: 82306},
								expr: &ruleRefExpr{
									pos:  position{line: 2444, col: 17, offset: 82307},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2445, col: 5, offset: 82333},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2446, col: 9, offset: 82348},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2446, col: 9, offset: 82348},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2447, col: 11, offset: 82367},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2448, col: 12, offset: 82389},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2448, col: 12, offset: 82389},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2448, col: 12, offset: 82389},
													expr: &litMatcher{
														pos:        position{line: 2448, col: 13, offset: 82390},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2448, col: 19, offset: 82396},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2448, col: 28, offset: 82405},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2449, col: 11, offset: 82454},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2450, col: 11, offset: 82478},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2451, col: 11, offset: 82504},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Substitutions",
			pos:  position{line: 2493, col: 1, offset: 83937},
			expr: &actionExpr{
				pos: position{line: 2494, col: 5, offset: 83991},
				run: (*parser).callonSubstitutions1,
				expr: &seqExpr{
					pos: position{line: 2494, col: 5, offset: 83991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2494, col: 5, offset: 83991},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2494, col: 14, offset: 84000},
								expr: &actionExpr{
									pos: position{line: 2495, col: 9, offset: 84010},
									run: (*parser).callonSubstitutions5,
									expr: &seqExpr{
										pos: position{line: 2495, col: 9, offset: 84010},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2495, col: 9, offset: 84010},
												expr: &notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2496, col: 9, offset: 84023},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2497, col: 13, offset: 84045},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2832, col: 5, offset: 94176},
															run: (*parser).callonSubstitutions12,
															expr: &seqExpr{
																pos: position{line: 2832, col: 5, offset: 94176},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 2832, col: 5, offset: 94176},
																		expr: &charClassMatcher{
																			pos:        position{line: 2832, col: 5, offset: 94176},
																			val:        "[,;!?0-9\\pL]",
																			chars:      []rune{',', ';', '!', '?'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2833, col: 6, offset: 94226},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonSubstitutions17,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&andExpr{
																				pos: position{line: 2833, col: 14, offset: 94234},
																				expr: &choiceExpr{
																					pos: position{line: 2833, col: 16, offset: 94236},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2833, col: 16, offset: 94236},
																							val:        "[.�]",
																							chars:      []rune{'.', '�'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonSubstitutions22,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2912, col: 8, offset: 96461},
																							expr: &anyMatcher{
																								line: 2912, col: 9, offset: 96462,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2899, col: 10, offset: 96187},
															run: (*parser).callonSubstitutions29,
															expr: &charClassMatcher{
																pos:        position{line: 2899, col: 11, offset: 96188},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&actionExpr{
															pos: position{line: 2908, col: 12, offset: 96371},
															run: (*parser).callonSubstitutions31,
															expr: &choiceExpr{
																pos: position{line: 2908, col: 13, offset: 96372},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2908, col: 13, offset: 96372},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 20, offset: 96379},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2908, col: 29, offset: 96388},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1122, col: 23, offset: 34991},
															run: (*parser).callonSubstitutions36,
															expr: &seqExpr{
																pos: position{line: 1122, col: 23, offset: 34991},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1120, col: 32, offset: 34959},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1122, col: 51, offset: 35019},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1122, col: 56, offset: 35024},
																			run: (*parser).callonSubstitutions40,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1122, col: 56, offset: 35024},
																				expr: &charClassMatcher{
																					pos:        position{line: 1122, col: 56, offset: 35024},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1120, col: 32, offset: 34959},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1130, col: 5, offset: 35437},
															run: (*parser).callonSubstitutions44,
															expr: &seqExpr{
																pos: position{line: 1130, col: 5, offset: 35437},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 1130, col: 5, offset: 35437},
																		run: (*parser).callonSubstitutions46,
																	},
																	&litMatcher{
																		pos:        position{line: 1133, col: 5, offset: 35539},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1133, col: 9, offset: 35543},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonSubstitutions49,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 1133, col: 16, offset: 35550},
																		expr: &choiceExpr{
																			pos: position{line: 2915, col: 8, offset: 96511},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonSubstitutions53,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2838, col: 16, offset: 94357},
															run: (*parser).callonSubstitutions60,
															expr: &seqExpr{
																pos: position{line: 2838, col: 16, offset: 94357},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2838, col: 16, offset: 94357},
																		label: "char",
																		expr: &actionExpr{
																			pos: position{line: 2845, col: 25, offset: 94548},
																			run: (*parser).callonSubstitutions63,
																			expr: &charClassMatcher{
																				pos:        position{line: 2845, col: 25, offset: 94548},
																				val:        "[.,;?!]",
																				chars:      []rune{'.', ',', ';', '?', '!'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 2838, col: 44, offset: 94385},
																		expr: &choiceExpr{
																			pos: position{line: 2838, col: 46, offset: 94387},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonSubstitutions67,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonSubstitutions69,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2912, col: 8, offset: 96461},
																					expr: &anyMatcher{
																						line: 2912, col: 9, offset: 96462,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2503, col: 15, offset: 84284},
															name: "Quote",
														},
														&ruleRefExpr{
															pos:  position{line: 2504, col: 15, offset: 84304},
															name: "InlinePassthrough",
														},
														&ruleRefExpr{
															pos:  position{line: 2505, col: 15, offset: 84336},
															name: "InlineMacro",
														},
														&ruleRefExpr{
															pos:  position{line: 2506, col: 15, offset: 84425},
															name: "Callout",
														},
														&actionExpr{
															pos: position{line: 2599, col: 5, offset: 86909},
															run: (*parser).callonSubstitutions80,
															expr: &seqExpr{
																pos: position{line: 2599, col: 5, offset: 86909},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 2599, col: 5, offset: 86909},
																		run: (*parser).callonSubstitutions82,
																	},
																	&labeledExpr{
																		pos:   position{line: 2602, col: 5, offset: 86985},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 2604, col: 9, offset: 87083},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2604, col: 9, offset: 87083},
																					run: (*parser).callonSubstitutions85,
																					expr: &choiceExpr{
																						pos: position{line: 694, col: 27, offset: 22498},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 694, col: 27, offset: 22498},
																								run: (*parser).callonSubstitutions87,
																								expr: &seqExpr{
																									pos: position{line: 694, col: 27, offset: 22498},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 694, col: 27, offset: 22498},
																											val:        "<<",
																											ignoreCase: false,
																											want:       "\"<<\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 694, col: 32, offset: 22503},
																											label: "id",
																											expr: &actionExpr{
																												pos: position{line: 2884, col: 7, offset: 95839},
																												run: (*parser).callonSubstitutions91,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2884, col: 7, offset: 95839},
																													expr: &charClassMatcher{
																														pos:        position{line: 2884, col: 7, offset: 95839},
																														val:        "[^[]<>,]",
																														chars:      []rune{'[', ']', '<', '>', ','},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 694, col: 40, offset: 22511},
																											expr: &actionExpr{
																												pos: position{line: 2899, col: 10, offset: 96187},
																												run: (*parser).callonSubstitutions95,
																												expr: &charClassMatcher{
																													pos:        position{line: 2899, col: 11, offset: 96188},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 694, col: 47, offset: 22518},
																											val:        ",",
																											ignoreCase: false,
																											want:       "\",\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 694, col: 51, offset: 22522},
																											label: "label",
																											expr: &oneOrMoreExpr{
																												pos: position{line: 704, col: 24, offset: 22923},
																												expr: &choiceExpr{
																													pos: position{line: 705, col: 5, offset: 22929},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 705, col: 6, offset: 22930},
																															run: (*parser).callonSubstitutions101,
																															expr: &seqExpr{
																																pos: position{line: 705, col: 6, offset: 22930},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 705, col: 6, offset: 22930},
																																		val:        "[0-9\\pL]",
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 705, col: 14, offset: 22938},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 705, col: 14, offset: 22938},
																																			val:        "[^\\r\\n{<>]",
																																			chars:      []rune{'\r', '\n', '{', '<', '>'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 659, col: 5, offset: 21191},
																															run: (*parser).callonSubstitutions106,
																															expr: &seqExpr{
																																pos: position{line: 659, col: 5, offset: 21191},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 659, col: 5, offset: 21191},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 659, col: 9, offset: 21195},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 332, col: 18, offset: 10393},
																																			run: (*parser).callonSubstitutions110,
																																			expr: &seqExpr{
																																				pos: position{line: 332, col: 18, offset: 10393},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 332, col: 18, offset: 10393},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 332, col: 28, offset: 10403},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 332, col: 29, offset: 10404},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 659, col: 28, offset: 21214},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 709, col: 8, offset: 23164},
																															run: (*parser).callonSubstitutions116,
																															expr: &litMatcher{
																																pos:        position{line: 709, col: 8, offset: 23164},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 694, col: 79, offset: 22550},
																											val:        ">>",
																											ignoreCase: false,
																											want:       "\">>\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 696, col: 9, offset: 22623},
																								run: (*parser).callonSubstitutions119,
																								expr: &seqExpr{
																									pos: position{line: 696, col: 9, offset: 22623},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 696, col: 9, offset: 22623},
																											val:        "<<",
																											ignoreCase: false,
																											want:       "\"<<\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 696, col: 14, offset: 22628},
																											label: "id",
																											expr: &actionExpr{
																												pos: position{line: 2884, col: 7, offset: 95839},
																												run: (*parser).callonSubstitutions123,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2884, col: 7, offset: 95839},
																													expr: &charClassMatcher{
																														pos:        position{line: 2884, col: 7, offset: 95839},
																														val:        "[^[]<>,]",
																														chars:      []rune{'[', ']', '<', '>', ','},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 696, col: 22, offset: 22636},
																											val:        ">>",
																											ignoreCase: false,
																											want:       "\">>\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2607, col: 11, offset: 87187},
																					run: (*parser).callonSubstitutions127,
																					expr: &charClassMatcher{
																						pos:        position{line: 2607, col: 12, offset: 87188},
																						val:        "[<>&]",
																						chars:      []rune{'<', '>', '&'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 651, col: 5, offset: 21000},
															run: (*parser).callonSubstitutions129,
															expr: &seqExpr{
																pos: position{line: 651, col: 5, offset: 21000},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 651, col: 5, offset: 21000},
																		run: (*parser).callonSubstitutions131,
																	},
																	&labeledExpr{
																		pos:   position{line: 654, col: 5, offset: 21069},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 654, col: 14, offset: 21078},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 666, col: 25, offset: 21447},
																					run: (*parser).callonSubstitutions134,
																					expr: &seqExpr{
																						pos: position{line: 666, col: 25, offset: 21447},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 666, col: 25, offset: 21447},
																								val:        "{counter:",
																								ignoreCase: false,
																								want:       "\"{counter:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 666, col: 37, offset: 21459},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 332, col: 18, offset: 10393},
																									run: (*parser).callonSubstitutions138,
																									expr: &seqExpr{
																										pos: position{line: 332, col: 18, offset: 10393},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 332, col: 18, offset: 10393},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 332, col: 28, offset: 10403},
																												expr: &charClassMatcher{
																													pos:        position{line: 332, col: 29, offset: 10404},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 666, col: 56, offset: 21478},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 666, col: 62, offset: 21484},
																									expr: &actionExpr{
																										pos: position{line: 674, col: 17, offset: 21779},
																										run: (*parser).callonSubstitutions145,
																										expr: &seqExpr{
																											pos: position{line: 674, col: 17, offset: 21779},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 674, col: 17, offset: 21779},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 674, col: 21, offset: 21783},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 674, col: 28, offset: 21790},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 674, col: 28, offset: 21790},
																																run: (*parser).callonSubstitutions150,
																																expr: &charClassMatcher{
																																	pos:        position{line: 674, col: 28, offset: 21790},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 676, col: 9, offset: 21844},
																																run: (*parser).callonSubstitutions152,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 676, col: 9, offset: 21844},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 676, col: 9, offset: 21844},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 666, col: 78, offset: 21500},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 670, col: 25, offset: 21618},
																					run: (*parser).callonSubstitutions156,
																					expr: &seqExpr{
																						pos: position{line: 670, col: 25, offset: 21618},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 670, col: 25, offset: 21618},
																								val:        "{counter2:",
																								ignoreCase: false,
																								want:       "\"{counter2:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 670, col: 38, offset: 21631},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 332, col: 18, offset: 10393},
																									run: (*parser).callonSubstitutions160,
																									expr: &seqExpr{
																										pos: position{line: 332, col: 18, offset: 10393},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 332, col: 18, offset: 10393},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 332, col: 28, offset: 10403},
																												expr: &charClassMatcher{
																													pos:        position{line: 332, col: 29, offset: 10404},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 670, col: 57, offset: 21650},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 670, col: 63, offset: 21656},
																									expr: &actionExpr{
																										pos: position{line: 674, col: 17, offset: 21779},
																										run: (*parser).callonSubstitutions167,
																										expr: &seqExpr{
																											pos: position{line: 674, col: 17, offset: 21779},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 674, col: 17, offset: 21779},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 674, col: 21, offset: 21783},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 674, col: 28, offset: 21790},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 674, col: 28, offset: 21790},
																																run: (*parser).callonSubstitutions172,
																																expr: &charClassMatcher{
																																	pos:        position{line: 674, col: 28, offset: 21790},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 676, col: 9, offset: 21844},
																																run: (*parser).callonSubstitutions174,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 676, col: 9, offset: 21844},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 676, col: 9, offset: 21844},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 670, col: 79, offset: 21672},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 659, col: 5, offset: 21191},
																					run: (*parser).callonSubstitutions178,
																					expr: &seqExpr{
																						pos: position{line: 659, col: 5, offset: 21191},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 659, col: 5, offset: 21191},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 659, col: 9, offset: 21195},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 332, col: 18, offset: 10393},
																									run: (*parser).callonSubstitutions182,
																									expr: &seqExpr{
																										pos: position{line: 332, col: 18, offset: 10393},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 332, col: 18, offset: 10393},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 332, col: 28, offset: 10403},
																												expr: &charClassMatcher{
																													pos:        position{line: 332, col: 29, offset: 10404},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 659, col: 28, offset: 21214},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2588, col: 5, offset: 86683},
															run: (*parser).callonSubstitutions188,
															expr: &seqExpr{
																pos: position{line: 2588, col: 5, offset: 86683},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 2588, col: 5, offset: 86683},
																		run: (*parser).callonSubstitutions190,
																	},
																	&labeledExpr{
																		pos:   position{line: 2591, col: 5, offset: 86754},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 2630, col: 11, offset: 88061},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2632, col: 15, offset: 88155},
																					run: (*parser).callonSubstitutions193,
																					expr: &litMatcher{
																						pos:        position{line: 2632, col: 15, offset: 88155},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 14, offset: 88270},
																					run: (*parser).callonSubstitutions195,
																					expr: &litMatcher{
																						pos:        position{line: 2638, col: 14, offset: 88270},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2642, col: 14, offset: 88346},
																					run: (*parser).callonSubstitutions197,
																					expr: &litMatcher{
																						pos:        position{line: 2642, col: 14, offset: 88346},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2646, col: 15, offset: 88424},
																					run: (*parser).callonSubstitutions199,
																					expr: &litMatcher{
																						pos:        position{line: 2646, col: 15, offset: 88424},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2650, col: 13, offset: 88499},
																					run: (*parser).callonSubstitutions201,
																					expr: &litMatcher{
																						pos:        position{line: 2650, col: 13, offset: 88499},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2658, col: 22, offset: 88805},
																					run: (*parser).callonSubstitutions203,
																					expr: &seqExpr{
																						pos: position{line: 2658, col: 22, offset: 88805},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2813, col: 13, offset: 93503},
																								val:        "[0-9\\pL]",
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&litMatcher{
																								pos:        position{line: 2658, col: 31, offset: 88814},
																								val:        "'",
																								ignoreCase: false,
																								want:       "\"'\"",
																							},
																							&andExpr{
																								pos: position{line: 2658, col: 35, offset: 88818},
																								expr: &charClassMatcher{
																									pos:        position{line: 2658, col: 36, offset: 88819},
																									val:        "[\\pL]",
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2851, col: 12, offset: 94722},
															run: (*parser).callonSubstitutions209,
															expr: &anyMatcher{
																line: 2851, col: 12, offset: 94722,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2912, col: 8, offset: 96461},
							expr: &anyMatcher{
								line: 2912, col: 9, offset: 96462,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 2519, col: 1, offset: 84859},
			expr: &actionExpr{
				pos: position{line: 2520, col: 5, offset: 84879},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 2520, col: 5, offset: 84879},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2520, col: 5, offset: 84879},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2520, col: 14, offset: 84888},
								expr: &ruleRefExpr{
									pos:  position{line: 2520, col: 15, offset: 84889},
									name: "HeaderGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2912, col: 8, offset: 96461},
							expr: &anyMatcher{
								line: 2912, col: 9, offset: 96462,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroupElement",
			pos:  position{line: 2524, col: 1, offset: 84973},
			expr: &actionExpr{
				pos: position{line: 2525, col: 5, offset: 84999},
				run: (*parser).callonHeaderGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2525, col: 5, offset: 84999},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2525, col: 5, offset: 84999},
							expr: &notExpr{
								pos: position{line: 2912, col: 8, offset: 96461},
								expr: &anyMatcher{
									line: 2912, col: 9, offset: 96462,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2526, col: 5, offset: 85008},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2527, col: 9, offset: 85026},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2825, col: 5, offset: 93958},
										run: (*parser).callonHeaderGroupElement8,
										expr: &seqExpr{
											pos: position{line: 2825, col: 5, offset: 93958},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2825, col: 5, offset: 93958},
													expr: &charClassMatcher{
														pos:        position{line: 2825, col: 5, offset: 93958},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2825, col: 15, offset: 93968},
													expr: &choiceExpr{
														pos: position{line: 2825, col: 17, offset: 93970},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2825, col: 17, offset: 93970},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 2912, col: 8, offset: 96461},
																expr: &anyMatcher{
																	line: 2912, col: 9, offset: 96462,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2827, col: 9, offset: 94052},
										run: (*parser).callonHeaderGroupElement17,
										expr: &seqExpr{
											pos: position{line: 2827, col: 9, offset: 94052},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2827, col: 9, offset: 94052},
													expr: &charClassMatcher{
														pos:        position{line: 2827, col: 9, offset: 94052},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 2827, col: 19, offset: 94062},
													expr: &seqExpr{
														pos: position{line: 2827, col: 20, offset: 94063},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 2827, col: 20, offset: 94063},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 2827, col: 27, offset: 94070},
																expr: &charClassMatcher{
																	pos:        position{line: 2827, col: 27, offset: 94070},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2528, col: 12, offset: 85042},
										run: (*parser).callonHeaderGroupElement26,
										expr: &seqExpr{
											pos: position{line: 2528, col: 12, offset: 85042},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2528, col: 12, offset: 85042},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonHeaderGroupElement29,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2528, col: 19, offset: 85049},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 416, col: 4, offset: 12902},
														run: (*parser).callonHeaderGroupElement32,
														expr: &seqExpr{
															pos: position{line: 416, col: 4, offset: 12902},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 416, col: 4, offset: 12902},
																	val:        "[[",
																	ignoreCase: false,
																	want:       "\"[[\"",
																},
																&labeledExpr{
																	pos:   position{line: 417, col: 5, offset: 12912},
																	label: "id",
																	expr: &actionExpr{
																		pos: position{line: 418, col: 9, offset: 12925},
																		run: (*parser).callonHeaderGroupElement36,
																		expr: &labeledExpr{
																			pos:   position{line: 418, col: 9, offset: 12925},
																			label: "elements",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 418, col: 18, offset: 12934},
																				expr: &choiceExpr{
																					pos: position{line: 419, col: 13, offset: 12948},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 419, col: 14, offset: 12949},
																							run: (*parser).callonHeaderGroupElement40,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 419, col: 14, offset: 12949},
																								expr: &charClassMatcher{
																									pos:        position{line: 419, col: 14, offset: 12949},
																									val:        "[^=\\r\\n�{]]",
																									chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1122, col: 23, offset: 34991},
																							run: (*parser).callonHeaderGroupElement43,
																							expr: &seqExpr{
																								pos: position{line: 1122, col: 23, offset: 34991},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1120, col: 32, offset: 34959},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1122, col: 51, offset: 35019},
																										label: "ref",
																										expr: &actionExpr{
																											pos: position{line: 1122, col: 56, offset: 35024},
																											run: (*parser).callonHeaderGroupElement47,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1122, col: 56, offset: 35024},
																												expr: &charClassMatcher{
																													pos:        position{line: 1122, col: 56, offset: 35024},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1120, col: 32, offset: 34959},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 651, col: 5, offset: 21000},
																							run: (*parser).callonHeaderGroupElement51,
																							expr: &seqExpr{
																								pos: position{line: 651, col: 5, offset: 21000},
																								exprs: []interface{}{
																									&andCodeExpr{
																										pos: position{line: 651, col: 5, offset: 21000},
																										run: (*parser).callonHeaderGroupElement53,
																									},
																									&labeledExpr{
																										pos:   position{line: 654, col: 5, offset: 21069},
																										label: "element",
																										expr: &choiceExpr{
																											pos: position{line: 654, col: 14, offset: 21078},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 666, col: 25, offset: 21447},
																													run: (*parser).callonHeaderGroupElement56,
																													expr: &seqExpr{
																														pos: position{line: 666, col: 25, offset: 21447},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 666, col: 25, offset: 21447},
																																val:        "{counter:",
																																ignoreCase: false,
																																want:       "\"{counter:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 666, col: 37, offset: 21459},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	run: (*parser).callonHeaderGroupElement60,
																																	expr: &seqExpr{
																																		pos: position{line: 332, col: 18, offset: 10393},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 332, col: 18, offset: 10393},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 332, col: 28, offset: 10403},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 332, col: 29, offset: 10404},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 666, col: 56, offset: 21478},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 666, col: 62, offset: 21484},
																																	expr: &actionExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		run: (*parser).callonHeaderGroupElement67,
																																		expr: &seqExpr{
																																			pos: position{line: 674, col: 17, offset: 21779},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 674, col: 17, offset: 21779},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 674, col: 21, offset: 21783},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 674, col: 28, offset: 21790},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 674, col: 28, offset: 21790},
																																								run: (*parser).callonHeaderGroupElement72,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 28, offset: 21790},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								run: (*parser).callonHeaderGroupElement74,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 676, col: 9, offset: 21844},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 676, col: 9, offset: 21844},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 666, col: 78, offset: 21500},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 670, col: 25, offset: 21618},
																													run: (*parser).callonHeaderGroupElement78,
																													expr: &seqExpr{
																														pos: position{line: 670, col: 25, offset: 21618},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 670, col: 25, offset: 21618},
																																val:        "{counter2:",
																																ignoreCase: false,
																																want:       "\"{counter2:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 670, col: 38, offset: 21631},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	run: (*parser).callonHeaderGroupElement82,
																																	expr: &seqExpr{
																																		pos: position{line: 332, col: 18, offset: 10393},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 332, col: 18, offset: 10393},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 332, col: 28, offset: 10403},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 332, col: 29, offset: 10404},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 670, col: 57, offset: 21650},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 670, col: 63, offset: 21656},
																																	expr: &actionExpr{
																																		pos: position{line: 674, col: 17, offset: 21779},
																																		run: (*parser).callonHeaderGroupElement89,
																																		expr: &seqExpr{
																																			pos: position{line: 674, col: 17, offset: 21779},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 674, col: 17, offset: 21779},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 674, col: 21, offset: 21783},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 674, col: 28, offset: 21790},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 674, col: 28, offset: 21790},
																																								run: (*parser).callonHeaderGroupElement94,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 28, offset: 21790},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 676, col: 9, offset: 21844},
																																								run: (*parser).callonHeaderGroupElement96,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 676, col: 9, offset: 21844},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 676, col: 9, offset: 21844},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 670, col: 79, offset: 21672},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 659, col: 5, offset: 21191},
																													run: (*parser).callonHeaderGroupElement100,
																													expr: &seqExpr{
																														pos: position{line: 659, col: 5, offset: 21191},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 659, col: 5, offset: 21191},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 659, col: 9, offset: 21195},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 332, col: 18, offset: 10393},
																																	run: (*parser).callonHeaderGroupElement104,
																																	expr: &seqExpr{
																																		pos: position{line: 332, col: 18, offset: 10393},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 332, col: 18, offset: 10393},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 332, col: 28, offset: 10403},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 332, col: 29, offset: 10404},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 659, col: 28, offset: 21214},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 424, col: 16, offset: 13182},
																							run: (*parser).callonHeaderGroupElement110,
																							expr: &litMatcher{
																								pos:        position{line: 424, col: 16, offset: 13182},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 430, col: 5, offset: 13368},
																	val:        "]]",
																	ignoreCase: false,
																	want:       "\"]]\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2528, col: 40, offset: 85070},
													expr: &actionExpr{
														pos: position{line: 2899, col: 10, offset: 96187},
														run: (*parser).callonHeaderGroupElement114,
														expr: &charClassMatcher{
															pos:        position{line: 2899, col: 11, offset: 96188},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&andExpr{
													pos: position{line: 2528, col: 47, offset: 85077},
													expr: &notExpr{
														pos: position{line: 2912, col: 8, offset: 96461},
														expr: &anyMatcher{
															line: 2912, col: 9, offset: 96462,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2899, col: 10, offset: 96187},
										run: (*parser).callonHeaderGroupElement119,
										expr: &charClassMatcher{
											pos:        position{line: 2899, col: 11, offset: 96188},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2530, col: 11, offset: 85150},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2531, col: 11, offset: 85178},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2532, col: 11, offset: 85194},
										name: "Link",
									},
									&actionExpr{
										pos: position{line: 2599, col: 5, offset: 86909},
										run: (*parser).callonHeaderGroupElement124,
										expr: &seqExpr{
											pos: position{line: 2599, col: 5, offset: 86909},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2599, col: 5, offset: 86909},
													run: (*parser).callonHeaderGroupElement126,
												},
												&labeledExpr{
													pos:   position{line: 2602, col: 5, offset: 86985},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2604, col: 9, offset: 87083},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2604, col: 9, offset: 87083},
																run: (*parser).callonHeaderGroupElement129,
																expr: &choiceExpr{
																	pos: position{line: 694, col: 27, offset: 22498},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 694, col: 27, offset: 22498},
																			run: (*parser).callonHeaderGroupElement131,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 27, offset: 22498},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 27, offset: 22498},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 32, offset: 22503},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonHeaderGroupElement135,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 694, col: 40, offset: 22511},
																						expr: &actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonHeaderGroupElement139,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 47, offset: 22518},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 51, offset: 22522},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 704, col: 24, offset: 22923},
																							expr: &choiceExpr{
																								pos: position{line: 705, col: 5, offset: 22929},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 705, col: 6, offset: 22930},
																										run: (*parser).callonHeaderGroupElement145,
																										expr: &seqExpr{
																											pos: position{line: 705, col: 6, offset: 22930},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 705, col: 6, offset: 22930},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 705, col: 14, offset: 22938},
																													expr: &charClassMatcher{
																														pos:        position{line: 705, col: 14, offset: 22938},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 659, col: 5, offset: 21191},
																										run: (*parser).callonHeaderGroupElement150,
																										expr: &seqExpr{
																											pos: position{line: 659, col: 5, offset: 21191},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 659, col: 5, offset: 21191},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 659, col: 9, offset: 21195},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 332, col: 18, offset: 10393},
																														run: (*parser).callonHeaderGroupElement154,
																														expr: &seqExpr{
																															pos: position{line: 332, col: 18, offset: 10393},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 332, col: 18, offset: 10393},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 332, col: 28, offset: 10403},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 332, col: 29, offset: 10404},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 659, col: 28, offset: 21214},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 709, col: 8, offset: 23164},
																										run: (*parser).callonHeaderGroupElement160,
																										expr: &litMatcher{
																											pos:        position{line: 709, col: 8, offset: 23164},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 79, offset: 22550},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 696, col: 9, offset: 22623},
																			run: (*parser).callonHeaderGroupElement163,
																			expr: &seqExpr{
																				pos: position{line: 696, col: 9, offset: 22623},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 696, col: 9, offset: 22623},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 696, col: 14, offset: 22628},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 7, offset: 95839},
																							run: (*parser).callonHeaderGroupElement167,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2884, col: 7, offset: 95839},
																								expr: &charClassMatcher{
																									pos:        position{line: 2884, col: 7, offset: 95839},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 696, col: 22, offset: 22636},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2607, col: 11, offset: 87187},
																run: (*parser).callonHeaderGroupElement171,
																expr: &charClassMatcher{
																	pos:        position{line: 2607, col: 12, offset: 87188},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2534, col: 11, offset: 85279},
										name: "InlineIcon",
									},
									&actionExpr{
										pos: position{line: 651, col: 5, offset: 21000},
										run: (*parser).callonHeaderGroupElement174,
										expr: &seqExpr{
											pos: position{line: 651, col: 5, offset: 21000},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 651, col: 5, offset: 21000},
													run: (*parser).callonHeaderGroupElement176,
												},
												&labeledExpr{
													pos:   position{line: 654, col: 5, offset: 21069},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 654, col: 14, offset: 21078},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 666, col: 25, offset: 21447},
																run: (*parser).callonHeaderGroupElement179,
																expr: &seqExpr{
																	pos: position{line: 666, col: 25, offset: 21447},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 666, col: 25, offset: 21447},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 37, offset: 21459},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonHeaderGroupElement183,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 666, col: 56, offset: 21478},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 666, col: 62, offset: 21484},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonHeaderGroupElement190,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonHeaderGroupElement195,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonHeaderGroupElement197,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 666, col: 78, offset: 21500},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 670, col: 25, offset: 21618},
																run: (*parser).callonHeaderGroupElement201,
																expr: &seqExpr{
																	pos: position{line: 670, col: 25, offset: 21618},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 670, col: 25, offset: 21618},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 38, offset: 21631},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonHeaderGroupElement205,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 670, col: 57, offset: 21650},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 670, col: 63, offset: 21656},
																				expr: &actionExpr{
																					pos: position{line: 674, col: 17, offset: 21779},
																					run: (*parser).callonHeaderGroupElement212,
																					expr: &seqExpr{
																						pos: position{line: 674, col: 17, offset: 21779},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 674, col: 17, offset: 21779},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 674, col: 21, offset: 21783},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 674, col: 28, offset: 21790},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 674, col: 28, offset: 21790},
																											run: (*parser).callonHeaderGroupElement217,
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 28, offset: 21790},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 676, col: 9, offset: 21844},
																											run: (*parser).callonHeaderGroupElement219,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 676, col: 9, offset: 21844},
																												expr: &charClassMatcher{
																													pos:        position{line: 676, col: 9, offset: 21844},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 670, col: 79, offset: 21672},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 659, col: 5, offset: 21191},
																run: (*parser).callonHeaderGroupElement223,
																expr: &seqExpr{
																	pos: position{line: 659, col: 5, offset: 21191},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 659, col: 5, offset: 21191},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 659, col: 9, offset: 21195},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 332, col: 18, offset: 10393},
																				run: (*parser).callonHeaderGroupElement227,
																				expr: &seqExpr{
																					pos: position{line: 332, col: 18, offset: 10393},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 332, col: 18, offset: 10393},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 332, col: 28, offset: 10403},
																							expr: &charClassMatcher{
																								pos:        position{line: 332, col: 29, offset: 10404},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 659, col: 28, offset: 21214},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1122, col: 23, offset: 34991},
										run: (*parser).callonHeaderGroupElement233,
										expr: &seqExpr{
											pos: position{line: 1122, col: 23, offset: 34991},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1120, col: 32, offset: 34959},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1122, col: 51, offset: 35019},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1122, col: 56, offset: 35024},
														run: (*parser).callonHeaderGroupElement237,
														expr: &oneOrMoreExpr{
															pos: position{line: 1122, col: 56, offset: 35024},
															expr: &charClassMatcher{
																pos:        position{line: 1122, col: 56, offset: 35024},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1120, col: 32, offset: 34959},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2588, col: 5, offset: 86683},
										run: (*parser).callonHeaderGroupElement241,
										expr: &seqExpr{
											pos: position{line: 2588, col: 5, offset: 86683},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2588, col: 5, offset: 86683},
													run: (*parser).callonHeaderGroupElement243,
												},
												&labeledExpr{
													pos:   position{line: 2591, col: 5, offset: 86754},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2630, col: 11, offset: 88061},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2632, col: 15, offset: 88155},
																run: (*parser).callonHeaderGroupElement246,
																expr: &litMatcher{
																	pos:        position{line: 2632, col: 15, offset: 88155},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2638, col: 14, offset: 88270},
																run: (*parser).callonHeaderGroupElement248,
																expr: &litMatcher{
																	pos:        position{line: 2638, col: 14, offset: 88270},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2642, col: 14, offset: 88346},
																run: (*parser).callonHeaderGroupElement250,
																expr: &litMatcher{
																	pos:        position{line: 2642, col: 14, offset: 88346},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2646, col: 15, offset: 88424},
																run: (*parser).callonHeaderGroupElement252,
																expr: &litMatcher{
																	pos:        position{line: 2646, col: 15, offset: 88424},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2650, col: 13, offset: 88499},
																run: (*parser).callonHeaderGroupElement254,
																expr: &litMatcher{
																	pos:        position{line: 2650, col: 13, offset: 88499},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2658, col: 22, offset: 88805},
																run: (*parser).callonHeaderGroupElement256,
																expr: &seqExpr{
																	pos: position{line: 2658, col: 22, offset: 88805},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2813, col: 13, offset: 93503},
																			val:        "[0-9\\pL]",
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 2658, col: 31, offset: 88814},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2658, col: 35, offset: 88818},
																			expr: &charClassMatcher{
																				pos:        position{line: 2658, col: 36, offset: 88819},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1201, col: 17, offset: 37574},
										run: (*parser).callonHeaderGroupElement262,
										expr: &seqExpr{
											pos: position{line: 1201, col: 17, offset: 37574},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1201, col: 17, offset: 37574},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1201, col: 22, offset: 37579},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2884, col: 7, offset: 95839},
														run: (*parser).callonHeaderGroupElement266,
														expr: &oneOrMoreExpr{
															pos: position{line: 2884, col: 7, offset: 95839},
															expr: &charClassMatcher{
																pos:        position{line: 2884, col: 7, offset: 95839},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1201, col: 30, offset: 37587},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2539, col: 11, offset: 85524},
										name: "InlineFootnote",
									},
									&actionExpr{
										pos: position{line: 2851, col: 12, offset: 94722},
										run: (*parser).callonHeaderGroupElement271,
										expr: &anyMatcher{
											line: 2851, col: 12, offset: 94722,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 2544, col: 1, offset: 85603},
			expr: &actionExpr{
				pos: position{line: 2546, col: 5, offset: 85685},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 2546, col: 5, offset: 85685},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2546, col: 5, offset: 85685},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 2549, col: 5, offset: 85750},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2550, col: 9, offset: 85768},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2550, col: 9, offset: 85768},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2551, col: 11, offset: 85789},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 2552, col: 11, offset: 85812},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2553, col: 11, offset: 85828},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2554, col: 11, offset: 85857},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2555, col: 11, offset: 85883},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 2556, col: 11, offset: 85909},
										name: "InlineUserMacro",
									},
									&actionExpr{
										pos: position{line: 1201, col: 17, offset: 37574},
										run: (*parser).callonInlineMacro13,
										expr: &seqExpr{
											pos: position{line: 1201, col: 17, offset: 37574},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1201, col: 17, offset: 37574},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1201, col: 22, offset: 37579},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2884, col: 7, offset: 95839},
														run: (*parser).callonInlineMacro17,
														expr: &oneOrMoreExpr{
															pos: position{line: 2884, col: 7, offset: 95839},
															expr: &charClassMatcher{
																pos:        position{line: 2884, col: 7, offset: 95839},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1201, col: 30, offset: 37587},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1218, col: 23, offset: 38271},
										run: (*parser).callonInlineMacro21,
										expr: &seqExpr{
											pos: position{line: 1218, col: 23, offset: 38271},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1218, col: 23, offset: 38271},
													val:        "(((",
													ignoreCase: false,
													want:       "\"(((\"",
												},
												&labeledExpr{
													pos:   position{line: 1218, col: 29, offset: 38277},
													label: "term1",
													expr: &actionExpr{
														pos: position{line: 1225, col: 30, offset: 38608},
														run: (*parser).callonInlineMacro25,
														expr: &oneOrMoreExpr{
															pos: position{line: 1225, col: 30, offset: 38608},
															expr: &choiceExpr{
																pos: position{line: 1225, col: 31, offset: 38609},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2813, col: 13, offset: 93503},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2899, col: 10, offset: 96187},
																		run: (*parser).callonInlineMacro29,
																		expr: &charClassMatcher{
																			pos:        position{line: 2899, col: 11, offset: 96188},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1219, col: 5, offset: 38316},
													label: "term2",
													expr: &zeroOrOneExpr{
														pos: position{line: 1219, col: 11, offset: 38322},
														expr: &actionExpr{
															pos: position{line: 1219, col: 12, offset: 38323},
															run: (*parser).callonInlineMacro33,
															expr: &seqExpr{
																pos: position{line: 1219, col: 12, offset: 38323},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1219, col: 12, offset: 38323},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonInlineMacro36,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1219, col: 19, offset: 38330},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1219, col: 23, offset: 38334},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonInlineMacro40,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1219, col: 30, offset: 38341},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1225, col: 30, offset: 38608},
																			run: (*parser).callonInlineMacro43,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1225, col: 30, offset: 38608},
																				expr: &choiceExpr{
																					pos: position{line: 1225, col: 31, offset: 38609},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2813, col: 13, offset: 93503},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonInlineMacro47,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1220, col: 5, offset: 38408},
													label: "term3",
													expr: &zeroOrOneExpr{
														pos: position{line: 1220, col: 11, offset: 38414},
														expr: &actionExpr{
															pos: position{line: 1220, col: 12, offset: 38415},
															run: (*parser).callonInlineMacro51,
															expr: &seqExpr{
																pos: position{line: 1220, col: 12, offset: 38415},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1220, col: 12, offset: 38415},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonInlineMacro54,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1220, col: 19, offset: 38422},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1220, col: 23, offset: 38426},
																		expr: &actionExpr{
																			pos: position{line: 2899, col: 10, offset: 96187},
																			run: (*parser).callonInlineMacro58,
																			expr: &charClassMatcher{
																				pos:        position{line: 2899, col: 11, offset: 96188},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1220, col: 30, offset: 38433},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1225, col: 30, offset: 38608},
																			run: (*parser).callonInlineMacro61,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1225, col: 30, offset: 38608},
																				expr: &choiceExpr{
																					pos: position{line: 1225, col: 31, offset: 38609},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2813, col: 13, offset: 93503},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2899, col: 10, offset: 96187},
																							run: (*parser).callonInlineMacro65,
																							expr: &charClassMatcher{
																								pos:        position{line: 2899, col: 11, offset: 96188},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1221, col: 5, offset: 38500},
													val:        ")))",
													ignoreCase: false,
													want:       "\")))\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2559, col: 11, offset: 85988},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2560, col: 11, offset: 86008},
										name: "InlineUserMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 2564, col: 1, offset: 86070},
			expr: &actionExpr{
				pos: position{line: 2566, col: 5, offset: 86158},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 2566, col: 5, offset: 86158},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2566, col: 5, offset: 86158},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 2569, col: 5, offset: 86235},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2570, col: 9, offset: 86253},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1282, col: 26, offset: 41515},
										run: (*parser).callonInlinePassthrough6,
										expr: &seqExpr{
											pos: position{line: 1282, col: 26, offset: 41515},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1280, col: 32, offset: 41483},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&labeledExpr{
													pos:   position{line: 1282, col: 54, offset: 41543},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1286, col: 33, offset: 41756},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1286, col: 34, offset: 41757},
																run: (*parser).callonInlinePassthrough11,
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1286, col: 34, offset: 41757},
																	expr: &seqExpr{
																		pos: position{line: 1286, col: 35, offset: 41758},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1286, col: 35, offset: 41758},
																				expr: &litMatcher{
																					pos:        position{line: 1280, col: 32, offset: 41483},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1286, col: 64, offset: 41787,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1288, col: 11, offset: 41960},
																run: (*parser).callonInlinePassthrough17,
																expr: &zeroOrOneExpr{
																	pos: position{line: 1288, col: 11, offset: 41960},
																	expr: &seqExpr{
																		pos: position{line: 1288, col: 12, offset: 41961},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1288, col: 12, offset: 41961},
																				expr: &actionExpr{
																					pos: position{line: 2899, col: 10, offset: 96187},
																					run: (*parser).callonInlinePassthrough21,
																					expr: &charClassMatcher{
																						pos:        position{line: 2899, col: 11, offset: 96188},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1288, col: 19, offset: 41968},
																				expr: &actionExpr{
																					pos: position{line: 2908, col: 12, offset: 96371},
																					run: (*parser).callonInlinePassthrough24,
																					expr: &choiceExpr{
																						pos: position{line: 2908, col: 13, offset: 96372},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2908, col: 13, offset: 96372},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 20, offset: 96379},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2908, col: 29, offset: 96388},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1288, col: 28, offset: 41977},
																				expr: &litMatcher{
																					pos:        position{line: 1280, col: 32, offset: 41483},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1288, col: 57, offset: 42006,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1280, col: 32, offset: 41483},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&notExpr{
													pos: position{line: 1282, col: 121, offset: 41610},
													expr: &charClassMatcher{
														pos:        position{line: 2813, col: 13, offset: 93503},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1270, col: 26, offset: 40798},
										run: (*parser).callonInlinePassthrough35,
										expr: &seqExpr{
											pos: position{line: 1270, col: 26, offset: 40798},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1268, col: 32, offset: 40768},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&labeledExpr{
													pos:   position{line: 1270, col: 54, offset: 40826},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1274, col: 33, offset: 41039},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1274, col: 34, offset: 41040},
																run: (*parser).callonInlinePassthrough40,
																expr: &seqExpr{
																	pos: position{line: 1274, col: 34, offset: 41040},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1274, col: 35, offset: 41041},
																			expr: &litMatcher{
																				pos:        position{line: 1268, col: 32, offset: 40768},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&notExpr{
																			pos: position{line: 1274, col: 64, offset: 41070},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonInlinePassthrough45,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1274, col: 71, offset: 41077},
																			expr: &actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonInlinePassthrough48,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 1274, col: 80, offset: 41086,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1274, col: 83, offset: 41089},
																			expr: &seqExpr{
																				pos: position{line: 1274, col: 84, offset: 41090},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1274, col: 84, offset: 41090},
																						expr: &seqExpr{
																							pos: position{line: 1274, col: 86, offset: 41092},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2903, col: 11, offset: 96254},
																									run: (*parser).callonInlinePassthrough58,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2903, col: 11, offset: 96254},
																										expr: &charClassMatcher{
																											pos:        position{line: 2903, col: 12, offset: 96255},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1268, col: 32, offset: 40768},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1274, col: 122, offset: 41128},
																						expr: &litMatcher{
																							pos:        position{line: 1268, col: 32, offset: 40768},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 1274, col: 151, offset: 41157},
																						expr: &actionExpr{
																							pos: position{line: 2908, col: 12, offset: 96371},
																							run: (*parser).callonInlinePassthrough65,
																							expr: &choiceExpr{
																								pos: position{line: 2908, col: 13, offset: 96372},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2908, col: 13, offset: 96372},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 20, offset: 96379},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2908, col: 29, offset: 96388},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1274, col: 160, offset: 41166,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1276, col: 11, offset: 41316},
																run: (*parser).callonInlinePassthrough71,
																expr: &seqExpr{
																	pos: position{line: 1276, col: 12, offset: 41317},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1276, col: 12, offset: 41317},
																			expr: &actionExpr{
																				pos: position{line: 2899, col: 10, offset: 96187},
																				run: (*parser).callonInlinePassthrough74,
																				expr: &charClassMatcher{
																					pos:        position{line: 2899, col: 11, offset: 96188},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1276, col: 19, offset: 41324},
																			expr: &actionExpr{
																				pos: position{line: 2908, col: 12, offset: 96371},
																				run: (*parser).callonInlinePassthrough77,
																				expr: &choiceExpr{
																					pos: position{line: 2908, col: 13, offset: 96372},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2908, col: 13, offset: 96372},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 20, offset: 96379},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2908, col: 29, offset: 96388},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1276, col: 28, offset: 41333},
																			expr: &litMatcher{
																				pos:        position{line: 1268, col: 32, offset: 40768},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&anyMatcher{
																			line: 1276, col: 57, offset: 41362,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1268, col: 32, offset: 40768},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&notExpr{
													pos: position{line: 1270, col: 121, offset: 40893},
													expr: &charClassMatcher{
														pos:        position{line: 2813, col: 13, offset: 93503},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2570, col: 57, offset: 86301},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 2575, col: 1, offset: 86361},
			expr: &actionExpr{
				pos: position{line: 2577, col: 5, offset: 86437},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 2577, col: 5, offset: 86437},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2577, col: 5, offset: 86437},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 2580, col: 5, offset: 86502},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2581, col: 9, offset: 86520},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2581, col: 9, offset: 86520},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2582, col: 11, offset: 86542},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableColumnsAttribute",
			pos:  position{line: 2728, col: 1, offset: 90561},
			expr: &actionExpr{
				pos: position{line: 2728, col: 26, offset: 90586},
				run: (*parser).callonTableColumnsAttribute1,
				expr: &seqExpr{
					pos: position{line: 2728, col: 26, offset: 90586},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2728, col: 26, offset: 90586},
							label: "cols",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2728, col: 31, offset: 90591},
								expr: &actionExpr{
									pos: position{line: 2733, col: 5, offset: 90654},
									run: (*parser).callonTableColumnsAttribute5,
									expr: &seqExpr{
										pos: position{line: 2733, col: 5, offset: 90654},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2733, col: 5, offset: 90654},
												expr: &notExpr{
													pos: position{line: 2912, col: 8, offset: 96461},
													expr: &anyMatcher{
														line: 2912, col: 9, offset: 96462,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2736, col: 5, offset: 90778},
												label: "multiplier",
												expr: &zeroOrOneExpr{
													pos: position{line: 2736, col: 16, offset: 90789},
													expr: &actionExpr{
														pos: position{line: 2736, col: 17, offset: 90790},
														run: (*parser).callonTableColumnsAttribute12,
														expr: &seqExpr{
															pos: position{line: 2736, col: 17, offset: 90790},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 2736, col: 17, offset: 90790},
																	label: "n",
																	expr: &actionExpr{
																		pos: position{line: 2891, col: 12, offset: 96014},
																		run: (*parser).callonTableColumnsAttribute15,
																		expr: &seqExpr{
																			pos: position{line: 2891, col: 13, offset: 96015},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2891, col: 13, offset: 96015},
																					expr: &litMatcher{
																						pos:        position{line: 2891, col: 13, offset: 96015},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2891, col: 18, offset: 96020},
																					expr: &charClassMatcher{
																						pos:        position{line: 2891, col: 18, offset: 96020},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2736, col: 27, offset: 90800},
																	val:        "*",
																	ignoreCase: false,
																	want:       "\"*\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2737, col: 5, offset: 90828},
												label: "halign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2737, col: 12, offset: 90835},
													expr: &choiceExpr{
														pos: position{line: 2738, col: 9, offset: 90845},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2738, col: 9, offset: 90845},
																run: (*parser).callonTableColumnsAttribute25,
																expr: &litMatcher{
																	pos:        position{line: 2738, col: 9, offset: 90845},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2739, col: 11, offset: 90892},
																run: (*parser).callonTableColumnsAttribute27,
																expr: &litMatcher{
																	pos:        position{line: 2739, col: 11, offset: 90892},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 2740, col: 11, offset: 90940},
																run: (*parser).callonTableColumnsAttribute29,
																expr: &litMatcher{
																	pos:        position{line: 2740, col: 11, offset: 90940},
																	val:        "^",
																	ignoreCase: false,
																	want:       "\"^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2742, col: 5, offset: 90990},
												label: "valign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2742, col: 12, offset: 90997},
													expr: &choiceExpr{
														pos: position{line: 2743, col: 9, offset: 91007},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2743, col: 9, offset: 91007},
																run: (*parser).callonTableColumnsAttribute34,
																expr: &litMatcher{
																	pos:        position{line: 2743, col: 9, offset: 91007},
																	val:        ".<",
																	ignoreCase: false,
																	want:       "\".<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2744, col: 11, offset: 91054},
																run: (*parser).callonTableColumnsAttribute36,
																expr: &litMatcher{
																	pos:        position{line: 2744, col: 11, offset: 91054},
																	val:        ".>",
																	ignoreCase: false,
																	want:       "\".>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2745, col: 11, offset: 91104},
																run: (*parser).callonTableColumnsAttribute38,
																expr: &litMatcher{
																	pos:        position{line: 2745, col: 11, offset: 91104},
																	val:        ".^",
																	ignoreCase: false,
																	want:       "\".^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2747, col: 5, offset: 91155},
												label: "weight",
												expr: &zeroOrOneExpr{
													pos: position{line: 2747, col: 12, offset: 91162},
													expr: &choiceExpr{
														pos: position{line: 2747, col: 13, offset: 91163},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2891, col: 12, offset: 96014},
																run: (*parser).callonTableColumnsAttribute43,
																expr: &seqExpr{
																	pos: position{line: 2891, col: 13, offset: 96015},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2891, col: 13, offset: 96015},
																			expr: &litMatcher{
																				pos:        position{line: 2891, col: 13, offset: 96015},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2891, col: 18, offset: 96020},
																			expr: &charClassMatcher{
																				pos:        position{line: 2891, col: 18, offset: 96020},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2747, col: 24, offset: 91174},
																run: (*parser).callonTableColumnsAttribute49,
																expr: &litMatcher{
																	pos:        position{line: 2747, col: 24, offset: 91174},
																	val:        "~",
																	ignoreCase: false,
																	want:       "\"~\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2748, col: 5, offset: 91216},
												label: "style",
												expr: &zeroOrOneExpr{
													pos: position{line: 2748, col: 11, offset: 91222},
													expr: &actionExpr{
														pos: position{line: 2748, col: 12, offset: 91223},
														run: (*parser).callonTableColumnsAttribute53,
														expr: &charClassMatcher{
															pos:        position{line: 2748, col: 12, offset: 91223},
															val:        "[adehlms]",
															chars:      []rune{'a', 'd', 'e', 'h', 'l', 'm', 's'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2750, col: 5, offset: 91353},
												label: "comma",
												expr: &zeroOrOneExpr{
													pos: position{line: 2750, col: 11, offset: 91359},
													expr: &litMatcher{
														pos:        position{line: 2750, col: 12, offset: 91360},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 2751, col: 5, offset: 91370},
												run: (*parser).callonTableColumnsAttribute58,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2912, col: 8, offset: 96461},
							expr: &anyMatcher{
								line: 2912, col: 9, offset: 96462,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2778, col: 1, offset: 92379},
			expr: &actionExpr{
				pos: position{line: 2779, col: 5, offset: 92402},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2779, col: 5, offset: 92402},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2779, col: 5, offset: 92402},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2802, col: 18, offset: 93167},
								run: (*parser).callonUserMacroBlock4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2802, col: 19, offset: 93168},
									expr: &charClassMatcher{
										pos:        position{line: 2802, col: 19, offset: 93168},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2780, col: 5, offset: 92428},
							run: (*parser).callonUserMacroBlock7,
						},
						&litMatcher{
							pos:        position{line: 2784, col: 5, offset: 92568},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2785, col: 5, offset: 92578},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2806, col: 19, offset: 93243},
								run: (*parser).callonUserMacroBlock10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2806, col: 19, offset: 93243},
									expr: &charClassMatcher{
										pos:        position{line: 2806, col: 19, offset: 93243},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2786, col: 5, offset: 92606},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2786, col: 17, offset: 92618},
								name: "InlineAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 2915, col: 8, offset: 96511},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2908, col: 12, offset: 96371},
									run: (*parser).callonUserMacroBlock16,
									expr: &choiceExpr{
										pos: position{line: 2908, col: 13, offset: 96372},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2908, col: 13, offset: 96372},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 20, offset: 96379},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2908, col: 29, offset: 96388},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2912, col: 8, offset: 96461},
									expr: &anyMatcher{
										line: 2912, col: 9, offset: 96462,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2790, col: 1, offset: 92766},
			expr: &actionExpr{
				pos: position{line: 2791, col: 5, offset: 92790},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2791, col: 5, offset: 92790},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2791, col: 5, offset: 92790},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2802, col: 18, offset: 93167},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2802, col: 19, offset: 93168},
									expr: &charClassMatcher{
										pos:        position{line: 2802, col: 19, offset: 93168},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2792, col: 5, offset: 92816},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 2796, col: 5, offset: 92956},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2797, col: 5, offset: 92965},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2806, col: 19, offset: 93243},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2806, col: 19, offset: 93243},
									expr: &charClassMatcher{
										pos:        position{line: 2806, col: 19, offset: 93243},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2798, col: 5, offset: 92993},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2798, col: 17, offset: 93005},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2855, col: 1, offset: 94789},
			expr: &actionExpr{
				pos: position{line: 2855, col: 17, offset: 94805},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2855, col: 17, offset: 94805},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2855, col: 22, offset: 94810},
						expr: &choiceExpr{
							pos: position{line: 2855, col: 23, offset: 94811},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2870, col: 5, offset: 95267},
									run: (*parser).callonFileLocation5,
									expr: &seqExpr{
										pos: position{line: 2870, col: 5, offset: 95267},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2870, col: 5, offset: 95267},
												expr: &litMatcher{
													pos:        position{line: 2870, col: 6, offset: 95268},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 2871, col: 5, offset: 95292},
												label: "elements",
												expr: &oneOrMoreExpr{
													pos: position{line: 2871, col: 14, offset: 95301},
													expr: &choiceExpr{
														pos: position{line: 2872, col: 9, offset: 95311},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2872, col: 9, offset: 95311},
																run: (*parser).callonFileLocation12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2872, col: 9, offset: 95311},
																	expr: &charClassMatcher{
																		pos:        position{line: 2872, col: 10, offset: 95312},
																		val:        "[^\\r\\n[]�{.,;?!<> ]",
																		chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&seqExpr{
																pos: position{line: 2875, col: 11, offset: 95577},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 2845, col: 25, offset: 94548},
																		run: (*parser).callonFileLocation16,
																		expr: &charClassMatcher{
																			pos:        position{line: 2845, col: 25, offset: 94548},
																			val:        "[.,;?!]",
																			chars:      []rune{'.', ',', ';', '?', '!'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&andExpr{
																		pos: position{line: 2875, col: 32, offset: 95598},
																		expr: &notExpr{
																			pos: position{line: 2875, col: 34, offset: 95600},
																			expr: &choiceExpr{
																				pos: position{line: 2875, col: 36, offset: 95602},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2912, col: 8, offset: 96461},
																						expr: &anyMatcher{
																							line: 2912, col: 9, offset: 96462,
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2899, col: 10, offset: 96187},
																						run: (*parser).callonFileLocation23,
																						expr: &charClassMatcher{
																							pos:        position{line: 2899, col: 11, offset: 96188},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 651, col: 5, offset: 21000},
																run: (*parser).callonFileLocation25,
																expr: &seqExpr{
																	pos: position{line: 651, col: 5, offset: 21000},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 651, col: 5, offset: 21000},
																			run: (*parser).callonFileLocation27,
																		},
																		&labeledExpr{
																			pos:   position{line: 654, col: 5, offset: 21069},
																			label: "element",
																			expr: &choiceExpr{
																				pos: position{line: 654, col: 14, offset: 21078},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 666, col: 25, offset: 21447},
																						run: (*parser).callonFileLocation30,
																						expr: &seqExpr{
																							pos: position{line: 666, col: 25, offset: 21447},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 666, col: 25, offset: 21447},
																									val:        "{counter:",
																									ignoreCase: false,
																									want:       "\"{counter:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 666, col: 37, offset: 21459},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 332, col: 18, offset: 10393},
																										run: (*parser).callonFileLocation34,
																										expr: &seqExpr{
																											pos: position{line: 332, col: 18, offset: 10393},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 332, col: 18, offset: 10393},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 332, col: 28, offset: 10403},
																													expr: &charClassMatcher{
																														pos:        position{line: 332, col: 29, offset: 10404},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 666, col: 56, offset: 21478},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 666, col: 62, offset: 21484},
																										expr: &actionExpr{
																											pos: position{line: 674, col: 17, offset: 21779},
																											run: (*parser).callonFileLocation41,
																											expr: &seqExpr{
																												pos: position{line: 674, col: 17, offset: 21779},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 674, col: 17, offset: 21779},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 674, col: 21, offset: 21783},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 674, col: 28, offset: 21790},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 674, col: 28, offset: 21790},
																																	run: (*parser).callonFileLocation46,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 674, col: 28, offset: 21790},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 676, col: 9, offset: 21844},
																																	run: (*parser).callonFileLocation48,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 676, col: 9, offset: 21844},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 676, col: 9, offset: 21844},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 666, col: 78, offset: 21500},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 670, col: 25, offset: 21618},
																						run: (*parser).callonFileLocation52,
																						expr: &seqExpr{
																							pos: position{line: 670, col: 25, offset: 21618},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 670, col: 25, offset: 21618},
																									val:        "{counter2:",
																									ignoreCase: false,
																									want:       "\"{counter2:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 670, col: 38, offset: 21631},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 332, col: 18, offset: 10393},
																										run: (*parser).callonFileLocation56,
																										expr: &seqExpr{
																											pos: position{line: 332, col: 18, offset: 10393},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 332, col: 18, offset: 10393},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 332, col: 28, offset: 10403},
																													expr: &charClassMatcher{
																														pos:        position{line: 332, col: 29, offset: 10404},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 670, col: 57, offset: 21650},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 670, col: 63, offset: 21656},
																										expr: &actionExpr{
																											pos: position{line: 674, col: 17, offset: 21779},
																											run: (*parser).callonFileLocation63,
																											expr: &seqExpr{
																												pos: position{line: 674, col: 17, offset: 21779},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 674, col: 17, offset: 21779},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 674, col: 21, offset: 21783},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 674, col: 28, offset: 21790},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 674, col: 28, offset: 21790},
																																	run: (*parser).callonFileLocation68,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 674, col: 28, offset: 21790},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 676, col: 9, offset: 21844},
																																	run: (*parser).callonFileLocation70,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 676, col: 9, offset: 21844},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 676, col: 9, offset: 21844},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 670, col: 79, offset: 21672},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 659, col: 5, offset: 21191},
																						run: (*parser).callonFileLocation74,
																						expr: &seqExpr{
																							pos: position{line: 659, col: 5, offset: 21191},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 659, col: 5, offset: 21191},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 659, col: 9, offset: 21195},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 332, col: 18, offset: 10393},
																										run: (*parser).callonFileLocation78,
																										expr: &seqExpr{
																											pos: position{line: 332, col: 18, offset: 10393},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 332, col: 18, offset: 10393},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 332, col: 28, offset: 10403},
																													expr: &charClassMatcher{
																														pos:        position{line: 332, col: 29, offset: 10404},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 659, col: 28, offset: 21214},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2599, col: 5, offset: 86909},
																run: (*parser).callonFileLocation84,
																expr: &seqExpr{
																	pos: position{line: 2599, col: 5, offset: 86909},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2599, col: 5, offset: 86909},
																			run: (*parser).callonFileLocation86,
																		},
																		&labeledExpr{
																			pos:   position{line: 2602, col: 5, offset: 86985},
																			label: "element",
																			expr: &choiceExpr{
																				pos: position{line: 2604, col: 9, offset: 87083},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2604, col: 9, offset: 87083},
																						run: (*parser).callonFileLocation89,
																						expr: &choiceExpr{
																							pos: position{line: 694, col: 27, offset: 22498},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 694, col: 27, offset: 22498},
																									run: (*parser).callonFileLocation91,
																									expr: &seqExpr{
																										pos: position{line: 694, col: 27, offset: 22498},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 694, col: 27, offset: 22498},
																												val:        "<<",
																												ignoreCase: false,
																												want:       "\"<<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 694, col: 32, offset: 22503},
																												label: "id",
																												expr: &actionExpr{
																													pos: position{line: 2884, col: 7, offset: 95839},
																													run: (*parser).callonFileLocation95,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2884, col: 7, offset: 95839},
																														expr: &charClassMatcher{
																															pos:        position{line: 2884, col: 7, offset: 95839},
																															val:        "[^[]<>,]",
																															chars:      []rune{'[', ']', '<', '>', ','},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 694, col: 40, offset: 22511},
																												expr: &actionExpr{
																													pos: position{line: 2899, col: 10, offset: 96187},
																													run: (*parser).callonFileLocation99,
																													expr: &charClassMatcher{
																														pos:        position{line: 2899, col: 11, offset: 96188},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 694, col: 47, offset: 22518},
																												val:        ",",
																												ignoreCase: false,
																												want:       "\",\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 694, col: 51, offset: 22522},
																												label: "label",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 704, col: 24, offset: 22923},
																													expr: &choiceExpr{
																														pos: position{line: 705, col: 5, offset: 22929},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 705, col: 6, offset: 22930},
																																run: (*parser).callonFileLocation105,
																																expr: &seqExpr{
																																	pos: position{line: 705, col: 6, offset: 22930},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 705, col: 6, offset: 22930},
																																			val:        "[0-9\\pL]",
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 705, col: 14, offset: 22938},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 705, col: 14, offset: 22938},
																																				val:        "[^\\r\\n{<>]",
																																				chars:      []rune{'\r', '\n', '{', '<', '>'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 659, col: 5, offset: 21191},
																																run: (*parser).callonFileLocation110,
																																expr: &seqExpr{
																																	pos: position{line: 659, col: 5, offset: 21191},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 659, col: 5, offset: 21191},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 659, col: 9, offset: 21195},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 332, col: 18, offset: 10393},
																																				run: (*parser).callonFileLocation114,
																																				expr: &seqExpr{
																																					pos: position{line: 332, col: 18, offset: 10393},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 332, col: 18, offset: 10393},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 332, col: 28, offset: 10403},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 332, col: 29, offset: 10404},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 659, col: 28, offset: 21214},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 709, col: 8, offset: 23164},
																																run: (*parser).callonFileLocation120,
																																expr: &litMatcher{
																																	pos:        position{line: 709, col: 8, offset: 23164},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 694, col: 79, offset: 22550},
																												val:        ">>",
																												ignoreCase: false,
																												want:       "\">>\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 696, col: 9, offset: 22623},
																									run: (*parser).callonFileLocation123,
																									expr: &seqExpr{
																										pos: position{line: 696, col: 9, offset: 22623},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 696, col: 9, offset: 22623},
																												val:        "<<",
																												ignoreCase: false,
																												want:       "\"<<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 696, col: 14, offset: 22628},
																												label: "id",
																												expr: &actionExpr{
																													pos: position{line: 2884, col: 7, offset: 95839},
																													run: (*parser).callonFileLocation127,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2884, col: 7, offset: 95839},
																														expr: &charClassMatcher{
																															pos:        position{line: 2884, col: 7, offset: 95839},
																															val:        "[^[]<>,]",
																															chars:      []rune{'[', ']', '<', '>', ','},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 696, col: 22, offset: 22636},
																												val:        ">>",
																												ignoreCase: false,
																												want:       "\">>\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2607, col: 11, offset: 87187},
																						run: (*parser).callonFileLocation131,
																						expr: &charClassMatcher{
																							pos:        position{line: 2607, col: 12, offset: 87188},
																							val:        "[<>&]",
																							chars:      []rune{'<', '>', '&'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2878, col: 11, offset: 95683},
																run: (*parser).callonFileLocation133,
																expr: &litMatcher{
																	pos:        position{line: 2878, col: 11, offset: 95683},
																	val:        "{",
																	ignoreCase: false,
																	want:       "\"{\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1122, col: 23, offset: 34991},
									run: (*parser).callonFileLocation135,
									expr: &seqExpr{
										pos: position{line: 1122, col: 23, offset: 34991},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1120, col: 32, offset: 34959},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1122, col: 51, offset: 35019},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1122, col: 56, offset: 35024},
													run: (*parser).callonFileLocation139,
													expr: &oneOrMoreExpr{
														pos: position{line: 1122, col: 56, offset: 35024},
														expr: &charClassMatcher{
															pos:        position{line: 1122, col: 56, offset: 35024},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1120, col: 32, offset: 34959},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocumentRawLine10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine10()
}

func (c *current) onDocumentRawLine17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine17()
}

func (c *current) onDocumentRawLine20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine20()
}

func (c *current) onDocumentRawLine6(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine6(stack["name"])
}

func (c *current) onDocumentRawLine31() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine31()
}

func (c *current) onDocumentRawLine38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine38()
}

func (c *current) onDocumentRawLine41() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine41()
}

func (c *current) onDocumentRawLine27(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentRawLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine27(stack["name"])
}

func (c *current) onDocumentRawLine53() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine53()
}

func (c *current) onDocumentRawLine59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine59()
}

func (c *current) onDocumentRawLine64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine64()
}

func (c *current) onDocumentRawLine49(name, attr interface{}) (interface{}, error) {
	return types.NewIfdefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine49(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine72() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine72()
}

func (c *current) onDocumentRawLine78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine78()
}

func (c *current) onDocumentRawLine83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine83()
}

func (c *current) onDocumentRawLine68(name, attr interface{}) (interface{}, error) {
	return types.NewIfndefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine68(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine100() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine100()
}

func (c *current) onDocumentRawLine96(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine96(stack["name"])
}

func (c *current) onDocumentRawLine92(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine92(stack["s"])
}

func (c *current) onDocumentRawLine115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine115()
}

func (c *current) onDocumentRawLine111(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine111(stack["name"])
}

func (c *current) onDocumentRawLine107(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine107(stack["s"])
}

func (c *current) onDocumentRawLine128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine128()
}

func (c *current) onDocumentRawLine124(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine124(stack["name"])
}

func (c *current) onDocumentRawLine122(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine122(stack["s"])
}

func (c *current) onDocumentRawLine138() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine138()
}

func (c *current) onDocumentRawLine134(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine134(stack["w"])
}

func (c *current) onDocumentRawLine146() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine146()
}

func (c *current) onDocumentRawLine142(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine142(stack["w"])
}

func (c *current) onDocumentRawLine150() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine150()
}

func (c *current) onDocumentRawLine157() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine157()
}

func (c *current) onDocumentRawLine161() (interface{}, error) {
	return types.NewEqualOperand()

}

func (p *parser) callonDocumentRawLine161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine161()
}

func (c *current) onDocumentRawLine163() (interface{}, error) {
	return types.NewNotEqualOperand()

}

func (p *parser) callonDocumentRawLine163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine163()
}

func (c *current) onDocumentRawLine165() (interface{}, error) {
	return types.NewLessThanOperand()

}

func (p *parser) callonDocumentRawLine165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine165()
}

func (c *current) onDocumentRawLine167() (interface{}, error) {
	return types.NewLessOrEqualOperand()

}

func (p *parser) callonDocumentRawLine167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine167()
}

func (c *current) onDocumentRawLine169() (interface{}, error) {
	return types.NewGreaterThanOperand()

}

func (p *parser) callonDocumentRawLine169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine169()
}

func (c *current) onDocumentRawLine171() (interface{}, error) {
	return types.NewGreaterOrEqualOperand()

}

func (p *parser) callonDocumentRawLine171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine171()
}

func (c *current) onDocumentRawLine174() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine174()
}

func (c *current) onDocumentRawLine186() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine186()
}

func (c *current) onDocumentRawLine182(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine182(stack["name"])
}

func (c *current) onDocumentRawLine178(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine178(stack["s"])
}

func (c *current) onDocumentRawLine201() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine201()
}

func (c *current) onDocumentRawLine197(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine197(stack["name"])
}

func (c *current) onDocumentRawLine193(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine193(stack["s"])
}

func (c *current) onDocumentRawLine214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine214()
}

func (c *current) onDocumentRawLine210(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine210(stack["name"])
}

func (c *current) onDocumentRawLine208(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine208(stack["s"])
}

func (c *current) onDocumentRawLine224() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine224()
}

func (c *current) onDocumentRawLine220(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine220(stack["w"])
}

func (c *current) onDocumentRawLine232() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine232()
}

func (c *current) onDocumentRawLine228(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine228(stack["w"])
}

func (c *current) onDocumentRawLine236() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine236()
}

func (c *current) onDocumentRawLine244() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine244()
}

func (c *current) onDocumentRawLine87(left, operand, right interface{}) (interface{}, error) {
	return types.NewIfevalCondition(left, right, operand.(types.IfevalOperand))

}

func (p *parser) callonDocumentRawLine87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine87(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onDocumentRawLine253() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine253()
}

func (c *current) onDocumentRawLine259() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine259()
}

func (c *current) onDocumentRawLine264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine264()
}

func (c *current) onDocumentRawLine248(name, attr interface{}) (interface{}, error) {
	return types.NewEndOfCondition() // name and attributes are parsed but ignored

}

func (p *parser) callonDocumentRawLine248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine248(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine278() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine278()
}

func (c *current) onDocumentRawLine281() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine281()
}

func (c *current) onDocumentRawLine274() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentRawLine274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine274()
}

func (c *current) onDocumentRawLine292() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine292()
}

func (c *current) onDocumentRawLine295() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine295()
}

func (c *current) onDocumentRawLine288() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonDocumentRawLine288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine288()
}

func (c *current) onDocumentRawLine306() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine306()
}

func (c *current) onDocumentRawLine310() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine310()
}

func (c *current) onDocumentRawLine313() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine313()
}

func (c *current) onDocumentRawLine302(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentRawLine302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine302(stack["language"])
}

func (c *current) onDocumentRawLine324() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine324()
}

func (c *current) onDocumentRawLine327() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine327() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine327()
}

func (c *current) onDocumentRawLine320() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentRawLine320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine320()
}

func (c *current) onDocumentRawLine338() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine338()
}

func (c *current) onDocumentRawLine341() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine341()
}

func (c *current) onDocumentRawLine334() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonDocumentRawLine334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine334()
}

func (c *current) onDocumentRawLine352() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine352()
}

func (c *current) onDocumentRawLine355() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine355()
}

func (c *current) onDocumentRawLine348() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonDocumentRawLine348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine348()
}

func (c *current) onDocumentRawLine366() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine366()
}

func (c *current) onDocumentRawLine369() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine369()
}

func (c *current) onDocumentRawLine362() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonDocumentRawLine362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine362()
}

func (c *current) onDocumentRawLine380() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine380()
}

func (c *current) onDocumentRawLine383() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine383()
}

func (c *current) onDocumentRawLine376() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonDocumentRawLine376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine376()
}

func (c *current) onDocumentRawLine394() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine394()
}

func (c *current) onDocumentRawLine397() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine397()
}

func (c *current) onDocumentRawLine390() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonDocumentRawLine390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine390()
}

func (c *current) onDocumentRawLine268(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentRawLine268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine268(stack["delimiter"])
}

func (c *current) onDocumentRawLine406() (bool, error) {
	// should only be enabled when reading files to include, not the main (root) file
	return c.isSectionEnabled(), nil

}

func (p *parser) callonDocumentRawLine406() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine406()
}

func (c *current) onDocumentRawLine407() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentRawLine407() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine407()
}

func (c *current) onDocumentRawLine409() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentRawLine409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine409()
}

func (c *current) onDocumentRawLine412(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentRawLine412() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine412(stack["level"])
}

func (c *current) onDocumentRawLine413(level interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine413() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine413(stack["level"])
}

func (c *current) onDocumentRawLine404(level interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), string(c.text)) // just retain the raw content

}

func (p *parser) callonDocumentRawLine404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine404(stack["level"])
}

func (c *current) onDocumentRawLine1(element interface{}) (interface{}, error) {
	// in case of parse error, we'll keep the rawline content as-is
	return element, nil

}

func (p *parser) callonDocumentRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine1(stack["element"])
}

func (c *current) onFileInclusion19() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion19()
}

func (c *current) onFileInclusion23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion23()
}

func (c *current) onFileInclusion30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion30()
}

func (c *current) onFileInclusion34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonFileInclusion34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion34()
}

func (c *current) onFileInclusion41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion41()
}

func (c *current) onFileInclusion53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion53()
}

func (c *current) onFileInclusion55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion55()
}

func (c *current) onFileInclusion48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion48(stack["start"])
}

func (c *current) onFileInclusion37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileInclusion37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion37(stack["name"], stack["start"])
}

func (c *current) onFileInclusion63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion63()
}

func (c *current) onFileInclusion75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion75()
}

func (c *current) onFileInclusion77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion77()
}

func (c *current) onFileInclusion70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion70(stack["start"])
}

func (c *current) onFileInclusion59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileInclusion59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion59(stack["name"], stack["start"])
}

func (c *current) onFileInclusion85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion85()
}

func (c *current) onFileInclusion81(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileInclusion81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion81(stack["name"])
}

func (c *current) onFileInclusion32(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion32(stack["element"])
}

func (c *current) onFileInclusion93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonFileInclusion93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion93()
}

func (c *current) onFileInclusion102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion102()
}

func (c *current) onFileInclusion106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion106()
}

func (c *current) onFileInclusion112() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion112()
}

func (c *current) onFileInclusion121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion121()
}

func (c *current) onFileInclusion117(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileInclusion117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion117(stack["name"])
}

func (c *current) onFileInclusion127() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion127()
}

func (c *current) onFileInclusion98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileInclusion98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion98(stack["id"], stack["label"])
}

func (c *current) onFileInclusion134() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion134()
}

func (c *current) onFileInclusion130(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileInclusion130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion130(stack["id"])
}

func (c *current) onFileInclusion96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion96()
}

func (c *current) onFileInclusion138() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileInclusion138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion138()
}

func (c *current) onFileInclusion91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion91(stack["element"])
}

func (c *current) onFileInclusion140() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion140()
}

func (c *current) onFileInclusion12(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileInclusion12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion12(stack["elements"])
}

func (c *current) onFileInclusion146() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion146()
}

func (c *current) onFileInclusion142(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion142(stack["ref"])
}

func (c *current) onFileInclusion8(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileInclusion8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion8(stack["path"])
}

func (c *current) onFileInclusion4(path, attributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["attributes"])
}

func (c *current) onFileInclusion153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion153()
}

func (c *current) onFileInclusion156() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFileInclusion156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion156()
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges12() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges20() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges20()
}

func (c *current) onLineRanges9(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges28() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28()
}

func (c *current) onLineRanges26(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26(stack["singleline"])
}

func (c *current) onLineRanges44() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44()
}

func (c *current) onLineRanges52() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges41(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges41(stack["start"], stack["end"])
}

func (c *current) onLineRanges60() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges60()
}

func (c *current) onLineRanges58(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges58(stack["singleline"])
}

func (c *current) onLineRanges36(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonLineRanges36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges36(stack["other"])
}

func (c *current) onLineRanges5(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges69() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges69()
}

func (c *current) onLineRanges77() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges77()
}

func (c *current) onLineRanges66(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges66(stack["start"], stack["end"])
}

func (c *current) onLineRanges85() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges85()
}

func (c *current) onLineRanges83(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges83(stack["singleline"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine27()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onDocumentFragment20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment20()
}

func (c *current) onDocumentFragment27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment27()
}

func (c *current) onDocumentFragment30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment30()
}

func (c *current) onDocumentFragment16(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentFragment16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment16(stack["name"])
}

func (c *current) onDocumentFragment41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment41()
}

func (c *current) onDocumentFragment48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment48()
}

func (c *current) onDocumentFragment51() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment51()
}

func (c *current) onDocumentFragment37(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentFragment37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment37(stack["name"])
}

func (c *current) onDocumentFragment65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment65()
}

func (c *current) onDocumentFragment68() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment68()
}

func (c *current) onDocumentFragment59() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment59()
}

func (c *current) onDocumentFragment77() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentFragment77() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment77()
}

func (c *current) onDocumentFragment79() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentFragment79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment79()
}

func (c *current) onDocumentFragment82(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentFragment82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment82(stack["level"])
}

func (c *current) onDocumentFragment83(level interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment83(stack["level"])
}

func (c *current) onDocumentFragment87() (interface{}, error) {
	// can't have empty title, that may collide with example block delimiter (`====`)
	return []interface{}{
		types.RawLine(c.text),
	}, nil

}

func (p *parser) callonDocumentFragment87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment87()
}

func (c *current) onDocumentFragment91() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment91()
}

func (c *current) onDocumentFragment75(level, title interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}))

}

func (p *parser) callonDocumentFragment75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment75(stack["level"], stack["title"])
}

func (c *current) onDocumentFragment104() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment104()
}

func (c *current) onDocumentFragment107() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment107()
}

func (c *current) onDocumentFragment100() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentFragment100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment100()
}

func (c *current) onDocumentFragment124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment124()
}

func (c *current) onDocumentFragment127() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment127()
}

func (c *current) onDocumentFragment120() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentFragment120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment120()
}

func (c *current) onDocumentFragment143() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment143()
}

func (c *current) onDocumentFragment147() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment147()
}

func (c *current) onDocumentFragment137(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment137(stack["content"])
}

func (c *current) onDocumentFragment116(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment116(stack["line"])
}

func (c *current) onDocumentFragment160() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment160()
}

func (c *current) onDocumentFragment163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment163()
}

func (c *current) onDocumentFragment156() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentFragment156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment156()
}

func (c *current) onDocumentFragment98(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment98(stack["content"])
}

func (c *current) onDocumentFragment178() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment178()
}

func (c *current) onDocumentFragment181() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment181()
}

func (c *current) onDocumentFragment174() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonDocumentFragment174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment174()
}

func (c *current) onDocumentFragment198() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment198()
}

func (c *current) onDocumentFragment201() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment201()
}

func (c *current) onDocumentFragment194() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonDocumentFragment194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment194()
}

func (c *current) onDocumentFragment217() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment217()
}

func (c *current) onDocumentFragment221() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment221()
}

func (c *current) onDocumentFragment211(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment211(stack["content"])
}

func (c *current) onDocumentFragment190(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment190(stack["line"])
}

func (c *current) onDocumentFragment234() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment234()
}

func (c *current) onDocumentFragment237() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment237()
}

func (c *current) onDocumentFragment230() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonDocumentFragment230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment230()
}

func (c *current) onDocumentFragment172(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonDocumentFragment172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment172(stack["content"])
}

func (c *current) onDocumentFragment253() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment253()
}

func (c *current) onDocumentFragment257() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment257()
}

func (c *current) onDocumentFragment260() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment260()
}

func (c *current) onDocumentFragment249(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentFragment249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment249(stack["language"])
}

func (c *current) onDocumentFragment277() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment277()
}

func (c *current) onDocumentFragment280() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment280()
}

func (c *current) onDocumentFragment273() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentFragment273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment273()
}

func (c *current) onDocumentFragment296() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment296()
}

func (c *current) onDocumentFragment300() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment300()
}

func (c *current) onDocumentFragment290(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment290(stack["content"])
}

func (c *current) onDocumentFragment269(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment269(stack["line"])
}

func (c *current) onDocumentFragment313() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment313()
}

func (c *current) onDocumentFragment316() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment316()
}

func (c *current) onDocumentFragment309() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentFragment309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment309()
}

func (c *current) onDocumentFragment246(delimiter, content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonDocumentFragment246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment246(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentFragment331() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment331()
}

func (c *current) onDocumentFragment334() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment334()
}

func (c *current) onDocumentFragment327() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentFragment327() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment327()
}

func (c *current) onDocumentFragment351() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment351()
}

func (c *current) onDocumentFragment354() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment354()
}

func (c *current) onDocumentFragment347() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentFragment347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment347()
}

func (c *current) onDocumentFragment370() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment370()
}

func (c *current) onDocumentFragment374() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment374()
}

func (c *current) onDocumentFragment364(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment364(stack["content"])
}

func (c *current) onDocumentFragment343(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment343(stack["line"])
}

func (c *current) onDocumentFragment387() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment387()
}

func (c *current) onDocumentFragment390() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment390()
}

func (c *current) onDocumentFragment383() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentFragment383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment383()
}

func (c *current) onDocumentFragment325(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonDocumentFragment325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment325(stack["content"])
}

func (c *current) onDocumentFragment405() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment405()
}

func (c *current) onDocumentFragment408() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment408()
}

func (c *current) onDocumentFragment401() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonDocumentFragment401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment401()
}

func (c *current) onDocumentFragment425() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment425()
}

func (c *current) onDocumentFragment428() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment428()
}

func (c *current) onDocumentFragment421() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonDocumentFragment421() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment421()
}

func (c *current) onDocumentFragment444() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment444() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment444()
}

func (c *current) onDocumentFragment448() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment448()
}

func (c *current) onDocumentFragment438(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment438(stack["content"])
}

func (c *current) onDocumentFragment417(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment417(stack["line"])
}

func (c *current) onDocumentFragment461() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment461()
}

func (c *current) onDocumentFragment464() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment464() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment464()
}

func (c *current) onDocumentFragment457() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonDocumentFragment457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment457()
}

func (c *current) onDocumentFragment399(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonDocumentFragment399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment399(stack["content"])
}

func (c *current) onDocumentFragment479() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment479()
}

func (c *current) onDocumentFragment482() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment482()
}

func (c *current) onDocumentFragment475() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonDocumentFragment475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment475()
}

func (c *current) onDocumentFragment499() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment499()
}

func (c *current) onDocumentFragment502() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment502()
}

func (c *current) onDocumentFragment495() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonDocumentFragment495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment495()
}

func (c *current) onDocumentFragment518() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment518()
}

func (c *current) onDocumentFragment522() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment522() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment522()
}

func (c *current) onDocumentFragment512(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment512(stack["content"])
}

func (c *current) onDocumentFragment491(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment491(stack["line"])
}

func (c *current) onDocumentFragment535() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment535()
}

func (c *current) onDocumentFragment538() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment538() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment538()
}

func (c *current) onDocumentFragment531() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonDocumentFragment531() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment531()
}

func (c *current) onDocumentFragment473(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonDocumentFragment473() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment473(stack["content"])
}

func (c *current) onDocumentFragment559() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment559() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment559()
}

func (c *current) onDocumentFragment562() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment562()
}

func (c *current) onDocumentFragment553() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment553() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment553()
}

func (c *current) onDocumentFragment571() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment571()
}

func (c *current) onDocumentFragment575() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment575() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment575()
}

func (c *current) onDocumentFragment550(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment550(stack["content"])
}

func (c *current) onDocumentFragment594() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment594() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment594()
}

func (c *current) onDocumentFragment597() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment597() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment597()
}

func (c *current) onDocumentFragment588() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment588()
}

func (c *current) onDocumentFragment606() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment606()
}

func (c *current) onDocumentFragment610() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment610() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment610()
}

func (c *current) onDocumentFragment585(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment585() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment585(stack["content"])
}

func (c *current) onDocumentFragment620() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment620() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment620()
}

func (c *current) onDocumentFragment623(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment623() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment623(stack["content"])
}

func (c *current) onDocumentFragment625() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment625()
}

func (c *current) onDocumentFragment617(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment617(stack["content"])
}

func (c *current) onDocumentFragment547(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment547() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment547(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment638() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment638()
}

func (c *current) onDocumentFragment641() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment641() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment641()
}

func (c *current) onDocumentFragment634() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonDocumentFragment634() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment634()
}

func (c *current) onDocumentFragment658() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment658()
}

func (c *current) onDocumentFragment661() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment661()
}

func (c *current) onDocumentFragment654() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonDocumentFragment654() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment654()
}

func (c *current) onDocumentFragment677() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment677() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment677()
}

func (c *current) onDocumentFragment681() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment681()
}

func (c *current) onDocumentFragment671(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment671() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment671(stack["content"])
}

func (c *current) onDocumentFragment650(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment650() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment650(stack["line"])
}

func (c *current) onDocumentFragment694() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment694() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment694()
}

func (c *current) onDocumentFragment697() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment697() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment697()
}

func (c *current) onDocumentFragment690() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonDocumentFragment690() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment690()
}

func (c *current) onDocumentFragment632(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonDocumentFragment632() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment632(stack["content"])
}

func (c *current) onDocumentFragment712() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment712()
}

func (c *current) onDocumentFragment715() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment715() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment715()
}

func (c *current) onDocumentFragment708() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonDocumentFragment708() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment708()
}

func (c *current) onDocumentFragment732() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment732() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment732()
}

func (c *current) onDocumentFragment735() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment735() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment735()
}

func (c *current) onDocumentFragment728() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonDocumentFragment728() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment728()
}

func (c *current) onDocumentFragment751() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment751() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment751()
}

func (c *current) onDocumentFragment755() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment755() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment755()
}

func (c *current) onDocumentFragment745(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment745() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment745(stack["content"])
}

func (c *current) onDocumentFragment724(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment724() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment724(stack["line"])
}

func (c *current) onDocumentFragment768() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment768()
}

func (c *current) onDocumentFragment771() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment771() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment771()
}

func (c *current) onDocumentFragment764() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonDocumentFragment764() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment764()
}

func (c *current) onDocumentFragment706(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonDocumentFragment706() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment706(stack["content"])
}

func (c *current) onDocumentFragment786() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment786() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment786()
}

func (c *current) onDocumentFragment789() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment789() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment789()
}

func (c *current) onDocumentFragment782() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonDocumentFragment782() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment782()
}

func (c *current) onDocumentFragment806() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment806() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment806()
}

func (c *current) onDocumentFragment809() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment809() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment809()
}

func (c *current) onDocumentFragment802() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonDocumentFragment802() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment802()
}

func (c *current) onDocumentFragment825() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment825() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment825()
}

func (c *current) onDocumentFragment829() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment829() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment829()
}

func (c *current) onDocumentFragment819(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment819() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment819(stack["content"])
}

func (c *current) onDocumentFragment798(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment798() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment798(stack["line"])
}

func (c *current) onDocumentFragment842() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment842() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment842()
}

func (c *current) onDocumentFragment845() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment845() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment845()
}

func (c *current) onDocumentFragment838() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonDocumentFragment838() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment838()
}

func (c *current) onDocumentFragment780(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonDocumentFragment780() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment780(stack["content"])
}

func (c *current) onDocumentFragment865() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment865() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment865()
}

func (c *current) onDocumentFragment868() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment868() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment868()
}

func (c *current) onDocumentFragment876() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment876()
}

func (c *current) onDocumentFragment854() (interface{}, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonDocumentFragment854() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment854()
}

func (c *current) onDocumentFragment888() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment888() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment888()
}

func (c *current) onDocumentFragment891() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment891() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment891()
}

func (c *current) onDocumentFragment908() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment908() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment908()
}

func (c *current) onDocumentFragment914() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment914() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment914()
}

func (c *current) onDocumentFragment912(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment912() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment912(stack["content"])
}

func (c *current) onDocumentFragment904(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment904() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment904(stack["content"])
}

func (c *current) onDocumentFragment918() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment918() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment918()
}

func (c *current) onDocumentFragment932() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment932() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment932()
}

func (c *current) onDocumentFragment935() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment935() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment935()
}

func (c *current) onDocumentFragment926() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment926() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment926()
}

func (c *current) onDocumentFragment900(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment900(stack["cells"])
}

func (c *current) onDocumentFragment952() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment952() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment952()
}

func (c *current) onDocumentFragment955() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment955() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment955()
}

func (c *current) onDocumentFragment976() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment976() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment976()
}

func (c *current) onDocumentFragment979() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment979() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment979()
}

func (c *current) onDocumentFragment995() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment995() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment995()
}

func (c *current) onDocumentFragment998() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment998() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment998()
}

func (c *current) onDocumentFragment989() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment989() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment989()
}

func (c *current) onDocumentFragment1007() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1007() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1007()
}

func (c *current) onDocumentFragment1013() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1013() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1013()
}

func (c *current) onDocumentFragment1011(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1011() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1011(stack["content"])
}

func (c *current) onDocumentFragment969(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment969() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment969(stack["content"])
}

func (c *current) onDocumentFragment1017() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1017() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1017()
}

func (c *current) onDocumentFragment966(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonDocumentFragment966() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment966(stack["cell"])
}

func (c *current) onDocumentFragment1032() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1032() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1032()
}

func (c *current) onDocumentFragment1035() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1035() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1035()
}

func (c *current) onDocumentFragment1026() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1026()
}

func (c *current) onDocumentFragment1047() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1047() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1047()
}

func (c *current) onDocumentFragment1050() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1050() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1050()
}

func (c *current) onDocumentFragment945(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment945() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment945(stack["cells"])
}

func (c *current) onDocumentFragment1066() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1066() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1066()
}

func (c *current) onDocumentFragment1069() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1069() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1069()
}

func (c *current) onDocumentFragment1087() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1087() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1087()
}

func (c *current) onDocumentFragment1090() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1090() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1090()
}

func (c *current) onDocumentFragment1106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1106()
}

func (c *current) onDocumentFragment1109() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1109()
}

func (c *current) onDocumentFragment1100() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1100()
}

func (c *current) onDocumentFragment1118() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1118()
}

func (c *current) onDocumentFragment1124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1124()
}

func (c *current) onDocumentFragment1122(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1122(stack["content"])
}

func (c *current) onDocumentFragment1080(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment1080() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1080(stack["content"])
}

func (c *current) onDocumentFragment1128() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1128()
}

func (c *current) onDocumentFragment1142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1142()
}

func (c *current) onDocumentFragment1145() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1145()
}

func (c *current) onDocumentFragment1136() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1136()
}

func (c *current) onDocumentFragment1059(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment1059() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1059(stack["cells"])
}

func (c *current) onDocumentFragment1156() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1156()
}

func (c *current) onDocumentFragment1159() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1159()
}

func (c *current) onDocumentFragment884(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonDocumentFragment884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment884(stack["header"], stack["rows"])
}

func (c *current) onDocumentFragment1174() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1174()
}

func (c *current) onDocumentFragment1178() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1178()
}

func (c *current) onDocumentFragment1168(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1168(stack["content"])
}

func (c *current) onDocumentFragment1189() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonDocumentFragment1189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1189()
}

func (c *current) onDocumentFragment1191() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonDocumentFragment1191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1191()
}

func (c *current) onDocumentFragment1193() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonDocumentFragment1193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1193()
}

func (c *current) onDocumentFragment1195() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonDocumentFragment1195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1195()
}

func (c *current) onDocumentFragment1197() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonDocumentFragment1197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1197()
}

func (c *current) onDocumentFragment1204() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment1204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1204()
}

func (c *current) onDocumentFragment1207(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment1207() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1207(stack["content"])
}

func (c *current) onDocumentFragment1209() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1209()
}

func (c *current) onDocumentFragment1201(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1201(stack["content"])
}

func (c *current) onDocumentFragment1224() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1224()
}

func (c *current) onDocumentFragment1226() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1226()
}

func (c *current) onDocumentFragment1239() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1239()
}

func (c *current) onDocumentFragment1243() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1243()
}

func (c *current) onDocumentFragment1233(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1233(stack["content"])
}

func (c *current) onDocumentFragment1253() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment1253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1253()
}

func (c *current) onDocumentFragment1256(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment1256() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1256(stack["content"])
}

func (c *current) onDocumentFragment1258() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1258()
}

func (c *current) onDocumentFragment1250(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1250(stack["content"])
}

func (c *current) onDocumentFragment1218(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1218(stack["line"])
}

func (c *current) onDocumentFragment1185(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1185(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1273() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1273()
}

func (c *current) onDocumentFragment1271() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1271()
}

func (c *current) onDocumentFragment1278(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1278() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1278(stack["content"])
}

func (c *current) onDocumentFragment1280() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1280()
}

func (c *current) onDocumentFragment1268(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1268(stack["content"])
}

func (c *current) onDocumentFragment1296() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1296()
}

func (c *current) onDocumentFragment1300() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1300()
}

func (c *current) onDocumentFragment1290(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1290(stack["content"])
}

func (c *current) onDocumentFragment1310() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment1310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1310()
}

func (c *current) onDocumentFragment1313(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment1313() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1313(stack["content"])
}

func (c *current) onDocumentFragment1315() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1315()
}

func (c *current) onDocumentFragment1307(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1307(stack["content"])
}

func (c *current) onDocumentFragment1265(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1265(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1324() (bool, error) {
	return c.isFrontMatterAllowed(), nil

}

func (p *parser) callonDocumentFragment1324() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1324()
}

func (c *current) onDocumentFragment1330() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1330()
}

func (c *current) onDocumentFragment1333() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1333()
}

func (c *current) onDocumentFragment1350() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1350()
}

func (c *current) onDocumentFragment1353() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1353()
}

func (c *current) onDocumentFragment1342() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1342()
}

func (c *current) onDocumentFragment1363() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1363()
}

func (c *current) onDocumentFragment1366() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1366()
}

func (c *current) onDocumentFragment1326(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonDocumentFragment1326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1326(stack["content"])
}

func (c *current) onDocumentFragment1322(frontmatter interface{}) (interface{}, error) {
	return frontmatter, nil

}

func (p *parser) callonDocumentFragment1322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1322(stack["frontmatter"])
}

func (c *current) onDocumentFragment1(attributes, element interface{}) (interface{}, error) {
	c.disableFrontMatterRule()           // not allowed as soon as a single element is found
	c.disableDocumentHeaderRule(element) // not allowed anymore, based on element that was found

	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["attributes"], stack["element"])
}

func (c *current) onDelimitedBlockElements10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlockElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements10()
}

func (c *current) onDelimitedBlockElements6(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDelimitedBlockElements6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements6(stack["ref"])
}

func (c *current) onDelimitedBlockElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDelimitedBlockElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements1(stack["elements"])
}

func (c *current) onAttributeDeclaration5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration5()
}

func (c *current) onAttributeDeclaration15() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration15()
}

func (c *current) onAttributeDeclaration13(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeDeclaration13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration13(stack["value"])
}

func (c *current) onAttributeDeclaration21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclaration21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration21()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace), string(c.text))

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeDeclarationValue14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue14()
}

func (c *current) onAttributeDeclarationValue17() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue17()
}

func (c *current) onAttributeDeclarationValue26() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue26()
}

func (c *current) onAttributeDeclarationValue29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue29()
}

func (c *current) onAttributeDeclarationValue33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonAttributeDeclarationValue33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue33()
}

func (c *current) onAttributeDeclarationValue40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue40()
}

func (c *current) onAttributeDeclarationValue52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue52()
}

func (c *current) onAttributeDeclarationValue54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue54()
}

func (c *current) onAttributeDeclarationValue47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValue47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue47(stack["start"])
}

func (c *current) onAttributeDeclarationValue36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonAttributeDeclarationValue36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue36(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValue62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue62()
}

func (c *current) onAttributeDeclarationValue74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue74()
}

func (c *current) onAttributeDeclarationValue76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue76()
}

func (c *current) onAttributeDeclarationValue69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValue69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue69(stack["start"])
}

func (c *current) onAttributeDeclarationValue58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonAttributeDeclarationValue58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue58(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValue84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue84()
}

func (c *current) onAttributeDeclarationValue80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonAttributeDeclarationValue80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue80(stack["name"])
}

func (c *current) onAttributeDeclarationValue31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeDeclarationValue31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue31(stack["element"])
}

func (c *current) onAttributeDeclarationValue90() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue90()
}

func (c *current) onAttributeDeclarationValue7(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue7(stack["element"])
}

func (c *current) onAttributeDeclarationValue4(elements interface{}) (interface{}, error) {
	return elements.([]interface{}), nil

}

func (p *parser) callonAttributeDeclarationValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue4(stack["elements"])
}

func (c *current) onAttributeDeclarationValue97() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue97()
}

func (c *current) onAttributeDeclarationValue103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue103()
}

func (c *current) onAttributeDeclarationValue94(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttributeDeclarationValue94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue94(stack["elements"])
}

func (c *current) onAttributeDeclarationValue1(elements, otherElements interface{}) (interface{}, error) {
	if otherElements, ok := otherElements.([]interface{}); ok {
		return types.Reduce(append(elements.([]interface{}), otherElements...), strings.TrimSpace), nil
	}
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"], stack["otherElements"])
}

func (c *current) onBlockAttributes16() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes16()
}

func (c *current) onBlockAttributes23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23()
}

func (c *current) onBlockAttributes19(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["ref"])
}

func (c *current) onBlockAttributes29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonBlockAttributes29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes29()
}

func (c *current) onBlockAttributes36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes36()
}

func (c *current) onBlockAttributes48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes48()
}

func (c *current) onBlockAttributes50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes50()
}

func (c *current) onBlockAttributes43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes43(stack["start"])
}

func (c *current) onBlockAttributes32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonBlockAttributes32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes32(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes58()
}

func (c *current) onBlockAttributes70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes70()
}

func (c *current) onBlockAttributes72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes72()
}

func (c *current) onBlockAttributes65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes65(stack["start"])
}

func (c *current) onBlockAttributes54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonBlockAttributes54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes54(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes80()
}

func (c *current) onBlockAttributes76(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes76(stack["name"])
}

func (c *current) onBlockAttributes27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes27(stack["element"])
}

func (c *current) onBlockAttributes86() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes86()
}

func (c *current) onBlockAttributes12(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["elements"])
}

func (c *current) onBlockAttributes8(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes8(stack["id"])
}

func (c *current) onBlockAttributes90() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes90()
}

func (c *current) onBlockAttributes93() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes93()
}

func (c *current) onBlockAttributes107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes107()
}

func (c *current) onBlockAttributes110() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes110()
}

func (c *current) onBlockAttributes101() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes101()
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes131()
}

func (c *current) onBlockAttributes138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes138()
}

func (c *current) onBlockAttributes134(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes134(stack["name"])
}

func (c *current) onBlockAttributes144() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes144()
}

func (c *current) onBlockAttributes124(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes124(stack["elements"])
}

func (c *current) onBlockAttributes120(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonBlockAttributes120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes120(stack["title"])
}

func (c *current) onBlockAttributes147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes147()
}

func (c *current) onBlockAttributes150() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes150()
}

func (c *current) onBlockAttributes164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes164()
}

func (c *current) onBlockAttributes167() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes167()
}

func (c *current) onBlockAttributes158() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes158()
}

func (c *current) onBlockAttributes117(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes117(stack["title"])
}

func (c *current) onBlockAttributes179() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes179()
}

func (c *current) onBlockAttributes182() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes182()
}

func (c *current) onBlockAttributes196() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes196()
}

func (c *current) onBlockAttributes199() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes199()
}

func (c *current) onBlockAttributes190() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes190()
}

func (c *current) onBlockAttributes174(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes174(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	return types.MergeAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes8(extra interface{}) (interface{}, error) {
	return extra, nil

}

func (p *parser) callonFirstPositionalAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes8(stack["extra"])
}

func (c *current) onFirstPositionalAttributes23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFirstPositionalAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes23()
}

func (c *current) onFirstPositionalAttributes25(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes25(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue14() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonShortHandAttributeValue14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue14()
}

func (c *current) onShortHandAttributeValue21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue21()
}

func (c *current) onShortHandAttributeValue33() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue33()
}

func (c *current) onShortHandAttributeValue35() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue35()
}

func (c *current) onShortHandAttributeValue28(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue28(stack["start"])
}

func (c *current) onShortHandAttributeValue17(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonShortHandAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue17(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue43() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue43()
}

func (c *current) onShortHandAttributeValue55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue55()
}

func (c *current) onShortHandAttributeValue57() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue57()
}

func (c *current) onShortHandAttributeValue50(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue50(stack["start"])
}

func (c *current) onShortHandAttributeValue39(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonShortHandAttributeValue39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue39(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue65()
}

func (c *current) onShortHandAttributeValue61(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonShortHandAttributeValue61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue61(stack["name"])
}

func (c *current) onShortHandAttributeValue12(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonShortHandAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue12(stack["element"])
}

func (c *current) onShortHandAttributeValue71() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue71()
}

func (c *current) onShortHandAttributeValue77() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue77()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute11()
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute20()
}

func (c *current) onPositionalAttribute26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute26()
}

func (c *current) onPositionalAttribute30(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute30(stack["value"])
}

func (c *current) onPositionalAttribute15(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute15(stack["value"])
}

func (c *current) onNamedAttribute7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute7()
}

func (c *current) onNamedAttribute12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute12()
}

func (c *current) onNamedAttribute4() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute16()
}

func (c *current) onNamedAttribute24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute24()
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeValue12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue12()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["content"])
}

func (c *current) onSingleQuotedAttributeValueContent5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent5()
}

func (c *current) onSingleQuotedAttributeValueContent8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent8()
}

func (c *current) onSingleQuotedAttributeValueContent13() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent13()
}

func (c *current) onSingleQuotedAttributeValueContent20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent20()
}

func (c *current) onSingleQuotedAttributeValueContent32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent32()
}

func (c *current) onSingleQuotedAttributeValueContent34() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent34()
}

func (c *current) onSingleQuotedAttributeValueContent27(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent27(stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent16(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuotedAttributeValueContent16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent16(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent42()
}

func (c *current) onSingleQuotedAttributeValueContent54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent54()
}

func (c *current) onSingleQuotedAttributeValueContent56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent56()
}

func (c *current) onSingleQuotedAttributeValueContent49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent49(stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuotedAttributeValueContent38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent38(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent64()
}

func (c *current) onSingleQuotedAttributeValueContent60(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent60(stack["name"])
}

func (c *current) onSingleQuotedAttributeValueContent11(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent11(stack["element"])
}

func (c *current) onSingleQuotedAttributeValueContent70() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonSingleQuotedAttributeValueContent70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent70()
}

func (c *current) onSingleQuotedAttributeValueContent74() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonSingleQuotedAttributeValueContent74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent74()
}

func (c *current) onSingleQuotedAttributeValueContent76() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent76()
}

func (c *current) onSingleQuotedAttributeValueContent1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue13()
}

func (c *current) onDoubleQuotedAttributeValue1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["content"])
}

func (c *current) onDoubleQuotedAttributeValueContent5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent5()
}

func (c *current) onDoubleQuotedAttributeValueContent8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent8()
}

func (c *current) onDoubleQuotedAttributeValueContent13() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent13()
}

func (c *current) onDoubleQuotedAttributeValueContent20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent20()
}

func (c *current) onDoubleQuotedAttributeValueContent32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent32()
}

func (c *current) onDoubleQuotedAttributeValueContent34() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent34()
}

func (c *current) onDoubleQuotedAttributeValueContent27(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent27(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent16(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuotedAttributeValueContent16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent16(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent42()
}

func (c *current) onDoubleQuotedAttributeValueContent54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent54()
}

func (c *current) onDoubleQuotedAttributeValueContent56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent56()
}

func (c *current) onDoubleQuotedAttributeValueContent49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent49(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuotedAttributeValueContent38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent38(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent64()
}

func (c *current) onDoubleQuotedAttributeValueContent60(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent60(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValueContent11(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent11(stack["element"])
}

func (c *current) onDoubleQuotedAttributeValueContent70() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonDoubleQuotedAttributeValueContent70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent70()
}

func (c *current) onDoubleQuotedAttributeValueContent75() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonDoubleQuotedAttributeValueContent75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent75()
}

func (c *current) onDoubleQuotedAttributeValueContent77() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent77()
}

func (c *current) onDoubleQuotedAttributeValueContent1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue4()
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {
	// not within brackets and stop on space and `{`
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue17()
}

func (c *current) onUnquotedAttributeValue21() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonUnquotedAttributeValue21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue28() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue28()
}

func (c *current) onUnquotedAttributeValue40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue40()
}

func (c *current) onUnquotedAttributeValue42() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue42()
}

func (c *current) onUnquotedAttributeValue35(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue35(stack["start"])
}

func (c *current) onUnquotedAttributeValue24(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue24(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue50()
}

func (c *current) onUnquotedAttributeValue62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue62()
}

func (c *current) onUnquotedAttributeValue64() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue64()
}

func (c *current) onUnquotedAttributeValue57(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue57(stack["start"])
}

func (c *current) onUnquotedAttributeValue46(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue46(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue72()
}

func (c *current) onUnquotedAttributeValue68(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonUnquotedAttributeValue68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue68(stack["name"])
}

func (c *current) onUnquotedAttributeValue19(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue19(stack["element"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onCrossReference6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference10()
}

func (c *current) onCrossReference16() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference16()
}

func (c *current) onCrossReference25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference25()
}

func (c *current) onCrossReference21(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference21(stack["name"])
}

func (c *current) onCrossReference31() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference31()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference38() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference38()
}

func (c *current) onCrossReference34(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonCrossReference34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference34(stack["id"])
}

func (c *current) onExternalCrossReference16() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference16()
}

func (c *current) onExternalCrossReference20() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference20()
}

func (c *current) onExternalCrossReference27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference27()
}

func (c *current) onExternalCrossReference31() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonExternalCrossReference31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference31()
}

func (c *current) onExternalCrossReference38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference38()
}

func (c *current) onExternalCrossReference50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference50()
}

func (c *current) onExternalCrossReference52() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference52()
}

func (c *current) onExternalCrossReference45(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference45(stack["start"])
}

func (c *current) onExternalCrossReference34(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalCrossReference34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference34(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference60()
}

func (c *current) onExternalCrossReference72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference72()
}

func (c *current) onExternalCrossReference74() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference74()
}

func (c *current) onExternalCrossReference67(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference67(stack["start"])
}

func (c *current) onExternalCrossReference56(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalCrossReference56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference56(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference82()
}

func (c *current) onExternalCrossReference78(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalCrossReference78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference78(stack["name"])
}

func (c *current) onExternalCrossReference29(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference29(stack["element"])
}

func (c *current) onExternalCrossReference90() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonExternalCrossReference90() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference90()
}

func (c *current) onExternalCrossReference99() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference99()
}

func (c *current) onExternalCrossReference103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference103()
}

func (c *current) onExternalCrossReference109() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference109()
}

func (c *current) onExternalCrossReference118() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference118()
}

func (c *current) onExternalCrossReference114(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalCrossReference114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference114(stack["name"])
}

func (c *current) onExternalCrossReference124() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference124()
}

func (c *current) onExternalCrossReference95(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalCrossReference95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference95(stack["id"], stack["label"])
}

func (c *current) onExternalCrossReference131() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference131()
}

func (c *current) onExternalCrossReference127(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalCrossReference127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference127(stack["id"])
}

func (c *current) onExternalCrossReference93() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference93()
}

func (c *current) onExternalCrossReference135() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalCrossReference135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference135()
}

func (c *current) onExternalCrossReference88(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference88(stack["element"])
}

func (c *current) onExternalCrossReference137() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference137()
}

func (c *current) onExternalCrossReference9(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalCrossReference9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference9(stack["elements"])
}

func (c *current) onExternalCrossReference143() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference143()
}

func (c *current) onExternalCrossReference139(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference139(stack["ref"])
}

func (c *current) onExternalCrossReference5(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonExternalCrossReference5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, attributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["attributes"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonMarkdownQuoteAttribution9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution9()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil

}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onDocumentHeader3() (bool, error) {
	return c.isDocumentHeaderAllowed(), nil

}

func (p *parser) callonDocumentHeader3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader3()
}

func (c *current) onDocumentHeader11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader11()
}

func (c *current) onDocumentHeader14() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader14()
}

func (c *current) onDocumentHeader5() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentHeader5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader5()
}

func (c *current) onDocumentHeader25() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader25()
}

func (c *current) onDocumentHeader29() (interface{}, error) {
	// can't have empty title, that may collide with example block delimiter (`====`)
	return []interface{}{
		types.RawLine(c.text),
	}, nil

}

func (p *parser) callonDocumentHeader29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader29()
}

func (c *current) onDocumentHeader33() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader33()
}

func (c *current) onDocumentHeader22(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonDocumentHeader22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader22(stack["title"])
}

func (c *current) onDocumentHeader51() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader51()
}

func (c *current) onDocumentHeader54() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader54()
}

func (c *current) onDocumentHeader45() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentHeader45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader45()
}

func (c *current) onDocumentHeader69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader69()
}

func (c *current) onDocumentHeader73() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader73()
}

func (c *current) onDocumentHeader63(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentHeader63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader63(stack["content"])
}

func (c *current) onDocumentHeader86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader86()
}

func (c *current) onDocumentHeader89() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader89()
}

func (c *current) onDocumentHeader82() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader82()
}

func (c *current) onDocumentHeader106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader106()
}

func (c *current) onDocumentHeader109() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader109()
}

func (c *current) onDocumentHeader102() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader102()
}

func (c *current) onDocumentHeader125() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader125()
}

func (c *current) onDocumentHeader129() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader129()
}

func (c *current) onDocumentHeader119(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader119(stack["content"])
}

func (c *current) onDocumentHeader98(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader98(stack["line"])
}

func (c *current) onDocumentHeader142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader142()
}

func (c *current) onDocumentHeader145() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader145()
}

func (c *current) onDocumentHeader138() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader138()
}

func (c *current) onDocumentHeader80(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader80(stack["content"])
}

func (c *current) onDocumentHeader158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader158()
}

func (c *current) onDocumentHeader175() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader175()
}

func (c *current) onDocumentHeader179() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader179()
}

func (c *current) onDocumentHeader183() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader183()
}

func (c *current) onDocumentHeader187() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader187()
}

func (c *current) onDocumentHeader191() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader191()
}

func (c *current) onDocumentHeader195() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader195()
}

func (c *current) onDocumentHeader172(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentHeader172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader172(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentHeader206() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader206()
}

func (c *current) onDocumentHeader199(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentHeader199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader199(stack["email"])
}

func (c *current) onDocumentHeader211() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader211()
}

func (c *current) onDocumentHeader216() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader216()
}

func (c *current) onDocumentHeader218(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentHeader218() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader218(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader168(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentHeader168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader168(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader162(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{})...)
}

func (p *parser) callonDocumentHeader162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader162(stack["authors"])
}

func (c *current) onDocumentHeader223() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader223()
}

func (c *current) onDocumentHeader233() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader233()
}

func (c *current) onDocumentHeader237() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader237()
}

func (c *current) onDocumentHeader241() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader241()
}

func (c *current) onDocumentHeader245() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader245()
}

func (c *current) onDocumentHeader249() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader249()
}

func (c *current) onDocumentHeader253() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader253()
}

func (c *current) onDocumentHeader230(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentHeader230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader230(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentHeader264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader264()
}

func (c *current) onDocumentHeader257(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentHeader257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader257(stack["email"])
}

func (c *current) onDocumentHeader269() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader269()
}

func (c *current) onDocumentHeader274() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader274()
}

func (c *current) onDocumentHeader276(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentHeader276() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader276(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader226(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentHeader226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader226(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader219(author interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(author)
}

func (p *parser) callonDocumentHeader219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader219(stack["author"])
}

func (c *current) onDocumentHeader278() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader278()
}

func (c *current) onDocumentHeader155(authors interface{}) (interface{}, error) {
	return authors, nil
}

func (p *parser) callonDocumentHeader155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader155(stack["authors"])
}

func (c *current) onDocumentHeader293() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader293()
}

func (c *current) onDocumentHeader297() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader297()
}

func (c *current) onDocumentHeader287(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentHeader287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader287(stack["content"])
}

func (c *current) onDocumentHeader310() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader310()
}

func (c *current) onDocumentHeader313() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader313()
}

func (c *current) onDocumentHeader306() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader306()
}

func (c *current) onDocumentHeader330() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader330()
}

func (c *current) onDocumentHeader333() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader333()
}

func (c *current) onDocumentHeader326() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader326()
}

func (c *current) onDocumentHeader349() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader349()
}

func (c *current) onDocumentHeader353() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader353()
}

func (c *current) onDocumentHeader343(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader343(stack["content"])
}

func (c *current) onDocumentHeader322(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader322(stack["line"])
}

func (c *current) onDocumentHeader366() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader366()
}

func (c *current) onDocumentHeader369() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader369()
}

func (c *current) onDocumentHeader362() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader362()
}

func (c *current) onDocumentHeader304(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader304(stack["content"])
}

func (c *current) onDocumentHeader383() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader383()
}

func (c *current) onDocumentHeader393() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader393() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader393()
}

func (c *current) onDocumentHeader407() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader407()
}

func (c *current) onDocumentHeader399() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader399()
}

func (c *current) onDocumentHeader415() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader415()
}

func (c *current) onDocumentHeader422() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader422()
}

func (c *current) onDocumentHeader389(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentHeader389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader389(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader428() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader428()
}

func (c *current) onDocumentHeader435() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader435() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader435()
}

func (c *current) onDocumentHeader425(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentHeader425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader425(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader439() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader439() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader439()
}

func (c *current) onDocumentHeader380(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentHeader380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader380(stack["revision"])
}

func (c *current) onDocumentHeader42(authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentInformation(authors.(types.DocumentAuthors), revision)

}

func (p *parser) callonDocumentHeader42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader42(stack["authors"], stack["revision"])
}

func (c *current) onDocumentHeader454() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader454()
}

func (c *current) onDocumentHeader461() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader461()
}

func (c *current) onDocumentHeader464() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader464() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader464()
}

func (c *current) onDocumentHeader450(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentHeader450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader450(stack["name"])
}

func (c *current) onDocumentHeader475() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader475()
}

func (c *current) onDocumentHeader482() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader482()
}

func (c *current) onDocumentHeader485() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader485()
}

func (c *current) onDocumentHeader471(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentHeader471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader471(stack["name"])
}

func (c *current) onDocumentHeader498() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader498()
}

func (c *current) onDocumentHeader502() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader502()
}

func (c *current) onDocumentHeader492(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentHeader492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader492(stack["content"])
}

func (c *current) onDocumentHeader515() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader515()
}

func (c *current) onDocumentHeader518() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader518()
}

func (c *current) onDocumentHeader511() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader511()
}

func (c *current) onDocumentHeader535() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader535()
}

func (c *current) onDocumentHeader538() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader538() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader538()
}

func (c *current) onDocumentHeader531() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader531() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader531()
}

func (c *current) onDocumentHeader554() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader554() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader554()
}

func (c *current) onDocumentHeader558() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader558()
}

func (c *current) onDocumentHeader548(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader548(stack["content"])
}

func (c *current) onDocumentHeader527(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader527(stack["line"])
}

func (c *current) onDocumentHeader571() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader571()
}

func (c *current) onDocumentHeader574() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader574() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader574()
}

func (c *current) onDocumentHeader567() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader567()
}

func (c *current) onDocumentHeader509(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader509() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader509(stack["content"])
}

func (c *current) onDocumentHeader1(title, info, extraAttrs interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), info, extraAttrs.([]interface{}))

}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["info"], stack["extraAttrs"])
}

func (c *current) onInlineElement9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement9()
}

func (c *current) onInlineElement14() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement14()
}

func (c *current) onInlineElement4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement4()
}

func (c *current) onInlineElement21() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlineElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement21()
}

func (c *current) onInlineElement26() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements) && c.isPreceededBySpace(), nil

}

func (p *parser) callonInlineElement26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement26()
}

func (c *current) onInlineElement29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement29()
}

func (c *current) onInlineElement33() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement33()
}

func (c *current) onInlineElement24() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonInlineElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement24()
}

func (c *current) onInlineElement43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement43()
}

func (c *current) onInlineElement54() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonInlineElement54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement54()
}

func (c *current) onInlineElement61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement61()
}

func (c *current) onInlineElement73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement73()
}

func (c *current) onInlineElement75() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement75()
}

func (c *current) onInlineElement68(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement68(stack["start"])
}

func (c *current) onInlineElement57(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonInlineElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement57(stack["name"], stack["start"])
}

func (c *current) onInlineElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement83()
}

func (c *current) onInlineElement95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement95()
}

func (c *current) onInlineElement97() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement97()
}

func (c *current) onInlineElement90(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement90(stack["start"])
}

func (c *current) onInlineElement79(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonInlineElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement79(stack["name"], stack["start"])
}

func (c *current) onInlineElement105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement105()
}

func (c *current) onInlineElement101(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement101(stack["name"])
}

func (c *current) onInlineElement52(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement52(stack["element"])
}

func (c *current) onInlineElement114() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonInlineElement114() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement114()
}

func (c *current) onInlineElement123() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement123()
}

func (c *current) onInlineElement127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement127()
}

func (c *current) onInlineElement133() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement133()
}

func (c *current) onInlineElement142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement142()
}

func (c *current) onInlineElement138(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement138(stack["name"])
}

func (c *current) onInlineElement148() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement148()
}

func (c *current) onInlineElement119(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement119(stack["id"], stack["label"])
}

func (c *current) onInlineElement155() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement155()
}

func (c *current) onInlineElement151(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement151(stack["id"])
}

func (c *current) onInlineElement117() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement117()
}

func (c *current) onInlineElement159() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement159()
}

func (c *current) onInlineElement112(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement112(stack["element"])
}

func (c *current) onInlineElement161() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonInlineElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement161()
}

func (c *current) onInlineElement163() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonInlineElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement163()
}

func (c *current) onInlineElement165() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonInlineElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement165()
}

func (c *current) onInlineElement167() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonInlineElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement167()
}

func (c *current) onInlineElement169() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonInlineElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement169()
}

func (c *current) onInlineElement171() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonInlineElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement171()
}

func (c *current) onInlineElement181() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement181()
}

func (c *current) onInlineElement177(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement177(stack["ref"])
}

func (c *current) onInlineElement185() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement185()
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))

}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent14() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent14()
}

func (c *current) onIndexTermContent25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent25()
}

func (c *current) onIndexTermContent29() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonIndexTermContent29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent29()
}

func (c *current) onIndexTermContent38() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent38()
}

func (c *current) onIndexTermContent42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent42()
}

func (c *current) onIndexTermContent48() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent48()
}

func (c *current) onIndexTermContent57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent57()
}

func (c *current) onIndexTermContent53(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonIndexTermContent53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent53(stack["name"])
}

func (c *current) onIndexTermContent63() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent63()
}

func (c *current) onIndexTermContent34(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonIndexTermContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent34(stack["id"], stack["label"])
}

func (c *current) onIndexTermContent70() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent70()
}

func (c *current) onIndexTermContent66(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonIndexTermContent66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent66(stack["id"])
}

func (c *current) onIndexTermContent32() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent32()
}

func (c *current) onIndexTermContent74() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent74()
}

func (c *current) onIndexTermContent27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent27(stack["element"])
}

func (c *current) onIndexTermContent80() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent80()
}

func (c *current) onIndexTermContent76(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent76(stack["ref"])
}

func (c *current) onIndexTermContent84() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent84()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onImageBlock25() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock25()
}

func (c *current) onImageBlock29() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock29()
}

func (c *current) onImageBlock36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock36()
}

func (c *current) onImageBlock40() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonImageBlock40() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock40()
}

func (c *current) onImageBlock47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock47()
}

func (c *current) onImageBlock59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock59()
}

func (c *current) onImageBlock61() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock61()
}

func (c *current) onImageBlock54(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock54(stack["start"])
}

func (c *current) onImageBlock43(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonImageBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock43(stack["name"], stack["start"])
}

func (c *current) onImageBlock69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock69()
}

func (c *current) onImageBlock81() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock81()
}

func (c *current) onImageBlock83() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock83()
}

func (c *current) onImageBlock76(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock76(stack["start"])
}

func (c *current) onImageBlock65(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonImageBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock65(stack["name"], stack["start"])
}

func (c *current) onImageBlock91() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock91()
}

func (c *current) onImageBlock87(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonImageBlock87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock87(stack["name"])
}

func (c *current) onImageBlock38(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock38(stack["element"])
}

func (c *current) onImageBlock99() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonImageBlock99() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock99()
}

func (c *current) onImageBlock108() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock108()
}

func (c *current) onImageBlock112() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock112()
}

func (c *current) onImageBlock118() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock118()
}

func (c *current) onImageBlock127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock127()
}

func (c *current) onImageBlock123(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonImageBlock123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock123(stack["name"])
}

func (c *current) onImageBlock133() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock133()
}

func (c *current) onImageBlock104(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonImageBlock104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock104(stack["id"], stack["label"])
}

func (c *current) onImageBlock140() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock140()
}

func (c *current) onImageBlock136(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonImageBlock136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock136(stack["id"])
}

func (c *current) onImageBlock102() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock102()
}

func (c *current) onImageBlock144() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonImageBlock144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock144()
}

func (c *current) onImageBlock97(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock97(stack["element"])
}

func (c *current) onImageBlock146() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock146()
}

func (c *current) onImageBlock18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonImageBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock18(stack["elements"])
}

func (c *current) onImageBlock152() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock152()
}

func (c *current) onImageBlock148(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock148(stack["ref"])
}

func (c *current) onImageBlock5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonImageBlock5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock5(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock159()
}

func (c *current) onImageBlock162() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonImageBlock162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock162()
}

func (c *current) onImageBlock1(path, attributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage27() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage27()
}

func (c *current) onInlineImage31() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage31()
}

func (c *current) onInlineImage38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage38()
}

func (c *current) onInlineImage42() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonInlineImage42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage42()
}

func (c *current) onInlineImage49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage49()
}

func (c *current) onInlineImage61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage61()
}

func (c *current) onInlineImage63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage63()
}

func (c *current) onInlineImage56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage56(stack["start"])
}

func (c *current) onInlineImage45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonInlineImage45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage45(stack["name"], stack["start"])
}

func (c *current) onInlineImage71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage71()
}

func (c *current) onInlineImage83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage83()
}

func (c *current) onInlineImage85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage85()
}

func (c *current) onInlineImage78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage78(stack["start"])
}

func (c *current) onInlineImage67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonInlineImage67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage67(stack["name"], stack["start"])
}

func (c *current) onInlineImage93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage93()
}

func (c *current) onInlineImage89(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineImage89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage89(stack["name"])
}

func (c *current) onInlineImage40(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage40(stack["element"])
}

func (c *current) onInlineImage101() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonInlineImage101() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage101()
}

func (c *current) onInlineImage110() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage110()
}

func (c *current) onInlineImage114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage114()
}

func (c *current) onInlineImage120() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage120()
}

func (c *current) onInlineImage129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage129()
}

func (c *current) onInlineImage125(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineImage125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage125(stack["name"])
}

func (c *current) onInlineImage135() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage135()
}

func (c *current) onInlineImage106(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineImage106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage106(stack["id"], stack["label"])
}

func (c *current) onInlineImage142() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage142()
}

func (c *current) onInlineImage138(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineImage138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage138(stack["id"])
}

func (c *current) onInlineImage104() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage104()
}

func (c *current) onInlineImage146() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineImage146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage146()
}

func (c *current) onInlineImage99(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage99(stack["element"])
}

func (c *current) onInlineImage148() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage148()
}

func (c *current) onInlineImage20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineImage20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage20(stack["elements"])
}

func (c *current) onInlineImage154() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage154()
}

func (c *current) onInlineImage150(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage150(stack["ref"])
}

func (c *current) onInlineImage7(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonInlineImage7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, attributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content)

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineFootnote12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote12()
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	// TODO: use only this rule with `ref:(FootnoteRef)?`
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onPassthroughMacro7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onLink26() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink26()
}

func (c *current) onLink30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink30()
}

func (c *current) onLink37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink37()
}

func (c *current) onLink41() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonLink41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink41()
}

func (c *current) onLink48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink48()
}

func (c *current) onLink60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink60()
}

func (c *current) onLink62() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink62()
}

func (c *current) onLink55(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLink55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink55(stack["start"])
}

func (c *current) onLink44(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLink44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink44(stack["name"], stack["start"])
}

func (c *current) onLink70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink70()
}

func (c *current) onLink82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink82()
}

func (c *current) onLink84() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink84()
}

func (c *current) onLink77(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLink77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink77(stack["start"])
}

func (c *current) onLink66(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLink66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink66(stack["name"], stack["start"])
}

func (c *current) onLink92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink92()
}

func (c *current) onLink88(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonLink88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink88(stack["name"])
}

func (c *current) onLink39(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLink39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink39(stack["element"])
}

func (c *current) onLink100() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonLink100() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink100()
}

func (c *current) onLink109() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonLink109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink109()
}

func (c *current) onLink113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink113()
}

func (c *current) onLink119() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink119()
}

func (c *current) onLink128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink128()
}

func (c *current) onLink124(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonLink124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink124(stack["name"])
}

func (c *current) onLink134() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink134()
}

func (c *current) onLink105(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonLink105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink105(stack["id"], stack["label"])
}

func (c *current) onLink141() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonLink141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink141()
}

func (c *current) onLink137(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonLink137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink137(stack["id"])
}

func (c *current) onLink103() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink103()
}

func (c *current) onLink145() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonLink145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink145()
}

func (c *current) onLink98(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLink98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink98(stack["element"])
}

func (c *current) onLink147() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink147()
}

func (c *current) onLink19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLink19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink19(stack["elements"])
}

func (c *current) onLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink6(stack["scheme"], stack["path"])
}

func (c *current) onLink152(url, closingBracket interface{}) (bool, error) {
	return url.(*types.Location).TrimAngleBracketSuffix()

}

func (p *parser) callonLink152() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink152(stack["url"], stack["closingBracket"])
}

func (c *current) onLink2(url, closingBracket interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(*types.Location), nil)

}

func (p *parser) callonLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink2(stack["url"], stack["closingBracket"])
}

func (c *current) onRelativeLink25() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink25()
}

func (c *current) onRelativeLink29() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink29()
}

func (c *current) onRelativeLink36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink36()
}

func (c *current) onRelativeLink40() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonRelativeLink40() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink40()
}

func (c *current) onRelativeLink47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink47()
}

func (c *current) onRelativeLink59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink59()
}

func (c *current) onRelativeLink61() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink61()
}

func (c *current) onRelativeLink54(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink54(stack["start"])
}

func (c *current) onRelativeLink43(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink43(stack["name"], stack["start"])
}

func (c *current) onRelativeLink69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink69()
}

func (c *current) onRelativeLink81() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink81()
}

func (c *current) onRelativeLink83() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink83()
}

func (c *current) onRelativeLink76(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink76(stack["start"])
}

func (c *current) onRelativeLink65(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink65(stack["name"], stack["start"])
}

func (c *current) onRelativeLink91() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink91()
}

func (c *current) onRelativeLink87(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink87(stack["name"])
}

func (c *current) onRelativeLink38(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink38(stack["element"])
}

func (c *current) onRelativeLink99() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonRelativeLink99() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink99()
}

func (c *current) onRelativeLink108() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink108()
}

func (c *current) onRelativeLink112() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink112()
}

func (c *current) onRelativeLink118() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink118()
}

func (c *current) onRelativeLink127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink127()
}

func (c *current) onRelativeLink123(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink123(stack["name"])
}

func (c *current) onRelativeLink133() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink133()
}

func (c *current) onRelativeLink104(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonRelativeLink104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink104(stack["id"], stack["label"])
}

func (c *current) onRelativeLink140() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink140()
}

func (c *current) onRelativeLink136(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonRelativeLink136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink136(stack["id"])
}

func (c *current) onRelativeLink102() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink102()
}

func (c *current) onRelativeLink144() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonRelativeLink144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink144()
}

func (c *current) onRelativeLink97(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink97(stack["element"])
}

func (c *current) onRelativeLink146() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink146()
}

func (c *current) onRelativeLink18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink18(stack["elements"])
}

func (c *current) onRelativeLink152() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink152()
}

func (c *current) onRelativeLink148(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink148(stack["ref"])
}

func (c *current) onRelativeLink5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink5(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink1(url, attributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink24() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink24()
}

func (c *current) onExternalLink28() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink28()
}

func (c *current) onExternalLink35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink35()
}

func (c *current) onExternalLink39() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonExternalLink39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink39()
}

func (c *current) onExternalLink46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink46()
}

func (c *current) onExternalLink58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink58()
}

func (c *current) onExternalLink60() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink60()
}

func (c *current) onExternalLink53(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink53(stack["start"])
}

func (c *current) onExternalLink42(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink42(stack["name"], stack["start"])
}

func (c *current) onExternalLink68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink68()
}

func (c *current) onExternalLink80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink80()
}

func (c *current) onExternalLink82() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink82()
}

func (c *current) onExternalLink75(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink75(stack["start"])
}

func (c *current) onExternalLink64(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink64(stack["name"], stack["start"])
}

func (c *current) onExternalLink90() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink90()
}

func (c *current) onExternalLink86(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalLink86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink86(stack["name"])
}

func (c *current) onExternalLink37(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink37(stack["element"])
}

func (c *current) onExternalLink98() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonExternalLink98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink98()
}

func (c *current) onExternalLink107() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink107()
}

func (c *current) onExternalLink111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink111()
}

func (c *current) onExternalLink117() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink117()
}

func (c *current) onExternalLink126() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink126()
}

func (c *current) onExternalLink122(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalLink122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink122(stack["name"])
}

func (c *current) onExternalLink132() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink132()
}

func (c *current) onExternalLink103(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalLink103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink103(stack["id"], stack["label"])
}

func (c *current) onExternalLink139() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink139()
}

func (c *current) onExternalLink135(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalLink135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink135(stack["id"])
}

func (c *current) onExternalLink101() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink101()
}

func (c *current) onExternalLink143() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalLink143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink143()
}

func (c *current) onExternalLink96(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink96(stack["element"])
}

func (c *current) onExternalLink145() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink145()
}

func (c *current) onExternalLink17(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink17(stack["elements"])
}

func (c *current) onExternalLink4(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink4(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink1(url, attributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), attributes)

}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["attributes"])
}

func (c *current) onListElements11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements11()
}

func (c *current) onListElements18() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements18()
}

func (c *current) onListElements21(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements21(stack["depth"])
}

func (c *current) onListElements15(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements15(stack["depth"])
}

func (c *current) onListElements22() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements22()
}

func (c *current) onListElements27() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements27()
}

func (c *current) onListElements31() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements31()
}

func (c *current) onListElements35() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements35()
}

func (c *current) onListElements40() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements40()
}

func (c *current) onListElements45(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements45(stack["prefix"])
}

func (c *current) onListElements8(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements8(stack["prefix"])
}

func (c *current) onListElements52() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements52()
}

func (c *current) onListElements56() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements56()
}

func (c *current) onListElements49(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements49(stack["rawline"])
}

func (c *current) onListElements5(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements5(stack["prefix"], stack["content"])
}

func (c *current) onListElements69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements69()
}

func (c *current) onListElements76() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements76()
}

func (c *current) onListElements79(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements79(stack["depth"])
}

func (c *current) onListElements73(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements73(stack["depth"])
}

func (c *current) onListElements81() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements81()
}

func (c *current) onListElements83(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements83(stack["prefix"])
}

func (c *current) onListElements66(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements66(stack["prefix"])
}

func (c *current) onListElements94() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElements94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements94()
}

func (c *current) onListElements96() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements96()
}

func (c *current) onListElements98() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements98()
}

func (c *current) onListElements100(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements100(stack["style"])
}

func (c *current) onListElements88(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElements88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements88(stack["style"])
}

func (c *current) onListElements107() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements107()
}

func (c *current) onListElements111() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements111()
}

func (c *current) onListElements104(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements104(stack["rawline"])
}

func (c *current) onListElements63(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElements63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements63(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElements125() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements125()
}

func (c *current) onListElements129(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements129(stack["ref"])
}

func (c *current) onListElements121(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements121(stack["ref"])
}

func (c *current) onListElements136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements136()
}

func (c *current) onListElements140() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements140()
}

func (c *current) onListElements133(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElements133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements133(stack["rawline"])
}

func (c *current) onListElements118(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElements118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements118(stack["ref"], stack["description"])
}

func (c *current) onListElements157() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements157()
}

func (c *current) onListElements160(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements160() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements160(stack["separator"])
}

func (c *current) onListElements154(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements154(stack["separator"])
}

func (c *current) onListElements163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements163()
}

func (c *current) onListElements150() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElements150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements150()
}

func (c *current) onListElements175() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements175()
}

func (c *current) onListElements178(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements178(stack["separator"])
}

func (c *current) onListElements172(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements172(stack["separator"])
}

func (c *current) onListElements184() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements184()
}

func (c *current) onListElements187() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements187()
}

func (c *current) onListElements201() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements201()
}

func (c *current) onListElements204() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements204()
}

func (c *current) onListElements195() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements195()
}

func (c *current) onListElements221() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements221()
}

func (c *current) onListElements225() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements225()
}

func (c *current) onListElements215(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElements215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements215(stack["content"])
}

func (c *current) onListElements214(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonListElements214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements214(stack["content"])
}

func (c *current) onListElements241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements241()
}

func (c *current) onListElements244() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements244()
}

func (c *current) onListElements235() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements235()
}

func (c *current) onListElements255() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements255()
}

func (c *current) onListElements257() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements257()
}

func (c *current) onListElements266() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements266()
}

func (c *current) onListElements273() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements273()
}

func (c *current) onListElements276(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements276() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements276(stack["depth"])
}

func (c *current) onListElements270(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements270(stack["depth"])
}

func (c *current) onListElements277() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements277()
}

func (c *current) onListElements282() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements282()
}

func (c *current) onListElements286() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements286()
}

func (c *current) onListElements290() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements290()
}

func (c *current) onListElements295() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements295()
}

func (c *current) onListElements300(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements300(stack["prefix"])
}

func (c *current) onListElements263(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements263(stack["prefix"])
}

func (c *current) onListElements307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements307()
}

func (c *current) onListElements314() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements314()
}

func (c *current) onListElements317(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements317() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements317(stack["depth"])
}

func (c *current) onListElements311(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements311(stack["depth"])
}

func (c *current) onListElements319() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements319()
}

func (c *current) onListElements321(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements321(stack["prefix"])
}

func (c *current) onListElements304(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements304(stack["prefix"])
}

func (c *current) onListElements329() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements329()
}

func (c *current) onListElements333(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements333(stack["ref"])
}

func (c *current) onListElements325(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements325(stack["ref"])
}

func (c *current) onListElements345() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements345()
}

func (c *current) onListElements348(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements348() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements348(stack["separator"])
}

func (c *current) onListElements342(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements342(stack["separator"])
}

func (c *current) onListElements351() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements351()
}

func (c *current) onListElements338() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElements338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements338()
}

func (c *current) onListElements362() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements362()
}

func (c *current) onListElements365(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements365() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements365(stack["separator"])
}

func (c *current) onListElements359(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements359(stack["separator"])
}

func (c *current) onListElements377() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements377()
}

func (c *current) onListElements380() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements380()
}

func (c *current) onListElements373() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonListElements373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements373()
}

func (c *current) onListElements391() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements391()
}

func (c *current) onListElements394() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements394()
}

func (c *current) onListElements387() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonListElements387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements387()
}

func (c *current) onListElements405() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListElements405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements405()
}

func (c *current) onListElements409() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements409()
}

func (c *current) onListElements412() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements412()
}

func (c *current) onListElements401(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListElements401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements401(stack["language"])
}

func (c *current) onListElements423() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements423() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements423()
}

func (c *current) onListElements426() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements426() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements426()
}

func (c *current) onListElements419() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElements419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements419()
}

func (c *current) onListElements437() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements437()
}

func (c *current) onListElements440() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements440()
}

func (c *current) onListElements433() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonListElements433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements433()
}

func (c *current) onListElements451() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements451()
}

func (c *current) onListElements454() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements454()
}

func (c *current) onListElements447() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonListElements447() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements447()
}

func (c *current) onListElements465() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements465()
}

func (c *current) onListElements468() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements468() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements468()
}

func (c *current) onListElements461() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonListElements461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements461()
}

func (c *current) onListElements479() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements479()
}

func (c *current) onListElements482() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements482()
}

func (c *current) onListElements475() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonListElements475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements475()
}

func (c *current) onListElements493() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements493() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements493()
}

func (c *current) onListElements496() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements496()
}

func (c *current) onListElements489() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonListElements489() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements489()
}

func (c *current) onListElements367(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElements367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements367(stack["delimiter"])
}

func (c *current) onListElements504() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElements504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements504()
}

func (c *current) onListElements508() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements508()
}

func (c *current) onListElements232(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElements232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements232(stack["content"])
}

func (c *current) onListElements181(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElements181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements181(stack["content"])
}

func (c *current) onListElements517() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements517()
}

func (c *current) onListElements521() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements521()
}

func (c *current) onListElements525() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements525()
}

func (c *current) onListElements515(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElements515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements515(stack["content"])
}

func (c *current) onListElements147(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElements147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements147(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElements1(firstElement, extraElements interface{}) (interface{}, error) {
	return types.NewListElements(append([]interface{}{firstElement}, extraElements.([]interface{})...))

}

func (p *parser) callonListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["firstElement"], stack["extraElements"])
}

func (c *current) onExtraListElements1(elements interface{}) (interface{}, error) {
	return types.Flatten(elements.([]interface{})), nil
}

func (p *parser) callonExtraListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElements1(stack["elements"])
}

func (c *current) onExtraListElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement17()
}

func (c *current) onExtraListElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement20()
}

func (c *current) onExtraListElement11() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement11()
}

func (c *current) onExtraListElement34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement34()
}

func (c *current) onExtraListElement41() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement41()
}

func (c *current) onExtraListElement44(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement44() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement44(stack["depth"])
}

func (c *current) onExtraListElement38(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement38(stack["depth"])
}

func (c *current) onExtraListElement45() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement45()
}

func (c *current) onExtraListElement50() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement50()
}

func (c *current) onExtraListElement54() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement54()
}

func (c *current) onExtraListElement58() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement58()
}

func (c *current) onExtraListElement63() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement63()
}

func (c *current) onExtraListElement68(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement68(stack["prefix"])
}

func (c *current) onExtraListElement31(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement31(stack["prefix"])
}

func (c *current) onExtraListElement75() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement75()
}

func (c *current) onExtraListElement79() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement79()
}

func (c *current) onExtraListElement72(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement72(stack["rawline"])
}

func (c *current) onExtraListElement28(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement28(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement8(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement8(stack["element"])
}

func (c *current) onExtraListElement98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement98()
}

func (c *current) onExtraListElement105() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement105()
}

func (c *current) onExtraListElement108(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement108(stack["depth"])
}

func (c *current) onExtraListElement102(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement102(stack["depth"])
}

func (c *current) onExtraListElement109() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement109()
}

func (c *current) onExtraListElement114() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement114()
}

func (c *current) onExtraListElement118() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement118()
}

func (c *current) onExtraListElement122() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement122()
}

func (c *current) onExtraListElement127() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement127()
}

func (c *current) onExtraListElement132(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement132(stack["prefix"])
}

func (c *current) onExtraListElement95(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement95(stack["prefix"])
}

func (c *current) onExtraListElement139() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement139()
}

func (c *current) onExtraListElement143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement143()
}

func (c *current) onExtraListElement136(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement136(stack["rawline"])
}

func (c *current) onExtraListElement92(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement92(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement86(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement86(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement159()
}

func (c *current) onExtraListElement162() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement162()
}

func (c *current) onExtraListElement153() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement153()
}

func (c *current) onExtraListElement176() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement176()
}

func (c *current) onExtraListElement183() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement183()
}

func (c *current) onExtraListElement186(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement186() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement186(stack["depth"])
}

func (c *current) onExtraListElement180(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement180(stack["depth"])
}

func (c *current) onExtraListElement188() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement188()
}

func (c *current) onExtraListElement190(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement190(stack["prefix"])
}

func (c *current) onExtraListElement173(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement173(stack["prefix"])
}

func (c *current) onExtraListElement201() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement201()
}

func (c *current) onExtraListElement203() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement203()
}

func (c *current) onExtraListElement205() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement205()
}

func (c *current) onExtraListElement207(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement207(stack["style"])
}

func (c *current) onExtraListElement195(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement195(stack["style"])
}

func (c *current) onExtraListElement214() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement214()
}

func (c *current) onExtraListElement218() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement218()
}

func (c *current) onExtraListElement211(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement211(stack["rawline"])
}

func (c *current) onExtraListElement170(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement170(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement150(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement150(stack["element"])
}

func (c *current) onExtraListElement237() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement237()
}

func (c *current) onExtraListElement244() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement244()
}

func (c *current) onExtraListElement247(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement247() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement247(stack["depth"])
}

func (c *current) onExtraListElement241(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement241(stack["depth"])
}

func (c *current) onExtraListElement249() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement249()
}

func (c *current) onExtraListElement251(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement251(stack["prefix"])
}

func (c *current) onExtraListElement234(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement234(stack["prefix"])
}

func (c *current) onExtraListElement262() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement262()
}

func (c *current) onExtraListElement264() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement264()
}

func (c *current) onExtraListElement266() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement266()
}

func (c *current) onExtraListElement268(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement268(stack["style"])
}

func (c *current) onExtraListElement256(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement256(stack["style"])
}

func (c *current) onExtraListElement275() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement275()
}

func (c *current) onExtraListElement279() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement279()
}

func (c *current) onExtraListElement272(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement272(stack["rawline"])
}

func (c *current) onExtraListElement231(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement231(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement225(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement225(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement295() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement295()
}

func (c *current) onExtraListElement298() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement298()
}

func (c *current) onExtraListElement289() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement289()
}

func (c *current) onExtraListElement313() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement313()
}

func (c *current) onExtraListElement317(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement317(stack["ref"])
}

func (c *current) onExtraListElement309(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement309(stack["ref"])
}

func (c *current) onExtraListElement324() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement324()
}

func (c *current) onExtraListElement328() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement328()
}

func (c *current) onExtraListElement321(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonExtraListElement321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement321(stack["rawline"])
}

func (c *current) onExtraListElement306(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonExtraListElement306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement306(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement286(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement286(stack["element"])
}

func (c *current) onExtraListElement348() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement348()
}

func (c *current) onExtraListElement352(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement352(stack["ref"])
}

func (c *current) onExtraListElement344(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement344(stack["ref"])
}

func (c *current) onExtraListElement359() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement359()
}

func (c *current) onExtraListElement363() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement363()
}

func (c *current) onExtraListElement356(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonExtraListElement356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement356(stack["rawline"])
}

func (c *current) onExtraListElement341(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonExtraListElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement341(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement335(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement335(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement380() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement380()
}

func (c *current) onExtraListElement383() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement383()
}

func (c *current) onExtraListElement374() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement374()
}

func (c *current) onExtraListElement401() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement401()
}

func (c *current) onExtraListElement404(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement404() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement404(stack["separator"])
}

func (c *current) onExtraListElement398(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement398(stack["separator"])
}

func (c *current) onExtraListElement407() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement407()
}

func (c *current) onExtraListElement394() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement394()
}

func (c *current) onExtraListElement419() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement419()
}

func (c *current) onExtraListElement422(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement422() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement422(stack["separator"])
}

func (c *current) onExtraListElement416(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement416(stack["separator"])
}

func (c *current) onExtraListElement428() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement428()
}

func (c *current) onExtraListElement431() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement431()
}

func (c *current) onExtraListElement445() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement445()
}

func (c *current) onExtraListElement448() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement448()
}

func (c *current) onExtraListElement439() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement439() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement439()
}

func (c *current) onExtraListElement465() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement465()
}

func (c *current) onExtraListElement469() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement469()
}

func (c *current) onExtraListElement459(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement459() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement459(stack["content"])
}

func (c *current) onExtraListElement458(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonExtraListElement458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement458(stack["content"])
}

func (c *current) onExtraListElement485() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement485()
}

func (c *current) onExtraListElement488() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement488() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement488()
}

func (c *current) onExtraListElement479() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement479()
}

func (c *current) onExtraListElement499() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement499()
}

func (c *current) onExtraListElement501() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement501()
}

func (c *current) onExtraListElement510() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement510()
}

func (c *current) onExtraListElement517() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement517()
}

func (c *current) onExtraListElement520(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement520() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement520(stack["depth"])
}

func (c *current) onExtraListElement514(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement514(stack["depth"])
}

func (c *current) onExtraListElement521() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement521()
}

func (c *current) onExtraListElement526() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement526() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement526()
}

func (c *current) onExtraListElement530() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement530()
}

func (c *current) onExtraListElement534() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement534()
}

func (c *current) onExtraListElement539() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement539()
}

func (c *current) onExtraListElement544(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement544(stack["prefix"])
}

func (c *current) onExtraListElement507(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement507(stack["prefix"])
}

func (c *current) onExtraListElement551() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement551()
}

func (c *current) onExtraListElement558() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement558()
}

func (c *current) onExtraListElement561(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement561() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement561(stack["depth"])
}

func (c *current) onExtraListElement555(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement555(stack["depth"])
}

func (c *current) onExtraListElement563() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement563()
}

func (c *current) onExtraListElement565(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement565() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement565(stack["prefix"])
}

func (c *current) onExtraListElement548(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement548(stack["prefix"])
}

func (c *current) onExtraListElement573() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement573()
}

func (c *current) onExtraListElement577(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement577(stack["ref"])
}

func (c *current) onExtraListElement569(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement569() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement569(stack["ref"])
}

func (c *current) onExtraListElement589() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement589()
}

func (c *current) onExtraListElement592(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement592() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement592(stack["separator"])
}

func (c *current) onExtraListElement586(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement586(stack["separator"])
}

func (c *current) onExtraListElement595() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement595() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement595()
}

func (c *current) onExtraListElement582() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement582() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement582()
}

func (c *current) onExtraListElement606() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement606()
}

func (c *current) onExtraListElement609(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement609() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement609(stack["separator"])
}

func (c *current) onExtraListElement603(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement603() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement603(stack["separator"])
}

func (c *current) onExtraListElement621() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement621()
}

func (c *current) onExtraListElement624() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement624() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement624()
}

func (c *current) onExtraListElement617() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonExtraListElement617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement617()
}

func (c *current) onExtraListElement635() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement635()
}

func (c *current) onExtraListElement638() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement638()
}

func (c *current) onExtraListElement631() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonExtraListElement631() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement631()
}

func (c *current) onExtraListElement649() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExtraListElement649() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement649()
}

func (c *current) onExtraListElement653() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement653()
}

func (c *current) onExtraListElement656() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement656() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement656()
}

func (c *current) onExtraListElement645(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement645() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement645(stack["language"])
}

func (c *current) onExtraListElement667() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement667()
}

func (c *current) onExtraListElement670() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement670() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement670()
}

func (c *current) onExtraListElement663() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonExtraListElement663() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement663()
}

func (c *current) onExtraListElement681() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement681()
}

func (c *current) onExtraListElement684() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement684() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement684()
}

func (c *current) onExtraListElement677() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonExtraListElement677() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement677()
}

func (c *current) onExtraListElement695() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement695()
}

func (c *current) onExtraListElement698() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement698() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement698()
}

func (c *current) onExtraListElement691() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonExtraListElement691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement691()
}

func (c *current) onExtraListElement709() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement709() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement709()
}

func (c *current) onExtraListElement712() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement712()
}

func (c *current) onExtraListElement705() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonExtraListElement705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement705()
}

func (c *current) onExtraListElement723() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement723() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement723()
}

func (c *current) onExtraListElement726() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement726() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement726()
}

func (c *current) onExtraListElement719() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonExtraListElement719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement719()
}

func (c *current) onExtraListElement737() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement737() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement737()
}

func (c *current) onExtraListElement740() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement740() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement740()
}

func (c *current) onExtraListElement733() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonExtraListElement733() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement733()
}

func (c *current) onExtraListElement611(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement611(stack["delimiter"])
}

func (c *current) onExtraListElement748() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement748() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement748()
}

func (c *current) onExtraListElement752() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement752() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement752()
}

func (c *current) onExtraListElement476(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement476(stack["content"])
}

func (c *current) onExtraListElement425(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement425(stack["content"])
}

func (c *current) onExtraListElement761() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement761() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement761()
}

func (c *current) onExtraListElement765() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement765() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement765()
}

func (c *current) onExtraListElement769() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement769() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement769()
}

func (c *current) onExtraListElement759(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement759(stack["content"])
}

func (c *current) onExtraListElement391(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement391(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement371(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement371(stack["element"])
}

func (c *current) onExtraListElement792() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement792() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement792()
}

func (c *current) onExtraListElement795(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement795() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement795(stack["separator"])
}

func (c *current) onExtraListElement789(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement789() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement789(stack["separator"])
}

func (c *current) onExtraListElement798() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement798() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement798()
}

func (c *current) onExtraListElement785() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement785()
}

func (c *current) onExtraListElement810() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement810() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement810()
}

func (c *current) onExtraListElement813(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement813() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement813(stack["separator"])
}

func (c *current) onExtraListElement807(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement807() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement807(stack["separator"])
}

func (c *current) onExtraListElement819() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement819() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement819()
}

func (c *current) onExtraListElement822() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement822() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement822()
}

func (c *current) onExtraListElement836() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement836() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement836()
}

func (c *current) onExtraListElement839() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement839() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement839()
}

func (c *current) onExtraListElement830() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement830() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement830()
}

func (c *current) onExtraListElement856() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement856()
}

func (c *current) onExtraListElement860() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement860() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement860()
}

func (c *current) onExtraListElement850(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement850() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement850(stack["content"])
}

func (c *current) onExtraListElement849(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonExtraListElement849() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement849(stack["content"])
}

func (c *current) onExtraListElement876() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement876()
}

func (c *current) onExtraListElement879() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement879() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement879()
}

func (c *current) onExtraListElement870() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement870() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement870()
}

func (c *current) onExtraListElement890() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement890() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement890()
}

func (c *current) onExtraListElement892() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement892() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement892()
}

func (c *current) onExtraListElement901() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement901() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement901()
}

func (c *current) onExtraListElement908() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement908() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement908()
}

func (c *current) onExtraListElement911(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement911() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement911(stack["depth"])
}

func (c *current) onExtraListElement905(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement905() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement905(stack["depth"])
}

func (c *current) onExtraListElement912() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement912() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement912()
}

func (c *current) onExtraListElement917() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement917() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement917()
}

func (c *current) onExtraListElement921() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement921() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement921()
}

func (c *current) onExtraListElement925() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement925() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement925()
}

func (c *current) onExtraListElement930() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement930() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement930()
}

func (c *current) onExtraListElement935(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement935() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement935(stack["prefix"])
}

func (c *current) onExtraListElement898(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement898() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement898(stack["prefix"])
}

func (c *current) onExtraListElement942() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement942() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement942()
}

func (c *current) onExtraListElement949() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement949() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement949()
}

func (c *current) onExtraListElement952(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement952() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement952(stack["depth"])
}

func (c *current) onExtraListElement946(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement946() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement946(stack["depth"])
}

func (c *current) onExtraListElement954() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement954() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement954()
}

func (c *current) onExtraListElement956(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement956() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement956(stack["prefix"])
}

func (c *current) onExtraListElement939(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement939() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement939(stack["prefix"])
}

func (c *current) onExtraListElement964() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement964() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement964()
}

func (c *current) onExtraListElement968(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement968() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement968(stack["ref"])
}

func (c *current) onExtraListElement960(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement960() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement960(stack["ref"])
}

func (c *current) onExtraListElement980() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement980() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement980()
}

func (c *current) onExtraListElement983(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement983() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement983(stack["separator"])
}

func (c *current) onExtraListElement977(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement977() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement977(stack["separator"])
}

func (c *current) onExtraListElement986() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement986() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement986()
}

func (c *current) onExtraListElement973() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement973() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement973()
}

func (c *current) onExtraListElement997() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement997() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement997()
}

func (c *current) onExtraListElement1000(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1000() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1000(stack["separator"])
}

func (c *current) onExtraListElement994(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement994() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement994(stack["separator"])
}

func (c *current) onExtraListElement1012() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1012()
}

func (c *current) onExtraListElement1015() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1015() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1015()
}

func (c *current) onExtraListElement1008() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonExtraListElement1008() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1008()
}

func (c *current) onExtraListElement1026() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1026()
}

func (c *current) onExtraListElement1029() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1029() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1029()
}

func (c *current) onExtraListElement1022() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonExtraListElement1022() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1022()
}

func (c *current) onExtraListElement1040() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1040() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1040()
}

func (c *current) onExtraListElement1044() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1044() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1044()
}

func (c *current) onExtraListElement1047() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1047() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1047()
}

func (c *current) onExtraListElement1036(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement1036() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1036(stack["language"])
}

func (c *current) onExtraListElement1058() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1058() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1058()
}

func (c *current) onExtraListElement1061() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1061() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1061()
}

func (c *current) onExtraListElement1054() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonExtraListElement1054() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1054()
}

func (c *current) onExtraListElement1072() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1072() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1072()
}

func (c *current) onExtraListElement1075() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1075() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1075()
}

func (c *current) onExtraListElement1068() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonExtraListElement1068() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1068()
}

func (c *current) onExtraListElement1086() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1086() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1086()
}

func (c *current) onExtraListElement1089() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1089() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1089()
}

func (c *current) onExtraListElement1082() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonExtraListElement1082() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1082()
}

func (c *current) onExtraListElement1100() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1100()
}

func (c *current) onExtraListElement1103() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1103()
}

func (c *current) onExtraListElement1096() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonExtraListElement1096() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1096()
}

func (c *current) onExtraListElement1114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1114()
}

func (c *current) onExtraListElement1117() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1117()
}

func (c *current) onExtraListElement1110() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonExtraListElement1110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1110()
}

func (c *current) onExtraListElement1128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1128()
}

func (c *current) onExtraListElement1131() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1131()
}

func (c *current) onExtraListElement1124() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonExtraListElement1124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1124()
}

func (c *current) onExtraListElement1002(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement1002() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1002(stack["delimiter"])
}

func (c *current) onExtraListElement1139() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement1139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1139()
}

func (c *current) onExtraListElement1143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1143()
}

func (c *current) onExtraListElement867(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement867() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement867(stack["content"])
}

func (c *current) onExtraListElement816(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement816() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement816(stack["content"])
}

func (c *current) onExtraListElement1152() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1152()
}

func (c *current) onExtraListElement1156() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement1156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1156()
}

func (c *current) onExtraListElement1160() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1160()
}

func (c *current) onExtraListElement1150(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement1150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1150(stack["content"])
}

func (c *current) onExtraListElement782(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement782() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement782(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement776(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement776() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement776(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement1173() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1173()
}

func (c *current) onExtraListElement1177() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1177()
}

func (c *current) onExtraListElement1167(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1167(stack["content"])
}

func (c *current) onExtraListElement1193() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1193()
}

func (c *current) onExtraListElement1196() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1196()
}

func (c *current) onExtraListElement1187() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement1187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1187()
}

func (c *current) onExtraListElement1215() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1215()
}

func (c *current) onExtraListElement1213() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1213()
}

func (c *current) onExtraListElement1220(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonExtraListElement1220() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1220(stack["content"])
}

func (c *current) onExtraListElement1222() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1222()
}

func (c *current) onExtraListElement1210(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1210(stack["content"])
}

func (c *current) onExtraListElement1238() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1238()
}

func (c *current) onExtraListElement1242() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1242()
}

func (c *current) onExtraListElement1232(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1232(stack["content"])
}

func (c *current) onExtraListElement1252() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonExtraListElement1252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1252()
}

func (c *current) onExtraListElement1255(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonExtraListElement1255() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1255(stack["content"])
}

func (c *current) onExtraListElement1257() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1257()
}

func (c *current) onExtraListElement1249(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1249(stack["content"])
}

func (c *current) onExtraListElement1207(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonExtraListElement1207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1207(stack["firstLine"], stack["otherLines"])
}

func (c *current) onExtraListElement1184(attributes, element interface{}) (interface{}, error) {
	if e, ok := element.(types.WithAttributes); ok {
		for _, a := range attributes.([]interface{}) {
			if a, ok := a.(types.Attributes); ok {
				e.AddAttributes(a)
			}
		}
	}
	// implicit attachment to list element
	// by wrapping into a ListElementContinuation
	return types.NewListElementContinuation(0, element)

}

func (p *parser) callonExtraListElement1184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1184(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement1274() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1274()
}

func (c *current) onExtraListElement1278() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1278()
}

func (c *current) onExtraListElement1268(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1268(stack["content"])
}

func (c *current) onExtraListElement1267(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonExtraListElement1267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1267(stack["content"])
}

func (c *current) onExtraListElement1294() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1294()
}

func (c *current) onExtraListElement1297() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1297()
}

func (c *current) onExtraListElement1288() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement1288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1288()
}

func (c *current) onExtraListElement1308() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1308() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1308()
}

func (c *current) onExtraListElement1310() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1310()
}

func (c *current) onExtraListElement1319() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1319()
}

func (c *current) onExtraListElement1326() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement1326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1326()
}

func (c *current) onExtraListElement1329(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement1329() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1329(stack["depth"])
}

func (c *current) onExtraListElement1323(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement1323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1323(stack["depth"])
}

func (c *current) onExtraListElement1330() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement1330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1330()
}

func (c *current) onExtraListElement1335() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement1335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1335()
}

func (c *current) onExtraListElement1339() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement1339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1339()
}

func (c *current) onExtraListElement1343() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement1343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1343()
}

func (c *current) onExtraListElement1348() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement1348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1348()
}

func (c *current) onExtraListElement1353(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1353(stack["prefix"])
}

func (c *current) onExtraListElement1316(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement1316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1316(stack["prefix"])
}

func (c *current) onExtraListElement1360() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1360()
}

func (c *current) onExtraListElement1367() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement1367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1367()
}

func (c *current) onExtraListElement1370(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement1370() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1370(stack["depth"])
}

func (c *current) onExtraListElement1364(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement1364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1364(stack["depth"])
}

func (c *current) onExtraListElement1372() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement1372() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1372()
}

func (c *current) onExtraListElement1374(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1374(stack["prefix"])
}

func (c *current) onExtraListElement1357(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement1357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1357(stack["prefix"])
}

func (c *current) onExtraListElement1382() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement1382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1382()
}

func (c *current) onExtraListElement1386(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1386(stack["ref"])
}

func (c *current) onExtraListElement1378(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement1378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1378(stack["ref"])
}

func (c *current) onExtraListElement1398() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1398()
}

func (c *current) onExtraListElement1401(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1401() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1401(stack["separator"])
}

func (c *current) onExtraListElement1395(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1395(stack["separator"])
}

func (c *current) onExtraListElement1404() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1404()
}

func (c *current) onExtraListElement1391() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement1391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1391()
}

func (c *current) onExtraListElement1415() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1415()
}

func (c *current) onExtraListElement1418(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1418() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1418(stack["separator"])
}

func (c *current) onExtraListElement1412(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1412(stack["separator"])
}

func (c *current) onExtraListElement1430() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1430() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1430()
}

func (c *current) onExtraListElement1433() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1433()
}

func (c *current) onExtraListElement1426() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonExtraListElement1426() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1426()
}

func (c *current) onExtraListElement1444() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1444() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1444()
}

func (c *current) onExtraListElement1447() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1447() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1447()
}

func (c *current) onExtraListElement1440() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonExtraListElement1440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1440()
}

func (c *current) onExtraListElement1458() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1458()
}

func (c *current) onExtraListElement1462() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1462()
}

func (c *current) onExtraListElement1465() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1465()
}

func (c *current) onExtraListElement1454(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement1454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1454(stack["language"])
}

func (c *current) onExtraListElement1476() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1476()
}

func (c *current) onExtraListElement1479() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1479()
}

func (c *current) onExtraListElement1472() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonExtraListElement1472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1472()
}

func (c *current) onExtraListElement1490() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1490()
}

func (c *current) onExtraListElement1493() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1493() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1493()
}

func (c *current) onExtraListElement1486() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonExtraListElement1486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1486()
}

func (c *current) onExtraListElement1504() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1504()
}

func (c *current) onExtraListElement1507() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1507()
}

func (c *current) onExtraListElement1500() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonExtraListElement1500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1500()
}

func (c *current) onExtraListElement1518() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1518()
}

func (c *current) onExtraListElement1521() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1521()
}

func (c *current) onExtraListElement1514() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonExtraListElement1514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1514()
}

func (c *current) onExtraListElement1532() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1532()
}

func (c *current) onExtraListElement1535() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1535()
}

func (c *current) onExtraListElement1528() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonExtraListElement1528() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1528()
}

func (c *current) onExtraListElement1546() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1546()
}

func (c *current) onExtraListElement1549() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1549()
}

func (c *current) onExtraListElement1542() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonExtraListElement1542() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1542()
}

func (c *current) onExtraListElement1420(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement1420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1420(stack["delimiter"])
}

func (c *current) onExtraListElement1557() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement1557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1557()
}

func (c *current) onExtraListElement1561() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1561()
}

func (c *current) onExtraListElement1285(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1285(stack["content"])
}

func (c *current) onExtraListElement1264(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1264(stack["element"])
}

func (c *current) onExtraListElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1(stack["element"])
}

func (c *current) onListElementContinuation7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation7()
}

func (c *current) onListElementContinuation9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation9()
}

func (c *current) onListElementContinuation16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation16()
}

func (c *current) onListElementContinuation18(offset interface{}) (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuation18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation18(stack["offset"])
}

func (c *current) onListElementContinuation1(offset, element interface{}) (interface{}, error) {
	return types.NewListElementContinuation(len(offset.([]interface{})), element)

}

func (p *parser) callonListElementContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation1(stack["offset"], stack["element"])
}

func (c *current) onListElementContinuationElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement14()
}

func (c *current) onListElementContinuationElement21() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement21()
}

func (c *current) onListElementContinuationElement24(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement24(stack["depth"])
}

func (c *current) onListElementContinuationElement18(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElementContinuationElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement18(stack["depth"])
}

func (c *current) onListElementContinuationElement25() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElementContinuationElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement25()
}

func (c *current) onListElementContinuationElement30() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElementContinuationElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement30()
}

func (c *current) onListElementContinuationElement34() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElementContinuationElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement34()
}

func (c *current) onListElementContinuationElement38() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElementContinuationElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement38()
}

func (c *current) onListElementContinuationElement43() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElementContinuationElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement43()
}

func (c *current) onListElementContinuationElement48(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement48(stack["prefix"])
}

func (c *current) onListElementContinuationElement11(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement11(stack["prefix"])
}

func (c *current) onListElementContinuationElement55() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement55()
}

func (c *current) onListElementContinuationElement59() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement59()
}

func (c *current) onListElementContinuationElement52(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContinuationElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement52(stack["rawline"])
}

func (c *current) onListElementContinuationElement8(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElementContinuationElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement8(stack["prefix"], stack["content"])
}

func (c *current) onListElementContinuationElement72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement72()
}

func (c *current) onListElementContinuationElement79() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement79()
}

func (c *current) onListElementContinuationElement82(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement82(stack["depth"])
}

func (c *current) onListElementContinuationElement76(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElementContinuationElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement76(stack["depth"])
}

func (c *current) onListElementContinuationElement84() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElementContinuationElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement84()
}

func (c *current) onListElementContinuationElement86(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement86(stack["prefix"])
}

func (c *current) onListElementContinuationElement69(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement69(stack["prefix"])
}

func (c *current) onListElementContinuationElement97() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElementContinuationElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement97()
}

func (c *current) onListElementContinuationElement99() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElementContinuationElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement99()
}

func (c *current) onListElementContinuationElement101() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElementContinuationElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement101()
}

func (c *current) onListElementContinuationElement103(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement103(stack["style"])
}

func (c *current) onListElementContinuationElement91(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElementContinuationElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement91(stack["style"])
}

func (c *current) onListElementContinuationElement110() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement110()
}

func (c *current) onListElementContinuationElement114() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement114()
}

func (c *current) onListElementContinuationElement107(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContinuationElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement107(stack["rawline"])
}

func (c *current) onListElementContinuationElement66(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElementContinuationElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement66(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElementContinuationElement128() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElementContinuationElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement128()
}

func (c *current) onListElementContinuationElement132(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement132(stack["ref"])
}

func (c *current) onListElementContinuationElement124(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElementContinuationElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement124(stack["ref"])
}

func (c *current) onListElementContinuationElement139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement139()
}

func (c *current) onListElementContinuationElement143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement143()
}

func (c *current) onListElementContinuationElement136(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElementContinuationElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement136(stack["rawline"])
}

func (c *current) onListElementContinuationElement121(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElementContinuationElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement121(stack["ref"], stack["description"])
}

func (c *current) onListElementContinuationElement160() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement160()
}

func (c *current) onListElementContinuationElement163(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement163() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement163(stack["separator"])
}

func (c *current) onListElementContinuationElement157(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement157(stack["separator"])
}

func (c *current) onListElementContinuationElement166() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement166()
}

func (c *current) onListElementContinuationElement153() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElementContinuationElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement153()
}

func (c *current) onListElementContinuationElement178() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement178()
}

func (c *current) onListElementContinuationElement181(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement181() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement181(stack["separator"])
}

func (c *current) onListElementContinuationElement175(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement175(stack["separator"])
}

func (c *current) onListElementContinuationElement187() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement187()
}

func (c *current) onListElementContinuationElement190() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement190()
}

func (c *current) onListElementContinuationElement204() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement204()
}

func (c *current) onListElementContinuationElement207() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement207()
}

func (c *current) onListElementContinuationElement198() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement198()
}

func (c *current) onListElementContinuationElement224() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement224()
}

func (c *current) onListElementContinuationElement228() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement228()
}

func (c *current) onListElementContinuationElement218(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement218(stack["content"])
}

func (c *current) onListElementContinuationElement217(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonListElementContinuationElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement217(stack["content"])
}

func (c *current) onListElementContinuationElement244() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement244()
}

func (c *current) onListElementContinuationElement247() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement247()
}

func (c *current) onListElementContinuationElement238() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement238()
}

func (c *current) onListElementContinuationElement258() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement258()
}

func (c *current) onListElementContinuationElement260() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement260()
}

func (c *current) onListElementContinuationElement269() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement269()
}

func (c *current) onListElementContinuationElement276() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement276()
}

func (c *current) onListElementContinuationElement279(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement279() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement279(stack["depth"])
}

func (c *current) onListElementContinuationElement273(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElementContinuationElement273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement273(stack["depth"])
}

func (c *current) onListElementContinuationElement280() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElementContinuationElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement280()
}

func (c *current) onListElementContinuationElement285() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElementContinuationElement285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement285()
}

func (c *current) onListElementContinuationElement289() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElementContinuationElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement289()
}

func (c *current) onListElementContinuationElement293() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElementContinuationElement293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement293()
}

func (c *current) onListElementContinuationElement298() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElementContinuationElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement298()
}

func (c *current) onListElementContinuationElement303(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement303(stack["prefix"])
}

func (c *current) onListElementContinuationElement266(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement266(stack["prefix"])
}

func (c *current) onListElementContinuationElement310() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement310()
}

func (c *current) onListElementContinuationElement317() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement317()
}

func (c *current) onListElementContinuationElement320(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement320() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement320(stack["depth"])
}

func (c *current) onListElementContinuationElement314(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElementContinuationElement314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement314(stack["depth"])
}

func (c *current) onListElementContinuationElement322() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElementContinuationElement322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement322()
}

func (c *current) onListElementContinuationElement324(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement324(stack["prefix"])
}

func (c *current) onListElementContinuationElement307(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement307(stack["prefix"])
}

func (c *current) onListElementContinuationElement332() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElementContinuationElement332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement332()
}

func (c *current) onListElementContinuationElement336(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement336(stack["ref"])
}

func (c *current) onListElementContinuationElement328(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElementContinuationElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement328(stack["ref"])
}

func (c *current) onListElementContinuationElement348() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement348()
}

func (c *current) onListElementContinuationElement351(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement351() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement351(stack["separator"])
}

func (c *current) onListElementContinuationElement345(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement345(stack["separator"])
}

func (c *current) onListElementContinuationElement354() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement354()
}

func (c *current) onListElementContinuationElement341() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElementContinuationElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement341()
}

func (c *current) onListElementContinuationElement365() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement365() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement365()
}

func (c *current) onListElementContinuationElement368(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement368() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement368(stack["separator"])
}

func (c *current) onListElementContinuationElement362(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement362(stack["separator"])
}

func (c *current) onListElementContinuationElement380() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement380()
}

func (c *current) onListElementContinuationElement383() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement383()
}

func (c *current) onListElementContinuationElement376() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonListElementContinuationElement376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement376()
}

func (c *current) onListElementContinuationElement394() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement394()
}

func (c *current) onListElementContinuationElement397() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement397()
}

func (c *current) onListElementContinuationElement390() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonListElementContinuationElement390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement390()
}

func (c *current) onListElementContinuationElement408() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement408()
}

func (c *current) onListElementContinuationElement412() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement412()
}

func (c *current) onListElementContinuationElement415() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement415()
}

func (c *current) onListElementContinuationElement404(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListElementContinuationElement404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement404(stack["language"])
}

func (c *current) onListElementContinuationElement426() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement426() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement426()
}

func (c *current) onListElementContinuationElement429() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement429() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement429()
}

func (c *current) onListElementContinuationElement422() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement422()
}

func (c *current) onListElementContinuationElement440() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement440()
}

func (c *current) onListElementContinuationElement443() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement443() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement443()
}

func (c *current) onListElementContinuationElement436() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonListElementContinuationElement436() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement436()
}

func (c *current) onListElementContinuationElement454() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement454()
}

func (c *current) onListElementContinuationElement457() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement457()
}

func (c *current) onListElementContinuationElement450() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonListElementContinuationElement450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement450()
}

func (c *current) onListElementContinuationElement468() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement468() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement468()
}

func (c *current) onListElementContinuationElement471() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement471()
}

func (c *current) onListElementContinuationElement464() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonListElementContinuationElement464() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement464()
}

func (c *current) onListElementContinuationElement482() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement482()
}

func (c *current) onListElementContinuationElement485() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement485()
}

func (c *current) onListElementContinuationElement478() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonListElementContinuationElement478() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement478()
}

func (c *current) onListElementContinuationElement496() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement496()
}

func (c *current) onListElementContinuationElement499() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement499()
}

func (c *current) onListElementContinuationElement492() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonListElementContinuationElement492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement492()
}

func (c *current) onListElementContinuationElement370(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElementContinuationElement370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement370(stack["delimiter"])
}

func (c *current) onListElementContinuationElement507() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElementContinuationElement507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement507()
}

func (c *current) onListElementContinuationElement511() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement511()
}

func (c *current) onListElementContinuationElement235(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement235(stack["content"])
}

func (c *current) onListElementContinuationElement184(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElementContinuationElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement184(stack["content"])
}

func (c *current) onListElementContinuationElement520() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement520()
}

func (c *current) onListElementContinuationElement524() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement524()
}

func (c *current) onListElementContinuationElement528() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement528() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement528()
}

func (c *current) onListElementContinuationElement518(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElementContinuationElement518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement518(stack["content"])
}

func (c *current) onListElementContinuationElement150(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElementContinuationElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement150(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElementContinuationElement546() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement546()
}

func (c *current) onListElementContinuationElement549() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement549()
}

func (c *current) onListElementContinuationElement540() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement540() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement540()
}

func (c *current) onListElementContinuationElement561() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement561()
}

func (c *current) onListElementContinuationElement568() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement568() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement568()
}

func (c *current) onListElementContinuationElement571() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement571()
}

func (c *current) onListElementContinuationElement557(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonListElementContinuationElement557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement557(stack["name"])
}

func (c *current) onListElementContinuationElement582() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement582() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement582()
}

func (c *current) onListElementContinuationElement589() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement589()
}

func (c *current) onListElementContinuationElement592() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement592()
}

func (c *current) onListElementContinuationElement578(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonListElementContinuationElement578() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement578(stack["name"])
}

func (c *current) onListElementContinuationElement605() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement605() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement605()
}

func (c *current) onListElementContinuationElement608() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement608() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement608()
}

func (c *current) onListElementContinuationElement601() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonListElementContinuationElement601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement601()
}

func (c *current) onListElementContinuationElement625() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement625()
}

func (c *current) onListElementContinuationElement628() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement628()
}

func (c *current) onListElementContinuationElement621() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonListElementContinuationElement621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement621()
}

func (c *current) onListElementContinuationElement644() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement644() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement644()
}

func (c *current) onListElementContinuationElement648() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement648() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement648()
}

func (c *current) onListElementContinuationElement638(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement638(stack["content"])
}

func (c *current) onListElementContinuationElement617(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement617(stack["line"])
}

func (c *current) onListElementContinuationElement661() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement661()
}

func (c *current) onListElementContinuationElement664() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement664() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement664()
}

func (c *current) onListElementContinuationElement657() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonListElementContinuationElement657() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement657()
}

func (c *current) onListElementContinuationElement599(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement599() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement599(stack["content"])
}

func (c *current) onListElementContinuationElement679() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement679() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement679()
}

func (c *current) onListElementContinuationElement682() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement682() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement682()
}

func (c *current) onListElementContinuationElement675() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonListElementContinuationElement675() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement675()
}

func (c *current) onListElementContinuationElement699() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement699()
}

func (c *current) onListElementContinuationElement702() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement702() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement702()
}

func (c *current) onListElementContinuationElement695() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonListElementContinuationElement695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement695()
}

func (c *current) onListElementContinuationElement718() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement718() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement718()
}

func (c *current) onListElementContinuationElement722() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement722() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement722()
}

func (c *current) onListElementContinuationElement712(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement712(stack["content"])
}

func (c *current) onListElementContinuationElement691(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement691(stack["line"])
}

func (c *current) onListElementContinuationElement735() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement735() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement735()
}

func (c *current) onListElementContinuationElement738() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement738() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement738()
}

func (c *current) onListElementContinuationElement731() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonListElementContinuationElement731() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement731()
}

func (c *current) onListElementContinuationElement673(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement673() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement673(stack["content"])
}

func (c *current) onListElementContinuationElement754() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement754() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement754()
}

func (c *current) onListElementContinuationElement758() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement758() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement758()
}

func (c *current) onListElementContinuationElement761() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement761() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement761()
}

func (c *current) onListElementContinuationElement750(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListElementContinuationElement750() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement750(stack["language"])
}

func (c *current) onListElementContinuationElement778() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement778() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement778()
}

func (c *current) onListElementContinuationElement781() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement781() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement781()
}

func (c *current) onListElementContinuationElement774() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement774() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement774()
}

func (c *current) onListElementContinuationElement797() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement797() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement797()
}

func (c *current) onListElementContinuationElement801() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement801() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement801()
}

func (c *current) onListElementContinuationElement791(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement791(stack["content"])
}

func (c *current) onListElementContinuationElement770(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement770() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement770(stack["line"])
}

func (c *current) onListElementContinuationElement814() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement814() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement814()
}

func (c *current) onListElementContinuationElement817() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement817() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement817()
}

func (c *current) onListElementContinuationElement810() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement810() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement810()
}

func (c *current) onListElementContinuationElement747(delimiter, content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonListElementContinuationElement747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement747(stack["delimiter"], stack["content"])
}

func (c *current) onListElementContinuationElement832() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement832() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement832()
}

func (c *current) onListElementContinuationElement835() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement835()
}

func (c *current) onListElementContinuationElement828() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement828() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement828()
}

func (c *current) onListElementContinuationElement852() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement852() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement852()
}

func (c *current) onListElementContinuationElement855() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement855() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement855()
}

func (c *current) onListElementContinuationElement848() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement848() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement848()
}

func (c *current) onListElementContinuationElement871() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement871() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement871()
}

func (c *current) onListElementContinuationElement875() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement875() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement875()
}

func (c *current) onListElementContinuationElement865(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement865() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement865(stack["content"])
}

func (c *current) onListElementContinuationElement844(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement844(stack["line"])
}

func (c *current) onListElementContinuationElement888() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement888() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement888()
}

func (c *current) onListElementContinuationElement891() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement891() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement891()
}

func (c *current) onListElementContinuationElement884() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement884()
}

func (c *current) onListElementContinuationElement826(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement826(stack["content"])
}

func (c *current) onListElementContinuationElement906() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement906() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement906()
}

func (c *current) onListElementContinuationElement909() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement909()
}

func (c *current) onListElementContinuationElement902() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonListElementContinuationElement902() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement902()
}

func (c *current) onListElementContinuationElement926() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement926() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement926()
}

func (c *current) onListElementContinuationElement929() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement929() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement929()
}

func (c *current) onListElementContinuationElement922() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonListElementContinuationElement922() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement922()
}

func (c *current) onListElementContinuationElement945() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement945() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement945()
}

func (c *current) onListElementContinuationElement949() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement949() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement949()
}

func (c *current) onListElementContinuationElement939(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement939() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement939(stack["content"])
}

func (c *current) onListElementContinuationElement918(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement918() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement918(stack["line"])
}

func (c *current) onListElementContinuationElement962() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement962() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement962()
}

func (c *current) onListElementContinuationElement965() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement965() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement965()
}

func (c *current) onListElementContinuationElement958() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonListElementContinuationElement958() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement958()
}

func (c *current) onListElementContinuationElement900(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement900(stack["content"])
}

func (c *current) onListElementContinuationElement980() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement980() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement980()
}

func (c *current) onListElementContinuationElement983() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement983() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement983()
}

func (c *current) onListElementContinuationElement976() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonListElementContinuationElement976() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement976()
}

func (c *current) onListElementContinuationElement1000() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1000() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1000()
}

func (c *current) onListElementContinuationElement1003() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1003() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1003()
}

func (c *current) onListElementContinuationElement996() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonListElementContinuationElement996() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement996()
}

func (c *current) onListElementContinuationElement1019() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1019() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1019()
}

func (c *current) onListElementContinuationElement1023() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1023() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1023()
}

func (c *current) onListElementContinuationElement1013(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1013() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1013(stack["content"])
}

func (c *current) onListElementContinuationElement992(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement992() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement992(stack["line"])
}

func (c *current) onListElementContinuationElement1036() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1036() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1036()
}

func (c *current) onListElementContinuationElement1039() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1039() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1039()
}

func (c *current) onListElementContinuationElement1032() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonListElementContinuationElement1032() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1032()
}

func (c *current) onListElementContinuationElement974(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement974() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement974(stack["content"])
}

func (c *current) onListElementContinuationElement1060() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1060() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1060()
}

func (c *current) onListElementContinuationElement1063() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1063() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1063()
}

func (c *current) onListElementContinuationElement1054() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1054() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1054()
}

func (c *current) onListElementContinuationElement1072() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1072() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1072()
}

func (c *current) onListElementContinuationElement1076() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1076() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1076()
}

func (c *current) onListElementContinuationElement1051(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1051() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1051(stack["content"])
}

func (c *current) onListElementContinuationElement1095() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1095() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1095()
}

func (c *current) onListElementContinuationElement1098() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1098() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1098()
}

func (c *current) onListElementContinuationElement1089() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1089() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1089()
}

func (c *current) onListElementContinuationElement1107() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1107()
}

func (c *current) onListElementContinuationElement1111() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1111()
}

func (c *current) onListElementContinuationElement1086(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1086() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1086(stack["content"])
}

func (c *current) onListElementContinuationElement1121() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1121()
}

func (c *current) onListElementContinuationElement1124(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1124() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1124(stack["content"])
}

func (c *current) onListElementContinuationElement1126() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1126()
}

func (c *current) onListElementContinuationElement1118(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1118(stack["content"])
}

func (c *current) onListElementContinuationElement1048(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1048() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1048(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1139()
}

func (c *current) onListElementContinuationElement1142() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1142()
}

func (c *current) onListElementContinuationElement1135() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonListElementContinuationElement1135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1135()
}

func (c *current) onListElementContinuationElement1159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1159()
}

func (c *current) onListElementContinuationElement1162() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1162()
}

func (c *current) onListElementContinuationElement1155() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonListElementContinuationElement1155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1155()
}

func (c *current) onListElementContinuationElement1178() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1178()
}

func (c *current) onListElementContinuationElement1182() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1182()
}

func (c *current) onListElementContinuationElement1172(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1172(stack["content"])
}

func (c *current) onListElementContinuationElement1151(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1151(stack["line"])
}

func (c *current) onListElementContinuationElement1195() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1195()
}

func (c *current) onListElementContinuationElement1198() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1198()
}

func (c *current) onListElementContinuationElement1191() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonListElementContinuationElement1191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1191()
}

func (c *current) onListElementContinuationElement1133(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1133(stack["content"])
}

func (c *current) onListElementContinuationElement1213() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1213()
}

func (c *current) onListElementContinuationElement1216() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1216()
}

func (c *current) onListElementContinuationElement1209() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonListElementContinuationElement1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1209()
}

func (c *current) onListElementContinuationElement1233() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1233()
}

func (c *current) onListElementContinuationElement1236() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1236()
}

func (c *current) onListElementContinuationElement1229() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonListElementContinuationElement1229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1229()
}

func (c *current) onListElementContinuationElement1252() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1252()
}

func (c *current) onListElementContinuationElement1256() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1256()
}

func (c *current) onListElementContinuationElement1246(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1246(stack["content"])
}

func (c *current) onListElementContinuationElement1225(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1225(stack["line"])
}

func (c *current) onListElementContinuationElement1269() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1269()
}

func (c *current) onListElementContinuationElement1272() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1272()
}

func (c *current) onListElementContinuationElement1265() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonListElementContinuationElement1265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1265()
}

func (c *current) onListElementContinuationElement1207(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1207(stack["content"])
}

func (c *current) onListElementContinuationElement1287() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1287()
}

func (c *current) onListElementContinuationElement1290() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1290()
}

func (c *current) onListElementContinuationElement1283() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonListElementContinuationElement1283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1283()
}

func (c *current) onListElementContinuationElement1307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1307()
}

func (c *current) onListElementContinuationElement1310() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1310()
}

func (c *current) onListElementContinuationElement1303() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonListElementContinuationElement1303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1303()
}

func (c *current) onListElementContinuationElement1326() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1326()
}

func (c *current) onListElementContinuationElement1330() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1330()
}

func (c *current) onListElementContinuationElement1320(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1320(stack["content"])
}

func (c *current) onListElementContinuationElement1299(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1299() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1299(stack["line"])
}

func (c *current) onListElementContinuationElement1343() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1343()
}

func (c *current) onListElementContinuationElement1346() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1346()
}

func (c *current) onListElementContinuationElement1339() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonListElementContinuationElement1339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1339()
}

func (c *current) onListElementContinuationElement1281(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1281(stack["content"])
}

func (c *current) onListElementContinuationElement1366() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1366()
}

func (c *current) onListElementContinuationElement1369() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1369()
}

func (c *current) onListElementContinuationElement1377() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1377()
}

func (c *current) onListElementContinuationElement1355() (interface{}, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonListElementContinuationElement1355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1355()
}

func (c *current) onListElementContinuationElement1389() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1389()
}

func (c *current) onListElementContinuationElement1392() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1392() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1392()
}

func (c *current) onListElementContinuationElement1409() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1409()
}

func (c *current) onListElementContinuationElement1415() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1415()
}

func (c *current) onListElementContinuationElement1413(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement1413() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1413(stack["content"])
}

func (c *current) onListElementContinuationElement1405(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement1405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1405(stack["content"])
}

func (c *current) onListElementContinuationElement1419() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1419()
}

func (c *current) onListElementContinuationElement1433() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1433()
}

func (c *current) onListElementContinuationElement1436() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1436() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1436()
}

func (c *current) onListElementContinuationElement1427() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1427()
}

func (c *current) onListElementContinuationElement1401(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1401(stack["cells"])
}

func (c *current) onListElementContinuationElement1453() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1453()
}

func (c *current) onListElementContinuationElement1456() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1456()
}

func (c *current) onListElementContinuationElement1477() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1477() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1477()
}

func (c *current) onListElementContinuationElement1480() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1480()
}

func (c *current) onListElementContinuationElement1496() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1496()
}

func (c *current) onListElementContinuationElement1499() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1499()
}

func (c *current) onListElementContinuationElement1490() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1490()
}

func (c *current) onListElementContinuationElement1508() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1508()
}

func (c *current) onListElementContinuationElement1514() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1514()
}

func (c *current) onListElementContinuationElement1512(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement1512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1512(stack["content"])
}

func (c *current) onListElementContinuationElement1470(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement1470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1470(stack["content"])
}

func (c *current) onListElementContinuationElement1518() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1518()
}

func (c *current) onListElementContinuationElement1467(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonListElementContinuationElement1467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1467(stack["cell"])
}

func (c *current) onListElementContinuationElement1533() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1533() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1533()
}

func (c *current) onListElementContinuationElement1536() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1536()
}

func (c *current) onListElementContinuationElement1527() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1527()
}

func (c *current) onListElementContinuationElement1548() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1548()
}

func (c *current) onListElementContinuationElement1551() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1551()
}

func (c *current) onListElementContinuationElement1446(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1446(stack["cells"])
}

func (c *current) onListElementContinuationElement1567() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1567()
}

func (c *current) onListElementContinuationElement1570() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1570() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1570()
}

func (c *current) onListElementContinuationElement1588() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1588()
}

func (c *current) onListElementContinuationElement1591() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1591()
}

func (c *current) onListElementContinuationElement1607() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1607()
}

func (c *current) onListElementContinuationElement1610() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1610() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1610()
}

func (c *current) onListElementContinuationElement1601() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1601()
}

func (c *current) onListElementContinuationElement1619() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1619()
}

func (c *current) onListElementContinuationElement1625() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1625()
}

func (c *current) onListElementContinuationElement1623(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement1623() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1623(stack["content"])
}

func (c *current) onListElementContinuationElement1581(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement1581() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1581(stack["content"])
}

func (c *current) onListElementContinuationElement1629() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1629()
}

func (c *current) onListElementContinuationElement1643() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1643() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1643()
}

func (c *current) onListElementContinuationElement1646() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1646() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1646()
}

func (c *current) onListElementContinuationElement1637() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1637() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1637()
}

func (c *current) onListElementContinuationElement1560(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1560() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1560(stack["cells"])
}

func (c *current) onListElementContinuationElement1657() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1657() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1657()
}

func (c *current) onListElementContinuationElement1660() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1660() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1660()
}

func (c *current) onListElementContinuationElement1385(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1385(stack["header"], stack["rows"])
}

func (c *current) onListElementContinuationElement1675() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1675() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1675()
}

func (c *current) onListElementContinuationElement1679() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1679() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1679()
}

func (c *current) onListElementContinuationElement1669(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1669() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1669(stack["content"])
}

func (c *current) onListElementContinuationElement1690() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonListElementContinuationElement1690() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1690()
}

func (c *current) onListElementContinuationElement1692() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonListElementContinuationElement1692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1692()
}

func (c *current) onListElementContinuationElement1694() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonListElementContinuationElement1694() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1694()
}

func (c *current) onListElementContinuationElement1696() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonListElementContinuationElement1696() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1696()
}

func (c *current) onListElementContinuationElement1698() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonListElementContinuationElement1698() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1698()
}

func (c *current) onListElementContinuationElement1705() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1705()
}

func (c *current) onListElementContinuationElement1708(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1708() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1708(stack["content"])
}

func (c *current) onListElementContinuationElement1710() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1710() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1710()
}

func (c *current) onListElementContinuationElement1702(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1702() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1702(stack["content"])
}

func (c *current) onListElementContinuationElement1725() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1725() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1725()
}

func (c *current) onListElementContinuationElement1727() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1727() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1727()
}

func (c *current) onListElementContinuationElement1740() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1740() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1740()
}

func (c *current) onListElementContinuationElement1744() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1744() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1744()
}

func (c *current) onListElementContinuationElement1734(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1734(stack["content"])
}

func (c *current) onListElementContinuationElement1754() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1754() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1754()
}

func (c *current) onListElementContinuationElement1757(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1757() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1757(stack["content"])
}

func (c *current) onListElementContinuationElement1759() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1759()
}

func (c *current) onListElementContinuationElement1751(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1751() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1751(stack["content"])
}

func (c *current) onListElementContinuationElement1719(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1719(stack["line"])
}

func (c *current) onListElementContinuationElement1686(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1686() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1686(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1774() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1774() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1774()
}

func (c *current) onListElementContinuationElement1772() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1772() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1772()
}

func (c *current) onListElementContinuationElement1779(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1779() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1779(stack["content"])
}

func (c *current) onListElementContinuationElement1781() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1781() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1781()
}

func (c *current) onListElementContinuationElement1769(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1769() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1769(stack["content"])
}

func (c *current) onListElementContinuationElement1797() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1797() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1797()
}

func (c *current) onListElementContinuationElement1801() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1801() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1801()
}

func (c *current) onListElementContinuationElement1791(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1791(stack["content"])
}

func (c *current) onListElementContinuationElement1811() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1811() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1811()
}

func (c *current) onListElementContinuationElement1814(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1814() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1814(stack["content"])
}

func (c *current) onListElementContinuationElement1816() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1816() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1816()
}

func (c *current) onListElementContinuationElement1808(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1808() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1808(stack["content"])
}

func (c *current) onListElementContinuationElement1766(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1766() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1766(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1826() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1826()
}

func (c *current) onListElementContinuationElement1830() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1830() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1830()
}

func (c *current) onListElementContinuationElement1823(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewParagraph(types.RawLine(content.(string)))

}

func (p *parser) callonListElementContinuationElement1823() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1823(stack["content"])
}

func (c *current) onListElementContinuationElement1(attributes, element interface{}) (interface{}, error) {
	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	// if log.IsLevelEnabled(log.DebugLevel) {
	//     log.Debugf("returning element '%s'\n", spew.Sdump(element))
	// }
	return element, nil

}

func (p *parser) callonListElementContinuationElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1(stack["attributes"], stack["element"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts), nil

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCallout11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout11()
}

func (c *current) onCallout15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonCallout15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout15()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onShortcutParagraph10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph10()
}

func (c *current) onShortcutParagraph17() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonShortcutParagraph17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph17()
}

func (c *current) onShortcutParagraph20(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonShortcutParagraph20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph20(stack["depth"])
}

func (c *current) onShortcutParagraph14(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonShortcutParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph14(stack["depth"])
}

func (c *current) onShortcutParagraph21() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonShortcutParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph21()
}

func (c *current) onShortcutParagraph26() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonShortcutParagraph26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph26()
}

func (c *current) onShortcutParagraph30() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonShortcutParagraph30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph30()
}

func (c *current) onShortcutParagraph34() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonShortcutParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph34()
}

func (c *current) onShortcutParagraph39() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonShortcutParagraph39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph39()
}

func (c *current) onShortcutParagraph44(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph44(stack["prefix"])
}

func (c *current) onShortcutParagraph7(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonShortcutParagraph7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph7(stack["prefix"])
}

func (c *current) onShortcutParagraph52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph52()
}

func (c *current) onShortcutParagraph59() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonShortcutParagraph59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph59()
}

func (c *current) onShortcutParagraph62(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonShortcutParagraph62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph62(stack["depth"])
}

func (c *current) onShortcutParagraph56(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonShortcutParagraph56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph56(stack["depth"])
}

func (c *current) onShortcutParagraph64() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonShortcutParagraph64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph64()
}

func (c *current) onShortcutParagraph66(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph66(stack["prefix"])
}

func (c *current) onShortcutParagraph49(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonShortcutParagraph49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph49(stack["prefix"])
}

func (c *current) onShortcutParagraph72() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonShortcutParagraph72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph72()
}

func (c *current) onShortcutParagraph74() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonShortcutParagraph74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph74()
}

func (c *current) onShortcutParagraph76() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonShortcutParagraph76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph76()
}

func (c *current) onShortcutParagraph78() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonShortcutParagraph78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph78()
}

func (c *current) onShortcutParagraph80() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonShortcutParagraph80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph80()
}

func (c *current) onShortcutParagraph86() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonShortcutParagraph86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph86()
}

func (c *current) onShortcutParagraph89(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonShortcutParagraph89() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph89(stack["content"])
}

func (c *current) onShortcutParagraph91() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph91()
}

func (c *current) onShortcutParagraph83(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph83(stack["content"])
}

func (c *current) onShortcutParagraph98(firstLine interface{}) (bool, error) {
	// also, make sure that there is no LabeledListElement delimiter (`::` - `::::`)
	//   in the middle of the line (with space afterwards)
	//   or at the end of the line
	return !strings.Contains(string(firstLine.(types.RawLine)), ":: ") &&
		!strings.HasSuffix(string(firstLine.(types.RawLine)), "::"), nil

}

func (p *parser) callonShortcutParagraph98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph98(stack["firstLine"])
}

func (c *current) onShortcutParagraph113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph113()
}

func (c *current) onShortcutParagraph116() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph116()
}

func (c *current) onShortcutParagraph107() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonShortcutParagraph107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph107()
}

func (c *current) onShortcutParagraph129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph129()
}

func (c *current) onShortcutParagraph131() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph131()
}

func (c *current) onShortcutParagraph144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph144()
}

func (c *current) onShortcutParagraph148() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph148()
}

func (c *current) onShortcutParagraph138(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonShortcutParagraph138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph138(stack["content"])
}

func (c *current) onShortcutParagraph158() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonShortcutParagraph158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph158()
}

func (c *current) onShortcutParagraph161(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonShortcutParagraph161() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph161(stack["content"])
}

func (c *current) onShortcutParagraph163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph163()
}

func (c *current) onShortcutParagraph155(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph155(stack["content"])
}

func (c *current) onShortcutParagraph101(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonShortcutParagraph101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph101(stack["line"])
}

func (c *current) onShortcutParagraph1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonShortcutParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraph7() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonParagraph7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph7()
}

func (c *current) onParagraph10(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonParagraph10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph10(stack["content"])
}

func (c *current) onParagraph12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph12()
}

func (c *current) onParagraph4(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph4(stack["content"])
}

func (c *current) onParagraph33() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph33()
}

func (c *current) onParagraph36() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph36()
}

func (c *current) onParagraph27() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonParagraph27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph27()
}

func (c *current) onParagraph49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph49()
}

func (c *current) onParagraph51() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph51()
}

func (c *current) onParagraph64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph64()
}

func (c *current) onParagraph68() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph68()
}

func (c *current) onParagraph58(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonParagraph58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph58(stack["content"])
}

func (c *current) onParagraph78() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonParagraph78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph78()
}

func (c *current) onParagraph81(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonParagraph81() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph81(stack["content"])
}

func (c *current) onParagraph83() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph83()
}

func (c *current) onParagraph75(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph75(stack["content"])
}

func (c *current) onParagraph21(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["line"])
}

func (c *current) onParagraph1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement13()
}

func (c *current) onDoubleQuoteBoldTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement7()
}

func (c *current) onDoubleQuoteBoldTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement16()
}

func (c *current) onDoubleQuoteBoldTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement20()
}

func (c *current) onDoubleQuoteBoldTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement26()
}

func (c *current) onDoubleQuoteBoldTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement33()
}

func (c *current) onDoubleQuoteBoldTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement40()
}

func (c *current) onDoubleQuoteBoldTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement52()
}

func (c *current) onDoubleQuoteBoldTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement54()
}

func (c *current) onDoubleQuoteBoldTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement62()
}

func (c *current) onDoubleQuoteBoldTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement74()
}

func (c *current) onDoubleQuoteBoldTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement76()
}

func (c *current) onDoubleQuoteBoldTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement84()
}

func (c *current) onDoubleQuoteBoldTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement93()
}

func (c *current) onDoubleQuoteBoldTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement102()
}

func (c *current) onDoubleQuoteBoldTextElement106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement106()
}

func (c *current) onDoubleQuoteBoldTextElement112() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement112()
}

func (c *current) onDoubleQuoteBoldTextElement121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement121()
}

func (c *current) onDoubleQuoteBoldTextElement117(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement117(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement127() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement127()
}

func (c *current) onDoubleQuoteBoldTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteBoldTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement98(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteBoldTextElement134() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement134()
}

func (c *current) onDoubleQuoteBoldTextElement130(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteBoldTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement130(stack["id"])
}

func (c *current) onDoubleQuoteBoldTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement96()
}

func (c *current) onDoubleQuoteBoldTextElement138() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement138()
}

func (c *current) onDoubleQuoteBoldTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement91(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement140() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteBoldTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement140()
}

func (c *current) onDoubleQuoteBoldTextElement142() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteBoldTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement142()
}

func (c *current) onDoubleQuoteBoldTextElement144() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteBoldTextElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement144()
}

func (c *current) onDoubleQuoteBoldTextElement146() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteBoldTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement146()
}

func (c *current) onDoubleQuoteBoldTextElement148() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteBoldTextElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement148()
}

func (c *current) onDoubleQuoteBoldTextElement150() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteBoldTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement150()
}

func (c *current) onDoubleQuoteBoldTextElement162() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement162()
}

func (c *current) onDoubleQuoteBoldTextElement158(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement158(stack["ref"])
}

func (c *current) onDoubleQuoteBoldTextElement170() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement170()
}

func (c *current) onDoubleQuoteBoldTextElement167() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement167()
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements7()
}

func (c *current) onSingleQuoteBoldTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteBoldTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteBoldTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement8()
}

func (c *current) onSingleQuoteBoldTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement2()
}

func (c *current) onSingleQuoteBoldTextElement11() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement11()
}

func (c *current) onSingleQuoteBoldTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement15()
}

func (c *current) onSingleQuoteBoldTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement21()
}

func (c *current) onSingleQuoteBoldTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteBoldTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement28()
}

func (c *current) onSingleQuoteBoldTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement35()
}

func (c *current) onSingleQuoteBoldTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement47()
}

func (c *current) onSingleQuoteBoldTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement49()
}

func (c *current) onSingleQuoteBoldTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement42(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement57()
}

func (c *current) onSingleQuoteBoldTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement69()
}

func (c *current) onSingleQuoteBoldTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement71()
}

func (c *current) onSingleQuoteBoldTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement64(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement79()
}

func (c *current) onSingleQuoteBoldTextElement75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement75(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement26(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement88() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteBoldTextElement88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement88()
}

func (c *current) onSingleQuoteBoldTextElement97() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement97()
}

func (c *current) onSingleQuoteBoldTextElement101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement101()
}

func (c *current) onSingleQuoteBoldTextElement107() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement107()
}

func (c *current) onSingleQuoteBoldTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement116()
}

func (c *current) onSingleQuoteBoldTextElement112(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement112(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement122() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement122()
}

func (c *current) onSingleQuoteBoldTextElement93(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteBoldTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement93(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteBoldTextElement129() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement129()
}

func (c *current) onSingleQuoteBoldTextElement125(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteBoldTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement125(stack["id"])
}

func (c *current) onSingleQuoteBoldTextElement91() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement91()
}

func (c *current) onSingleQuoteBoldTextElement133() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement133()
}

func (c *current) onSingleQuoteBoldTextElement86(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement86(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement135() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteBoldTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement135()
}

func (c *current) onSingleQuoteBoldTextElement137() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteBoldTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement137()
}

func (c *current) onSingleQuoteBoldTextElement139() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteBoldTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement139()
}

func (c *current) onSingleQuoteBoldTextElement141() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteBoldTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement141()
}

func (c *current) onSingleQuoteBoldTextElement143() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteBoldTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement143()
}

func (c *current) onSingleQuoteBoldTextElement145() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteBoldTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement145()
}

func (c *current) onSingleQuoteBoldTextElement157() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement157()
}

func (c *current) onSingleQuoteBoldTextElement153(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement153(stack["ref"])
}

func (c *current) onSingleQuoteBoldTextElement165() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement165()
}

func (c *current) onSingleQuoteBoldTextElement162() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement162()
}

func (c *current) onQuotedTextInSingleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedBoldText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement13()
}

func (c *current) onDoubleQuoteItalicTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement7()
}

func (c *current) onDoubleQuoteItalicTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement16()
}

func (c *current) onDoubleQuoteItalicTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement20()
}

func (c *current) onDoubleQuoteItalicTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement26()
}

func (c *current) onDoubleQuoteItalicTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement33()
}

func (c *current) onDoubleQuoteItalicTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement40()
}

func (c *current) onDoubleQuoteItalicTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement52()
}

func (c *current) onDoubleQuoteItalicTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement54()
}

func (c *current) onDoubleQuoteItalicTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement62()
}

func (c *current) onDoubleQuoteItalicTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement74()
}

func (c *current) onDoubleQuoteItalicTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement76()
}

func (c *current) onDoubleQuoteItalicTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement84()
}

func (c *current) onDoubleQuoteItalicTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement93()
}

func (c *current) onDoubleQuoteItalicTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement102()
}

func (c *current) onDoubleQuoteItalicTextElement106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement106()
}

func (c *current) onDoubleQuoteItalicTextElement112() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement112()
}

func (c *current) onDoubleQuoteItalicTextElement121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement121()
}

func (c *current) onDoubleQuoteItalicTextElement117(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement117(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement127() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement127()
}

func (c *current) onDoubleQuoteItalicTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteItalicTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement98(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteItalicTextElement134() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement134()
}

func (c *current) onDoubleQuoteItalicTextElement130(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteItalicTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement130(stack["id"])
}

func (c *current) onDoubleQuoteItalicTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement96()
}

func (c *current) onDoubleQuoteItalicTextElement138() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement138()
}

func (c *current) onDoubleQuoteItalicTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement91(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement140() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteItalicTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement140()
}

func (c *current) onDoubleQuoteItalicTextElement142() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteItalicTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement142()
}

func (c *current) onDoubleQuoteItalicTextElement144() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteItalicTextElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement144()
}

func (c *current) onDoubleQuoteItalicTextElement146() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteItalicTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement146()
}

func (c *current) onDoubleQuoteItalicTextElement148() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteItalicTextElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement148()
}

func (c *current) onDoubleQuoteItalicTextElement150() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteItalicTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement150()
}

func (c *current) onDoubleQuoteItalicTextElement162() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement162()
}

func (c *current) onDoubleQuoteItalicTextElement158(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement158(stack["ref"])
}

func (c *current) onDoubleQuoteItalicTextElement170() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement170()
}

func (c *current) onDoubleQuoteItalicTextElement167() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement167()
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements7()
}

func (c *current) onSingleQuoteItalicTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteItalicTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement8()
}

func (c *current) onSingleQuoteItalicTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement2()
}

func (c *current) onSingleQuoteItalicTextElement11() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement11()
}

func (c *current) onSingleQuoteItalicTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement15()
}

func (c *current) onSingleQuoteItalicTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement21()
}

func (c *current) onSingleQuoteItalicTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteItalicTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement28()
}

func (c *current) onSingleQuoteItalicTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement35()
}

func (c *current) onSingleQuoteItalicTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement47()
}

func (c *current) onSingleQuoteItalicTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement49()
}

func (c *current) onSingleQuoteItalicTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement42(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement57()
}

func (c *current) onSingleQuoteItalicTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement69()
}

func (c *current) onSingleQuoteItalicTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement71()
}

func (c *current) onSingleQuoteItalicTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement64(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement79()
}

func (c *current) onSingleQuoteItalicTextElement75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement75(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement26(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement88() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteItalicTextElement88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement88()
}

func (c *current) onSingleQuoteItalicTextElement97() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement97()
}

func (c *current) onSingleQuoteItalicTextElement101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement101()
}

func (c *current) onSingleQuoteItalicTextElement107() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement107()
}

func (c *current) onSingleQuoteItalicTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement116()
}

func (c *current) onSingleQuoteItalicTextElement112(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement112(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement122() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement122()
}

func (c *current) onSingleQuoteItalicTextElement93(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteItalicTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement93(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteItalicTextElement129() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement129()
}

func (c *current) onSingleQuoteItalicTextElement125(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteItalicTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement125(stack["id"])
}

func (c *current) onSingleQuoteItalicTextElement91() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement91()
}

func (c *current) onSingleQuoteItalicTextElement133() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement133()
}

func (c *current) onSingleQuoteItalicTextElement86(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement86(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement135() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteItalicTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement135()
}

func (c *current) onSingleQuoteItalicTextElement137() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteItalicTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement137()
}

func (c *current) onSingleQuoteItalicTextElement139() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteItalicTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement139()
}

func (c *current) onSingleQuoteItalicTextElement141() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteItalicTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement141()
}

func (c *current) onSingleQuoteItalicTextElement143() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteItalicTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement143()
}

func (c *current) onSingleQuoteItalicTextElement145() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteItalicTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement145()
}

func (c *current) onSingleQuoteItalicTextElement157() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement157()
}

func (c *current) onSingleQuoteItalicTextElement153(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement153(stack["ref"])
}

func (c *current) onSingleQuoteItalicTextElement165() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement165()
}

func (c *current) onSingleQuoteItalicTextElement162() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement162()
}

func (c *current) onQuotedTextInSingleQuoteItalicText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedItalicText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement13()
}

func (c *current) onDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement7()
}

func (c *current) onDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement16()
}

func (c *current) onDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement20()
}

func (c *current) onDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement26()
}

func (c *current) onDoubleQuoteMonospaceTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement33()
}

func (c *current) onDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement40()
}

func (c *current) onDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement52()
}

func (c *current) onDoubleQuoteMonospaceTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement54()
}

func (c *current) onDoubleQuoteMonospaceTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement62()
}

func (c *current) onDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement74()
}

func (c *current) onDoubleQuoteMonospaceTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement76()
}

func (c *current) onDoubleQuoteMonospaceTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement84()
}

func (c *current) onDoubleQuoteMonospaceTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement93()
}

func (c *current) onDoubleQuoteMonospaceTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement102()
}

func (c *current) onDoubleQuoteMonospaceTextElement106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement106()
}

func (c *current) onDoubleQuoteMonospaceTextElement112() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement112()
}

func (c *current) onDoubleQuoteMonospaceTextElement121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement121()
}

func (c *current) onDoubleQuoteMonospaceTextElement117(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement117(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement127() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement127()
}

func (c *current) onDoubleQuoteMonospaceTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement98(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMonospaceTextElement134() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement134()
}

func (c *current) onDoubleQuoteMonospaceTextElement130(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement130(stack["id"])
}

func (c *current) onDoubleQuoteMonospaceTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement96()
}

func (c *current) onDoubleQuoteMonospaceTextElement138() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement138()
}

func (c *current) onDoubleQuoteMonospaceTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement91(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement140() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement140()
}

func (c *current) onDoubleQuoteMonospaceTextElement142() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement142()
}

func (c *current) onDoubleQuoteMonospaceTextElement144() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement144()
}

func (c *current) onDoubleQuoteMonospaceTextElement146() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement146()
}

func (c *current) onDoubleQuoteMonospaceTextElement148() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement148()
}

func (c *current) onDoubleQuoteMonospaceTextElement150() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement150()
}

func (c *current) onDoubleQuoteMonospaceTextElement163() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement163()
}

func (c *current) onDoubleQuoteMonospaceTextElement159(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement159(stack["ref"])
}

func (c *current) onDoubleQuoteMonospaceTextElement171() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement171()
}

func (c *current) onDoubleQuoteMonospaceTextElement168() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement168()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements7()
}

func (c *current) onSingleQuoteMonospaceTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMonospaceTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement2()
}

func (c *current) onSingleQuoteMonospaceTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement11()
}

func (c *current) onSingleQuoteMonospaceTextElement20() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement20()
}

func (c *current) onSingleQuoteMonospaceTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement24()
}

func (c *current) onSingleQuoteMonospaceTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement30()
}

func (c *current) onSingleQuoteMonospaceTextElement37() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement37()
}

func (c *current) onSingleQuoteMonospaceTextElement44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement44()
}

func (c *current) onSingleQuoteMonospaceTextElement56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement56()
}

func (c *current) onSingleQuoteMonospaceTextElement58() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement58()
}

func (c *current) onSingleQuoteMonospaceTextElement51(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement51(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement40(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement40(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement66()
}

func (c *current) onSingleQuoteMonospaceTextElement78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement78()
}

func (c *current) onSingleQuoteMonospaceTextElement80() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement80()
}

func (c *current) onSingleQuoteMonospaceTextElement73(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement73(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement62(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement62(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement88()
}

func (c *current) onSingleQuoteMonospaceTextElement84(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement84(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement35(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement35(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement97() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement97() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement97()
}

func (c *current) onSingleQuoteMonospaceTextElement106() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement106()
}

func (c *current) onSingleQuoteMonospaceTextElement110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement110()
}

func (c *current) onSingleQuoteMonospaceTextElement116() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement116()
}

func (c *current) onSingleQuoteMonospaceTextElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement125()
}

func (c *current) onSingleQuoteMonospaceTextElement121(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement121(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement131() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement131()
}

func (c *current) onSingleQuoteMonospaceTextElement102(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMonospaceTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement102(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMonospaceTextElement138() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement138()
}

func (c *current) onSingleQuoteMonospaceTextElement134(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMonospaceTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement134(stack["id"])
}

func (c *current) onSingleQuoteMonospaceTextElement100() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement100()
}

func (c *current) onSingleQuoteMonospaceTextElement142() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement142()
}

func (c *current) onSingleQuoteMonospaceTextElement95(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement95(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement144() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMonospaceTextElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement144()
}

func (c *current) onSingleQuoteMonospaceTextElement146() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMonospaceTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement146()
}

func (c *current) onSingleQuoteMonospaceTextElement148() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMonospaceTextElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement148()
}

func (c *current) onSingleQuoteMonospaceTextElement150() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMonospaceTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement150()
}

func (c *current) onSingleQuoteMonospaceTextElement152() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMonospaceTextElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement152()
}

func (c *current) onSingleQuoteMonospaceTextElement154() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteMonospaceTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement154()
}

func (c *current) onSingleQuoteMonospaceTextElement167() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement167()
}

func (c *current) onSingleQuoteMonospaceTextElement163(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement163(stack["ref"])
}

func (c *current) onSingleQuoteMonospaceTextElement176() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement176()
}

func (c *current) onSingleQuoteMonospaceTextElement171() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement171()
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMonospaceText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement13()
}

func (c *current) onDoubleQuoteMarkedTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement7()
}

func (c *current) onDoubleQuoteMarkedTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement16()
}

func (c *current) onDoubleQuoteMarkedTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement20()
}

func (c *current) onDoubleQuoteMarkedTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement26()
}

func (c *current) onDoubleQuoteMarkedTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement33()
}

func (c *current) onDoubleQuoteMarkedTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement40()
}

func (c *current) onDoubleQuoteMarkedTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement52()
}

func (c *current) onDoubleQuoteMarkedTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement54()
}

func (c *current) onDoubleQuoteMarkedTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement62()
}

func (c *current) onDoubleQuoteMarkedTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement74()
}

func (c *current) onDoubleQuoteMarkedTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement76()
}

func (c *current) onDoubleQuoteMarkedTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement84()
}

func (c *current) onDoubleQuoteMarkedTextElement80(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement93() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement93()
}

func (c *current) onDoubleQuoteMarkedTextElement102() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement102()
}

func (c *current) onDoubleQuoteMarkedTextElement106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement106()
}

func (c *current) onDoubleQuoteMarkedTextElement112() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement112()
}

func (c *current) onDoubleQuoteMarkedTextElement121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement121()
}

func (c *current) onDoubleQuoteMarkedTextElement117(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement117(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement127() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement127()
}

func (c *current) onDoubleQuoteMarkedTextElement98(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMarkedTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement98(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMarkedTextElement134() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement134()
}

func (c *current) onDoubleQuoteMarkedTextElement130(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMarkedTextElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement130(stack["id"])
}

func (c *current) onDoubleQuoteMarkedTextElement96() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement96()
}

func (c *current) onDoubleQuoteMarkedTextElement138() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement138()
}

func (c *current) onDoubleQuoteMarkedTextElement91(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement91(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement140() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMarkedTextElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement140()
}

func (c *current) onDoubleQuoteMarkedTextElement142() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMarkedTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement142()
}

func (c *current) onDoubleQuoteMarkedTextElement144() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMarkedTextElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement144()
}

func (c *current) onDoubleQuoteMarkedTextElement146() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMarkedTextElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement146()
}

func (c *current) onDoubleQuoteMarkedTextElement148() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMarkedTextElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement148()
}

func (c *current) onDoubleQuoteMarkedTextElement150() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonDoubleQuoteMarkedTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement150()
}

func (c *current) onDoubleQuoteMarkedTextElement162() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement162()
}

func (c *current) onDoubleQuoteMarkedTextElement158(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement158(stack["ref"])
}

func (c *current) onDoubleQuoteMarkedTextElement170() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement170()
}

func (c *current) onDoubleQuoteMarkedTextElement167() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement167()
}

func (c *current) onDoubleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleMarkedBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleMarkedBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleMarkedBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements7()
}

func (c *current) onSingleQuoteMarkedTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMarkedTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMarkedTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElement8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement8()
}

func (c *current) onSingleQuoteMarkedTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement2()
}

func (c *current) onSingleQuoteMarkedTextElement11() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement11()
}

func (c *current) onSingleQuoteMarkedTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement15()
}

func (c *current) onSingleQuoteMarkedTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement21()
}

func (c *current) onSingleQuoteMarkedTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement28()
}

func (c *current) onSingleQuoteMarkedTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement35()
}

func (c *current) onSingleQuoteMarkedTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement47()
}

func (c *current) onSingleQuoteMarkedTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement49()
}

func (c *current) onSingleQuoteMarkedTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement42(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement57()
}

func (c *current) onSingleQuoteMarkedTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement69()
}

func (c *current) onSingleQuoteMarkedTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement71()
}

func (c *current) onSingleQuoteMarkedTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement64(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement79()
}

func (c *current) onSingleQuoteMarkedTextElement75(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement75(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement26(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement88() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement88() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement88()
}

func (c *current) onSingleQuoteMarkedTextElement97() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement97()
}

func (c *current) onSingleQuoteMarkedTextElement101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement101()
}

func (c *current) onSingleQuoteMarkedTextElement107() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement107()
}

func (c *current) onSingleQuoteMarkedTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement116()
}

func (c *current) onSingleQuoteMarkedTextElement112(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement112(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement122() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement122()
}

func (c *current) onSingleQuoteMarkedTextElement93(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMarkedTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement93(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMarkedTextElement129() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement129()
}

func (c *current) onSingleQuoteMarkedTextElement125(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMarkedTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement125(stack["id"])
}

func (c *current) onSingleQuoteMarkedTextElement91() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement91()
}

func (c *current) onSingleQuoteMarkedTextElement133() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement133()
}

func (c *current) onSingleQuoteMarkedTextElement86(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement86(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement135() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMarkedTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement135()
}

func (c *current) onSingleQuoteMarkedTextElement137() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMarkedTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement137()
}

func (c *current) onSingleQuoteMarkedTextElement139() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMarkedTextElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement139()
}

func (c *current) onSingleQuoteMarkedTextElement141() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMarkedTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement141()
}

func (c *current) onSingleQuoteMarkedTextElement143() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMarkedTextElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement143()
}

func (c *current) onSingleQuoteMarkedTextElement145() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuoteMarkedTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement145()
}

func (c *current) onSingleQuoteMarkedTextElement157() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement157()
}

func (c *current) onSingleQuoteMarkedTextElement153(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement153(stack["ref"])
}

func (c *current) onSingleQuoteMarkedTextElement165() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement165()
}

func (c *current) onSingleQuoteMarkedTextElement162() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement162()
}

func (c *current) onQuotedTextInSingleQuoteMarkedText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMarkedText1(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMarkedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonSubscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSubscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonSuperscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSuperscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13()
}

func (c *current) onSingleQuotedStringElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement7()
}

func (c *current) onSingleQuotedStringElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement17()
}

func (c *current) onSingleQuotedStringElement22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement22()
}

func (c *current) onSingleQuotedStringElement28() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement28()
}

func (c *current) onSingleQuotedStringElement35() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuotedStringElement35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement35()
}

func (c *current) onSingleQuotedStringElement42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement42()
}

func (c *current) onSingleQuotedStringElement54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement54()
}

func (c *current) onSingleQuotedStringElement56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement56()
}

func (c *current) onSingleQuotedStringElement49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement49(stack["start"])
}

func (c *current) onSingleQuotedStringElement38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuotedStringElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement38(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement64()
}

func (c *current) onSingleQuotedStringElement76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement76()
}

func (c *current) onSingleQuotedStringElement78() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement78()
}

func (c *current) onSingleQuotedStringElement71(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement71(stack["start"])
}

func (c *current) onSingleQuotedStringElement60(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuotedStringElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement60(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement86()
}

func (c *current) onSingleQuotedStringElement82(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuotedStringElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement82(stack["name"])
}

func (c *current) onSingleQuotedStringElement33(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement33(stack["element"])
}

func (c *current) onSingleQuotedStringElement95() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuotedStringElement95() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement95()
}

func (c *current) onSingleQuotedStringElement104() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement104()
}

func (c *current) onSingleQuotedStringElement108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement108()
}

func (c *current) onSingleQuotedStringElement114() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement114()
}

func (c *current) onSingleQuotedStringElement123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement123()
}

func (c *current) onSingleQuotedStringElement119(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuotedStringElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement119(stack["name"])
}

func (c *current) onSingleQuotedStringElement129() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement129()
}

func (c *current) onSingleQuotedStringElement100(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuotedStringElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement100(stack["id"], stack["label"])
}

func (c *current) onSingleQuotedStringElement136() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement136()
}

func (c *current) onSingleQuotedStringElement132(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuotedStringElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement132(stack["id"])
}

func (c *current) onSingleQuotedStringElement98() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement98()
}

func (c *current) onSingleQuotedStringElement140() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement140()
}

func (c *current) onSingleQuotedStringElement93(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement93(stack["element"])
}

func (c *current) onSingleQuotedStringElement145() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements) && c.isPreceededBySpace(), nil

}

func (p *parser) callonSingleQuotedStringElement145() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement145()
}

func (c *current) onSingleQuotedStringElement148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement148()
}

func (c *current) onSingleQuotedStringElement152() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement152()
}

func (c *current) onSingleQuotedStringElement143() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonSingleQuotedStringElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement143()
}

func (c *current) onSingleQuotedStringElement161() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuotedStringElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement161()
}

func (c *current) onSingleQuotedStringElement163() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuotedStringElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement163()
}

func (c *current) onSingleQuotedStringElement165() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuotedStringElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement165()
}

func (c *current) onSingleQuotedStringElement167() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuotedStringElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement167()
}

func (c *current) onSingleQuotedStringElement169() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuotedStringElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement169()
}

func (c *current) onSingleQuotedStringElement171() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSingleQuotedStringElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement171()
}

func (c *current) onSingleQuotedStringElement180() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement180()
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement13()
}

func (c *current) onDoubleQuotedStringElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement7()
}

func (c *current) onDoubleQuotedStringElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement17()
}

func (c *current) onDoubleQuotedStringElement22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement22()
}

func (c *current) onDoubleQuotedStringElement28() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement28()
}

func (c *current) onDoubleQuotedStringElement36() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements) && c.isPreceededBySpace(), nil

}

func (p *parser) callonDoubleQuotedStringElement36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement36()
}

func (c *current) onDoubleQuotedStringElement39() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement39()
}

func (c *current) onDoubleQuotedStringElement43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement43()
}

func (c *current) onDoubleQuotedStringElement34() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonDoubleQuotedStringElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement34()
}

func (c *current) onDoubleQuotedStringElement54() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuotedStringElement54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement54()
}

func (c *current) onDoubleQuotedStringElement61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement61()
}

func (c *current) onDoubleQuotedStringElement73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement73()
}

func (c *current) onDoubleQuotedStringElement75() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement75()
}

func (c *current) onDoubleQuotedStringElement68(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement68(stack["start"])
}

func (c *current) onDoubleQuotedStringElement57(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuotedStringElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement57(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement83()
}

func (c *current) onDoubleQuotedStringElement95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement95()
}

func (c *current) onDoubleQuotedStringElement97() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement97()
}

func (c *current) onDoubleQuotedStringElement90(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement90(stack["start"])
}

func (c *current) onDoubleQuotedStringElement79(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuotedStringElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement79(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement105()
}

func (c *current) onDoubleQuotedStringElement101(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement101(stack["name"])
}

func (c *current) onDoubleQuotedStringElement52(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement52(stack["element"])
}

func (c *current) onDoubleQuotedStringElement114() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuotedStringElement114() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement114()
}

func (c *current) onDoubleQuotedStringElement123() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement123()
}

func (c *current) onDoubleQuotedStringElement127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement127()
}

func (c *current) onDoubleQuotedStringElement133() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement133()
}

func (c *current) onDoubleQuotedStringElement142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement142()
}

func (c *current) onDoubleQuotedStringElement138(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement138(stack["name"])
}

func (c *current) onDoubleQuotedStringElement148() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement148()
}

func (c *current) onDoubleQuotedStringElement119(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuotedStringElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement119(stack["id"], stack["label"])
}

func (c *current) onDoubleQuotedStringElement155() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement155()
}

func (c *current) onDoubleQuotedStringElement151(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuotedStringElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement151(stack["id"])
}

func (c *current) onDoubleQuotedStringElement117() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement117()
}

func (c *current) onDoubleQuotedStringElement159() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement159()
}

func (c *current) onDoubleQuotedStringElement112(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement112(stack["element"])
}

func (c *current) onDoubleQuotedStringElement163() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement163()
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSubstitutions17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions17()
}

func (c *current) onSubstitutions22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions22()
}

func (c *current) onSubstitutions12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions12()
}

func (c *current) onSubstitutions29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions29()
}

func (c *current) onSubstitutions31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions31()
}

func (c *current) onSubstitutions40() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSubstitutions40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions40()
}

func (c *current) onSubstitutions36(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSubstitutions36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions36(stack["ref"])
}

func (c *current) onSubstitutions46() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements) && c.isPreceededBySpace(), nil

}

func (p *parser) callonSubstitutions46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions46()
}

func (c *current) onSubstitutions49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions49()
}

func (c *current) onSubstitutions53() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions53()
}

func (c *current) onSubstitutions44() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonSubstitutions44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions44()
}

func (c *current) onSubstitutions63() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSubstitutions63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions63()
}

func (c *current) onSubstitutions67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions67()
}

func (c *current) onSubstitutions69() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions69()
}

func (c *current) onSubstitutions60(char interface{}) (interface{}, error) {
	return char, nil
}

func (p *parser) callonSubstitutions60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions60(stack["char"])
}

func (c *current) onSubstitutions82() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSubstitutions82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions82()
}

func (c *current) onSubstitutions91() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSubstitutions91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions91()
}

func (c *current) onSubstitutions95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions95()
}

func (c *current) onSubstitutions101() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions101()
}

func (c *current) onSubstitutions110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions110()
}

func (c *current) onSubstitutions106(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSubstitutions106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions106(stack["name"])
}

func (c *current) onSubstitutions116() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions116()
}

func (c *current) onSubstitutions87(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSubstitutions87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions87(stack["id"], stack["label"])
}

func (c *current) onSubstitutions123() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSubstitutions123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions123()
}

func (c *current) onSubstitutions119(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSubstitutions119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions119(stack["id"])
}

func (c *current) onSubstitutions85() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions85()
}

func (c *current) onSubstitutions127() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSubstitutions127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions127()
}

func (c *current) onSubstitutions80(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSubstitutions80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions80(stack["element"])
}

func (c *current) onSubstitutions131() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSubstitutions131() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions131()
}

func (c *current) onSubstitutions138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions138()
}

func (c *current) onSubstitutions150() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions150()
}

func (c *current) onSubstitutions152() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSubstitutions152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions152()
}

func (c *current) onSubstitutions145(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSubstitutions145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions145(stack["start"])
}

func (c *current) onSubstitutions134(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSubstitutions134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions134(stack["name"], stack["start"])
}

func (c *current) onSubstitutions160() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions160()
}

func (c *current) onSubstitutions172() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions172()
}

func (c *current) onSubstitutions174() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSubstitutions174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions174()
}

func (c *current) onSubstitutions167(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSubstitutions167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions167(stack["start"])
}

func (c *current) onSubstitutions156(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSubstitutions156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions156(stack["name"], stack["start"])
}

func (c *current) onSubstitutions182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions182()
}

func (c *current) onSubstitutions178(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSubstitutions178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions178(stack["name"])
}

func (c *current) onSubstitutions129(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSubstitutions129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions129(stack["element"])
}

func (c *current) onSubstitutions190() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonSubstitutions190() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions190()
}

func (c *current) onSubstitutions193() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSubstitutions193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions193()
}

func (c *current) onSubstitutions195() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSubstitutions195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions195()
}

func (c *current) onSubstitutions197() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSubstitutions197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions197()
}

func (c *current) onSubstitutions199() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSubstitutions199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions199()
}

func (c *current) onSubstitutions201() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSubstitutions201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions201()
}

func (c *current) onSubstitutions203() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonSubstitutions203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions203()
}

func (c *current) onSubstitutions188(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSubstitutions188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions188(stack["element"])
}

func (c *current) onSubstitutions209() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions209()
}

func (c *current) onSubstitutions5(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonSubstitutions5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions5(stack["element"])
}

func (c *current) onSubstitutions1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSubstitutions1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onHeaderGroupElement8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement8()
}

func (c *current) onHeaderGroupElement17() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement17()
}

func (c *current) onHeaderGroupElement29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement29()
}

func (c *current) onHeaderGroupElement40() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement40()
}

func (c *current) onHeaderGroupElement47() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement47()
}

func (c *current) onHeaderGroupElement43(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement43(stack["ref"])
}

func (c *current) onHeaderGroupElement53() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonHeaderGroupElement53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement53()
}

func (c *current) onHeaderGroupElement60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement60()
}

func (c *current) onHeaderGroupElement72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement72()
}

func (c *current) onHeaderGroupElement74() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement74()
}

func (c *current) onHeaderGroupElement67(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement67(stack["start"])
}

func (c *current) onHeaderGroupElement56(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonHeaderGroupElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement56(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement82()
}

func (c *current) onHeaderGroupElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement94()
}

func (c *current) onHeaderGroupElement96() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement96()
}

func (c *current) onHeaderGroupElement89(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement89(stack["start"])
}

func (c *current) onHeaderGroupElement78(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonHeaderGroupElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement78(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement104() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement104()
}

func (c *current) onHeaderGroupElement100(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonHeaderGroupElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement100(stack["name"])
}

func (c *current) onHeaderGroupElement51(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement51(stack["element"])
}

func (c *current) onHeaderGroupElement110() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement110()
}

func (c *current) onHeaderGroupElement36(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonHeaderGroupElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement36(stack["elements"])
}

func (c *current) onHeaderGroupElement32(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonHeaderGroupElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement32(stack["id"])
}

func (c *current) onHeaderGroupElement114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement114()
}

func (c *current) onHeaderGroupElement26(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonHeaderGroupElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement26(stack["id"])
}

func (c *current) onHeaderGroupElement119() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement119()
}

func (c *current) onHeaderGroupElement126() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonHeaderGroupElement126() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement126()
}

func (c *current) onHeaderGroupElement135() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement135()
}

func (c *current) onHeaderGroupElement139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement139()
}

func (c *current) onHeaderGroupElement145() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement145()
}

func (c *current) onHeaderGroupElement154() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement154()
}

func (c *current) onHeaderGroupElement150(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonHeaderGroupElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement150(stack["name"])
}

func (c *current) onHeaderGroupElement160() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement160()
}

func (c *current) onHeaderGroupElement131(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonHeaderGroupElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement131(stack["id"], stack["label"])
}

func (c *current) onHeaderGroupElement167() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement167()
}

func (c *current) onHeaderGroupElement163(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonHeaderGroupElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement163(stack["id"])
}

func (c *current) onHeaderGroupElement129() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement129()
}

func (c *current) onHeaderGroupElement171() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonHeaderGroupElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement171()
}

func (c *current) onHeaderGroupElement124(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement124(stack["element"])
}

func (c *current) onHeaderGroupElement176() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonHeaderGroupElement176() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement176()
}

func (c *current) onHeaderGroupElement183() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement183()
}

func (c *current) onHeaderGroupElement195() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement195()
}

func (c *current) onHeaderGroupElement197() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement197()
}

func (c *current) onHeaderGroupElement190(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement190(stack["start"])
}

func (c *current) onHeaderGroupElement179(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonHeaderGroupElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement179(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement205() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement205()
}

func (c *current) onHeaderGroupElement217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement217()
}

func (c *current) onHeaderGroupElement219() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement219()
}

func (c *current) onHeaderGroupElement212(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement212(stack["start"])
}

func (c *current) onHeaderGroupElement201(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonHeaderGroupElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement201(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement227() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement227()
}

func (c *current) onHeaderGroupElement223(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonHeaderGroupElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement223(stack["name"])
}

func (c *current) onHeaderGroupElement174(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement174(stack["element"])
}

func (c *current) onHeaderGroupElement237() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement237()
}

func (c *current) onHeaderGroupElement233(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement233(stack["ref"])
}

func (c *current) onHeaderGroupElement243() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonHeaderGroupElement243() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement243()
}

func (c *current) onHeaderGroupElement246() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonHeaderGroupElement246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement246()
}

func (c *current) onHeaderGroupElement248() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonHeaderGroupElement248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement248()
}

func (c *current) onHeaderGroupElement250() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonHeaderGroupElement250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement250()
}

func (c *current) onHeaderGroupElement252() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonHeaderGroupElement252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement252()
}

func (c *current) onHeaderGroupElement254() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonHeaderGroupElement254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement254()
}

func (c *current) onHeaderGroupElement256() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")

}

func (p *parser) callonHeaderGroupElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement256()
}

func (c *current) onHeaderGroupElement241(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement241(stack["element"])
}

func (c *current) onHeaderGroupElement266() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement266()
}

func (c *current) onHeaderGroupElement262(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))
}

func (p *parser) callonHeaderGroupElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement262(stack["id"])
}

func (c *current) onHeaderGroupElement271() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement271()
}

func (c *current) onHeaderGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement1(stack["element"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros), nil

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro17() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro17()
}

func (c *current) onInlineMacro13(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))
}

func (p *parser) callonInlineMacro13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro13(stack["id"])
}

func (c *current) onInlineMacro29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro29()
}

func (c *current) onInlineMacro25() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro25()
}

func (c *current) onInlineMacro36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro36()
}

func (c *current) onInlineMacro40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro40()
}

func (c *current) onInlineMacro47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro47()
}

func (c *current) onInlineMacro43() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro43()
}

func (c *current) onInlineMacro33(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro33(stack["content"])
}

func (c *current) onInlineMacro54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro54()
}

func (c *current) onInlineMacro58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro58()
}

func (c *current) onInlineMacro65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro65()
}

func (c *current) onInlineMacro61() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro61()
}

func (c *current) onInlineMacro51(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro51(stack["content"])
}

func (c *current) onInlineMacro21(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacro21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro21(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs), nil

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough11() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough11()
}

func (c *current) onInlinePassthrough21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough21()
}

func (c *current) onInlinePassthrough24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough24()
}

func (c *current) onInlinePassthrough17() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough17()
}

func (c *current) onInlinePassthrough6(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough6(stack["content"])
}

func (c *current) onInlinePassthrough45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough45()
}

func (c *current) onInlinePassthrough48() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough48()
}

func (c *current) onInlinePassthrough58() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough58()
}

func (c *current) onInlinePassthrough65() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough65()
}

func (c *current) onInlinePassthrough40() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough40()
}

func (c *current) onInlinePassthrough74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough74()
}

func (c *current) onInlinePassthrough77() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough77()
}

func (c *current) onInlinePassthrough71() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough71()
}

func (c *current) onInlinePassthrough35(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough35(stack["content"])
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes), nil

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onTableColumnsAttribute15() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute15()
}

func (c *current) onTableColumnsAttribute12(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTableColumnsAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute12(stack["n"])
}

func (c *current) onTableColumnsAttribute25() (interface{}, error) {
	return types.HAlignLeft, nil
}

func (p *parser) callonTableColumnsAttribute25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute25()
}

func (c *current) onTableColumnsAttribute27() (interface{}, error) {
	return types.HAlignRight, nil
}

func (p *parser) callonTableColumnsAttribute27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute27()
}

func (c *current) onTableColumnsAttribute29() (interface{}, error) {
	return types.HAlignCenter, nil
}

func (p *parser) callonTableColumnsAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute29()
}

func (c *current) onTableColumnsAttribute34() (interface{}, error) {
	return types.VAlignTop, nil
}

func (p *parser) callonTableColumnsAttribute34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute34()
}

func (c *current) onTableColumnsAttribute36() (interface{}, error) {
	return types.VAlignBottom, nil
}

func (p *parser) callonTableColumnsAttribute36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute36()
}

func (c *current) onTableColumnsAttribute38() (interface{}, error) {
	return types.VAlignMiddle, nil
}

func (p *parser) callonTableColumnsAttribute38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute38()
}

func (c *current) onTableColumnsAttribute43() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute43()
}

func (c *current) onTableColumnsAttribute49() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute49()
}

func (c *current) onTableColumnsAttribute53() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute53()
}

func (c *current) onTableColumnsAttribute58(multiplier, halign, valign, weight, style, comma interface{}) (bool, error) {
	// make sure that at least something was set
	// (otherwise the parser will run indefinitely)
	return multiplier != nil ||
		halign != nil ||
		valign != nil ||
		weight != nil ||
		style != nil ||
		comma != nil, nil

}

func (p *parser) callonTableColumnsAttribute58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute58(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute5(multiplier, halign, valign, weight, style, comma interface{}) (interface{}, error) {
	return types.NewTableColumn(multiplier, halign, valign, weight, style)

}

func (p *parser) callonTableColumnsAttribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute5(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute1(cols interface{}) (interface{}, error) {
	return cols, nil

}

func (p *parser) callonTableColumnsAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute1(stack["cols"])
}

func (c *current) onUserMacroBlock4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock4()
}

func (c *current) onUserMacroBlock7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock7(stack["name"])
}

func (c *current) onUserMacroBlock10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock10()
}

func (c *current) onUserMacroBlock16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonUserMacroBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock16()
}

func (c *current) onUserMacroBlock1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onInlineUserMacro4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onFileLocation12() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation12()
}

func (c *current) onFileLocation16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation16()
}

func (c *current) onFileLocation23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation23()
}

func (c *current) onFileLocation27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonFileLocation27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation27()
}

func (c *current) onFileLocation34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation34()
}

func (c *current) onFileLocation46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation46()
}

func (c *current) onFileLocation48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation48()
}

func (c *current) onFileLocation41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation41(stack["start"])
}

func (c *current) onFileLocation30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileLocation30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation30(stack["name"], stack["start"])
}

func (c *current) onFileLocation56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation56()
}

func (c *current) onFileLocation68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation68()
}

func (c *current) onFileLocation70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation70()
}

func (c *current) onFileLocation63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation63(stack["start"])
}

func (c *current) onFileLocation52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileLocation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation52(stack["name"], stack["start"])
}

func (c *current) onFileLocation78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation78()
}

func (c *current) onFileLocation74(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileLocation74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation74(stack["name"])
}

func (c *current) onFileLocation25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation25(stack["element"])
}

func (c *current) onFileLocation86() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonFileLocation86() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation86()
}

func (c *current) onFileLocation95() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation95()
}

func (c *current) onFileLocation99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation99()
}

func (c *current) onFileLocation105() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation105()
}

func (c *current) onFileLocation114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation114()
}

func (c *current) onFileLocation110(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileLocation110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation110(stack["name"])
}

func (c *current) onFileLocation120() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation120()
}

func (c *current) onFileLocation91(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileLocation91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation91(stack["id"], stack["label"])
}

func (c *current) onFileLocation127() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation127()
}

func (c *current) onFileLocation123(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileLocation123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation123(stack["id"])
}

func (c *current) onFileLocation89() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation89()
}

func (c *current) onFileLocation131() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileLocation131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation131()
}

func (c *current) onFileLocation84(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation84(stack["element"])
}

func (c *current) onFileLocation133() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation133()
}

func (c *current) onFileLocation5(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileLocation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation5(stack["elements"])
}

func (c *current) onFileLocation139() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation139()
}

func (c *current) onFileLocation135(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation135(stack["ref"])
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
