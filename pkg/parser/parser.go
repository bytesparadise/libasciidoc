// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &choiceExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 65, col: 9, offset: 1935},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 2000},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 2021},
						name: "SimpleRawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 2050},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2102},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 70, col: 11, offset: 2120},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 71, col: 11, offset: 2145},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 11, offset: 2173},
						name: "Table",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 11, offset: 2189},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 11, offset: 2213},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 75, col: 11, offset: 2239},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 76, col: 11, offset: 2268},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 77, col: 11, offset: 2294},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 11, offset: 2329},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 11, offset: 2353},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 11, offset: 2385},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 11, offset: 2411},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 11, offset: 2448},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 83, col: 11, offset: 2473},
						name: "RawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 84, col: 11, offset: 2496},
						name: "StandaloneAttributes",
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 89, col: 1, offset: 2626},
			expr: &ruleRefExpr{
				pos:  position{line: 89, col: 16, offset: 2641},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 91, col: 1, offset: 2659},
			expr: &actionExpr{
				pos: position{line: 91, col: 20, offset: 2678},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 91, col: 20, offset: 2678},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 91, col: 20, offset: 2678},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 41, offset: 2699},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 91, col: 49, offset: 2707},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 50, offset: 2708},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 75, offset: 2733},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 95, col: 1, offset: 2813},
			expr: &seqExpr{
				pos: position{line: 95, col: 26, offset: 2838},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 95, col: 26, offset: 2838},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 95, col: 32, offset: 2844},
						expr: &ruleRefExpr{
							pos:  position{line: 95, col: 32, offset: 2844},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 39, offset: 2851},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 97, col: 1, offset: 2856},
			expr: &actionExpr{
				pos: position{line: 97, col: 27, offset: 2882},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 97, col: 27, offset: 2882},
					expr: &oneOrMoreExpr{
						pos: position{line: 97, col: 28, offset: 2883},
						expr: &seqExpr{
							pos: position{line: 97, col: 29, offset: 2884},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 97, col: 29, offset: 2884},
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 30, offset: 2885},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 97, col: 51, offset: 2906,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 104, col: 1, offset: 3072},
			expr: &actionExpr{
				pos: position{line: 104, col: 19, offset: 3090},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 104, col: 19, offset: 3090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 104, col: 19, offset: 3090},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 104, col: 23, offset: 3094},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 23, offset: 3094},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 30, offset: 3101},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 37, offset: 3108},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 52, offset: 3123},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 56, offset: 3127},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 56, offset: 3127},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 74, offset: 3145},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 9, offset: 3157},
							expr: &choiceExpr{
								pos: position{line: 105, col: 10, offset: 3158},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 105, col: 10, offset: 3158},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 105, col: 10, offset: 3158},
												expr: &ruleRefExpr{
													pos:  position{line: 105, col: 10, offset: 3158},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 105, col: 17, offset: 3165},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 105, col: 37, offset: 3185},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 9, offset: 3208},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 18, offset: 3217},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 18, offset: 3217},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 107, col: 9, offset: 3244},
							expr: &choiceExpr{
								pos: position{line: 107, col: 10, offset: 3245},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 107, col: 10, offset: 3245},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 107, col: 10, offset: 3245},
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 10, offset: 3245},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 17, offset: 3252},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 107, col: 37, offset: 3272},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 9, offset: 3295},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 19, offset: 3305},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 19, offset: 3305},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 112, col: 1, offset: 3406},
			expr: &choiceExpr{
				pos: position{line: 112, col: 20, offset: 3425},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 112, col: 20, offset: 3425},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 48, offset: 3453},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 114, col: 1, offset: 3483},
			expr: &actionExpr{
				pos: position{line: 114, col: 30, offset: 3512},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 114, col: 30, offset: 3512},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 30, offset: 3512},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 30, offset: 3512},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 37, offset: 3519},
							expr: &litMatcher{
								pos:        position{line: 114, col: 38, offset: 3520},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 42, offset: 3524},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 114, col: 51, offset: 3533},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 51, offset: 3533},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 68, offset: 3550},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 118, col: 1, offset: 3620},
			expr: &actionExpr{
				pos: position{line: 118, col: 33, offset: 3652},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 118, col: 33, offset: 3652},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 33, offset: 3652},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 33, offset: 3652},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 118, col: 40, offset: 3659},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 118, col: 51, offset: 3670},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 59, offset: 3678},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 75, offset: 3694},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 122, col: 1, offset: 3773},
			expr: &actionExpr{
				pos: position{line: 122, col: 19, offset: 3791},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 122, col: 19, offset: 3791},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 19, offset: 3791},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 19, offset: 3791},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 26, offset: 3798},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 36, offset: 3808},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 56, offset: 3828},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 122, col: 62, offset: 3834},
								expr: &ruleRefExpr{
									pos:  position{line: 122, col: 63, offset: 3835},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 85, offset: 3857},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 85, offset: 3857},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 122, col: 92, offset: 3864},
							expr: &litMatcher{
								pos:        position{line: 122, col: 92, offset: 3864},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 97, offset: 3869},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 97, offset: 3869},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 127, col: 1, offset: 4014},
			expr: &actionExpr{
				pos: position{line: 127, col: 23, offset: 4036},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 127, col: 23, offset: 4036},
					expr: &charClassMatcher{
						pos:        position{line: 127, col: 23, offset: 4036},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 131, col: 1, offset: 4083},
			expr: &actionExpr{
				pos: position{line: 131, col: 24, offset: 4106},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 131, col: 24, offset: 4106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 131, col: 24, offset: 4106},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 131, col: 28, offset: 4110},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 131, col: 35, offset: 4117},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 131, col: 36, offset: 4118},
									expr: &charClassMatcher{
										pos:        position{line: 131, col: 36, offset: 4118},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 4, offset: 4165},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 139, col: 1, offset: 4326},
			expr: &actionExpr{
				pos: position{line: 139, col: 21, offset: 4346},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 139, col: 21, offset: 4346},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 139, col: 21, offset: 4346},
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 21, offset: 4346},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 139, col: 28, offset: 4353},
							expr: &litMatcher{
								pos:        position{line: 139, col: 29, offset: 4354},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 139, col: 33, offset: 4358},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 140, col: 9, offset: 4377},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 140, col: 10, offset: 4378},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 140, col: 10, offset: 4378},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 140, col: 10, offset: 4378},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 21, offset: 4389},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 45, offset: 4413},
													expr: &litMatcher{
														pos:        position{line: 140, col: 45, offset: 4413},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 50, offset: 4418},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 58, offset: 4426},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 59, offset: 4427},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 82, offset: 4450},
													expr: &litMatcher{
														pos:        position{line: 140, col: 82, offset: 4450},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 87, offset: 4455},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 97, offset: 4465},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 98, offset: 4466},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 142, col: 15, offset: 4583},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 142, col: 15, offset: 4583},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 142, col: 15, offset: 4583},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 142, col: 24, offset: 4592},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 142, col: 46, offset: 4614},
													expr: &litMatcher{
														pos:        position{line: 142, col: 46, offset: 4614},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 142, col: 51, offset: 4619},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 142, col: 61, offset: 4629},
														expr: &ruleRefExpr{
															pos:  position{line: 142, col: 62, offset: 4630},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 13, offset: 4739},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 149, col: 1, offset: 4869},
			expr: &choiceExpr{
				pos: position{line: 149, col: 27, offset: 4895},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 149, col: 27, offset: 4895},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 149, col: 27, offset: 4895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 149, col: 27, offset: 4895},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 32, offset: 4900},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 39, offset: 4907},
									expr: &charClassMatcher{
										pos:        position{line: 149, col: 39, offset: 4907},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 4955},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 151, col: 5, offset: 4955},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 151, col: 5, offset: 4955},
									expr: &litMatcher{
										pos:        position{line: 151, col: 5, offset: 4955},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 151, col: 11, offset: 4961},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 151, col: 18, offset: 4968},
									expr: &charClassMatcher{
										pos:        position{line: 151, col: 18, offset: 4968},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 151, col: 29, offset: 4979},
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 29, offset: 4979},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 151, col: 36, offset: 4986},
									expr: &litMatcher{
										pos:        position{line: 151, col: 37, offset: 4987},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 155, col: 1, offset: 5027},
			expr: &actionExpr{
				pos: position{line: 155, col: 25, offset: 5051},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 155, col: 25, offset: 5051},
					expr: &charClassMatcher{
						pos:        position{line: 155, col: 25, offset: 5051},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 159, col: 1, offset: 5097},
			expr: &actionExpr{
				pos: position{line: 159, col: 27, offset: 5123},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 159, col: 27, offset: 5123},
					expr: &charClassMatcher{
						pos:        position{line: 159, col: 27, offset: 5123},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 166, col: 1, offset: 5276},
			expr: &actionExpr{
				pos: position{line: 166, col: 25, offset: 5300},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 166, col: 25, offset: 5300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 166, col: 25, offset: 5300},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 29, offset: 5304},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 35, offset: 5310},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 166, col: 50, offset: 5325},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 9, offset: 5338},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 167, col: 15, offset: 5344},
								expr: &actionExpr{
									pos: position{line: 167, col: 16, offset: 5345},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 167, col: 17, offset: 5346},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 167, col: 17, offset: 5346},
												expr: &ruleRefExpr{
													pos:  position{line: 167, col: 17, offset: 5346},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 167, col: 24, offset: 5353},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 167, col: 31, offset: 5360},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 169, col: 13, offset: 5434},
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 13, offset: 5434},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 169, col: 20, offset: 5441},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 176, col: 1, offset: 5681},
			expr: &actionExpr{
				pos: position{line: 176, col: 18, offset: 5698},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 176, col: 18, offset: 5698},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 176, col: 18, offset: 5698},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 28, offset: 5708},
							expr: &charClassMatcher{
								pos:        position{line: 176, col: 29, offset: 5709},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 180, col: 1, offset: 5757},
			expr: &actionExpr{
				pos: position{line: 180, col: 30, offset: 5786},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 180, col: 30, offset: 5786},
					expr: &charClassMatcher{
						pos:        position{line: 180, col: 30, offset: 5786},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 184, col: 1, offset: 5831},
			expr: &choiceExpr{
				pos: position{line: 184, col: 19, offset: 5849},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 184, col: 19, offset: 5849},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 184, col: 19, offset: 5849},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 184, col: 19, offset: 5849},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 184, col: 24, offset: 5854},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 30, offset: 5860},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 184, col: 45, offset: 5875},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 184, col: 49, offset: 5879},
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 49, offset: 5879},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 184, col: 56, offset: 5886},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5946},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 186, col: 5, offset: 5946},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 9, offset: 5950},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 15, offset: 5956},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 186, col: 30, offset: 5971},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 186, col: 35, offset: 5976},
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 35, offset: 5976},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 42, offset: 5983},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 190, col: 1, offset: 6042},
			expr: &choiceExpr{
				pos: position{line: 190, col: 26, offset: 6067},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 190, col: 26, offset: 6067},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 190, col: 39, offset: 6080},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 192, col: 1, offset: 6089},
			expr: &actionExpr{
				pos: position{line: 192, col: 12, offset: 6100},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 192, col: 12, offset: 6100},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 192, col: 12, offset: 6100},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 16, offset: 6104},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 21, offset: 6109},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 192, col: 35, offset: 6123},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 196, col: 1, offset: 6189},
			expr: &choiceExpr{
				pos: position{line: 196, col: 15, offset: 6203},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 196, col: 15, offset: 6203},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 29, offset: 6217},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 43, offset: 6231},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 61, offset: 6249},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 80, offset: 6268},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 98, offset: 6286},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 198, col: 1, offset: 6304},
			expr: &actionExpr{
				pos: position{line: 198, col: 16, offset: 6319},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 198, col: 16, offset: 6319},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 198, col: 16, offset: 6319},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 198, col: 28, offset: 6331},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 33, offset: 6336},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 198, col: 47, offset: 6350},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 202, col: 1, offset: 6426},
			expr: &actionExpr{
				pos: position{line: 202, col: 16, offset: 6441},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 202, col: 16, offset: 6441},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 202, col: 16, offset: 6441},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 29, offset: 6454},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 34, offset: 6459},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 202, col: 48, offset: 6473},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 206, col: 1, offset: 6548},
			expr: &actionExpr{
				pos: position{line: 206, col: 20, offset: 6567},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 206, col: 20, offset: 6567},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 206, col: 20, offset: 6567},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 32, offset: 6579},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 37, offset: 6584},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 51, offset: 6598},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 55, offset: 6602},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 206, col: 61, offset: 6608},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 70, offset: 6617},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 210, col: 1, offset: 6695},
			expr: &actionExpr{
				pos: position{line: 210, col: 21, offset: 6715},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 210, col: 21, offset: 6715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 210, col: 21, offset: 6715},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 34, offset: 6728},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 39, offset: 6733},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 53, offset: 6747},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 57, offset: 6751},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 210, col: 63, offset: 6757},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 72, offset: 6766},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 214, col: 1, offset: 6843},
			expr: &actionExpr{
				pos: position{line: 214, col: 20, offset: 6862},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 214, col: 20, offset: 6862},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 214, col: 20, offset: 6862},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 32, offset: 6874},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 37, offset: 6879},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 214, col: 51, offset: 6893},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 55, offset: 6897},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 214, col: 60, offset: 6902},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 214, col: 60, offset: 6902},
									expr: &charClassMatcher{
										pos:        position{line: 214, col: 60, offset: 6902},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 214, col: 108, offset: 6950},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 218, col: 1, offset: 7032},
			expr: &actionExpr{
				pos: position{line: 218, col: 21, offset: 7052},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 218, col: 21, offset: 7052},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 218, col: 21, offset: 7052},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 34, offset: 7065},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 39, offset: 7070},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 53, offset: 7084},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 57, offset: 7088},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 218, col: 62, offset: 7093},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 218, col: 62, offset: 7093},
									expr: &charClassMatcher{
										pos:        position{line: 218, col: 62, offset: 7093},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 110, offset: 7141},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 222, col: 1, offset: 7222},
			expr: &actionExpr{
				pos: position{line: 222, col: 15, offset: 7236},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 222, col: 15, offset: 7236},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 222, col: 15, offset: 7236},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 222, col: 21, offset: 7242},
								expr: &ruleRefExpr{
									pos:  position{line: 222, col: 22, offset: 7243},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 222, col: 41, offset: 7262},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 41, offset: 7262},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 226, col: 1, offset: 7332},
			expr: &actionExpr{
				pos: position{line: 226, col: 21, offset: 7352},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 226, col: 21, offset: 7352},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 226, col: 21, offset: 7352},
							expr: &choiceExpr{
								pos: position{line: 226, col: 23, offset: 7354},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 226, col: 23, offset: 7354},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 226, col: 29, offset: 7360},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 7437},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 227, col: 11, offset: 7443},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 227, col: 11, offset: 7443},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 228, col: 9, offset: 7464},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 229, col: 9, offset: 7488},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 230, col: 9, offset: 7525},
										name: "LiteralBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 231, col: 9, offset: 7558},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 232, col: 9, offset: 7586},
										name: "ExampleBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 233, col: 9, offset: 7618},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7645},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7672},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7709},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7745},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 241, col: 1, offset: 7848},
			expr: &actionExpr{
				pos: position{line: 241, col: 14, offset: 7861},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 241, col: 14, offset: 7861},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 241, col: 14, offset: 7861},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 241, col: 19, offset: 7866},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 23, offset: 7870},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 241, col: 27, offset: 7874},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 241, col: 32, offset: 7879},
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 32, offset: 7879},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 241, col: 39, offset: 7886},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 245, col: 1, offset: 7929},
			expr: &actionExpr{
				pos: position{line: 245, col: 20, offset: 7948},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 245, col: 20, offset: 7948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 20, offset: 7948},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 25, offset: 7953},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 29, offset: 7957},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 33, offset: 7961},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 38, offset: 7966},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 38, offset: 7966},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 251, col: 1, offset: 8243},
			expr: &actionExpr{
				pos: position{line: 251, col: 17, offset: 8259},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 251, col: 17, offset: 8259},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 17, offset: 8259},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 21, offset: 8263},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 28, offset: 8270},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 49, offset: 8291},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 49, offset: 8291},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 56, offset: 8298},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 255, col: 1, offset: 8356},
			expr: &actionExpr{
				pos: position{line: 255, col: 24, offset: 8379},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 255, col: 24, offset: 8379},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 255, col: 24, offset: 8379},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 32, offset: 8387},
							expr: &charClassMatcher{
								pos:        position{line: 255, col: 32, offset: 8387},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 261, col: 1, offset: 8641},
			expr: &actionExpr{
				pos: position{line: 261, col: 31, offset: 8671},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 261, col: 31, offset: 8671},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 261, col: 31, offset: 8671},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 35, offset: 8675},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 261, col: 42, offset: 8682},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 261, col: 42, offset: 8682},
										expr: &ruleRefExpr{
											pos:  position{line: 261, col: 42, offset: 8682},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 261, col: 57, offset: 8697},
										expr: &ruleRefExpr{
											pos:  position{line: 261, col: 57, offset: 8697},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 261, col: 69, offset: 8709},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 261, col: 73, offset: 8713},
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 73, offset: 8713},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 261, col: 80, offset: 8720},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 265, col: 1, offset: 8774},
			expr: &choiceExpr{
				pos: position{line: 265, col: 15, offset: 8788},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 265, col: 15, offset: 8788},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 31, offset: 8804},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 46, offset: 8819},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 269, col: 1, offset: 9047},
			expr: &actionExpr{
				pos: position{line: 269, col: 18, offset: 9064},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 269, col: 18, offset: 9064},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 18, offset: 9064},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 269, col: 22, offset: 9068},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 269, col: 29, offset: 9075},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 269, col: 29, offset: 9075},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 29, offset: 9075},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 269, col: 45, offset: 9091},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 45, offset: 9091},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 269, col: 60, offset: 9106},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 60, offset: 9106},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 269, col: 82, offset: 9128},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 82, offset: 9128},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 269, col: 104, offset: 9150},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 104, offset: 9150},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 269, col: 116, offset: 9162},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 120, offset: 9166},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 273, col: 1, offset: 9220},
			expr: &actionExpr{
				pos: position{line: 273, col: 19, offset: 9238},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 273, col: 19, offset: 9238},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 273, col: 25, offset: 9244},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 277, col: 1, offset: 9305},
			expr: &actionExpr{
				pos: position{line: 277, col: 25, offset: 9329},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 277, col: 25, offset: 9329},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 25, offset: 9329},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 25, offset: 9329},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 277, col: 32, offset: 9336},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 36, offset: 9340},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 36, offset: 9340},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 277, col: 43, offset: 9347},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 49, offset: 9353},
								expr: &ruleRefExpr{
									pos:  position{line: 277, col: 49, offset: 9353},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 284, col: 1, offset: 9494},
			expr: &actionExpr{
				pos: position{line: 284, col: 25, offset: 9518},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 284, col: 25, offset: 9518},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 25, offset: 9518},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 25, offset: 9518},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 284, col: 32, offset: 9525},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 36, offset: 9529},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 36, offset: 9529},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 43, offset: 9536},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 284, col: 49, offset: 9542},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 49, offset: 9542},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockAttribute",
			pos:  position{line: 291, col: 1, offset: 9683},
			expr: &actionExpr{
				pos: position{line: 291, col: 26, offset: 9708},
				run: (*parser).callonLiteralBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 291, col: 26, offset: 9708},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 291, col: 26, offset: 9708},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 291, col: 38, offset: 9720},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 38, offset: 9720},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 291, col: 45, offset: 9727},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 295, col: 1, offset: 9784},
			expr: &actionExpr{
				pos: position{line: 295, col: 30, offset: 9813},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 295, col: 30, offset: 9813},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 295, col: 30, offset: 9813},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 295, col: 39, offset: 9822},
							expr: &ruleRefExpr{
								pos:  position{line: 295, col: 39, offset: 9822},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 295, col: 46, offset: 9829},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockAttribute",
			pos:  position{line: 299, col: 1, offset: 9890},
			expr: &actionExpr{
				pos: position{line: 299, col: 26, offset: 9915},
				run: (*parser).callonExampleBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 299, col: 26, offset: 9915},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 26, offset: 9915},
							val:        "[example]",
							ignoreCase: false,
							want:       "\"[example]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 38, offset: 9927},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 38, offset: 9927},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 45, offset: 9934},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 304, col: 1, offset: 10067},
			expr: &actionExpr{
				pos: position{line: 304, col: 30, offset: 10096},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 304, col: 30, offset: 10096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 304, col: 30, offset: 10096},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 304, col: 34, offset: 10100},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 37, offset: 10103},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 304, col: 53, offset: 10119},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 304, col: 57, offset: 10123},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 57, offset: 10123},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 304, col: 64, offset: 10130},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 309, col: 1, offset: 10285},
			expr: &actionExpr{
				pos: position{line: 309, col: 21, offset: 10305},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 309, col: 21, offset: 10305},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 21, offset: 10305},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 310, col: 5, offset: 10320},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 310, col: 14, offset: 10329},
								expr: &actionExpr{
									pos: position{line: 310, col: 15, offset: 10330},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 310, col: 15, offset: 10330},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 310, col: 15, offset: 10330},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 310, col: 19, offset: 10334},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 310, col: 24, offset: 10339},
													expr: &ruleRefExpr{
														pos:  position{line: 310, col: 25, offset: 10340},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 5, offset: 10395},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 311, col: 12, offset: 10402},
								expr: &actionExpr{
									pos: position{line: 311, col: 13, offset: 10403},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 311, col: 13, offset: 10403},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 311, col: 13, offset: 10403},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 311, col: 17, offset: 10407},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 311, col: 22, offset: 10412},
													expr: &ruleRefExpr{
														pos:  position{line: 311, col: 23, offset: 10413},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 312, col: 5, offset: 10460},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 312, col: 9, offset: 10464},
							expr: &ruleRefExpr{
								pos:  position{line: 312, col: 9, offset: 10464},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 312, col: 16, offset: 10471},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 317, col: 1, offset: 10622},
			expr: &actionExpr{
				pos: position{line: 317, col: 19, offset: 10640},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 317, col: 19, offset: 10640},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 317, col: 19, offset: 10640},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 23, offset: 10644},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 317, col: 34, offset: 10655},
								expr: &ruleRefExpr{
									pos:  position{line: 317, col: 35, offset: 10656},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 317, col: 54, offset: 10675},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 317, col: 58, offset: 10679},
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 58, offset: 10679},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 65, offset: 10686},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 321, col: 1, offset: 10758},
			expr: &choiceExpr{
				pos: position{line: 321, col: 21, offset: 10778},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 321, col: 21, offset: 10778},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 49, offset: 10806},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 323, col: 1, offset: 10836},
			expr: &actionExpr{
				pos: position{line: 323, col: 30, offset: 10865},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 323, col: 30, offset: 10865},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 323, col: 30, offset: 10865},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 35, offset: 10870},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 49, offset: 10884},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 53, offset: 10888},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 323, col: 59, offset: 10894},
								expr: &ruleRefExpr{
									pos:  position{line: 323, col: 60, offset: 10895},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 323, col: 77, offset: 10912},
							expr: &litMatcher{
								pos:        position{line: 323, col: 77, offset: 10912},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 323, col: 82, offset: 10917},
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 82, offset: 10917},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 327, col: 1, offset: 11016},
			expr: &actionExpr{
				pos: position{line: 327, col: 33, offset: 11048},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 327, col: 33, offset: 11048},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 327, col: 33, offset: 11048},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 38, offset: 11053},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 327, col: 52, offset: 11067},
							expr: &litMatcher{
								pos:        position{line: 327, col: 52, offset: 11067},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 327, col: 57, offset: 11072},
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 57, offset: 11072},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 331, col: 1, offset: 11160},
			expr: &actionExpr{
				pos: position{line: 331, col: 17, offset: 11176},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 331, col: 17, offset: 11176},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 331, col: 17, offset: 11176},
							expr: &litMatcher{
								pos:        position{line: 331, col: 18, offset: 11177},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 331, col: 26, offset: 11185},
							expr: &litMatcher{
								pos:        position{line: 331, col: 27, offset: 11186},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 331, col: 35, offset: 11194},
							expr: &litMatcher{
								pos:        position{line: 331, col: 36, offset: 11195},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 331, col: 46, offset: 11205},
							expr: &oneOrMoreExpr{
								pos: position{line: 331, col: 48, offset: 11207},
								expr: &ruleRefExpr{
									pos:  position{line: 331, col: 48, offset: 11207},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 56, offset: 11215},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 331, col: 61, offset: 11220},
								expr: &charClassMatcher{
									pos:        position{line: 331, col: 61, offset: 11220},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 331, col: 75, offset: 11234},
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 75, offset: 11234},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 335, col: 1, offset: 11277},
			expr: &actionExpr{
				pos: position{line: 335, col: 19, offset: 11295},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 335, col: 19, offset: 11295},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 335, col: 26, offset: 11302},
						expr: &charClassMatcher{
							pos:        position{line: 335, col: 26, offset: 11302},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 339, col: 1, offset: 11353},
			expr: &actionExpr{
				pos: position{line: 339, col: 29, offset: 11381},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 339, col: 29, offset: 11381},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 339, col: 29, offset: 11381},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 339, col: 36, offset: 11388},
								expr: &charClassMatcher{
									pos:        position{line: 339, col: 36, offset: 11388},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 339, col: 50, offset: 11402},
							expr: &litMatcher{
								pos:        position{line: 339, col: 51, offset: 11403},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 343, col: 1, offset: 11569},
			expr: &actionExpr{
				pos: position{line: 343, col: 20, offset: 11588},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 343, col: 20, offset: 11588},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 343, col: 20, offset: 11588},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 343, col: 29, offset: 11597},
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 29, offset: 11597},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 343, col: 36, offset: 11604},
							expr: &litMatcher{
								pos:        position{line: 343, col: 36, offset: 11604},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 41, offset: 11609},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 343, col: 48, offset: 11616},
								expr: &ruleRefExpr{
									pos:  position{line: 343, col: 49, offset: 11617},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 343, col: 66, offset: 11634},
							expr: &litMatcher{
								pos:        position{line: 343, col: 66, offset: 11634},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 71, offset: 11639},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 343, col: 77, offset: 11645},
								expr: &ruleRefExpr{
									pos:  position{line: 343, col: 78, offset: 11646},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 343, col: 95, offset: 11663},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 343, col: 99, offset: 11667},
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 99, offset: 11667},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 343, col: 106, offset: 11674},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 347, col: 1, offset: 11743},
			expr: &actionExpr{
				pos: position{line: 347, col: 20, offset: 11762},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 347, col: 20, offset: 11762},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 347, col: 20, offset: 11762},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 347, col: 29, offset: 11771},
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 29, offset: 11771},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 347, col: 36, offset: 11778},
							expr: &litMatcher{
								pos:        position{line: 347, col: 36, offset: 11778},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 347, col: 41, offset: 11783},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 347, col: 48, offset: 11790},
								expr: &ruleRefExpr{
									pos:  position{line: 347, col: 49, offset: 11791},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 347, col: 66, offset: 11808},
							expr: &litMatcher{
								pos:        position{line: 347, col: 66, offset: 11808},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 347, col: 71, offset: 11813},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 347, col: 77, offset: 11819},
								expr: &ruleRefExpr{
									pos:  position{line: 347, col: 78, offset: 11820},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 347, col: 95, offset: 11837},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 347, col: 99, offset: 11841},
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 99, offset: 11841},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 347, col: 106, offset: 11848},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 351, col: 1, offset: 11935},
			expr: &actionExpr{
				pos: position{line: 351, col: 19, offset: 11953},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 351, col: 20, offset: 11954},
					expr: &charClassMatcher{
						pos:        position{line: 351, col: 20, offset: 11954},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 355, col: 1, offset: 12003},
			expr: &actionExpr{
				pos: position{line: 355, col: 20, offset: 12022},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 355, col: 20, offset: 12022},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 20, offset: 12022},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 24, offset: 12026},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 355, col: 31, offset: 12033},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 355, col: 31, offset: 12033},
										expr: &ruleRefExpr{
											pos:  position{line: 355, col: 31, offset: 12033},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 355, col: 51, offset: 12053},
										expr: &ruleRefExpr{
											pos:  position{line: 355, col: 51, offset: 12053},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 355, col: 66, offset: 12068},
										expr: &ruleRefExpr{
											pos:  position{line: 355, col: 66, offset: 12068},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 355, col: 78, offset: 12080},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 359, col: 1, offset: 12134},
			expr: &actionExpr{
				pos: position{line: 359, col: 23, offset: 12156},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 359, col: 23, offset: 12156},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 359, col: 28, offset: 12161},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 363, col: 1, offset: 12220},
			expr: &actionExpr{
				pos: position{line: 363, col: 25, offset: 12244},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 363, col: 25, offset: 12244},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 363, col: 25, offset: 12244},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 363, col: 36, offset: 12255},
								expr: &ruleRefExpr{
									pos:  position{line: 363, col: 37, offset: 12256},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 363, col: 56, offset: 12275},
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 56, offset: 12275},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 367, col: 1, offset: 12390},
			expr: &choiceExpr{
				pos: position{line: 367, col: 18, offset: 12407},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 367, col: 18, offset: 12407},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 367, col: 36, offset: 12425},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 367, col: 58, offset: 12447},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 369, col: 1, offset: 12466},
			expr: &actionExpr{
				pos: position{line: 369, col: 24, offset: 12489},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 369, col: 24, offset: 12489},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 369, col: 24, offset: 12489},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 369, col: 28, offset: 12493},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 35, offset: 12500},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 369, col: 50, offset: 12515},
							expr: &charClassMatcher{
								pos:        position{line: 369, col: 51, offset: 12516},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 373, col: 1, offset: 12576},
			expr: &actionExpr{
				pos: position{line: 373, col: 20, offset: 12595},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 373, col: 20, offset: 12595},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 373, col: 20, offset: 12595},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 24, offset: 12599},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 27, offset: 12602},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 373, col: 42, offset: 12617},
							expr: &charClassMatcher{
								pos:        position{line: 373, col: 43, offset: 12618},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 377, col: 1, offset: 12670},
			expr: &actionExpr{
				pos: position{line: 377, col: 22, offset: 12691},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 377, col: 22, offset: 12691},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 377, col: 22, offset: 12691},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 26, offset: 12695},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 31, offset: 12700},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 377, col: 46, offset: 12715},
							expr: &charClassMatcher{
								pos:        position{line: 377, col: 47, offset: 12716},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 382, col: 1, offset: 12816},
			expr: &actionExpr{
				pos: position{line: 382, col: 20, offset: 12835},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 382, col: 20, offset: 12835},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 382, col: 20, offset: 12835},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 26, offset: 12841},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 382, col: 41, offset: 12856},
							expr: &charClassMatcher{
								pos:        position{line: 382, col: 42, offset: 12857},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 386, col: 1, offset: 12893},
			expr: &choiceExpr{
				pos: position{line: 386, col: 14, offset: 12906},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 386, col: 14, offset: 12906},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 386, col: 26, offset: 12918},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 386, col: 38, offset: 12930},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 386, col: 50, offset: 12942},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 388, col: 1, offset: 12956},
			expr: &actionExpr{
				pos: position{line: 388, col: 15, offset: 12970},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 388, col: 15, offset: 12970},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 388, col: 21, offset: 12976},
						expr: &ruleRefExpr{
							pos:  position{line: 388, col: 21, offset: 12976},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 392, col: 1, offset: 13041},
			expr: &actionExpr{
				pos: position{line: 392, col: 18, offset: 13058},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 392, col: 18, offset: 13058},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 392, col: 18, offset: 13058},
							expr: &litMatcher{
								pos:        position{line: 392, col: 18, offset: 13058},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 392, col: 23, offset: 13063},
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 23, offset: 13063},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 392, col: 30, offset: 13070},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 32, offset: 13072},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 392, col: 45, offset: 13085},
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 45, offset: 13085},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 392, col: 52, offset: 13092},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 392, col: 56, offset: 13096},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 392, col: 59, offset: 13099},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 59, offset: 13099},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 71, offset: 13111},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 83, offset: 13123},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 397, col: 1, offset: 13312},
			expr: &actionExpr{
				pos: position{line: 397, col: 14, offset: 13325},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 397, col: 14, offset: 13325},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 397, col: 14, offset: 13325},
							expr: &charClassMatcher{
								pos:        position{line: 397, col: 14, offset: 13325},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 397, col: 21, offset: 13332},
							expr: &charClassMatcher{
								pos:        position{line: 397, col: 22, offset: 13333},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 403, col: 1, offset: 13469},
			expr: &actionExpr{
				pos: position{line: 403, col: 14, offset: 13482},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 403, col: 14, offset: 13482},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 403, col: 14, offset: 13482},
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 14, offset: 13482},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 21, offset: 13489},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 403, col: 25, offset: 13493},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 29, offset: 13497},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 41, offset: 13509},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 403, col: 45, offset: 13513},
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 45, offset: 13513},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 403, col: 52, offset: 13520},
							expr: &charClassMatcher{
								pos:        position{line: 403, col: 53, offset: 13521},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 405, col: 1, offset: 13548},
			expr: &actionExpr{
				pos: position{line: 405, col: 16, offset: 13563},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 405, col: 16, offset: 13563},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 405, col: 20, offset: 13567},
						expr: &choiceExpr{
							pos: position{line: 405, col: 22, offset: 13569},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 405, col: 22, offset: 13569},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 405, col: 37, offset: 13584},
									expr: &charClassMatcher{
										pos:        position{line: 405, col: 37, offset: 13584},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 405, col: 51, offset: 13598},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 407, col: 1, offset: 13638},
			expr: &actionExpr{
				pos: position{line: 407, col: 17, offset: 13654},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 407, col: 17, offset: 13654},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 410, col: 1, offset: 13714},
			expr: &actionExpr{
				pos: position{line: 410, col: 14, offset: 13727},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 410, col: 14, offset: 13727},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 410, col: 14, offset: 13727},
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 14, offset: 13727},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 21, offset: 13734},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 410, col: 25, offset: 13738},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 29, offset: 13742},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 41, offset: 13754},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 410, col: 45, offset: 13758},
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 45, offset: 13758},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 412, col: 1, offset: 13786},
			expr: &actionExpr{
				pos: position{line: 412, col: 16, offset: 13801},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 412, col: 16, offset: 13801},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 412, col: 20, offset: 13805},
						expr: &choiceExpr{
							pos: position{line: 412, col: 22, offset: 13807},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 412, col: 22, offset: 13807},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 412, col: 37, offset: 13822},
									expr: &charClassMatcher{
										pos:        position{line: 412, col: 37, offset: 13822},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 412, col: 51, offset: 13836},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 414, col: 1, offset: 13876},
			expr: &actionExpr{
				pos: position{line: 414, col: 17, offset: 13892},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 414, col: 17, offset: 13892},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 417, col: 1, offset: 13983},
			expr: &actionExpr{
				pos: position{line: 417, col: 17, offset: 13999},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 417, col: 17, offset: 13999},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 417, col: 17, offset: 13999},
							expr: &charClassMatcher{
								pos:        position{line: 417, col: 17, offset: 13999},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 417, col: 30, offset: 14012},
							expr: &charClassMatcher{
								pos:        position{line: 417, col: 31, offset: 14013},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 420, col: 1, offset: 14124},
			expr: &actionExpr{
				pos: position{line: 420, col: 19, offset: 14142},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 420, col: 19, offset: 14142},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 420, col: 19, offset: 14142},
							expr: &charClassMatcher{
								pos:        position{line: 420, col: 19, offset: 14142},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 420, col: 31, offset: 14154},
							expr: &charClassMatcher{
								pos:        position{line: 420, col: 32, offset: 14155},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 422, col: 1, offset: 14212},
			expr: &choiceExpr{
				pos: position{line: 422, col: 19, offset: 14230},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 422, col: 19, offset: 14230},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 422, col: 41, offset: 14252},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 422, col: 65, offset: 14276},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 426, col: 1, offset: 14474},
			expr: &actionExpr{
				pos: position{line: 426, col: 24, offset: 14497},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 426, col: 24, offset: 14497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 426, col: 24, offset: 14497},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 426, col: 31, offset: 14504},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 426, col: 31, offset: 14504},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 429, col: 5, offset: 14590},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 429, col: 13, offset: 14598},
								expr: &choiceExpr{
									pos: position{line: 429, col: 14, offset: 14599},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 429, col: 14, offset: 14599},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 430, col: 12, offset: 14630},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 430, col: 12, offset: 14630},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 430, col: 34, offset: 14652},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 430, col: 34, offset: 14652},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 430, col: 34, offset: 14652},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 430, col: 39, offset: 14657},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 437, col: 1, offset: 14840},
			expr: &actionExpr{
				pos: position{line: 437, col: 13, offset: 14852},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 437, col: 13, offset: 14852},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 437, col: 13, offset: 14852},
							expr: &seqExpr{
								pos: position{line: 437, col: 15, offset: 14854},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 437, col: 15, offset: 14854},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 437, col: 19, offset: 14858},
										expr: &ruleRefExpr{
											pos:  position{line: 437, col: 19, offset: 14858},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 437, col: 29, offset: 14868},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 33, offset: 14872},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 437, col: 46, offset: 14885},
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 46, offset: 14885},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 437, col: 53, offset: 14892},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 437, col: 57, offset: 14896},
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 57, offset: 14896},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 437, col: 64, offset: 14903},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 70, offset: 14909},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 437, col: 85, offset: 14924},
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 85, offset: 14924},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 442, col: 1, offset: 15105},
			expr: &actionExpr{
				pos: position{line: 442, col: 17, offset: 15121},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 442, col: 17, offset: 15121},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 442, col: 17, offset: 15121},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 442, col: 26, offset: 15130},
							expr: &charClassMatcher{
								pos:        position{line: 442, col: 26, offset: 15130},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 446, col: 1, offset: 15178},
			expr: &choiceExpr{
				pos: position{line: 446, col: 19, offset: 15196},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 446, col: 19, offset: 15196},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 446, col: 35, offset: 15212},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 446, col: 59, offset: 15236},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 446, col: 83, offset: 15260},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 448, col: 1, offset: 15276},
			expr: &actionExpr{
				pos: position{line: 448, col: 19, offset: 15294},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 448, col: 19, offset: 15294},
					expr: &charClassMatcher{
						pos:        position{line: 448, col: 19, offset: 15294},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 452, col: 1, offset: 15347},
			expr: &actionExpr{
				pos: position{line: 452, col: 26, offset: 15372},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 452, col: 26, offset: 15372},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 452, col: 26, offset: 15372},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 452, col: 30, offset: 15376},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 452, col: 39, offset: 15385},
								expr: &choiceExpr{
									pos: position{line: 453, col: 5, offset: 15391},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 453, col: 6, offset: 15392},
											run: (*parser).callonAttrValueSingleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 453, col: 6, offset: 15392},
												expr: &charClassMatcher{
													pos:        position{line: 453, col: 6, offset: 15392},
													val:        "[^'\\r\\n\\uFFFD]",
													chars:      []rune{'\'', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 455, col: 10, offset: 15474},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 455, col: 31, offset: 15495},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 459, col: 1, offset: 15537},
			expr: &actionExpr{
				pos: position{line: 459, col: 26, offset: 15562},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 459, col: 26, offset: 15562},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 26, offset: 15562},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 459, col: 31, offset: 15567},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 459, col: 40, offset: 15576},
								expr: &choiceExpr{
									pos: position{line: 460, col: 5, offset: 15582},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 460, col: 6, offset: 15583},
											run: (*parser).callonAttrValueDoubleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 460, col: 6, offset: 15583},
												expr: &charClassMatcher{
													pos:        position{line: 460, col: 6, offset: 15583},
													val:        "[^\"\\r\\n\\uFFFD]",
													chars:      []rune{'"', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 462, col: 10, offset: 15665},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 462, col: 31, offset: 15686},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 468, col: 1, offset: 15926},
			expr: &actionExpr{
				pos: position{line: 468, col: 18, offset: 15943},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 468, col: 18, offset: 15943},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 475, col: 1, offset: 16078},
			expr: &actionExpr{
				pos: position{line: 475, col: 12, offset: 16089},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 475, col: 12, offset: 16089},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 475, col: 12, offset: 16089},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 475, col: 23, offset: 16100},
								expr: &ruleRefExpr{
									pos:  position{line: 475, col: 24, offset: 16101},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 5, offset: 16118},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 476, col: 12, offset: 16125},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 476, col: 12, offset: 16125},
									expr: &litMatcher{
										pos:        position{line: 476, col: 13, offset: 16126},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 480, col: 5, offset: 16217},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 484, col: 5, offset: 16369},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 5, offset: 16369},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 484, col: 12, offset: 16376},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 19, offset: 16383},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 484, col: 34, offset: 16398},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 484, col: 38, offset: 16402},
								expr: &ruleRefExpr{
									pos:  position{line: 484, col: 38, offset: 16402},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 56, offset: 16420},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 488, col: 1, offset: 16526},
			expr: &actionExpr{
				pos: position{line: 488, col: 18, offset: 16543},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 488, col: 18, offset: 16543},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 488, col: 27, offset: 16552},
						expr: &seqExpr{
							pos: position{line: 488, col: 28, offset: 16553},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 488, col: 28, offset: 16553},
									expr: &ruleRefExpr{
										pos:  position{line: 488, col: 29, offset: 16554},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 488, col: 37, offset: 16562},
									expr: &ruleRefExpr{
										pos:  position{line: 488, col: 38, offset: 16563},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 488, col: 54, offset: 16579},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 492, col: 1, offset: 16700},
			expr: &actionExpr{
				pos: position{line: 492, col: 17, offset: 16716},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 492, col: 17, offset: 16716},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 492, col: 26, offset: 16725},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 492, col: 26, offset: 16725},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 11, offset: 16740},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 494, col: 11, offset: 16785},
								expr: &ruleRefExpr{
									pos:  position{line: 494, col: 11, offset: 16785},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 11, offset: 16803},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 11, offset: 16832},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 503, col: 1, offset: 16983},
			expr: &seqExpr{
				pos: position{line: 503, col: 31, offset: 17013},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 503, col: 31, offset: 17013},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 41, offset: 17023},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 508, col: 1, offset: 17134},
			expr: &actionExpr{
				pos: position{line: 508, col: 19, offset: 17152},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 508, col: 19, offset: 17152},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 508, col: 19, offset: 17152},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 25, offset: 17158},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 508, col: 40, offset: 17173},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 508, col: 45, offset: 17178},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 52, offset: 17185},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 68, offset: 17201},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 75, offset: 17208},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 512, col: 1, offset: 17323},
			expr: &actionExpr{
				pos: position{line: 512, col: 20, offset: 17342},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 512, col: 20, offset: 17342},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 512, col: 20, offset: 17342},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 26, offset: 17348},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 512, col: 41, offset: 17363},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 45, offset: 17367},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 52, offset: 17374},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 68, offset: 17390},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 75, offset: 17397},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 516, col: 1, offset: 17513},
			expr: &actionExpr{
				pos: position{line: 516, col: 18, offset: 17530},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 516, col: 18, offset: 17530},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 516, col: 18, offset: 17530},
							expr: &litMatcher{
								pos:        position{line: 516, col: 19, offset: 17531},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 516, col: 30, offset: 17542},
							expr: &charClassMatcher{
								pos:        position{line: 516, col: 30, offset: 17542},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 520, col: 1, offset: 17591},
			expr: &actionExpr{
				pos: position{line: 520, col: 19, offset: 17609},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 520, col: 19, offset: 17609},
					expr: &charClassMatcher{
						pos:        position{line: 520, col: 19, offset: 17609},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 524, col: 1, offset: 17657},
			expr: &actionExpr{
				pos: position{line: 524, col: 24, offset: 17680},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 524, col: 24, offset: 17680},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 524, col: 24, offset: 17680},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 524, col: 28, offset: 17684},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 524, col: 34, offset: 17690},
								expr: &ruleRefExpr{
									pos:  position{line: 524, col: 35, offset: 17691},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 524, col: 54, offset: 17710},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 531, col: 1, offset: 17892},
			expr: &actionExpr{
				pos: position{line: 531, col: 18, offset: 17909},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 531, col: 18, offset: 17909},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 531, col: 18, offset: 17909},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 531, col: 24, offset: 17915},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 531, col: 24, offset: 17915},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 531, col: 24, offset: 17915},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 531, col: 36, offset: 17927},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 531, col: 42, offset: 17933},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 531, col: 56, offset: 17947},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 531, col: 74, offset: 17965},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 533, col: 8, offset: 18112},
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 8, offset: 18112},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 15, offset: 18119},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 537, col: 1, offset: 18171},
			expr: &actionExpr{
				pos: position{line: 537, col: 26, offset: 18196},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 537, col: 26, offset: 18196},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 537, col: 26, offset: 18196},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 30, offset: 18200},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 537, col: 36, offset: 18206},
								expr: &choiceExpr{
									pos: position{line: 537, col: 37, offset: 18207},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 537, col: 37, offset: 18207},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 537, col: 59, offset: 18229},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 537, col: 80, offset: 18250},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 537, col: 99, offset: 18269},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 541, col: 1, offset: 18341},
			expr: &actionExpr{
				pos: position{line: 541, col: 24, offset: 18364},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 541, col: 24, offset: 18364},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 541, col: 24, offset: 18364},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 33, offset: 18373},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 40, offset: 18380},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 541, col: 66, offset: 18406},
							expr: &litMatcher{
								pos:        position{line: 541, col: 66, offset: 18406},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 545, col: 1, offset: 18465},
			expr: &actionExpr{
				pos: position{line: 545, col: 29, offset: 18493},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 545, col: 29, offset: 18493},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 545, col: 29, offset: 18493},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 545, col: 36, offset: 18500},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 545, col: 36, offset: 18500},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 546, col: 11, offset: 18617},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 547, col: 11, offset: 18653},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 548, col: 11, offset: 18679},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 549, col: 11, offset: 18711},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 550, col: 11, offset: 18743},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 551, col: 11, offset: 18770},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 551, col: 31, offset: 18790},
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 31, offset: 18790},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 551, col: 39, offset: 18798},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 551, col: 39, offset: 18798},
									expr: &litMatcher{
										pos:        position{line: 551, col: 40, offset: 18799},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 551, col: 46, offset: 18805},
									expr: &litMatcher{
										pos:        position{line: 551, col: 47, offset: 18806},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 555, col: 1, offset: 18838},
			expr: &actionExpr{
				pos: position{line: 555, col: 23, offset: 18860},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 555, col: 23, offset: 18860},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 555, col: 23, offset: 18860},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 555, col: 30, offset: 18867},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 555, col: 30, offset: 18867},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 555, col: 47, offset: 18884},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 5, offset: 18906},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 556, col: 12, offset: 18913},
								expr: &actionExpr{
									pos: position{line: 556, col: 13, offset: 18914},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 556, col: 13, offset: 18914},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 556, col: 13, offset: 18914},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 556, col: 17, offset: 18918},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 556, col: 24, offset: 18925},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 556, col: 24, offset: 18925},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 556, col: 41, offset: 18942},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 562, col: 1, offset: 19080},
			expr: &actionExpr{
				pos: position{line: 562, col: 29, offset: 19108},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 562, col: 29, offset: 19108},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 562, col: 29, offset: 19108},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 562, col: 34, offset: 19113},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 562, col: 41, offset: 19120},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 562, col: 41, offset: 19120},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 562, col: 58, offset: 19137},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 563, col: 5, offset: 19159},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 563, col: 12, offset: 19166},
								expr: &actionExpr{
									pos: position{line: 563, col: 13, offset: 19167},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 563, col: 13, offset: 19167},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 563, col: 13, offset: 19167},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 563, col: 17, offset: 19171},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 563, col: 24, offset: 19178},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 563, col: 24, offset: 19178},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 563, col: 41, offset: 19195},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 565, col: 9, offset: 19248},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 569, col: 1, offset: 19338},
			expr: &actionExpr{
				pos: position{line: 569, col: 19, offset: 19356},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 569, col: 19, offset: 19356},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 569, col: 19, offset: 19356},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 26, offset: 19363},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 569, col: 34, offset: 19371},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 569, col: 39, offset: 19376},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 44, offset: 19381},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 573, col: 1, offset: 19469},
			expr: &actionExpr{
				pos: position{line: 573, col: 25, offset: 19493},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 573, col: 25, offset: 19493},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 573, col: 25, offset: 19493},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 30, offset: 19498},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 37, offset: 19505},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 573, col: 45, offset: 19513},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 50, offset: 19518},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 55, offset: 19523},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 573, col: 63, offset: 19531},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 577, col: 1, offset: 19616},
			expr: &actionExpr{
				pos: position{line: 577, col: 20, offset: 19635},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 577, col: 20, offset: 19635},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 577, col: 32, offset: 19647},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 581, col: 1, offset: 19742},
			expr: &actionExpr{
				pos: position{line: 581, col: 26, offset: 19767},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 581, col: 26, offset: 19767},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 581, col: 26, offset: 19767},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 31, offset: 19772},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 43, offset: 19784},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 581, col: 51, offset: 19792},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 585, col: 1, offset: 19884},
			expr: &actionExpr{
				pos: position{line: 585, col: 23, offset: 19906},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 585, col: 23, offset: 19906},
					expr: &charClassMatcher{
						pos:        position{line: 585, col: 23, offset: 19906},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 589, col: 1, offset: 19951},
			expr: &actionExpr{
				pos: position{line: 589, col: 23, offset: 19973},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 589, col: 23, offset: 19973},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 589, col: 24, offset: 19974},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 589, col: 24, offset: 19974},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 589, col: 34, offset: 19984},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 589, col: 42, offset: 19992},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 48, offset: 19998},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 589, col: 73, offset: 20023},
							expr: &litMatcher{
								pos:        position{line: 589, col: 73, offset: 20023},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 593, col: 1, offset: 20172},
			expr: &actionExpr{
				pos: position{line: 593, col: 28, offset: 20199},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 593, col: 28, offset: 20199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 593, col: 28, offset: 20199},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 35, offset: 20206},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 593, col: 54, offset: 20225},
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 54, offset: 20225},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 593, col: 62, offset: 20233},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 593, col: 62, offset: 20233},
									expr: &litMatcher{
										pos:        position{line: 593, col: 63, offset: 20234},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 593, col: 69, offset: 20240},
									expr: &litMatcher{
										pos:        position{line: 593, col: 70, offset: 20241},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 597, col: 1, offset: 20273},
			expr: &actionExpr{
				pos: position{line: 597, col: 22, offset: 20294},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 597, col: 22, offset: 20294},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 597, col: 22, offset: 20294},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 29, offset: 20301},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 5, offset: 20315},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 598, col: 12, offset: 20322},
								expr: &actionExpr{
									pos: position{line: 598, col: 13, offset: 20323},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 598, col: 13, offset: 20323},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 598, col: 13, offset: 20323},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 598, col: 17, offset: 20327},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 598, col: 24, offset: 20334},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 604, col: 1, offset: 20465},
			expr: &choiceExpr{
				pos: position{line: 604, col: 13, offset: 20477},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 604, col: 13, offset: 20477},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 604, col: 13, offset: 20477},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 604, col: 18, offset: 20482},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 604, col: 18, offset: 20482},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 604, col: 30, offset: 20494},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 606, col: 5, offset: 20562},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 606, col: 5, offset: 20562},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 606, col: 5, offset: 20562},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 606, col: 9, offset: 20566},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 606, col: 14, offset: 20571},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 606, col: 14, offset: 20571},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 606, col: 26, offset: 20583},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 610, col: 1, offset: 20651},
			expr: &actionExpr{
				pos: position{line: 610, col: 16, offset: 20666},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 610, col: 16, offset: 20666},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 610, col: 16, offset: 20666},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 610, col: 23, offset: 20673},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 610, col: 23, offset: 20673},
									expr: &litMatcher{
										pos:        position{line: 610, col: 24, offset: 20674},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 613, col: 5, offset: 20728},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 623, col: 1, offset: 21022},
			expr: &actionExpr{
				pos: position{line: 623, col: 21, offset: 21042},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 623, col: 21, offset: 21042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 623, col: 21, offset: 21042},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 623, col: 29, offset: 21050},
								expr: &choiceExpr{
									pos: position{line: 623, col: 30, offset: 21051},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 623, col: 30, offset: 21051},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 623, col: 53, offset: 21074},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 623, col: 74, offset: 21095},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 623, col: 74, offset: 21095,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 107, offset: 21128},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 627, col: 1, offset: 21199},
			expr: &actionExpr{
				pos: position{line: 627, col: 25, offset: 21223},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 627, col: 25, offset: 21223},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 627, col: 25, offset: 21223},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 627, col: 33, offset: 21231},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 627, col: 38, offset: 21236},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 627, col: 38, offset: 21236},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 627, col: 78, offset: 21276},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 631, col: 1, offset: 21341},
			expr: &actionExpr{
				pos: position{line: 631, col: 23, offset: 21363},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 631, col: 23, offset: 21363},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 631, col: 23, offset: 21363},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 631, col: 31, offset: 21371},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 631, col: 36, offset: 21376},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 631, col: 36, offset: 21376},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 631, col: 76, offset: 21416},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 638, col: 1, offset: 21580},
			expr: &choiceExpr{
				pos: position{line: 638, col: 18, offset: 21597},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 638, col: 18, offset: 21597},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 638, col: 18, offset: 21597},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 27, offset: 21606},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 640, col: 9, offset: 21663},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 640, col: 9, offset: 21663},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 640, col: 15, offset: 21669},
								expr: &ruleRefExpr{
									pos:  position{line: 640, col: 16, offset: 21670},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 644, col: 1, offset: 21762},
			expr: &actionExpr{
				pos: position{line: 644, col: 22, offset: 21783},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 644, col: 22, offset: 21783},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 644, col: 22, offset: 21783},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 23, offset: 21784},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 645, col: 5, offset: 21792},
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 6, offset: 21793},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 646, col: 5, offset: 21808},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 6, offset: 21809},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 647, col: 5, offset: 21831},
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 6, offset: 21832},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 648, col: 5, offset: 21858},
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 6, offset: 21859},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 649, col: 5, offset: 21887},
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 6, offset: 21888},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 650, col: 5, offset: 21914},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 6, offset: 21915},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 651, col: 5, offset: 21940},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 6, offset: 21941},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 652, col: 5, offset: 21962},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 6, offset: 21963},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 653, col: 5, offset: 21982},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 6, offset: 21983},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 654, col: 5, offset: 22010},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 654, col: 11, offset: 22016},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 654, col: 11, offset: 22016},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 654, col: 20, offset: 22025},
										expr: &ruleRefExpr{
											pos:  position{line: 654, col: 21, offset: 22026},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 12, offset: 22125},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 660, col: 1, offset: 22164},
			expr: &seqExpr{
				pos: position{line: 660, col: 25, offset: 22188},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 660, col: 25, offset: 22188},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 660, col: 29, offset: 22192},
						expr: &ruleRefExpr{
							pos:  position{line: 660, col: 29, offset: 22192},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 660, col: 36, offset: 22199},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 662, col: 1, offset: 22271},
			expr: &actionExpr{
				pos: position{line: 662, col: 29, offset: 22299},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 662, col: 29, offset: 22299},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 662, col: 29, offset: 22299},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 662, col: 50, offset: 22320},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 58, offset: 22328},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 666, col: 1, offset: 22434},
			expr: &actionExpr{
				pos: position{line: 666, col: 29, offset: 22462},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 666, col: 29, offset: 22462},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 666, col: 29, offset: 22462},
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 30, offset: 22463},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 22472},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 667, col: 14, offset: 22481},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 667, col: 14, offset: 22481},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 22506},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 22534},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 670, col: 11, offset: 22550},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 22571},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 22595},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 22622},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 22651},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 22716},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 22767},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 22791},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 11, offset: 22823},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 22849},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 681, col: 11, offset: 22886},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 22911},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 689, col: 1, offset: 23077},
			expr: &actionExpr{
				pos: position{line: 689, col: 20, offset: 23096},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 689, col: 20, offset: 23096},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 689, col: 20, offset: 23096},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 689, col: 26, offset: 23102},
								expr: &ruleRefExpr{
									pos:  position{line: 689, col: 27, offset: 23103},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 40, offset: 23116},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 48, offset: 23124},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 71, offset: 23147},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 80, offset: 23156},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 693, col: 1, offset: 23291},
			expr: &actionExpr{
				pos: position{line: 694, col: 5, offset: 23321},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 694, col: 5, offset: 23321},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 694, col: 5, offset: 23321},
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 5, offset: 23321},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 694, col: 12, offset: 23328},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 696, col: 9, offset: 23391},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 696, col: 9, offset: 23391},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 696, col: 9, offset: 23391},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 696, col: 9, offset: 23391},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 696, col: 16, offset: 23398},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 696, col: 16, offset: 23398},
															expr: &litMatcher{
																pos:        position{line: 696, col: 17, offset: 23399},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 700, col: 9, offset: 23499},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 719, col: 11, offset: 24216},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 719, col: 11, offset: 24216},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 719, col: 11, offset: 24216},
													expr: &charClassMatcher{
														pos:        position{line: 719, col: 12, offset: 24217},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 719, col: 20, offset: 24225},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 721, col: 13, offset: 24336},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 721, col: 13, offset: 24336},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 721, col: 14, offset: 24337},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 721, col: 21, offset: 24344},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 723, col: 13, offset: 24458},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 723, col: 13, offset: 24458},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 723, col: 14, offset: 24459},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 723, col: 21, offset: 24466},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 725, col: 13, offset: 24580},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 725, col: 13, offset: 24580},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 725, col: 13, offset: 24580},
													expr: &charClassMatcher{
														pos:        position{line: 725, col: 14, offset: 24581},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 725, col: 22, offset: 24589},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 727, col: 13, offset: 24703},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 727, col: 13, offset: 24703},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 727, col: 13, offset: 24703},
													expr: &charClassMatcher{
														pos:        position{line: 727, col: 14, offset: 24704},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 727, col: 22, offset: 24712},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 729, col: 12, offset: 24825},
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 12, offset: 24825},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 733, col: 1, offset: 24860},
			expr: &actionExpr{
				pos: position{line: 733, col: 27, offset: 24886},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 733, col: 27, offset: 24886},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 733, col: 37, offset: 24896},
						expr: &ruleRefExpr{
							pos:  position{line: 733, col: 37, offset: 24896},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 740, col: 1, offset: 25096},
			expr: &actionExpr{
				pos: position{line: 740, col: 22, offset: 25117},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 740, col: 22, offset: 25117},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 740, col: 22, offset: 25117},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 740, col: 28, offset: 25123},
								expr: &ruleRefExpr{
									pos:  position{line: 740, col: 29, offset: 25124},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 740, col: 42, offset: 25137},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 50, offset: 25145},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 740, col: 75, offset: 25170},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 740, col: 86, offset: 25181},
								expr: &ruleRefExpr{
									pos:  position{line: 740, col: 87, offset: 25182},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 740, col: 117, offset: 25212},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 126, offset: 25221},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 744, col: 1, offset: 25374},
			expr: &actionExpr{
				pos: position{line: 745, col: 5, offset: 25406},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 745, col: 5, offset: 25406},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 745, col: 5, offset: 25406},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 5, offset: 25406},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 12, offset: 25413},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 745, col: 20, offset: 25421},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 747, col: 9, offset: 25478},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 747, col: 9, offset: 25478},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 747, col: 9, offset: 25478},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 747, col: 16, offset: 25485},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 747, col: 16, offset: 25485},
															expr: &litMatcher{
																pos:        position{line: 747, col: 17, offset: 25486},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 751, col: 9, offset: 25586},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 768, col: 14, offset: 26293},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 768, col: 21, offset: 26300},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 768, col: 22, offset: 26301},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 770, col: 13, offset: 26387},
							expr: &ruleRefExpr{
								pos:  position{line: 770, col: 13, offset: 26387},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 774, col: 1, offset: 26423},
			expr: &actionExpr{
				pos: position{line: 774, col: 32, offset: 26454},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 774, col: 32, offset: 26454},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 774, col: 32, offset: 26454},
							expr: &litMatcher{
								pos:        position{line: 774, col: 33, offset: 26455},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 37, offset: 26459},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 775, col: 7, offset: 26473},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 775, col: 7, offset: 26473},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 775, col: 7, offset: 26473},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 776, col: 7, offset: 26518},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 776, col: 7, offset: 26518},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 777, col: 7, offset: 26561},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 777, col: 7, offset: 26561},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 778, col: 7, offset: 26603},
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 7, offset: 26603},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 782, col: 1, offset: 26645},
			expr: &actionExpr{
				pos: position{line: 782, col: 29, offset: 26673},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 782, col: 29, offset: 26673},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 782, col: 39, offset: 26683},
						expr: &ruleRefExpr{
							pos:  position{line: 782, col: 39, offset: 26683},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 789, col: 1, offset: 26999},
			expr: &actionExpr{
				pos: position{line: 789, col: 20, offset: 27018},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 789, col: 20, offset: 27018},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 789, col: 20, offset: 27018},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 789, col: 26, offset: 27024},
								expr: &ruleRefExpr{
									pos:  position{line: 789, col: 27, offset: 27025},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 40, offset: 27038},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 46, offset: 27044},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 75, offset: 27073},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 86, offset: 27084},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 112, offset: 27110},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 789, col: 124, offset: 27122},
								expr: &ruleRefExpr{
									pos:  position{line: 789, col: 125, offset: 27123},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 793, col: 1, offset: 27264},
			expr: &seqExpr{
				pos: position{line: 793, col: 26, offset: 27289},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 793, col: 26, offset: 27289},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 793, col: 54, offset: 27317},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 795, col: 1, offset: 27343},
			expr: &choiceExpr{
				pos: position{line: 795, col: 33, offset: 27375},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 795, col: 33, offset: 27375},
						expr: &charClassMatcher{
							pos:        position{line: 795, col: 33, offset: 27375},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 795, col: 45, offset: 27387},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 795, col: 45, offset: 27387},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 795, col: 49, offset: 27391},
								expr: &litMatcher{
									pos:        position{line: 795, col: 50, offset: 27392},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 796, col: 1, offset: 27396},
			expr: &actionExpr{
				pos: position{line: 796, col: 32, offset: 27427},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 796, col: 32, offset: 27427},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 796, col: 42, offset: 27437},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 796, col: 42, offset: 27437},
							expr: &ruleRefExpr{
								pos:  position{line: 796, col: 42, offset: 27437},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 802, col: 1, offset: 27592},
			expr: &actionExpr{
				pos: position{line: 802, col: 24, offset: 27615},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 802, col: 24, offset: 27615},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 802, col: 33, offset: 27624},
						expr: &seqExpr{
							pos: position{line: 802, col: 34, offset: 27625},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 802, col: 34, offset: 27625},
									expr: &ruleRefExpr{
										pos:  position{line: 802, col: 35, offset: 27626},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 802, col: 43, offset: 27634},
									expr: &litMatcher{
										pos:        position{line: 802, col: 44, offset: 27635},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 802, col: 49, offset: 27640},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 806, col: 1, offset: 27767},
			expr: &actionExpr{
				pos: position{line: 806, col: 31, offset: 27797},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 806, col: 31, offset: 27797},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 806, col: 40, offset: 27806},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 806, col: 40, offset: 27806},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 807, col: 11, offset: 27821},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 808, col: 11, offset: 27870},
								expr: &ruleRefExpr{
									pos:  position{line: 808, col: 11, offset: 27870},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 809, col: 11, offset: 27888},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 810, col: 11, offset: 27913},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 811, col: 11, offset: 27942},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 812, col: 11, offset: 27962},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 813, col: 11, offset: 28051},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 814, col: 11, offset: 28072},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 815, col: 11, offset: 28095},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 816, col: 11, offset: 28110},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 28135},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 818, col: 11, offset: 28158},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 819, col: 11, offset: 28179},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 28206},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 821, col: 11, offset: 28223},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 822, col: 11, offset: 28255},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 826, col: 1, offset: 28294},
			expr: &actionExpr{
				pos: position{line: 827, col: 5, offset: 28327},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 827, col: 5, offset: 28327},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 827, col: 5, offset: 28327},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 827, col: 16, offset: 28338},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 827, col: 16, offset: 28338},
									expr: &litMatcher{
										pos:        position{line: 827, col: 17, offset: 28339},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 830, col: 5, offset: 28397},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 834, col: 6, offset: 28573},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 834, col: 6, offset: 28573},
									expr: &choiceExpr{
										pos: position{line: 834, col: 7, offset: 28574},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 834, col: 7, offset: 28574},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 834, col: 15, offset: 28582},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 834, col: 27, offset: 28594},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 838, col: 1, offset: 28634},
			expr: &actionExpr{
				pos: position{line: 838, col: 31, offset: 28664},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 838, col: 31, offset: 28664},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 838, col: 40, offset: 28673},
						expr: &ruleRefExpr{
							pos:  position{line: 838, col: 41, offset: 28674},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 845, col: 1, offset: 28865},
			expr: &choiceExpr{
				pos: position{line: 845, col: 19, offset: 28883},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 845, col: 19, offset: 28883},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 845, col: 19, offset: 28883},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 28921},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 847, col: 5, offset: 28921},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 849, col: 5, offset: 28961},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 849, col: 5, offset: 28961},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 851, col: 5, offset: 29011},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 851, col: 5, offset: 29011},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 853, col: 5, offset: 29057},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 853, col: 5, offset: 29057},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 864, col: 1, offset: 29369},
			expr: &choiceExpr{
				pos: position{line: 866, col: 5, offset: 29419},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 29419},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 29419},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 866, col: 5, offset: 29419},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 866, col: 16, offset: 29430},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 17, offset: 29431},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 866, col: 30, offset: 29444},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 33, offset: 29447},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 866, col: 49, offset: 29463},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 866, col: 54, offset: 29468},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 866, col: 60, offset: 29474},
										expr: &choiceExpr{
											pos: position{line: 866, col: 61, offset: 29475},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 866, col: 61, offset: 29475},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 866, col: 81, offset: 29495},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 871, col: 5, offset: 29730},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 871, col: 5, offset: 29730},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 871, col: 5, offset: 29730},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 871, col: 16, offset: 29741},
										expr: &ruleRefExpr{
											pos:  position{line: 871, col: 17, offset: 29742},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 871, col: 30, offset: 29755},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 871, col: 35, offset: 29760},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 871, col: 44, offset: 29769},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 875, col: 5, offset: 29942},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 875, col: 5, offset: 29942},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 875, col: 5, offset: 29942},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 875, col: 16, offset: 29953},
										expr: &ruleRefExpr{
											pos:  position{line: 875, col: 17, offset: 29954},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 875, col: 30, offset: 29967},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 882, col: 7, offset: 30251},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 882, col: 15, offset: 30259},
										expr: &ruleRefExpr{
											pos:  position{line: 882, col: 16, offset: 30260},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 886, col: 5, offset: 30426},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 886, col: 5, offset: 30426},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 886, col: 5, offset: 30426},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 886, col: 16, offset: 30437},
										expr: &ruleRefExpr{
											pos:  position{line: 886, col: 17, offset: 30438},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 886, col: 31, offset: 30452},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 886, col: 37, offset: 30458},
										expr: &choiceExpr{
											pos: position{line: 886, col: 38, offset: 30459},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 886, col: 38, offset: 30459},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 886, col: 58, offset: 30479},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 890, col: 1, offset: 30577},
			expr: &oneOrMoreExpr{
				pos: position{line: 890, col: 33, offset: 30609},
				expr: &actionExpr{
					pos: position{line: 890, col: 34, offset: 30610},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 890, col: 34, offset: 30610},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 890, col: 34, offset: 30610},
								expr: &ruleRefExpr{
									pos:  position{line: 890, col: 35, offset: 30611},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 890, col: 45, offset: 30621},
								expr: &litMatcher{
									pos:        position{line: 890, col: 45, offset: 30621},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 890, col: 51, offset: 30627},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 890, col: 60, offset: 30636},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 894, col: 1, offset: 30677},
			expr: &actionExpr{
				pos: position{line: 894, col: 21, offset: 30697},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 894, col: 21, offset: 30697},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 894, col: 21, offset: 30697},
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 22, offset: 30698},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 5, offset: 30718},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 14, offset: 30727},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 895, col: 39, offset: 30752},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 895, col: 43, offset: 30756},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 905, col: 1, offset: 30991},
			expr: &actionExpr{
				pos: position{line: 905, col: 28, offset: 31018},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 905, col: 28, offset: 31018},
					expr: &charClassMatcher{
						pos:        position{line: 905, col: 28, offset: 31018},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 910, col: 1, offset: 31135},
			expr: &actionExpr{
				pos: position{line: 910, col: 23, offset: 31157},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 910, col: 23, offset: 31157},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 910, col: 23, offset: 31157},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 910, col: 34, offset: 31168},
								expr: &ruleRefExpr{
									pos:  position{line: 910, col: 35, offset: 31169},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 911, col: 5, offset: 31187},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 919, col: 5, offset: 31478},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 16, offset: 31489},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 920, col: 5, offset: 31515},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 920, col: 16, offset: 31526},
								expr: &choiceExpr{
									pos: position{line: 920, col: 17, offset: 31527},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 920, col: 17, offset: 31527},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 920, col: 37, offset: 31547},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 924, col: 1, offset: 31679},
			expr: &actionExpr{
				pos: position{line: 925, col: 5, offset: 31709},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 925, col: 5, offset: 31709},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 31709},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 925, col: 14, offset: 31718},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 925, col: 14, offset: 31718},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 925, col: 14, offset: 31718},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 925, col: 23, offset: 31727},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 925, col: 28, offset: 31732},
											expr: &charClassMatcher{
												pos:        position{line: 925, col: 28, offset: 31732},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 925, col: 68, offset: 31772},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 936, col: 1, offset: 32024},
			expr: &choiceExpr{
				pos: position{line: 938, col: 5, offset: 32083},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 32083},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 938, col: 5, offset: 32083},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 938, col: 5, offset: 32083},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 938, col: 16, offset: 32094},
										expr: &ruleRefExpr{
											pos:  position{line: 938, col: 17, offset: 32095},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 938, col: 30, offset: 32108},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 33, offset: 32111},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 49, offset: 32127},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 54, offset: 32132},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 61, offset: 32139},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 32342},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 32342},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 942, col: 5, offset: 32342},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 942, col: 16, offset: 32353},
										expr: &ruleRefExpr{
											pos:  position{line: 942, col: 17, offset: 32354},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 942, col: 30, offset: 32367},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 37, offset: 32374},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 946, col: 1, offset: 32478},
			expr: &actionExpr{
				pos: position{line: 946, col: 31, offset: 32508},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 946, col: 31, offset: 32508},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 946, col: 31, offset: 32508},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 946, col: 42, offset: 32519},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 946, col: 65, offset: 32542},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 946, col: 76, offset: 32553},
								expr: &actionExpr{
									pos: position{line: 946, col: 77, offset: 32554},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 946, col: 77, offset: 32554},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 946, col: 77, offset: 32554},
												expr: &ruleRefExpr{
													pos:  position{line: 946, col: 78, offset: 32555},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 946, col: 99, offset: 32576},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 946, col: 105, offset: 32582},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 946, col: 105, offset: 32582},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 946, col: 125, offset: 32602},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 954, col: 1, offset: 32844},
			expr: &actionExpr{
				pos: position{line: 954, col: 19, offset: 32862},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 954, col: 19, offset: 32862},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 954, col: 19, offset: 32862},
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 20, offset: 32863},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 955, col: 5, offset: 32877},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 955, col: 15, offset: 32887},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 955, col: 15, offset: 32887},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 955, col: 15, offset: 32887},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 955, col: 24, offset: 32896},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 957, col: 9, offset: 32988},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 957, col: 9, offset: 32988},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 957, col: 9, offset: 32988},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 957, col: 18, offset: 32997},
														expr: &ruleRefExpr{
															pos:  position{line: 957, col: 19, offset: 32998},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 957, col: 35, offset: 33014},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 963, col: 1, offset: 33131},
			expr: &actionExpr{
				pos: position{line: 964, col: 5, offset: 33154},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 964, col: 5, offset: 33154},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 964, col: 14, offset: 33163},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 964, col: 14, offset: 33163},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 965, col: 11, offset: 33224},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 966, col: 11, offset: 33269},
								expr: &ruleRefExpr{
									pos:  position{line: 966, col: 11, offset: 33269},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 967, col: 11, offset: 33287},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 967, col: 11, offset: 33287},
										expr: &ruleRefExpr{
											pos:  position{line: 967, col: 12, offset: 33288},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 968, col: 13, offset: 33306},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 968, col: 13, offset: 33306},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 969, col: 15, offset: 33333},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 970, col: 15, offset: 33358},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 971, col: 15, offset: 33383},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 972, col: 15, offset: 33410},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 973, col: 15, offset: 33430},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 974, col: 15, offset: 33523},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 975, col: 15, offset: 33553},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 15, offset: 33621},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 977, col: 15, offset: 33652},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 15, offset: 33673},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 33704},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 980, col: 15, offset: 33741},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 15, offset: 33771},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 982, col: 15, offset: 33804},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 983, col: 15, offset: 33828},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 15, offset: 33861},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 991, col: 1, offset: 34084},
			expr: &actionExpr{
				pos: position{line: 991, col: 14, offset: 34097},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 991, col: 14, offset: 34097},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 991, col: 14, offset: 34097},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 991, col: 20, offset: 34103},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 991, col: 24, offset: 34107},
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 24, offset: 34107},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 991, col: 31, offset: 34114},
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 32, offset: 34115},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 998, col: 1, offset: 34399},
			expr: &choiceExpr{
				pos: position{line: 998, col: 15, offset: 34413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 998, col: 15, offset: 34413},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 41, offset: 34439},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 65, offset: 34463},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1000, col: 1, offset: 34482},
			expr: &choiceExpr{
				pos: position{line: 1000, col: 32, offset: 34513},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1000, col: 32, offset: 34513},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1000, col: 32, offset: 34513},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1000, col: 36, offset: 34517},
								expr: &litMatcher{
									pos:        position{line: 1000, col: 37, offset: 34518},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1000, col: 43, offset: 34524},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1000, col: 43, offset: 34524},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1000, col: 47, offset: 34528},
								expr: &litMatcher{
									pos:        position{line: 1000, col: 48, offset: 34529},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1000, col: 54, offset: 34535},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1000, col: 54, offset: 34535},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1000, col: 58, offset: 34539},
								expr: &litMatcher{
									pos:        position{line: 1000, col: 59, offset: 34540},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1000, col: 65, offset: 34546},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1000, col: 65, offset: 34546},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1000, col: 69, offset: 34550},
								expr: &litMatcher{
									pos:        position{line: 1000, col: 70, offset: 34551},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1002, col: 1, offset: 34556},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 34, offset: 34589},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1002, col: 34, offset: 34589},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1002, col: 41, offset: 34596},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1002, col: 48, offset: 34603},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1002, col: 55, offset: 34610},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1002, col: 62, offset: 34617},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1002, col: 68, offset: 34623},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1004, col: 1, offset: 34628},
			expr: &actionExpr{
				pos: position{line: 1004, col: 26, offset: 34653},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1004, col: 26, offset: 34653},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1004, col: 32, offset: 34659},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1004, col: 32, offset: 34659},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1005, col: 15, offset: 34694},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1006, col: 15, offset: 34730},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1007, col: 15, offset: 34766},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1008, col: 15, offset: 34806},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1009, col: 15, offset: 34835},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 15, offset: 34866},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1014, col: 1, offset: 35020},
			expr: &choiceExpr{
				pos: position{line: 1014, col: 28, offset: 35047},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1014, col: 28, offset: 35047},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 15, offset: 35081},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 15, offset: 35117},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1017, col: 15, offset: 35153},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1019, col: 1, offset: 35179},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 22, offset: 35200},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1019, col: 22, offset: 35200},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 15, offset: 35231},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 15, offset: 35263},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 15, offset: 35295},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 15, offset: 35331},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 15, offset: 35367},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1026, col: 1, offset: 35391},
			expr: &choiceExpr{
				pos: position{line: 1026, col: 33, offset: 35423},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1026, col: 33, offset: 35423},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1026, col: 39, offset: 35429},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1026, col: 39, offset: 35429},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1030, col: 1, offset: 35562},
			expr: &actionExpr{
				pos: position{line: 1030, col: 25, offset: 35586},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1030, col: 25, offset: 35586},
					expr: &litMatcher{
						pos:        position{line: 1030, col: 25, offset: 35586},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1034, col: 1, offset: 35627},
			expr: &actionExpr{
				pos: position{line: 1034, col: 25, offset: 35651},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 25, offset: 35651},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1034, col: 25, offset: 35651},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1034, col: 30, offset: 35656},
							expr: &litMatcher{
								pos:        position{line: 1034, col: 30, offset: 35656},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1042, col: 1, offset: 35753},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 13, offset: 35765},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 13, offset: 35765},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 35, offset: 35787},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1044, col: 1, offset: 35854},
			expr: &actionExpr{
				pos: position{line: 1044, col: 24, offset: 35877},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 24, offset: 35877},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1044, col: 24, offset: 35877},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1044, col: 30, offset: 35883},
								expr: &ruleRefExpr{
									pos:  position{line: 1044, col: 31, offset: 35884},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 49, offset: 35902},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 54, offset: 35907},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 64, offset: 35917},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 93, offset: 35946},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1048, col: 1, offset: 36033},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1048, col: 32, offset: 36064},
				expr: &ruleRefExpr{
					pos:  position{line: 1048, col: 32, offset: 36064},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1050, col: 1, offset: 36095},
			expr: &actionExpr{
				pos: position{line: 1050, col: 31, offset: 36125},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1050, col: 31, offset: 36125},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1050, col: 31, offset: 36125},
							expr: &litMatcher{
								pos:        position{line: 1050, col: 33, offset: 36127},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1050, col: 39, offset: 36133},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1050, col: 48, offset: 36142},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1050, col: 48, offset: 36142},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1051, col: 11, offset: 36157},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1052, col: 11, offset: 36206},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1052, col: 11, offset: 36206},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1052, col: 19, offset: 36214},
												expr: &ruleRefExpr{
													pos:  position{line: 1052, col: 20, offset: 36215},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1053, col: 11, offset: 36233},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1054, col: 11, offset: 36263},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1055, col: 11, offset: 36286},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1056, col: 11, offset: 36307},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1057, col: 11, offset: 36328},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1058, col: 11, offset: 36352},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1059, col: 11, offset: 36376},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1060, col: 11, offset: 36402},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1061, col: 11, offset: 36431},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1065, col: 1, offset: 36498},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 5, offset: 36542},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1066, col: 5, offset: 36542},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1067, col: 7, offset: 36639},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1067, col: 7, offset: 36639},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1067, col: 7, offset: 36639},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1067, col: 12, offset: 36644},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1071, col: 1, offset: 36807},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 24, offset: 36830},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1071, col: 24, offset: 36830},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1071, col: 24, offset: 36830},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1071, col: 24, offset: 36830},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1071, col: 30, offset: 36836},
										expr: &ruleRefExpr{
											pos:  position{line: 1071, col: 31, offset: 36837},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1071, col: 51, offset: 36857},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1071, col: 51, offset: 36857},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1071, col: 55, offset: 36861},
											expr: &litMatcher{
												pos:        position{line: 1071, col: 56, offset: 36862},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 61, offset: 36867},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 71, offset: 36877},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 100, offset: 36906},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1071, col: 104, offset: 36910},
									expr: &notExpr{
										pos: position{line: 1071, col: 106, offset: 36912},
										expr: &ruleRefExpr{
											pos:  position{line: 1071, col: 107, offset: 36913},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 37107},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1073, col: 5, offset: 37107},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1073, col: 5, offset: 37107},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1073, col: 11, offset: 37113},
										expr: &ruleRefExpr{
											pos:  position{line: 1073, col: 12, offset: 37114},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1073, col: 30, offset: 37132},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 34, offset: 37136},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1073, col: 44, offset: 37146},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1073, col: 44, offset: 37146},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1073, col: 48, offset: 37150},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1073, col: 77, offset: 37179},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1077, col: 1, offset: 37385},
			expr: &seqExpr{
				pos: position{line: 1077, col: 32, offset: 37416},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1077, col: 32, offset: 37416},
						expr: &ruleRefExpr{
							pos:  position{line: 1077, col: 33, offset: 37417},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1077, col: 39, offset: 37423},
						expr: &ruleRefExpr{
							pos:  position{line: 1077, col: 39, offset: 37423},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1079, col: 1, offset: 37452},
			expr: &choiceExpr{
				pos: position{line: 1079, col: 31, offset: 37482},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1079, col: 31, offset: 37482},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1080, col: 11, offset: 37497},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1080, col: 11, offset: 37497},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1080, col: 19, offset: 37505},
								expr: &ruleRefExpr{
									pos:  position{line: 1080, col: 20, offset: 37506},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 11, offset: 37524},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 11, offset: 37554},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1083, col: 11, offset: 37577},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1083, col: 11, offset: 37577},
								expr: &ruleRefExpr{
									pos:  position{line: 1083, col: 11, offset: 37577},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1083, col: 18, offset: 37584},
								expr: &seqExpr{
									pos: position{line: 1083, col: 19, offset: 37585},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1083, col: 19, offset: 37585},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1083, col: 23, offset: 37589},
											expr: &litMatcher{
												pos:        position{line: 1083, col: 24, offset: 37590},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 11, offset: 37606},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 11, offset: 37627},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 11, offset: 37648},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 11, offset: 37672},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 11, offset: 37696},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 11, offset: 37722},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 37751},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1092, col: 1, offset: 37789},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 5, offset: 37833},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1093, col: 5, offset: 37833},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1094, col: 7, offset: 37930},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1094, col: 7, offset: 37930},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1094, col: 7, offset: 37930},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 11, offset: 37934},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1098, col: 1, offset: 38097},
			expr: &choiceExpr{
				pos: position{line: 1099, col: 5, offset: 38121},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1099, col: 5, offset: 38121},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1099, col: 5, offset: 38121},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1099, col: 5, offset: 38121},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 18, offset: 38134},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 40, offset: 38156},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1099, col: 45, offset: 38161},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 55, offset: 38171},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 84, offset: 38200},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1101, col: 9, offset: 38357},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1101, col: 9, offset: 38357},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1101, col: 9, offset: 38357},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 22, offset: 38370},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 44, offset: 38392},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 49, offset: 38397},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 59, offset: 38407},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 88, offset: 38436},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 9, offset: 38636},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1104, col: 9, offset: 38636},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1104, col: 9, offset: 38636},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 22, offset: 38649},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 44, offset: 38671},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 48, offset: 38675},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 58, offset: 38685},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 87, offset: 38714},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1112, col: 1, offset: 38922},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 15, offset: 38936},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1112, col: 15, offset: 38936},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 39, offset: 38960},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1114, col: 1, offset: 38983},
			expr: &actionExpr{
				pos: position{line: 1114, col: 26, offset: 39008},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1114, col: 26, offset: 39008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1114, col: 26, offset: 39008},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1114, col: 32, offset: 39014},
								expr: &ruleRefExpr{
									pos:  position{line: 1114, col: 33, offset: 39015},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1114, col: 51, offset: 39033},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1114, col: 56, offset: 39038},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1114, col: 66, offset: 39048},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1114, col: 97, offset: 39079},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1118, col: 1, offset: 39213},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1118, col: 34, offset: 39246},
				expr: &ruleRefExpr{
					pos:  position{line: 1118, col: 34, offset: 39246},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1120, col: 1, offset: 39278},
			expr: &actionExpr{
				pos: position{line: 1120, col: 33, offset: 39310},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 33, offset: 39310},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1120, col: 33, offset: 39310},
							expr: &litMatcher{
								pos:        position{line: 1120, col: 35, offset: 39312},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1120, col: 41, offset: 39318},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1120, col: 50, offset: 39327},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1120, col: 50, offset: 39327},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1121, col: 11, offset: 39342},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1122, col: 11, offset: 39391},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1122, col: 11, offset: 39391},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1122, col: 19, offset: 39399},
												expr: &ruleRefExpr{
													pos:  position{line: 1122, col: 20, offset: 39400},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1123, col: 11, offset: 39418},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1124, col: 11, offset: 39450},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1125, col: 11, offset: 39473},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1126, col: 11, offset: 39492},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1127, col: 11, offset: 39513},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1128, col: 11, offset: 39537},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1129, col: 11, offset: 39561},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1130, col: 11, offset: 39587},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1131, col: 11, offset: 39616},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1135, col: 1, offset: 39685},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 5, offset: 39731},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1136, col: 5, offset: 39731},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1137, col: 7, offset: 39830},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1137, col: 7, offset: 39830},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1137, col: 7, offset: 39830},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1137, col: 12, offset: 39835},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1141, col: 1, offset: 40000},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 26, offset: 40025},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1141, col: 26, offset: 40025},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1141, col: 26, offset: 40025},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1141, col: 26, offset: 40025},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1141, col: 32, offset: 40031},
										expr: &ruleRefExpr{
											pos:  position{line: 1141, col: 33, offset: 40032},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1141, col: 52, offset: 40051},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1141, col: 52, offset: 40051},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1141, col: 56, offset: 40055},
											expr: &litMatcher{
												pos:        position{line: 1141, col: 57, offset: 40056},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 62, offset: 40061},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1141, col: 72, offset: 40071},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1141, col: 103, offset: 40102},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 5, offset: 40292},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1143, col: 5, offset: 40292},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1143, col: 5, offset: 40292},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1143, col: 11, offset: 40298},
										expr: &ruleRefExpr{
											pos:  position{line: 1143, col: 12, offset: 40299},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1143, col: 30, offset: 40317},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1143, col: 34, offset: 40321},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1143, col: 44, offset: 40331},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1143, col: 44, offset: 40331},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1143, col: 48, offset: 40335},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1143, col: 79, offset: 40366},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1147, col: 1, offset: 40576},
			expr: &seqExpr{
				pos: position{line: 1147, col: 34, offset: 40609},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1147, col: 34, offset: 40609},
						expr: &ruleRefExpr{
							pos:  position{line: 1147, col: 35, offset: 40610},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1147, col: 41, offset: 40616},
						expr: &ruleRefExpr{
							pos:  position{line: 1147, col: 41, offset: 40616},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1149, col: 1, offset: 40647},
			expr: &choiceExpr{
				pos: position{line: 1149, col: 33, offset: 40679},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1149, col: 33, offset: 40679},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1150, col: 11, offset: 40694},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1150, col: 11, offset: 40694},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1150, col: 19, offset: 40702},
								expr: &ruleRefExpr{
									pos:  position{line: 1150, col: 20, offset: 40703},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 11, offset: 40721},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 11, offset: 40753},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1153, col: 11, offset: 40776},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1153, col: 11, offset: 40776},
								expr: &ruleRefExpr{
									pos:  position{line: 1153, col: 11, offset: 40776},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1153, col: 18, offset: 40783},
								expr: &seqExpr{
									pos: position{line: 1153, col: 19, offset: 40784},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1153, col: 19, offset: 40784},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1153, col: 23, offset: 40788},
											expr: &litMatcher{
												pos:        position{line: 1153, col: 24, offset: 40789},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 11, offset: 40805},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 11, offset: 40824},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 11, offset: 40845},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 11, offset: 40869},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 11, offset: 40893},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 11, offset: 40919},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 40948},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1162, col: 1, offset: 40988},
			expr: &choiceExpr{
				pos: position{line: 1163, col: 5, offset: 41034},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1163, col: 5, offset: 41034},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1164, col: 7, offset: 41133},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1164, col: 7, offset: 41133},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1164, col: 7, offset: 41133},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1164, col: 11, offset: 41137},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1168, col: 1, offset: 41303},
			expr: &choiceExpr{
				pos: position{line: 1169, col: 5, offset: 41329},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1169, col: 5, offset: 41329},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1169, col: 5, offset: 41329},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1169, col: 5, offset: 41329},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 18, offset: 41342},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1169, col: 40, offset: 41364},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1169, col: 45, offset: 41369},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 55, offset: 41379},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1169, col: 86, offset: 41410},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1171, col: 9, offset: 41567},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1171, col: 9, offset: 41567},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1171, col: 9, offset: 41567},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1171, col: 22, offset: 41580},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1171, col: 44, offset: 41602},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1171, col: 49, offset: 41607},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1171, col: 59, offset: 41617},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1171, col: 90, offset: 41648},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1174, col: 9, offset: 41848},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1174, col: 9, offset: 41848},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1174, col: 9, offset: 41848},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1174, col: 22, offset: 41861},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1174, col: 44, offset: 41883},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1174, col: 48, offset: 41887},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1174, col: 58, offset: 41897},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1174, col: 89, offset: 41928},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1181, col: 1, offset: 42138},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 18, offset: 42155},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1181, col: 18, offset: 42155},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 45, offset: 42182},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1183, col: 1, offset: 42208},
			expr: &actionExpr{
				pos: position{line: 1183, col: 29, offset: 42236},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 29, offset: 42236},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1183, col: 29, offset: 42236},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1183, col: 35, offset: 42242},
								expr: &ruleRefExpr{
									pos:  position{line: 1183, col: 36, offset: 42243},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1183, col: 54, offset: 42261},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1183, col: 59, offset: 42266},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1183, col: 69, offset: 42276},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1183, col: 103, offset: 42310},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1187, col: 1, offset: 42447},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1187, col: 37, offset: 42483},
				expr: &ruleRefExpr{
					pos:  position{line: 1187, col: 37, offset: 42483},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1189, col: 1, offset: 42550},
			expr: &actionExpr{
				pos: position{line: 1189, col: 36, offset: 42585},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1189, col: 36, offset: 42585},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1189, col: 36, offset: 42585},
							expr: &litMatcher{
								pos:        position{line: 1189, col: 38, offset: 42587},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1189, col: 44, offset: 42593},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1189, col: 53, offset: 42602},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1189, col: 53, offset: 42602},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1190, col: 11, offset: 42617},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1191, col: 11, offset: 42666},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1191, col: 11, offset: 42666},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1191, col: 19, offset: 42674},
												expr: &ruleRefExpr{
													pos:  position{line: 1191, col: 20, offset: 42675},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 11, offset: 42693},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1193, col: 11, offset: 42716},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1193, col: 11, offset: 42716},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1197, col: 11, offset: 42900},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1198, col: 11, offset: 42935},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 11, offset: 42954},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1200, col: 11, offset: 42975},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1201, col: 11, offset: 42996},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1202, col: 11, offset: 43020},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 11, offset: 43046},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 11, offset: 43075},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1208, col: 1, offset: 43147},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 5, offset: 43196},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1209, col: 5, offset: 43196},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1210, col: 7, offset: 43298},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1210, col: 7, offset: 43298},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1210, col: 7, offset: 43298},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1210, col: 12, offset: 43303},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1214, col: 1, offset: 43471},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 29, offset: 43499},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1214, col: 29, offset: 43499},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1214, col: 29, offset: 43499},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1214, col: 29, offset: 43499},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1214, col: 35, offset: 43505},
										expr: &ruleRefExpr{
											pos:  position{line: 1214, col: 36, offset: 43506},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1214, col: 55, offset: 43525},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1214, col: 55, offset: 43525},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1214, col: 59, offset: 43529},
											expr: &litMatcher{
												pos:        position{line: 1214, col: 60, offset: 43530},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 65, offset: 43535},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 75, offset: 43545},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 109, offset: 43579},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 5, offset: 43772},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1216, col: 5, offset: 43772},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1216, col: 5, offset: 43772},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1216, col: 11, offset: 43778},
										expr: &ruleRefExpr{
											pos:  position{line: 1216, col: 12, offset: 43779},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 30, offset: 43797},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1216, col: 34, offset: 43801},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1216, col: 44, offset: 43811},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1216, col: 44, offset: 43811},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1216, col: 48, offset: 43815},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 82, offset: 43849},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1220, col: 1, offset: 44063},
			expr: &seqExpr{
				pos: position{line: 1220, col: 37, offset: 44099},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1220, col: 37, offset: 44099},
						expr: &ruleRefExpr{
							pos:  position{line: 1220, col: 38, offset: 44100},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1220, col: 44, offset: 44106},
						expr: &ruleRefExpr{
							pos:  position{line: 1220, col: 44, offset: 44106},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1222, col: 1, offset: 44140},
			expr: &choiceExpr{
				pos: position{line: 1222, col: 37, offset: 44176},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1222, col: 37, offset: 44176},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1223, col: 11, offset: 44191},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1223, col: 11, offset: 44191},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1223, col: 19, offset: 44199},
								expr: &ruleRefExpr{
									pos:  position{line: 1223, col: 20, offset: 44200},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 11, offset: 44218},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 11, offset: 44253},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1226, col: 11, offset: 44276},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1226, col: 11, offset: 44276},
								expr: &ruleRefExpr{
									pos:  position{line: 1226, col: 11, offset: 44276},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1226, col: 18, offset: 44283},
								expr: &seqExpr{
									pos: position{line: 1226, col: 19, offset: 44284},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1226, col: 19, offset: 44284},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1226, col: 23, offset: 44288},
											expr: &litMatcher{
												pos:        position{line: 1226, col: 24, offset: 44289},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 11, offset: 44417},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 11, offset: 44436},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 44457},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 44478},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 44502},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1232, col: 11, offset: 44528},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1232, col: 11, offset: 44528},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 11, offset: 44669},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 11, offset: 44698},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1239, col: 1, offset: 44741},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 5, offset: 44790},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1240, col: 5, offset: 44790},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1241, col: 7, offset: 44892},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1241, col: 7, offset: 44892},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1241, col: 7, offset: 44892},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1241, col: 11, offset: 44896},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1245, col: 1, offset: 45065},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 5, offset: 45094},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1246, col: 5, offset: 45094},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1246, col: 5, offset: 45094},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1246, col: 5, offset: 45094},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1246, col: 18, offset: 45107},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1246, col: 40, offset: 45129},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1246, col: 45, offset: 45134},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1246, col: 55, offset: 45144},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1246, col: 89, offset: 45178},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1248, col: 9, offset: 45335},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1248, col: 9, offset: 45335},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1248, col: 9, offset: 45335},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 22, offset: 45348},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1248, col: 44, offset: 45370},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 49, offset: 45375},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 59, offset: 45385},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1248, col: 93, offset: 45419},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1251, col: 9, offset: 45619},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1251, col: 9, offset: 45619},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1251, col: 9, offset: 45619},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 22, offset: 45632},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 44, offset: 45654},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 48, offset: 45658},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 58, offset: 45668},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 92, offset: 45702},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1259, col: 1, offset: 46027},
			expr: &choiceExpr{
				pos: position{line: 1259, col: 17, offset: 46043},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1259, col: 17, offset: 46043},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 38, offset: 46064},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1261, col: 1, offset: 46084},
			expr: &actionExpr{
				pos: position{line: 1261, col: 23, offset: 46106},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 23, offset: 46106},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1261, col: 23, offset: 46106},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1261, col: 46, offset: 46129},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 55, offset: 46138},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1261, col: 82, offset: 46165},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1265, col: 1, offset: 46269},
			expr: &actionExpr{
				pos: position{line: 1265, col: 31, offset: 46299},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1265, col: 31, offset: 46299},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1265, col: 41, offset: 46309},
						expr: &ruleRefExpr{
							pos:  position{line: 1265, col: 41, offset: 46309},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1269, col: 1, offset: 46387},
			expr: &seqExpr{
				pos: position{line: 1269, col: 27, offset: 46413},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1269, col: 27, offset: 46413},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1269, col: 32, offset: 46418},
						expr: &charClassMatcher{
							pos:        position{line: 1269, col: 33, offset: 46419},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1271, col: 1, offset: 46430},
			expr: &litMatcher{
				pos:        position{line: 1271, col: 25, offset: 46454},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1274, col: 1, offset: 46542},
			expr: &actionExpr{
				pos: position{line: 1274, col: 30, offset: 46571},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1274, col: 30, offset: 46571},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1275, col: 9, offset: 46589},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1275, col: 9, offset: 46589},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1275, col: 9, offset: 46589},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1275, col: 19, offset: 46599},
										expr: &ruleRefExpr{
											pos:  position{line: 1275, col: 20, offset: 46600},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1276, col: 11, offset: 46656},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1276, col: 11, offset: 46656},
										expr: &ruleRefExpr{
											pos:  position{line: 1276, col: 11, offset: 46656},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1276, col: 18, offset: 46663},
										expr: &ruleRefExpr{
											pos:  position{line: 1276, col: 19, offset: 46664},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1277, col: 11, offset: 46695},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1277, col: 11, offset: 46695},
										expr: &litMatcher{
											pos:        position{line: 1277, col: 12, offset: 46696},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1277, col: 16, offset: 46700},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1278, col: 11, offset: 46748},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1279, col: 11, offset: 46767},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1280, col: 11, offset: 46788},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1281, col: 11, offset: 46809},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1282, col: 11, offset: 46833},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1283, col: 11, offset: 46859},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1283, col: 11, offset: 46859},
										expr: &litMatcher{
											pos:        position{line: 1283, col: 12, offset: 46860},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1283, col: 17, offset: 46865},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1284, col: 11, offset: 46889},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1285, col: 11, offset: 46918},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1289, col: 1, offset: 46984},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 41, offset: 47024},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1289, col: 41, offset: 47024},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1289, col: 55, offset: 47038},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1289, col: 55, offset: 47038},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1289, col: 55, offset: 47038},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1289, col: 59, offset: 47042},
									expr: &litMatcher{
										pos:        position{line: 1289, col: 60, offset: 47043},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1293, col: 1, offset: 47102},
			expr: &actionExpr{
				pos: position{line: 1293, col: 23, offset: 47124},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1293, col: 23, offset: 47124},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1293, col: 23, offset: 47124},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1293, col: 46, offset: 47147},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1293, col: 55, offset: 47156},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1293, col: 82, offset: 47183},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1297, col: 1, offset: 47287},
			expr: &actionExpr{
				pos: position{line: 1297, col: 31, offset: 47317},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1297, col: 31, offset: 47317},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1297, col: 41, offset: 47327},
						expr: &ruleRefExpr{
							pos:  position{line: 1297, col: 41, offset: 47327},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1302, col: 1, offset: 47487},
			expr: &actionExpr{
				pos: position{line: 1302, col: 30, offset: 47516},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1302, col: 30, offset: 47516},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1303, col: 9, offset: 47534},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1303, col: 9, offset: 47534},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1303, col: 9, offset: 47534},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1303, col: 19, offset: 47544},
										expr: &ruleRefExpr{
											pos:  position{line: 1303, col: 20, offset: 47545},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1304, col: 11, offset: 47601},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1304, col: 11, offset: 47601},
										expr: &ruleRefExpr{
											pos:  position{line: 1304, col: 11, offset: 47601},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1304, col: 18, offset: 47608},
										expr: &ruleRefExpr{
											pos:  position{line: 1304, col: 19, offset: 47609},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1305, col: 11, offset: 47640},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1306, col: 11, offset: 47659},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1307, col: 11, offset: 47680},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1308, col: 11, offset: 47701},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1309, col: 11, offset: 47725},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1310, col: 11, offset: 47751},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1310, col: 11, offset: 47751},
										expr: &litMatcher{
											pos:        position{line: 1310, col: 12, offset: 47752},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1310, col: 18, offset: 47758},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1311, col: 10, offset: 47781},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1312, col: 11, offset: 47810},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1316, col: 1, offset: 47884},
			expr: &seqExpr{
				pos: position{line: 1316, col: 27, offset: 47910},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1316, col: 27, offset: 47910},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1316, col: 33, offset: 47916},
						expr: &charClassMatcher{
							pos:        position{line: 1316, col: 34, offset: 47917},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1318, col: 1, offset: 47928},
			expr: &litMatcher{
				pos:        position{line: 1318, col: 25, offset: 47952},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1320, col: 1, offset: 47959},
			expr: &actionExpr{
				pos: position{line: 1320, col: 41, offset: 47999},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1320, col: 42, offset: 48000},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1320, col: 42, offset: 48000},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1320, col: 56, offset: 48014},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1320, col: 56, offset: 48014},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1320, col: 60, offset: 48018},
									expr: &litMatcher{
										pos:        position{line: 1320, col: 61, offset: 48019},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1329, col: 1, offset: 48139},
			expr: &choiceExpr{
				pos: position{line: 1329, col: 15, offset: 48153},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1329, col: 15, offset: 48153},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 39, offset: 48177},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1331, col: 1, offset: 48200},
			expr: &actionExpr{
				pos: position{line: 1331, col: 26, offset: 48225},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1331, col: 26, offset: 48225},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1331, col: 26, offset: 48225},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1331, col: 32, offset: 48231},
								expr: &ruleRefExpr{
									pos:  position{line: 1331, col: 33, offset: 48232},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1331, col: 51, offset: 48250},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1331, col: 56, offset: 48255},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1331, col: 66, offset: 48265},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1331, col: 97, offset: 48296},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1335, col: 1, offset: 48430},
			expr: &seqExpr{
				pos: position{line: 1335, col: 34, offset: 48463},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1335, col: 34, offset: 48463},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1335, col: 63, offset: 48492},
						expr: &seqExpr{
							pos: position{line: 1335, col: 64, offset: 48493},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1335, col: 64, offset: 48493},
									expr: &litMatcher{
										pos:        position{line: 1335, col: 66, offset: 48495},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1335, col: 73, offset: 48502},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1335, col: 73, offset: 48502},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1335, col: 81, offset: 48510},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1337, col: 1, offset: 48577},
			expr: &choiceExpr{
				pos: position{line: 1337, col: 33, offset: 48609},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1337, col: 33, offset: 48609},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 48624},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1339, col: 11, offset: 48656},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1339, col: 11, offset: 48656},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1339, col: 19, offset: 48664},
								expr: &ruleRefExpr{
									pos:  position{line: 1339, col: 20, offset: 48665},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 48683},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 48706},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 48725},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 48746},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 11, offset: 48770},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 11, offset: 48794},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 48820},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 48849},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1349, col: 1, offset: 48889},
			expr: &choiceExpr{
				pos: position{line: 1350, col: 5, offset: 48935},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1350, col: 5, offset: 48935},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1351, col: 7, offset: 49034},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1351, col: 7, offset: 49034},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1351, col: 7, offset: 49034},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1351, col: 12, offset: 49039},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1355, col: 1, offset: 49204},
			expr: &choiceExpr{
				pos: position{line: 1355, col: 26, offset: 49229},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1355, col: 26, offset: 49229},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1355, col: 26, offset: 49229},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1355, col: 26, offset: 49229},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1355, col: 32, offset: 49235},
										expr: &ruleRefExpr{
											pos:  position{line: 1355, col: 33, offset: 49236},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1355, col: 52, offset: 49255},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1355, col: 52, offset: 49255},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1355, col: 56, offset: 49259},
											expr: &litMatcher{
												pos:        position{line: 1355, col: 57, offset: 49260},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1355, col: 62, offset: 49265},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1355, col: 72, offset: 49275},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1355, col: 103, offset: 49306},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1357, col: 5, offset: 49496},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1357, col: 5, offset: 49496},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1357, col: 5, offset: 49496},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1357, col: 11, offset: 49502},
										expr: &ruleRefExpr{
											pos:  position{line: 1357, col: 12, offset: 49503},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 30, offset: 49521},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 34, offset: 49525},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1357, col: 44, offset: 49535},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1357, col: 44, offset: 49535},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1357, col: 48, offset: 49539},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 79, offset: 49570},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1361, col: 1, offset: 49779},
			expr: &seqExpr{
				pos: position{line: 1361, col: 34, offset: 49812},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1361, col: 34, offset: 49812},
						expr: &ruleRefExpr{
							pos:  position{line: 1361, col: 35, offset: 49813},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1361, col: 41, offset: 49819},
						expr: &ruleRefExpr{
							pos:  position{line: 1361, col: 41, offset: 49819},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1363, col: 1, offset: 49850},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 33, offset: 49882},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1363, col: 33, offset: 49882},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 11, offset: 49897},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1365, col: 11, offset: 49929},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1365, col: 11, offset: 49929},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1365, col: 19, offset: 49937},
								expr: &ruleRefExpr{
									pos:  position{line: 1365, col: 20, offset: 49938},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 49956},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1367, col: 11, offset: 49979},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1367, col: 11, offset: 49979},
								expr: &ruleRefExpr{
									pos:  position{line: 1367, col: 11, offset: 49979},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1367, col: 18, offset: 49986},
								expr: &seqExpr{
									pos: position{line: 1367, col: 19, offset: 49987},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1367, col: 19, offset: 49987},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1367, col: 23, offset: 49991},
											expr: &litMatcher{
												pos:        position{line: 1367, col: 24, offset: 49992},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 50008},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 50027},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 50048},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 50072},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 50096},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 50122},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 50151},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1376, col: 1, offset: 50191},
			expr: &choiceExpr{
				pos: position{line: 1377, col: 5, offset: 50237},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1377, col: 5, offset: 50237},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1378, col: 7, offset: 50334},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1378, col: 7, offset: 50334},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1378, col: 7, offset: 50334},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1378, col: 11, offset: 50338},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1382, col: 1, offset: 50501},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 5, offset: 50526},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1383, col: 5, offset: 50526},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1383, col: 5, offset: 50526},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1383, col: 5, offset: 50526},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1383, col: 18, offset: 50539},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1383, col: 40, offset: 50561},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1383, col: 45, offset: 50566},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1383, col: 55, offset: 50576},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1383, col: 86, offset: 50607},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1385, col: 9, offset: 50764},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1385, col: 9, offset: 50764},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1385, col: 9, offset: 50764},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1385, col: 22, offset: 50777},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1385, col: 44, offset: 50799},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1385, col: 49, offset: 50804},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1385, col: 59, offset: 50814},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1385, col: 90, offset: 50845},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1388, col: 9, offset: 51045},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1388, col: 9, offset: 51045},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1388, col: 9, offset: 51045},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1388, col: 22, offset: 51058},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1388, col: 44, offset: 51080},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1388, col: 48, offset: 51084},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1388, col: 58, offset: 51094},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1388, col: 89, offset: 51125},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1393, col: 1, offset: 51275},
			expr: &actionExpr{
				pos: position{line: 1393, col: 18, offset: 51292},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1393, col: 18, offset: 51292},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1393, col: 18, offset: 51292},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1393, col: 24, offset: 51298},
								expr: &ruleRefExpr{
									pos:  position{line: 1393, col: 25, offset: 51299},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1393, col: 43, offset: 51317},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1393, col: 47, offset: 51321},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1393, col: 56, offset: 51330},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1393, col: 78, offset: 51352},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1397, col: 1, offset: 51448},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 25, offset: 51472},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1397, col: 25, offset: 51472},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 38, offset: 51485},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1399, col: 1, offset: 51504},
			expr: &actionExpr{
				pos: position{line: 1399, col: 21, offset: 51524},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1399, col: 21, offset: 51524},
					expr: &charClassMatcher{
						pos:        position{line: 1399, col: 21, offset: 51524},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1403, col: 1, offset: 51601},
			expr: &actionExpr{
				pos: position{line: 1403, col: 25, offset: 51625},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1403, col: 25, offset: 51625},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1403, col: 25, offset: 51625},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1403, col: 38, offset: 51638},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1403, col: 60, offset: 51660},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1403, col: 64, offset: 51664},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1403, col: 73, offset: 51673},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1403, col: 95, offset: 51695},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1407, col: 1, offset: 51824},
			expr: &actionExpr{
				pos: position{line: 1407, col: 20, offset: 51843},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1407, col: 20, offset: 51843},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1407, col: 20, offset: 51843},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1407, col: 26, offset: 51849},
								expr: &ruleRefExpr{
									pos:  position{line: 1407, col: 27, offset: 51850},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1407, col: 45, offset: 51868},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1407, col: 49, offset: 51872},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1407, col: 58, offset: 51881},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1407, col: 82, offset: 51905},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1411, col: 1, offset: 52003},
			expr: &choiceExpr{
				pos: position{line: 1411, col: 27, offset: 52029},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1411, col: 27, offset: 52029},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1411, col: 40, offset: 52042},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1413, col: 1, offset: 52063},
			expr: &actionExpr{
				pos: position{line: 1413, col: 23, offset: 52085},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1413, col: 23, offset: 52085},
					expr: &charClassMatcher{
						pos:        position{line: 1413, col: 23, offset: 52085},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1417, col: 1, offset: 52162},
			expr: &actionExpr{
				pos: position{line: 1417, col: 27, offset: 52188},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 27, offset: 52188},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1417, col: 27, offset: 52188},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1417, col: 40, offset: 52201},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1417, col: 62, offset: 52223},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1417, col: 66, offset: 52227},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1417, col: 75, offset: 52236},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1417, col: 99, offset: 52260},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1424, col: 1, offset: 52502},
			expr: &choiceExpr{
				pos: position{line: 1424, col: 22, offset: 52523},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1424, col: 22, offset: 52523},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1424, col: 46, offset: 52547},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1424, col: 70, offset: 52571},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1426, col: 1, offset: 52589},
			expr: &litMatcher{
				pos:        position{line: 1426, col: 32, offset: 52620},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1428, col: 1, offset: 52625},
			expr: &actionExpr{
				pos: position{line: 1428, col: 26, offset: 52650},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1428, col: 26, offset: 52650},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1428, col: 26, offset: 52650},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1428, col: 54, offset: 52678},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1428, col: 63, offset: 52687},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1428, col: 93, offset: 52717},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1428, col: 121, offset: 52745},
							expr: &ruleRefExpr{
								pos:  position{line: 1428, col: 122, offset: 52746},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1432, col: 1, offset: 52851},
			expr: &choiceExpr{
				pos: position{line: 1432, col: 33, offset: 52883},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1432, col: 34, offset: 52884},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1432, col: 34, offset: 52884},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1432, col: 35, offset: 52885},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1432, col: 35, offset: 52885},
											expr: &ruleRefExpr{
												pos:  position{line: 1432, col: 36, offset: 52886},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1432, col: 64, offset: 52914},
											expr: &ruleRefExpr{
												pos:  position{line: 1432, col: 65, offset: 52915},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1432, col: 71, offset: 52921},
											expr: &ruleRefExpr{
												pos:  position{line: 1432, col: 72, offset: 52922},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1432, col: 80, offset: 52930,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1432, col: 83, offset: 52933},
									expr: &seqExpr{
										pos: position{line: 1432, col: 84, offset: 52934},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1432, col: 84, offset: 52934},
												expr: &seqExpr{
													pos: position{line: 1432, col: 86, offset: 52936},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1432, col: 86, offset: 52936},
															expr: &ruleRefExpr{
																pos:  position{line: 1432, col: 86, offset: 52936},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1432, col: 93, offset: 52943},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1432, col: 122, offset: 52972},
												expr: &ruleRefExpr{
													pos:  position{line: 1432, col: 123, offset: 52973},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1432, col: 151, offset: 53001},
												expr: &ruleRefExpr{
													pos:  position{line: 1432, col: 152, offset: 53002},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1432, col: 160, offset: 53010,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1434, col: 7, offset: 53152},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1434, col: 8, offset: 53153},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1434, col: 8, offset: 53153},
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 9, offset: 53154},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1434, col: 15, offset: 53160},
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 16, offset: 53161},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1434, col: 24, offset: 53169},
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 25, offset: 53170},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1434, col: 53, offset: 53198,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1438, col: 1, offset: 53280},
			expr: &litMatcher{
				pos:        position{line: 1438, col: 32, offset: 53311},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1440, col: 1, offset: 53318},
			expr: &actionExpr{
				pos: position{line: 1440, col: 26, offset: 53343},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1440, col: 26, offset: 53343},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1440, col: 26, offset: 53343},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1440, col: 54, offset: 53371},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1440, col: 63, offset: 53380},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1440, col: 93, offset: 53410},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1440, col: 121, offset: 53438},
							expr: &ruleRefExpr{
								pos:  position{line: 1440, col: 122, offset: 53439},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1444, col: 1, offset: 53544},
			expr: &choiceExpr{
				pos: position{line: 1444, col: 33, offset: 53576},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1444, col: 34, offset: 53577},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1444, col: 34, offset: 53577},
							expr: &seqExpr{
								pos: position{line: 1444, col: 35, offset: 53578},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1444, col: 35, offset: 53578},
										expr: &ruleRefExpr{
											pos:  position{line: 1444, col: 36, offset: 53579},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1444, col: 64, offset: 53607,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1446, col: 7, offset: 53772},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1446, col: 7, offset: 53772},
							expr: &seqExpr{
								pos: position{line: 1446, col: 8, offset: 53773},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1446, col: 8, offset: 53773},
										expr: &ruleRefExpr{
											pos:  position{line: 1446, col: 9, offset: 53774},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1446, col: 15, offset: 53780},
										expr: &ruleRefExpr{
											pos:  position{line: 1446, col: 16, offset: 53781},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1446, col: 24, offset: 53789},
										expr: &ruleRefExpr{
											pos:  position{line: 1446, col: 25, offset: 53790},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1446, col: 53, offset: 53818,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1450, col: 1, offset: 53901},
			expr: &choiceExpr{
				pos: position{line: 1450, col: 21, offset: 53921},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1450, col: 21, offset: 53921},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1450, col: 21, offset: 53921},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1450, col: 21, offset: 53921},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1450, col: 30, offset: 53930},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1450, col: 38, offset: 53938},
										expr: &ruleRefExpr{
											pos:  position{line: 1450, col: 39, offset: 53939},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1450, col: 67, offset: 53967},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1452, col: 5, offset: 54063},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1452, col: 5, offset: 54063},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1452, col: 5, offset: 54063},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1452, col: 15, offset: 54073},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1452, col: 23, offset: 54081},
										expr: &choiceExpr{
											pos: position{line: 1452, col: 24, offset: 54082},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1452, col: 24, offset: 54082},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1452, col: 37, offset: 54095},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1452, col: 65, offset: 54123},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1456, col: 1, offset: 54219},
			expr: &actionExpr{
				pos: position{line: 1456, col: 30, offset: 54248},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1456, col: 30, offset: 54248},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1463, col: 1, offset: 54421},
			expr: &choiceExpr{
				pos: position{line: 1463, col: 19, offset: 54439},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1463, col: 19, offset: 54439},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1463, col: 44, offset: 54464},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1465, col: 1, offset: 54489},
			expr: &choiceExpr{
				pos: position{line: 1465, col: 27, offset: 54515},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1465, col: 27, offset: 54515},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1465, col: 27, offset: 54515},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1465, col: 27, offset: 54515},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1465, col: 32, offset: 54520},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 36, offset: 54524},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1465, col: 40, offset: 54528},
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 40, offset: 54528},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1465, col: 47, offset: 54535},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1465, col: 51, offset: 54539},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 58, offset: 54546},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1465, col: 79, offset: 54567},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1467, col: 5, offset: 54650},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1467, col: 5, offset: 54650},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1467, col: 5, offset: 54650},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1467, col: 10, offset: 54655},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1467, col: 14, offset: 54659},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1467, col: 18, offset: 54663},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1471, col: 1, offset: 54735},
			expr: &actionExpr{
				pos: position{line: 1471, col: 27, offset: 54761},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1471, col: 27, offset: 54761},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1471, col: 27, offset: 54761},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 35, offset: 54769},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1471, col: 40, offset: 54774},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 54, offset: 54788},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1471, col: 72, offset: 54806},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1475, col: 1, offset: 54929},
			expr: &ruleRefExpr{
				pos:  position{line: 1475, col: 24, offset: 54952},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1480, col: 1, offset: 55074},
			expr: &choiceExpr{
				pos: position{line: 1480, col: 9, offset: 55082},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1480, col: 9, offset: 55082},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 24, offset: 55097},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1483, col: 1, offset: 55178},
			expr: &actionExpr{
				pos: position{line: 1483, col: 17, offset: 55194},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1483, col: 17, offset: 55194},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1483, col: 17, offset: 55194},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1483, col: 25, offset: 55202},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1483, col: 30, offset: 55207},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1483, col: 40, offset: 55217},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1483, col: 58, offset: 55235},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1487, col: 1, offset: 55346},
			expr: &actionExpr{
				pos: position{line: 1487, col: 17, offset: 55362},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1487, col: 17, offset: 55362},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1487, col: 17, offset: 55362},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1487, col: 22, offset: 55367},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1487, col: 42, offset: 55387},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1487, col: 59, offset: 55404},
								expr: &ruleRefExpr{
									pos:  position{line: 1487, col: 60, offset: 55405},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1491, col: 1, offset: 55498},
			expr: &actionExpr{
				pos: position{line: 1491, col: 19, offset: 55516},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1491, col: 19, offset: 55516},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1491, col: 19, offset: 55516},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1491, col: 23, offset: 55520},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1491, col: 33, offset: 55530},
								expr: &ruleRefExpr{
									pos:  position{line: 1491, col: 34, offset: 55531},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1492, col: 5, offset: 55563},
							expr: &ruleRefExpr{
								pos:  position{line: 1492, col: 5, offset: 55563},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1492, col: 12, offset: 55570},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1492, col: 23, offset: 55581},
								expr: &ruleRefExpr{
									pos:  position{line: 1492, col: 24, offset: 55582},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1492, col: 43, offset: 55601},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1496, col: 1, offset: 55718},
			expr: &actionExpr{
				pos: position{line: 1496, col: 30, offset: 55747},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1496, col: 30, offset: 55747},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1498, col: 5, offset: 55798},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1498, col: 6, offset: 55799},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1498, col: 6, offset: 55799},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1498, col: 6, offset: 55799},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1498, col: 11, offset: 55804},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1498, col: 20, offset: 55813},
												expr: &choiceExpr{
													pos: position{line: 1498, col: 21, offset: 55814},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1498, col: 21, offset: 55814},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1498, col: 36, offset: 55829},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1498, col: 49, offset: 55842},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1498, col: 70, offset: 55863},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1498, col: 92, offset: 55885},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1498, col: 97, offset: 55890},
											expr: &notExpr{
												pos: position{line: 1498, col: 99, offset: 55892},
												expr: &litMatcher{
													pos:        position{line: 1498, col: 100, offset: 55893},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1498, col: 105, offset: 55898},
											expr: &litMatcher{
												pos:        position{line: 1498, col: 105, offset: 55898},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1502, col: 6, offset: 56025},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1502, col: 6, offset: 56025},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1502, col: 6, offset: 56025},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1502, col: 15, offset: 56034},
												expr: &choiceExpr{
													pos: position{line: 1502, col: 16, offset: 56035},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1502, col: 16, offset: 56035},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1502, col: 31, offset: 56050},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1502, col: 44, offset: 56063},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1502, col: 65, offset: 56084},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1502, col: 89, offset: 56108},
											expr: &notExpr{
												pos: position{line: 1502, col: 91, offset: 56110},
												expr: &litMatcher{
													pos:        position{line: 1502, col: 92, offset: 56111},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1502, col: 97, offset: 56116},
											expr: &litMatcher{
												pos:        position{line: 1502, col: 97, offset: 56116},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1508, col: 1, offset: 56230},
			expr: &actionExpr{
				pos: position{line: 1508, col: 18, offset: 56247},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1508, col: 18, offset: 56247},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1512, col: 1, offset: 56333},
			expr: &actionExpr{
				pos: position{line: 1512, col: 24, offset: 56356},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1512, col: 24, offset: 56356},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1516, col: 1, offset: 56449},
			expr: &actionExpr{
				pos: position{line: 1516, col: 26, offset: 56474},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1516, col: 26, offset: 56474},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1520, col: 1, offset: 56560},
			expr: &choiceExpr{
				pos: position{line: 1520, col: 17, offset: 56576},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1520, col: 17, offset: 56576},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1520, col: 40, offset: 56599},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1523, col: 1, offset: 56727},
			expr: &actionExpr{
				pos: position{line: 1523, col: 25, offset: 56751},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1523, col: 25, offset: 56751},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1523, col: 25, offset: 56751},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1523, col: 33, offset: 56759},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1523, col: 38, offset: 56764},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1523, col: 38, offset: 56764},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1523, col: 57, offset: 56783},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1523, col: 79, offset: 56805},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1523, col: 97, offset: 56823},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1527, col: 1, offset: 56934},
			expr: &actionExpr{
				pos: position{line: 1527, col: 25, offset: 56958},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1527, col: 25, offset: 56958},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1527, col: 25, offset: 56958},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1527, col: 30, offset: 56963},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1527, col: 48, offset: 56981},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1527, col: 65, offset: 56998},
								expr: &ruleRefExpr{
									pos:  position{line: 1527, col: 66, offset: 56999},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1534, col: 1, offset: 57194},
			expr: &actionExpr{
				pos: position{line: 1534, col: 15, offset: 57208},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1534, col: 15, offset: 57208},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1534, col: 15, offset: 57208},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1534, col: 26, offset: 57219},
								expr: &ruleRefExpr{
									pos:  position{line: 1534, col: 27, offset: 57220},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1534, col: 45, offset: 57238},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1534, col: 55, offset: 57248},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1534, col: 61, offset: 57254},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1534, col: 71, offset: 57264},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1534, col: 84, offset: 57277},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1534, col: 102, offset: 57295},
							expr: &ruleRefExpr{
								pos:  position{line: 1534, col: 102, offset: 57295},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1534, col: 109, offset: 57302},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1539, col: 1, offset: 57512},
			expr: &actionExpr{
				pos: position{line: 1539, col: 16, offset: 57527},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1539, col: 16, offset: 57527},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1539, col: 16, offset: 57527},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1539, col: 25, offset: 57536},
							expr: &litMatcher{
								pos:        position{line: 1539, col: 26, offset: 57537},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1539, col: 30, offset: 57541},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1539, col: 36, offset: 57547},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1539, col: 46, offset: 57557},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1539, col: 59, offset: 57570},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1543, col: 1, offset: 57708},
			expr: &actionExpr{
				pos: position{line: 1543, col: 21, offset: 57728},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1543, col: 21, offset: 57728},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1543, col: 21, offset: 57728},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1543, col: 25, offset: 57732},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1543, col: 29, offset: 57736},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1543, col: 44, offset: 57751},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1543, col: 46, offset: 57753},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1543, col: 57, offset: 57764},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1543, col: 59, offset: 57766},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1543, col: 71, offset: 57778},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1543, col: 74, offset: 57781},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1543, col: 85, offset: 57792},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1547, col: 1, offset: 57854},
			expr: &choiceExpr{
				pos: position{line: 1547, col: 20, offset: 57873},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1547, col: 20, offset: 57873},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1547, col: 36, offset: 57889},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1547, col: 51, offset: 57904},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1549, col: 1, offset: 57915},
			expr: &actionExpr{
				pos: position{line: 1549, col: 18, offset: 57932},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1549, col: 18, offset: 57932},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1549, col: 18, offset: 57932},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1549, col: 22, offset: 57936},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1549, col: 29, offset: 57943},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1549, col: 29, offset: 57943},
										expr: &ruleRefExpr{
											pos:  position{line: 1549, col: 29, offset: 57943},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1549, col: 43, offset: 57957},
										expr: &ruleRefExpr{
											pos:  position{line: 1549, col: 43, offset: 57957},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1549, col: 58, offset: 57972},
										expr: &ruleRefExpr{
											pos:  position{line: 1549, col: 58, offset: 57972},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1549, col: 74, offset: 57988},
										expr: &ruleRefExpr{
											pos:  position{line: 1549, col: 74, offset: 57988},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1549, col: 91, offset: 58005},
										expr: &ruleRefExpr{
											pos:  position{line: 1549, col: 91, offset: 58005},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1549, col: 103, offset: 58017},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1549, col: 107, offset: 58021},
							expr: &ruleRefExpr{
								pos:  position{line: 1549, col: 107, offset: 58021},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1549, col: 114, offset: 58028},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1553, col: 1, offset: 58082},
			expr: &actionExpr{
				pos: position{line: 1553, col: 19, offset: 58100},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1553, col: 19, offset: 58100},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1553, col: 25, offset: 58106},
						expr: &ruleRefExpr{
							pos:  position{line: 1553, col: 25, offset: 58106},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1557, col: 1, offset: 58185},
			expr: &actionExpr{
				pos: position{line: 1557, col: 15, offset: 58199},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1557, col: 15, offset: 58199},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1557, col: 15, offset: 58199},
							expr: &litMatcher{
								pos:        position{line: 1557, col: 15, offset: 58199},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1557, col: 20, offset: 58204},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1557, col: 26, offset: 58210},
								expr: &ruleRefExpr{
									pos:  position{line: 1557, col: 26, offset: 58210},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1561, col: 1, offset: 58286},
			expr: &actionExpr{
				pos: position{line: 1561, col: 16, offset: 58301},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1561, col: 16, offset: 58301},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1561, col: 16, offset: 58301},
							expr: &litMatcher{
								pos:        position{line: 1561, col: 16, offset: 58301},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1561, col: 21, offset: 58306},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1561, col: 27, offset: 58312},
								expr: &ruleRefExpr{
									pos:  position{line: 1561, col: 27, offset: 58312},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1565, col: 1, offset: 58394},
			expr: &actionExpr{
				pos: position{line: 1565, col: 17, offset: 58410},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1565, col: 17, offset: 58410},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1565, col: 17, offset: 58410},
							expr: &ruleRefExpr{
								pos:  position{line: 1565, col: 17, offset: 58410},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1565, col: 24, offset: 58417},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1565, col: 30, offset: 58423},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1565, col: 46, offset: 58439},
							expr: &ruleRefExpr{
								pos:  position{line: 1565, col: 46, offset: 58439},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1569, col: 1, offset: 58515},
			expr: &actionExpr{
				pos: position{line: 1569, col: 19, offset: 58533},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1569, col: 19, offset: 58533},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1569, col: 19, offset: 58533},
							expr: &ruleRefExpr{
								pos:  position{line: 1569, col: 19, offset: 58533},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1569, col: 26, offset: 58540},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1569, col: 30, offset: 58544},
							expr: &ruleRefExpr{
								pos:  position{line: 1569, col: 30, offset: 58544},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1569, col: 37, offset: 58551},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1569, col: 43, offset: 58557},
								expr: &ruleRefExpr{
									pos:  position{line: 1569, col: 43, offset: 58557},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1576, col: 1, offset: 58692},
			expr: &actionExpr{
				pos: position{line: 1576, col: 20, offset: 58711},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1576, col: 20, offset: 58711},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1576, col: 20, offset: 58711},
							expr: &ruleRefExpr{
								pos:  position{line: 1576, col: 20, offset: 58711},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1576, col: 27, offset: 58718},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1576, col: 31, offset: 58722},
							expr: &ruleRefExpr{
								pos:  position{line: 1576, col: 31, offset: 58722},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1576, col: 38, offset: 58729},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1576, col: 44, offset: 58735},
								expr: &ruleRefExpr{
									pos:  position{line: 1576, col: 44, offset: 58735},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1587, col: 1, offset: 59069},
			expr: &actionExpr{
				pos: position{line: 1587, col: 15, offset: 59083},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1587, col: 15, offset: 59083},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1587, col: 15, offset: 59083},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1587, col: 23, offset: 59091},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1587, col: 29, offset: 59097},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1587, col: 29, offset: 59097},
									expr: &charClassMatcher{
										pos:        position{line: 1587, col: 29, offset: 59097},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1587, col: 73, offset: 59141},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1587, col: 80, offset: 59148},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1591, col: 1, offset: 59230},
			expr: &actionExpr{
				pos: position{line: 1591, col: 14, offset: 59243},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1591, col: 14, offset: 59243},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1591, col: 14, offset: 59243},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 18, offset: 59247},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1591, col: 23, offset: 59252},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 32, offset: 59261},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1591, col: 35, offset: 59264},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1591, col: 46, offset: 59275},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1595, col: 1, offset: 59332},
			expr: &actionExpr{
				pos: position{line: 1595, col: 13, offset: 59344},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1595, col: 13, offset: 59344},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1595, col: 19, offset: 59350},
						expr: &ruleRefExpr{
							pos:  position{line: 1595, col: 19, offset: 59350},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1602, col: 1, offset: 59626},
			expr: &choiceExpr{
				pos: position{line: 1602, col: 19, offset: 59644},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1602, col: 19, offset: 59644},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1602, col: 19, offset: 59644},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1602, col: 19, offset: 59644},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1602, col: 32, offset: 59657},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1602, col: 41, offset: 59666},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1602, col: 58, offset: 59683},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1604, col: 5, offset: 59751},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1604, col: 5, offset: 59751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1604, col: 5, offset: 59751},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1604, col: 17, offset: 59763},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1604, col: 22, offset: 59768},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1604, col: 35, offset: 59781},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1604, col: 39, offset: 59785},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1604, col: 47, offset: 59793},
										expr: &ruleRefExpr{
											pos:  position{line: 1604, col: 48, offset: 59794},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1604, col: 66, offset: 59812},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1608, col: 1, offset: 59873},
			expr: &ruleRefExpr{
				pos:  position{line: 1608, col: 16, offset: 59888},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1610, col: 1, offset: 59899},
			expr: &actionExpr{
				pos: position{line: 1610, col: 20, offset: 59918},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1610, col: 20, offset: 59918},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1610, col: 29, offset: 59927},
						expr: &seqExpr{
							pos: position{line: 1610, col: 30, offset: 59928},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1610, col: 30, offset: 59928},
									expr: &litMatcher{
										pos:        position{line: 1610, col: 31, offset: 59929},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1610, col: 35, offset: 59933},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1618, col: 1, offset: 60249},
			expr: &actionExpr{
				pos: position{line: 1618, col: 12, offset: 60260},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1618, col: 12, offset: 60260},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1618, col: 12, offset: 60260},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1618, col: 16, offset: 60264},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1618, col: 21, offset: 60269},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1618, col: 21, offset: 60269},
									expr: &charClassMatcher{
										pos:        position{line: 1618, col: 21, offset: 60269},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1618, col: 69, offset: 60317},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1618, col: 73, offset: 60321},
							expr: &ruleRefExpr{
								pos:  position{line: 1618, col: 73, offset: 60321},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1618, col: 80, offset: 60328},
							expr: &choiceExpr{
								pos: position{line: 1618, col: 82, offset: 60330},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1618, col: 82, offset: 60330},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1618, col: 88, offset: 60336},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1622, col: 1, offset: 60389},
			expr: &actionExpr{
				pos: position{line: 1622, col: 20, offset: 60408},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1622, col: 20, offset: 60408},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1622, col: 20, offset: 60408},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1622, col: 25, offset: 60413},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1622, col: 48, offset: 60436},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1622, col: 61, offset: 60449},
								expr: &ruleRefExpr{
									pos:  position{line: 1622, col: 61, offset: 60449},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1626, col: 1, offset: 60546},
			expr: &actionExpr{
				pos: position{line: 1626, col: 26, offset: 60571},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1626, col: 26, offset: 60571},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1626, col: 26, offset: 60571},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1626, col: 30, offset: 60575},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1626, col: 35, offset: 60580},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1626, col: 35, offset: 60580},
									expr: &charClassMatcher{
										pos:        position{line: 1626, col: 35, offset: 60580},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1626, col: 83, offset: 60628},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1626, col: 87, offset: 60632},
							expr: &ruleRefExpr{
								pos:  position{line: 1626, col: 87, offset: 60632},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1635, col: 1, offset: 60879},
			expr: &actionExpr{
				pos: position{line: 1635, col: 18, offset: 60896},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1635, col: 18, offset: 60896},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1635, col: 19, offset: 60897},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1635, col: 19, offset: 60897},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1635, col: 27, offset: 60905},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1635, col: 37, offset: 60915},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1635, col: 45, offset: 60923},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1635, col: 55, offset: 60933},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1635, col: 63, offset: 60941},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1635, col: 72, offset: 60950},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1645, col: 1, offset: 61200},
			expr: &actionExpr{
				pos: position{line: 1645, col: 19, offset: 61218},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1645, col: 19, offset: 61218},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1645, col: 19, offset: 61218},
							expr: &ruleRefExpr{
								pos:  position{line: 1645, col: 20, offset: 61219},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1646, col: 5, offset: 61307},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1646, col: 12, offset: 61314},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1646, col: 12, offset: 61314},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1647, col: 11, offset: 61337},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1648, col: 11, offset: 61361},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1649, col: 11, offset: 61385},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1650, col: 11, offset: 61406},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1651, col: 11, offset: 61427},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1652, col: 11, offset: 61450},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1653, col: 11, offset: 61477},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1657, col: 1, offset: 61518},
			expr: &choiceExpr{
				pos: position{line: 1657, col: 19, offset: 61536},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1657, col: 19, offset: 61536},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1657, col: 19, offset: 61536},
								expr: &ruleRefExpr{
									pos:  position{line: 1657, col: 21, offset: 61538},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1657, col: 31, offset: 61548},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1658, col: 19, offset: 61619},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1659, col: 19, offset: 61659},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1660, col: 19, offset: 61700},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1661, col: 19, offset: 61741},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1662, col: 19, offset: 61782},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1663, col: 19, offset: 61820},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1664, col: 19, offset: 61860},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1669, col: 1, offset: 62083},
			expr: &actionExpr{
				pos: position{line: 1669, col: 17, offset: 62099},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1669, col: 17, offset: 62099},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1669, col: 17, offset: 62099},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1669, col: 28, offset: 62110},
								expr: &ruleRefExpr{
									pos:  position{line: 1669, col: 29, offset: 62111},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1669, col: 42, offset: 62124},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1669, col: 69, offset: 62151},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1669, col: 77, offset: 62159},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1669, col: 101, offset: 62183},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1673, col: 1, offset: 62282},
			expr: &seqExpr{
				pos: position{line: 1673, col: 26, offset: 62307},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1673, col: 26, offset: 62307},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1673, col: 33, offset: 62314},
						expr: &ruleRefExpr{
							pos:  position{line: 1673, col: 33, offset: 62314},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1673, col: 40, offset: 62321},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1675, col: 1, offset: 62326},
			expr: &seqExpr{
				pos: position{line: 1675, col: 31, offset: 62356},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1675, col: 31, offset: 62356},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1675, col: 38, offset: 62363},
						expr: &ruleRefExpr{
							pos:  position{line: 1675, col: 38, offset: 62363},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1675, col: 45, offset: 62370},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1677, col: 1, offset: 62375},
			expr: &choiceExpr{
				pos: position{line: 1677, col: 29, offset: 62403},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1677, col: 30, offset: 62404},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1677, col: 30, offset: 62404},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1677, col: 37, offset: 62411},
								expr: &ruleRefExpr{
									pos:  position{line: 1677, col: 37, offset: 62411},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1677, col: 44, offset: 62418},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1677, col: 51, offset: 62425},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1679, col: 1, offset: 62430},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1679, col: 27, offset: 62456},
				expr: &actionExpr{
					pos: position{line: 1680, col: 8, offset: 62465},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1680, col: 8, offset: 62465},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1680, col: 8, offset: 62465},
								expr: &ruleRefExpr{
									pos:  position{line: 1680, col: 9, offset: 62466},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1681, col: 8, offset: 62499},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1681, col: 17, offset: 62508},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1681, col: 17, offset: 62508},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1682, col: 15, offset: 62533},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1683, col: 15, offset: 62558},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1684, col: 15, offset: 62586},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1685, col: 15, offset: 62617},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1686, col: 15, offset: 62650},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1687, col: 15, offset: 62681},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1688, col: 15, offset: 62720},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1689, col: 15, offset: 62747},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1690, col: 15, offset: 62775},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1691, col: 15, offset: 62800},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1692, col: 15, offset: 62825},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1693, col: 15, offset: 62852},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1694, col: 15, offset: 62884},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1695, col: 15, offset: 62915},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1696, col: 15, offset: 62935},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1697, col: 15, offset: 62962},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1698, col: 15, offset: 62990},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1699, col: 15, offset: 63017},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1706, col: 1, offset: 63273},
			expr: &actionExpr{
				pos: position{line: 1706, col: 15, offset: 63287},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1706, col: 15, offset: 63287},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1706, col: 15, offset: 63287},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1706, col: 26, offset: 63298},
								expr: &ruleRefExpr{
									pos:  position{line: 1706, col: 27, offset: 63299},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1707, col: 5, offset: 63317},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1718, col: 5, offset: 63665},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1718, col: 30, offset: 63690},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1718, col: 39, offset: 63699},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1718, col: 61, offset: 63721},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1722, col: 1, offset: 63825},
			expr: &seqExpr{
				pos: position{line: 1722, col: 24, offset: 63848},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1722, col: 24, offset: 63848},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1722, col: 31, offset: 63855},
						expr: &ruleRefExpr{
							pos:  position{line: 1722, col: 31, offset: 63855},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1722, col: 38, offset: 63862},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1724, col: 1, offset: 63892},
			expr: &seqExpr{
				pos: position{line: 1724, col: 29, offset: 63920},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1724, col: 29, offset: 63920},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1724, col: 36, offset: 63927},
						expr: &ruleRefExpr{
							pos:  position{line: 1724, col: 36, offset: 63927},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1724, col: 43, offset: 63934},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1726, col: 1, offset: 63964},
			expr: &choiceExpr{
				pos: position{line: 1726, col: 27, offset: 63990},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1726, col: 28, offset: 63991},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1726, col: 28, offset: 63991},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1726, col: 35, offset: 63998},
								expr: &ruleRefExpr{
									pos:  position{line: 1726, col: 35, offset: 63998},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1726, col: 42, offset: 64005},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1726, col: 49, offset: 64012},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1728, col: 1, offset: 64042},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1728, col: 25, offset: 64066},
				expr: &actionExpr{
					pos: position{line: 1729, col: 8, offset: 64075},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1729, col: 8, offset: 64075},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1729, col: 8, offset: 64075},
								expr: &ruleRefExpr{
									pos:  position{line: 1729, col: 9, offset: 64076},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1730, col: 8, offset: 64107},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1730, col: 17, offset: 64116},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1730, col: 17, offset: 64116},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1731, col: 15, offset: 64141},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1732, col: 15, offset: 64166},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1733, col: 15, offset: 64194},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1734, col: 15, offset: 64225},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1735, col: 15, offset: 64258},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1736, col: 15, offset: 64289},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1737, col: 15, offset: 64328},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1738, col: 15, offset: 64355},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1739, col: 15, offset: 64383},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1740, col: 15, offset: 64408},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1741, col: 15, offset: 64435},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1742, col: 15, offset: 64462},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1743, col: 15, offset: 64494},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1744, col: 15, offset: 64525},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1745, col: 15, offset: 64545},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1746, col: 15, offset: 64572},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1747, col: 15, offset: 64600},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1748, col: 15, offset: 64627},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1755, col: 1, offset: 64885},
			expr: &actionExpr{
				pos: position{line: 1755, col: 17, offset: 64901},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1755, col: 17, offset: 64901},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1755, col: 17, offset: 64901},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1755, col: 28, offset: 64912},
								expr: &ruleRefExpr{
									pos:  position{line: 1755, col: 29, offset: 64913},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1755, col: 42, offset: 64926},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1755, col: 69, offset: 64953},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1755, col: 78, offset: 64962},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1755, col: 102, offset: 64986},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1759, col: 1, offset: 65086},
			expr: &seqExpr{
				pos: position{line: 1759, col: 26, offset: 65111},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1759, col: 26, offset: 65111},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1759, col: 33, offset: 65118},
						expr: &ruleRefExpr{
							pos:  position{line: 1759, col: 33, offset: 65118},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1759, col: 40, offset: 65125},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1761, col: 1, offset: 65130},
			expr: &seqExpr{
				pos: position{line: 1761, col: 31, offset: 65160},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1761, col: 31, offset: 65160},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1761, col: 38, offset: 65167},
						expr: &ruleRefExpr{
							pos:  position{line: 1761, col: 38, offset: 65167},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1761, col: 45, offset: 65174},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1763, col: 1, offset: 65179},
			expr: &choiceExpr{
				pos: position{line: 1763, col: 29, offset: 65207},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1763, col: 30, offset: 65208},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1763, col: 30, offset: 65208},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1763, col: 37, offset: 65215},
								expr: &ruleRefExpr{
									pos:  position{line: 1763, col: 37, offset: 65215},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1763, col: 44, offset: 65222},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1763, col: 51, offset: 65229},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1765, col: 1, offset: 65234},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1765, col: 27, offset: 65260},
				expr: &actionExpr{
					pos: position{line: 1766, col: 8, offset: 65269},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1766, col: 8, offset: 65269},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1766, col: 8, offset: 65269},
								expr: &ruleRefExpr{
									pos:  position{line: 1766, col: 9, offset: 65270},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1767, col: 8, offset: 65303},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1767, col: 17, offset: 65312},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1767, col: 17, offset: 65312},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1768, col: 15, offset: 65337},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1769, col: 15, offset: 65362},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1770, col: 15, offset: 65390},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1771, col: 15, offset: 65421},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1772, col: 15, offset: 65454},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1773, col: 15, offset: 65485},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1774, col: 15, offset: 65524},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1775, col: 15, offset: 65551},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1776, col: 15, offset: 65578},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1777, col: 15, offset: 65604},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1778, col: 15, offset: 65631},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1779, col: 15, offset: 65656},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1780, col: 15, offset: 65688},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1781, col: 15, offset: 65719},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1782, col: 15, offset: 65739},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1783, col: 15, offset: 65766},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1784, col: 15, offset: 65794},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1785, col: 15, offset: 65821},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1792, col: 1, offset: 66078},
			expr: &actionExpr{
				pos: position{line: 1792, col: 16, offset: 66093},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1792, col: 16, offset: 66093},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1792, col: 16, offset: 66093},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1792, col: 27, offset: 66104},
								expr: &ruleRefExpr{
									pos:  position{line: 1792, col: 28, offset: 66105},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1792, col: 41, offset: 66118},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1792, col: 67, offset: 66144},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1792, col: 76, offset: 66153},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1792, col: 99, offset: 66176},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1796, col: 1, offset: 66274},
			expr: &seqExpr{
				pos: position{line: 1796, col: 25, offset: 66298},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1796, col: 25, offset: 66298},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1796, col: 31, offset: 66304},
						expr: &ruleRefExpr{
							pos:  position{line: 1796, col: 31, offset: 66304},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1796, col: 38, offset: 66311},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1798, col: 1, offset: 66371},
			expr: &seqExpr{
				pos: position{line: 1798, col: 30, offset: 66400},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1798, col: 30, offset: 66400},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1798, col: 36, offset: 66406},
						expr: &ruleRefExpr{
							pos:  position{line: 1798, col: 36, offset: 66406},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1798, col: 43, offset: 66413},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1800, col: 1, offset: 66418},
			expr: &choiceExpr{
				pos: position{line: 1800, col: 28, offset: 66445},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1800, col: 29, offset: 66446},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1800, col: 29, offset: 66446},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1800, col: 35, offset: 66452},
								expr: &ruleRefExpr{
									pos:  position{line: 1800, col: 35, offset: 66452},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1800, col: 42, offset: 66459},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1800, col: 49, offset: 66466},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1802, col: 1, offset: 66471},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1802, col: 26, offset: 66496},
				expr: &actionExpr{
					pos: position{line: 1802, col: 27, offset: 66497},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1802, col: 27, offset: 66497},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1802, col: 27, offset: 66497},
								expr: &ruleRefExpr{
									pos:  position{line: 1802, col: 28, offset: 66498},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1802, col: 52, offset: 66522},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1802, col: 58, offset: 66528},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1809, col: 1, offset: 66762},
			expr: &actionExpr{
				pos: position{line: 1809, col: 17, offset: 66778},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1809, col: 17, offset: 66778},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1809, col: 17, offset: 66778},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1809, col: 28, offset: 66789},
								expr: &ruleRefExpr{
									pos:  position{line: 1809, col: 29, offset: 66790},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1809, col: 42, offset: 66803},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1809, col: 69, offset: 66830},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1809, col: 78, offset: 66839},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1809, col: 102, offset: 66863},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1813, col: 1, offset: 66963},
			expr: &seqExpr{
				pos: position{line: 1813, col: 26, offset: 66988},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1813, col: 26, offset: 66988},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1813, col: 33, offset: 66995},
						expr: &ruleRefExpr{
							pos:  position{line: 1813, col: 33, offset: 66995},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1813, col: 40, offset: 67002},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1815, col: 1, offset: 67007},
			expr: &seqExpr{
				pos: position{line: 1815, col: 31, offset: 67037},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1815, col: 31, offset: 67037},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1815, col: 38, offset: 67044},
						expr: &ruleRefExpr{
							pos:  position{line: 1815, col: 38, offset: 67044},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1815, col: 45, offset: 67051},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1817, col: 1, offset: 67056},
			expr: &choiceExpr{
				pos: position{line: 1817, col: 29, offset: 67084},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1817, col: 30, offset: 67085},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1817, col: 30, offset: 67085},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1817, col: 37, offset: 67092},
								expr: &ruleRefExpr{
									pos:  position{line: 1817, col: 37, offset: 67092},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1817, col: 44, offset: 67099},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1817, col: 51, offset: 67106},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1819, col: 1, offset: 67111},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1819, col: 27, offset: 67137},
				expr: &actionExpr{
					pos: position{line: 1819, col: 28, offset: 67138},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1819, col: 28, offset: 67138},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1819, col: 28, offset: 67138},
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 29, offset: 67139},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1819, col: 54, offset: 67164},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 60, offset: 67170},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1826, col: 1, offset: 67402},
			expr: &actionExpr{
				pos: position{line: 1826, col: 15, offset: 67416},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1826, col: 15, offset: 67416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1826, col: 15, offset: 67416},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1826, col: 26, offset: 67427},
								expr: &ruleRefExpr{
									pos:  position{line: 1826, col: 27, offset: 67428},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1827, col: 5, offset: 67446},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1834, col: 5, offset: 67656},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1834, col: 30, offset: 67681},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1834, col: 39, offset: 67690},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1834, col: 61, offset: 67712},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1838, col: 1, offset: 67816},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1838, col: 25, offset: 67840},
				expr: &actionExpr{
					pos: position{line: 1838, col: 26, offset: 67841},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1838, col: 26, offset: 67841},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1838, col: 26, offset: 67841},
								expr: &ruleRefExpr{
									pos:  position{line: 1838, col: 27, offset: 67842},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1838, col: 50, offset: 67865},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1838, col: 56, offset: 67871},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1845, col: 1, offset: 68109},
			expr: &actionExpr{
				pos: position{line: 1845, col: 21, offset: 68129},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1845, col: 21, offset: 68129},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1845, col: 21, offset: 68129},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1845, col: 32, offset: 68140},
								expr: &ruleRefExpr{
									pos:  position{line: 1845, col: 33, offset: 68141},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1845, col: 46, offset: 68154},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1845, col: 77, offset: 68185},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1845, col: 86, offset: 68194},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1845, col: 114, offset: 68222},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1849, col: 1, offset: 68330},
			expr: &seqExpr{
				pos: position{line: 1849, col: 30, offset: 68359},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1849, col: 30, offset: 68359},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1849, col: 37, offset: 68366},
						expr: &ruleRefExpr{
							pos:  position{line: 1849, col: 37, offset: 68366},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1849, col: 44, offset: 68373},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1851, col: 1, offset: 68378},
			expr: &seqExpr{
				pos: position{line: 1851, col: 35, offset: 68412},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1851, col: 35, offset: 68412},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1851, col: 42, offset: 68419},
						expr: &ruleRefExpr{
							pos:  position{line: 1851, col: 42, offset: 68419},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1851, col: 49, offset: 68426},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1853, col: 1, offset: 68431},
			expr: &choiceExpr{
				pos: position{line: 1853, col: 33, offset: 68463},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1853, col: 34, offset: 68464},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1853, col: 34, offset: 68464},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1853, col: 41, offset: 68471},
								expr: &ruleRefExpr{
									pos:  position{line: 1853, col: 41, offset: 68471},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1853, col: 48, offset: 68478},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1853, col: 55, offset: 68485},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1855, col: 1, offset: 68490},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1855, col: 31, offset: 68520},
				expr: &actionExpr{
					pos: position{line: 1855, col: 32, offset: 68521},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1855, col: 32, offset: 68521},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1855, col: 32, offset: 68521},
								expr: &ruleRefExpr{
									pos:  position{line: 1855, col: 33, offset: 68522},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1855, col: 62, offset: 68551},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1855, col: 68, offset: 68557},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1862, col: 1, offset: 68791},
			expr: &seqExpr{
				pos: position{line: 1862, col: 26, offset: 68816},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1862, col: 26, offset: 68816},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1862, col: 33, offset: 68823},
						expr: &ruleRefExpr{
							pos:  position{line: 1862, col: 33, offset: 68823},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1862, col: 40, offset: 68830},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1864, col: 1, offset: 68835},
			expr: &seqExpr{
				pos: position{line: 1864, col: 31, offset: 68865},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1864, col: 31, offset: 68865},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1864, col: 38, offset: 68872},
						expr: &ruleRefExpr{
							pos:  position{line: 1864, col: 38, offset: 68872},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1864, col: 45, offset: 68879},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1866, col: 1, offset: 68884},
			expr: &choiceExpr{
				pos: position{line: 1866, col: 29, offset: 68912},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1866, col: 30, offset: 68913},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1866, col: 30, offset: 68913},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1866, col: 37, offset: 68920},
								expr: &ruleRefExpr{
									pos:  position{line: 1866, col: 37, offset: 68920},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1866, col: 44, offset: 68927},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1866, col: 51, offset: 68934},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1868, col: 1, offset: 68939},
			expr: &actionExpr{
				pos: position{line: 1868, col: 17, offset: 68955},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1868, col: 17, offset: 68955},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1868, col: 17, offset: 68955},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1868, col: 44, offset: 68982},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1868, col: 53, offset: 68991},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1868, col: 78, offset: 69016},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1872, col: 1, offset: 69109},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1872, col: 27, offset: 69135},
				expr: &actionExpr{
					pos: position{line: 1872, col: 28, offset: 69136},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1872, col: 28, offset: 69136},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1872, col: 28, offset: 69136},
								expr: &ruleRefExpr{
									pos:  position{line: 1872, col: 29, offset: 69137},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1872, col: 54, offset: 69162},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1872, col: 60, offset: 69168},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1876, col: 1, offset: 69206},
			expr: &actionExpr{
				pos: position{line: 1876, col: 22, offset: 69227},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1876, col: 22, offset: 69227},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1876, col: 22, offset: 69227},
							expr: &ruleRefExpr{
								pos:  position{line: 1876, col: 23, offset: 69228},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1876, col: 45, offset: 69250},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1876, col: 50, offset: 69255},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1876, col: 59, offset: 69264},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1876, col: 85, offset: 69290},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1880, col: 1, offset: 69355},
			expr: &actionExpr{
				pos: position{line: 1880, col: 29, offset: 69383},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1880, col: 29, offset: 69383},
					expr: &charClassMatcher{
						pos:        position{line: 1880, col: 29, offset: 69383},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1888, col: 1, offset: 69672},
			expr: &choiceExpr{
				pos: position{line: 1888, col: 17, offset: 69688},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1888, col: 17, offset: 69688},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1889, col: 19, offset: 69717},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1890, col: 19, offset: 69748},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1891, col: 19, offset: 69772},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1892, col: 19, offset: 69809},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1893, col: 19, offset: 69843},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1894, col: 19, offset: 69877},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1895, col: 19, offset: 69912},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1896, col: 19, offset: 69946},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1897, col: 19, offset: 69983},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1899, col: 1, offset: 69994},
			expr: &actionExpr{
				pos: position{line: 1899, col: 23, offset: 70016},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1899, col: 23, offset: 70016},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1899, col: 23, offset: 70016},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1899, col: 32, offset: 70025},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1899, col: 37, offset: 70030},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1899, col: 37, offset: 70030},
									expr: &charClassMatcher{
										pos:        position{line: 1899, col: 37, offset: 70030},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1899, col: 76, offset: 70069},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1904, col: 1, offset: 70221},
			expr: &seqExpr{
				pos: position{line: 1905, col: 5, offset: 70251},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1905, col: 5, offset: 70251},
						expr: &choiceExpr{
							pos: position{line: 1905, col: 6, offset: 70252},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1905, col: 6, offset: 70252},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1906, col: 11, offset: 70281},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1907, col: 11, offset: 70342},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1908, col: 11, offset: 70371},
									expr: &ruleRefExpr{
										pos:  position{line: 1908, col: 11, offset: 70371},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1909, col: 11, offset: 70389},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1910, col: 11, offset: 70407},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1910, col: 21, offset: 70417},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1913, col: 1, offset: 70538},
			expr: &seqExpr{
				pos: position{line: 1914, col: 5, offset: 70567},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1914, col: 5, offset: 70567},
						expr: &choiceExpr{
							pos: position{line: 1914, col: 6, offset: 70568},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1914, col: 6, offset: 70568},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1915, col: 11, offset: 70629},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1916, col: 11, offset: 70656},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1917, col: 11, offset: 70685},
									expr: &ruleRefExpr{
										pos:  position{line: 1917, col: 11, offset: 70685},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1918, col: 11, offset: 70702},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1919, col: 11, offset: 70720},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1919, col: 21, offset: 70730},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1922, col: 1, offset: 70784},
			expr: &seqExpr{
				pos: position{line: 1923, col: 5, offset: 70807},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1923, col: 5, offset: 70807},
						expr: &choiceExpr{
							pos: position{line: 1923, col: 6, offset: 70808},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1923, col: 6, offset: 70808},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1924, col: 11, offset: 70869},
									expr: &ruleRefExpr{
										pos:  position{line: 1924, col: 11, offset: 70869},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1925, col: 11, offset: 70887},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1926, col: 11, offset: 70909},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1927, col: 11, offset: 70932},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1928, col: 11, offset: 70961},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1929, col: 11, offset: 70979},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1929, col: 21, offset: 70989},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1932, col: 1, offset: 71047},
			expr: &seqExpr{
				pos: position{line: 1933, col: 5, offset: 71069},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1933, col: 5, offset: 71069},
						expr: &choiceExpr{
							pos: position{line: 1933, col: 6, offset: 71070},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1933, col: 6, offset: 71070},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1934, col: 11, offset: 71131},
									expr: &ruleRefExpr{
										pos:  position{line: 1934, col: 11, offset: 71131},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1935, col: 11, offset: 71149},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1936, col: 11, offset: 71181},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1937, col: 11, offset: 71210},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1938, col: 11, offset: 71228},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1938, col: 21, offset: 71238},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1941, col: 1, offset: 71292},
			expr: &seqExpr{
				pos: position{line: 1942, col: 5, offset: 71316},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1942, col: 5, offset: 71316},
						expr: &choiceExpr{
							pos: position{line: 1942, col: 6, offset: 71317},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1942, col: 6, offset: 71317},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1943, col: 11, offset: 71378},
									expr: &ruleRefExpr{
										pos:  position{line: 1943, col: 11, offset: 71378},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1944, col: 11, offset: 71396},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1945, col: 11, offset: 71419},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 11, offset: 71448},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1947, col: 11, offset: 71466},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1947, col: 21, offset: 71476},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1950, col: 1, offset: 71556},
			expr: &actionExpr{
				pos: position{line: 1950, col: 27, offset: 71582},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1950, col: 27, offset: 71582},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1950, col: 27, offset: 71582},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1950, col: 33, offset: 71588},
								expr: &ruleRefExpr{
									pos:  position{line: 1950, col: 34, offset: 71589},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1950, col: 54, offset: 71609},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1954, col: 1, offset: 71676},
			expr: &actionExpr{
				pos: position{line: 1955, col: 5, offset: 71702},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1955, col: 5, offset: 71702},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1955, col: 5, offset: 71702},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1955, col: 14, offset: 71711},
								expr: &choiceExpr{
									pos: position{line: 1955, col: 15, offset: 71712},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1955, col: 15, offset: 71712},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1956, col: 11, offset: 71773},
											expr: &ruleRefExpr{
												pos:  position{line: 1956, col: 11, offset: 71773},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1957, col: 11, offset: 71791},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1958, col: 11, offset: 71814},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1959, col: 11, offset: 71843},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1959, col: 21, offset: 71853},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1963, col: 1, offset: 71924},
			expr: &actionExpr{
				pos: position{line: 1963, col: 29, offset: 71952},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1963, col: 29, offset: 71952},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1963, col: 29, offset: 71952},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1963, col: 35, offset: 71958},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1963, col: 43, offset: 71966},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1963, col: 44, offset: 71967},
									expr: &charClassMatcher{
										pos:        position{line: 1963, col: 44, offset: 71967},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1965, col: 8, offset: 72017},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1970, col: 1, offset: 72104},
			expr: &seqExpr{
				pos: position{line: 1971, col: 5, offset: 72128},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1971, col: 5, offset: 72128},
						expr: &choiceExpr{
							pos: position{line: 1971, col: 6, offset: 72129},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1971, col: 6, offset: 72129},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1972, col: 11, offset: 72190},
									expr: &ruleRefExpr{
										pos:  position{line: 1972, col: 11, offset: 72190},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1973, col: 11, offset: 72208},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1974, col: 11, offset: 72226},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1975, col: 11, offset: 72255},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1976, col: 11, offset: 72273},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1976, col: 21, offset: 72283},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1980, col: 1, offset: 72431},
			expr: &seqExpr{
				pos: position{line: 1980, col: 24, offset: 72454},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1980, col: 24, offset: 72454},
						expr: &choiceExpr{
							pos: position{line: 1981, col: 5, offset: 72460},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1981, col: 5, offset: 72460},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1982, col: 7, offset: 72517},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1983, col: 7, offset: 72542},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1984, col: 7, offset: 72585},
									expr: &ruleRefExpr{
										pos:  position{line: 1984, col: 7, offset: 72585},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1985, col: 7, offset: 72599},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1986, col: 7, offset: 72613},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1986, col: 17, offset: 72623},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1989, col: 1, offset: 72680},
			expr: &seqExpr{
				pos: position{line: 1990, col: 5, offset: 72700},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1990, col: 5, offset: 72700},
						expr: &choiceExpr{
							pos: position{line: 1990, col: 6, offset: 72701},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1990, col: 6, offset: 72701},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1991, col: 11, offset: 72762},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1992, col: 11, offset: 72791},
									expr: &ruleRefExpr{
										pos:  position{line: 1992, col: 11, offset: 72791},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1993, col: 11, offset: 72808},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1994, col: 11, offset: 72826},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1995, col: 11, offset: 72844},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1995, col: 21, offset: 72854},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1998, col: 1, offset: 72906},
			expr: &seqExpr{
				pos: position{line: 1998, col: 13, offset: 72918},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1998, col: 13, offset: 72918},
						expr: &choiceExpr{
							pos: position{line: 1999, col: 5, offset: 72924},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1999, col: 5, offset: 72924},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2000, col: 8, offset: 72951},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 2000, col: 8, offset: 72951},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2000, col: 8, offset: 72951},
												expr: &ruleRefExpr{
													pos:  position{line: 2000, col: 9, offset: 72952},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2000, col: 13, offset: 72956},
												expr: &charClassMatcher{
													pos:        position{line: 2000, col: 13, offset: 72956},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2000, col: 22, offset: 72965},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2002, col: 10, offset: 73070},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 2007, col: 1, offset: 73263},
			expr: &actionExpr{
				pos: position{line: 2007, col: 10, offset: 73272},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 2007, col: 10, offset: 73272},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2007, col: 10, offset: 73272},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 2007, col: 16, offset: 73278},
								expr: &zeroOrMoreExpr{
									pos: position{line: 2007, col: 17, offset: 73279},
									expr: &ruleRefExpr{
										pos:  position{line: 2007, col: 17, offset: 73279},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2007, col: 31, offset: 73293},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2008, col: 5, offset: 73312},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 2008, col: 12, offset: 73319},
								expr: &ruleRefExpr{
									pos:  position{line: 2008, col: 13, offset: 73320},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2009, col: 5, offset: 73342},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2009, col: 11, offset: 73348},
								expr: &ruleRefExpr{
									pos:  position{line: 2009, col: 12, offset: 73349},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2010, col: 6, offset: 73366},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2010, col: 6, offset: 73366},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 2010, col: 23, offset: 73383},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 2014, col: 1, offset: 73493},
			expr: &seqExpr{
				pos: position{line: 2014, col: 23, offset: 73515},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2014, col: 23, offset: 73515},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2014, col: 27, offset: 73519},
						expr: &ruleRefExpr{
							pos:  position{line: 2014, col: 27, offset: 73519},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 2016, col: 1, offset: 73527},
			expr: &seqExpr{
				pos: position{line: 2016, col: 19, offset: 73545},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2016, col: 19, offset: 73545},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2016, col: 26, offset: 73552},
						expr: &ruleRefExpr{
							pos:  position{line: 2016, col: 26, offset: 73552},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2016, col: 33, offset: 73559},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 2019, col: 1, offset: 73627},
			expr: &actionExpr{
				pos: position{line: 2019, col: 20, offset: 73646},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 2019, col: 20, offset: 73646},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2019, col: 20, offset: 73646},
							expr: &ruleRefExpr{
								pos:  position{line: 2019, col: 21, offset: 73647},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2019, col: 36, offset: 73662},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2019, col: 42, offset: 73668},
								expr: &ruleRefExpr{
									pos:  position{line: 2019, col: 43, offset: 73669},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2019, col: 55, offset: 73681},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 2019, col: 59, offset: 73685},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 2023, col: 1, offset: 73753},
			expr: &actionExpr{
				pos: position{line: 2023, col: 14, offset: 73766},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 2023, col: 14, offset: 73766},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2023, col: 14, offset: 73766},
							expr: &ruleRefExpr{
								pos:  position{line: 2023, col: 15, offset: 73767},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2023, col: 30, offset: 73782},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2023, col: 36, offset: 73788},
								expr: &ruleRefExpr{
									pos:  position{line: 2023, col: 37, offset: 73789},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2023, col: 49, offset: 73801},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2023, col: 53, offset: 73805},
							expr: &ruleRefExpr{
								pos:  position{line: 2023, col: 53, offset: 73805},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2027, col: 1, offset: 73874},
			expr: &actionExpr{
				pos: position{line: 2027, col: 14, offset: 73887},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2027, col: 14, offset: 73887},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2027, col: 14, offset: 73887},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 2027, col: 33, offset: 73906},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2027, col: 42, offset: 73915},
								expr: &seqExpr{
									pos: position{line: 2027, col: 43, offset: 73916},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2027, col: 43, offset: 73916},
											expr: &ruleRefExpr{
												pos:  position{line: 2027, col: 44, offset: 73917},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 2027, col: 63, offset: 73936},
											expr: &ruleRefExpr{
												pos:  position{line: 2027, col: 64, offset: 73937},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2027, col: 68, offset: 73941},
											expr: &ruleRefExpr{
												pos:  position{line: 2027, col: 68, offset: 73941},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2027, col: 75, offset: 73948},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2027, col: 89, offset: 73962},
											expr: &ruleRefExpr{
												pos:  position{line: 2027, col: 89, offset: 73962},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2034, col: 1, offset: 74288},
			expr: &choiceExpr{
				pos: position{line: 2034, col: 17, offset: 74304},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2034, col: 17, offset: 74304},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 49, offset: 74336},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2034, col: 78, offset: 74365},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2036, col: 1, offset: 74401},
			expr: &litMatcher{
				pos:        position{line: 2036, col: 26, offset: 74426},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2039, col: 1, offset: 74498},
			expr: &actionExpr{
				pos: position{line: 2039, col: 31, offset: 74528},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2039, col: 31, offset: 74528},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2039, col: 31, offset: 74528},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2039, col: 42, offset: 74539},
								expr: &ruleRefExpr{
									pos:  position{line: 2039, col: 43, offset: 74540},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2039, col: 56, offset: 74553},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2039, col: 63, offset: 74560},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2044, col: 1, offset: 74790},
			expr: &actionExpr{
				pos: position{line: 2045, col: 5, offset: 74830},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2045, col: 5, offset: 74830},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2045, col: 5, offset: 74830},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 2045, col: 16, offset: 74841},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2046, col: 5, offset: 74877},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2046, col: 16, offset: 74888},
								expr: &ruleRefExpr{
									pos:  position{line: 2046, col: 17, offset: 74889},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 2050, col: 1, offset: 74998},
			expr: &actionExpr{
				pos: position{line: 2050, col: 35, offset: 75032},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 2050, col: 35, offset: 75032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2050, col: 35, offset: 75032},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2050, col: 41, offset: 75038},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 2050, col: 41, offset: 75038},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2050, col: 41, offset: 75038},
											expr: &ruleRefExpr{
												pos:  position{line: 2050, col: 41, offset: 75038},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2050, col: 48, offset: 75045},
											expr: &charClassMatcher{
												pos:        position{line: 2050, col: 48, offset: 75045},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2052, col: 8, offset: 75111},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2057, col: 1, offset: 75251},
			expr: &actionExpr{
				pos: position{line: 2057, col: 39, offset: 75289},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2057, col: 39, offset: 75289},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2057, col: 39, offset: 75289},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2057, col: 50, offset: 75300},
								expr: &ruleRefExpr{
									pos:  position{line: 2057, col: 51, offset: 75301},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2058, col: 9, offset: 75322},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2058, col: 31, offset: 75344},
							expr: &ruleRefExpr{
								pos:  position{line: 2058, col: 31, offset: 75344},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2058, col: 38, offset: 75351},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2058, col: 46, offset: 75359},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2058, col: 53, offset: 75366},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2058, col: 95, offset: 75408},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2058, col: 96, offset: 75409},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2058, col: 96, offset: 75409},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2058, col: 118, offset: 75431},
											expr: &ruleRefExpr{
												pos:  position{line: 2058, col: 118, offset: 75431},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2058, col: 125, offset: 75438},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2058, col: 132, offset: 75445},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2063, col: 1, offset: 75604},
			expr: &actionExpr{
				pos: position{line: 2063, col: 44, offset: 75647},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2063, col: 44, offset: 75647},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2063, col: 50, offset: 75653},
						expr: &ruleRefExpr{
							pos:  position{line: 2063, col: 51, offset: 75654},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2067, col: 1, offset: 75738},
			expr: &actionExpr{
				pos: position{line: 2068, col: 5, offset: 75793},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2068, col: 5, offset: 75793},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2068, col: 5, offset: 75793},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2068, col: 11, offset: 75799},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2068, col: 11, offset: 75799},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2068, col: 11, offset: 75799},
											expr: &ruleRefExpr{
												pos:  position{line: 2068, col: 12, offset: 75800},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2068, col: 34, offset: 75822},
											expr: &charClassMatcher{
												pos:        position{line: 2068, col: 34, offset: 75822},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2070, col: 8, offset: 75888},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2075, col: 1, offset: 76014},
			expr: &actionExpr{
				pos: position{line: 2076, col: 5, offset: 76052},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2076, col: 5, offset: 76052},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2076, col: 5, offset: 76052},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2076, col: 16, offset: 76063},
								expr: &ruleRefExpr{
									pos:  position{line: 2076, col: 17, offset: 76064},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2077, col: 5, offset: 76081},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2084, col: 5, offset: 76293},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2084, col: 11, offset: 76299},
								expr: &ruleRefExpr{
									pos:  position{line: 2084, col: 12, offset: 76300},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2088, col: 1, offset: 76437},
			expr: &actionExpr{
				pos: position{line: 2088, col: 16, offset: 76452},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2088, col: 16, offset: 76452},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2092, col: 1, offset: 76498},
			expr: &actionExpr{
				pos: position{line: 2092, col: 25, offset: 76522},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2092, col: 25, offset: 76522},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2092, col: 25, offset: 76522},
							expr: &ruleRefExpr{
								pos:  position{line: 2092, col: 26, offset: 76523},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2092, col: 36, offset: 76533},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2092, col: 45, offset: 76542},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2092, col: 45, offset: 76542},
									expr: &charClassMatcher{
										pos:        position{line: 2092, col: 45, offset: 76542},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2094, col: 4, offset: 76600},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2101, col: 1, offset: 76777},
			expr: &actionExpr{
				pos: position{line: 2101, col: 14, offset: 76790},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2101, col: 14, offset: 76790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2101, col: 14, offset: 76790},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2101, col: 19, offset: 76795},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2101, col: 25, offset: 76801},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2101, col: 43, offset: 76819},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2105, col: 1, offset: 76884},
			expr: &actionExpr{
				pos: position{line: 2105, col: 21, offset: 76904},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2105, col: 21, offset: 76904},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2105, col: 30, offset: 76913},
						expr: &choiceExpr{
							pos: position{line: 2105, col: 31, offset: 76914},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2105, col: 31, offset: 76914},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2105, col: 38, offset: 76921},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2105, col: 53, offset: 76936},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2105, col: 66, offset: 76949},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2105, col: 74, offset: 76957},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2105, col: 93, offset: 76976},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2105, col: 114, offset: 76997},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2105, col: 115, offset: 76998},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2105, col: 115, offset: 76998},
												expr: &litMatcher{
													pos:        position{line: 2105, col: 116, offset: 76999},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2105, col: 121, offset: 77004,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2111, col: 1, offset: 77110},
			expr: &actionExpr{
				pos: position{line: 2111, col: 23, offset: 77132},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2111, col: 23, offset: 77132},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2111, col: 23, offset: 77132},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2111, col: 29, offset: 77138},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2111, col: 36, offset: 77145},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2112, col: 5, offset: 77177},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2112, col: 11, offset: 77183},
								expr: &actionExpr{
									pos: position{line: 2112, col: 12, offset: 77184},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2112, col: 12, offset: 77184},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2112, col: 12, offset: 77184},
												expr: &ruleRefExpr{
													pos:  position{line: 2112, col: 12, offset: 77184},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2112, col: 19, offset: 77191},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2112, col: 23, offset: 77195},
												expr: &ruleRefExpr{
													pos:  position{line: 2112, col: 23, offset: 77195},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2112, col: 30, offset: 77202},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2112, col: 39, offset: 77211},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2113, col: 5, offset: 77269},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2113, col: 11, offset: 77275},
								expr: &actionExpr{
									pos: position{line: 2113, col: 12, offset: 77276},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2113, col: 12, offset: 77276},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2113, col: 12, offset: 77276},
												expr: &ruleRefExpr{
													pos:  position{line: 2113, col: 12, offset: 77276},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2113, col: 19, offset: 77283},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2113, col: 23, offset: 77287},
												expr: &ruleRefExpr{
													pos:  position{line: 2113, col: 23, offset: 77287},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2113, col: 30, offset: 77294},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2113, col: 39, offset: 77303},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2114, col: 5, offset: 77361},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2118, col: 1, offset: 77440},
			expr: &actionExpr{
				pos: position{line: 2118, col: 30, offset: 77469},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2118, col: 30, offset: 77469},
					expr: &choiceExpr{
						pos: position{line: 2118, col: 31, offset: 77470},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2118, col: 31, offset: 77470},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2118, col: 42, offset: 77481},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2125, col: 1, offset: 77630},
			expr: &actionExpr{
				pos: position{line: 2125, col: 14, offset: 77643},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2125, col: 14, offset: 77643},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2125, col: 14, offset: 77643},
							expr: &ruleRefExpr{
								pos:  position{line: 2125, col: 15, offset: 77644},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2125, col: 19, offset: 77648},
							expr: &ruleRefExpr{
								pos:  position{line: 2125, col: 19, offset: 77648},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2125, col: 26, offset: 77655},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2133, col: 1, offset: 77800},
			expr: &choiceExpr{
				pos: position{line: 2133, col: 11, offset: 77810},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2133, col: 11, offset: 77810},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2133, col: 24, offset: 77823},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2133, col: 36, offset: 77835},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2133, col: 48, offset: 77847},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2133, col: 61, offset: 77860},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2133, col: 72, offset: 77871},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2135, col: 1, offset: 77890},
			expr: &actionExpr{
				pos: position{line: 2135, col: 15, offset: 77904},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2135, col: 15, offset: 77904},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2138, col: 1, offset: 77957},
			expr: &actionExpr{
				pos: position{line: 2138, col: 14, offset: 77970},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2138, col: 14, offset: 77970},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2141, col: 1, offset: 78024},
			expr: &actionExpr{
				pos: position{line: 2141, col: 14, offset: 78037},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2141, col: 14, offset: 78037},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2144, col: 1, offset: 78092},
			expr: &actionExpr{
				pos: position{line: 2144, col: 15, offset: 78106},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2144, col: 15, offset: 78106},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2147, col: 1, offset: 78160},
			expr: &actionExpr{
				pos: position{line: 2147, col: 13, offset: 78172},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2147, col: 13, offset: 78172},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2155, col: 1, offset: 78449},
			expr: &actionExpr{
				pos: position{line: 2155, col: 22, offset: 78470},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2155, col: 22, offset: 78470},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2155, col: 22, offset: 78470},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2155, col: 31, offset: 78479},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2155, col: 35, offset: 78483},
							expr: &charClassMatcher{
								pos:        position{line: 2155, col: 36, offset: 78484},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2164, col: 1, offset: 78846},
			expr: &choiceExpr{
				pos: position{line: 2164, col: 21, offset: 78866},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2164, col: 21, offset: 78866},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2164, col: 21, offset: 78866},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2167, col: 9, offset: 79029},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2167, col: 10, offset: 79030},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2167, col: 10, offset: 79030},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2167, col: 16, offset: 79036},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2167, col: 22, offset: 79042},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2174, col: 1, offset: 79220},
			expr: &charClassMatcher{
				pos:        position{line: 2174, col: 13, offset: 79232},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2176, col: 1, offset: 79242},
			expr: &choiceExpr{
				pos: position{line: 2176, col: 16, offset: 79257},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2176, col: 16, offset: 79257},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2176, col: 22, offset: 79263},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2176, col: 28, offset: 79269},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2176, col: 34, offset: 79275},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2176, col: 40, offset: 79281},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2176, col: 46, offset: 79287},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2178, col: 1, offset: 79293},
			expr: &actionExpr{
				pos: position{line: 2178, col: 14, offset: 79306},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2178, col: 14, offset: 79306},
					expr: &charClassMatcher{
						pos:        position{line: 2178, col: 14, offset: 79306},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2182, col: 1, offset: 79352},
			expr: &choiceExpr{
				pos: position{line: 2186, col: 5, offset: 79679},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2186, col: 5, offset: 79679},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2186, col: 5, offset: 79679},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2186, col: 5, offset: 79679},
									expr: &charClassMatcher{
										pos:        position{line: 2186, col: 5, offset: 79679},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2186, col: 15, offset: 79689},
									expr: &choiceExpr{
										pos: position{line: 2186, col: 17, offset: 79691},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2186, col: 17, offset: 79691},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2186, col: 30, offset: 79704},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2188, col: 9, offset: 79774},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2188, col: 9, offset: 79774},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2188, col: 9, offset: 79774},
									expr: &charClassMatcher{
										pos:        position{line: 2188, col: 9, offset: 79774},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2188, col: 19, offset: 79784},
									expr: &seqExpr{
										pos: position{line: 2188, col: 20, offset: 79785},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2188, col: 20, offset: 79785},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2188, col: 27, offset: 79792},
												expr: &charClassMatcher{
													pos:        position{line: 2188, col: 27, offset: 79792},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2192, col: 1, offset: 79868},
			expr: &choiceExpr{
				pos: position{line: 2193, col: 5, offset: 79949},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2193, col: 5, offset: 79949},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2193, col: 5, offset: 79949},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2193, col: 5, offset: 79949},
									expr: &charClassMatcher{
										pos:        position{line: 2193, col: 5, offset: 79949},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2193, col: 19, offset: 79963},
									expr: &choiceExpr{
										pos: position{line: 2193, col: 21, offset: 79965},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2193, col: 21, offset: 79965},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2193, col: 31, offset: 79975},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2195, col: 9, offset: 80044},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2198, col: 1, offset: 80144},
			expr: &actionExpr{
				pos: position{line: 2198, col: 12, offset: 80155},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2198, col: 12, offset: 80155},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2202, col: 1, offset: 80220},
			expr: &actionExpr{
				pos: position{line: 2202, col: 17, offset: 80236},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2202, col: 17, offset: 80236},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2202, col: 22, offset: 80241},
						expr: &choiceExpr{
							pos: position{line: 2202, col: 23, offset: 80242},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2202, col: 23, offset: 80242},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2202, col: 34, offset: 80253},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2206, col: 1, offset: 80334},
			expr: &actionExpr{
				pos: position{line: 2206, col: 25, offset: 80358},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2206, col: 25, offset: 80358},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2206, col: 30, offset: 80363},
						expr: &charClassMatcher{
							pos:        position{line: 2206, col: 31, offset: 80364},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2210, col: 1, offset: 80436},
			expr: &actionExpr{
				pos: position{line: 2210, col: 13, offset: 80448},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2210, col: 13, offset: 80448},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2210, col: 13, offset: 80448},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2210, col: 20, offset: 80455},
								expr: &ruleRefExpr{
									pos:  position{line: 2210, col: 21, offset: 80456},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2210, col: 34, offset: 80469},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2210, col: 39, offset: 80474},
								expr: &choiceExpr{
									pos: position{line: 2210, col: 40, offset: 80475},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2210, col: 40, offset: 80475},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2210, col: 52, offset: 80487},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2214, col: 1, offset: 80572},
			expr: &actionExpr{
				pos: position{line: 2214, col: 23, offset: 80594},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2214, col: 23, offset: 80594},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2214, col: 23, offset: 80594},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2214, col: 31, offset: 80602},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2214, col: 43, offset: 80614},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2214, col: 48, offset: 80619},
								expr: &choiceExpr{
									pos: position{line: 2214, col: 49, offset: 80620},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2214, col: 49, offset: 80620},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2214, col: 60, offset: 80631},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2218, col: 1, offset: 80716},
			expr: &oneOrMoreExpr{
				pos: position{line: 2218, col: 13, offset: 80728},
				expr: &charClassMatcher{
					pos:        position{line: 2218, col: 14, offset: 80729},
					val:        "[^\\r\\n[\\]\\uFFFD ]",
					chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2220, col: 1, offset: 80797},
			expr: &actionExpr{
				pos: position{line: 2220, col: 21, offset: 80817},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2220, col: 21, offset: 80817},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2220, col: 21, offset: 80817},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2220, col: 29, offset: 80825},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2220, col: 41, offset: 80837},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2220, col: 47, offset: 80843},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2225, col: 1, offset: 81091},
			expr: &oneOrMoreExpr{
				pos: position{line: 2225, col: 22, offset: 81112},
				expr: &charClassMatcher{
					pos:        position{line: 2225, col: 23, offset: 81113},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2227, col: 1, offset: 81245},
			expr: &actionExpr{
				pos: position{line: 2227, col: 9, offset: 81253},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2227, col: 9, offset: 81253},
					expr: &charClassMatcher{
						pos:        position{line: 2227, col: 9, offset: 81253},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2231, col: 1, offset: 81301},
			expr: &choiceExpr{
				pos: position{line: 2231, col: 15, offset: 81315},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2231, col: 15, offset: 81315},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2231, col: 27, offset: 81327},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2231, col: 40, offset: 81340},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2231, col: 51, offset: 81351},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2231, col: 62, offset: 81362},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2233, col: 1, offset: 81373},
			expr: &actionExpr{
				pos: position{line: 2233, col: 7, offset: 81379},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2233, col: 7, offset: 81379},
					expr: &charClassMatcher{
						pos:        position{line: 2233, col: 7, offset: 81379},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2237, col: 1, offset: 81504},
			expr: &actionExpr{
				pos: position{line: 2237, col: 10, offset: 81513},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2237, col: 10, offset: 81513},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2241, col: 1, offset: 81555},
			expr: &actionExpr{
				pos: position{line: 2241, col: 11, offset: 81565},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2241, col: 11, offset: 81565},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2241, col: 11, offset: 81565},
							expr: &litMatcher{
								pos:        position{line: 2241, col: 11, offset: 81565},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2241, col: 16, offset: 81570},
							expr: &ruleRefExpr{
								pos:  position{line: 2241, col: 16, offset: 81570},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2245, col: 1, offset: 81622},
			expr: &choiceExpr{
				pos: position{line: 2245, col: 10, offset: 81631},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2245, col: 10, offset: 81631},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2245, col: 16, offset: 81637},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2245, col: 16, offset: 81637},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2249, col: 1, offset: 81678},
			expr: &choiceExpr{
				pos: position{line: 2249, col: 12, offset: 81689},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2249, col: 12, offset: 81689},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2249, col: 21, offset: 81698},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2249, col: 28, offset: 81705},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2251, col: 1, offset: 81711},
			expr: &notExpr{
				pos: position{line: 2251, col: 8, offset: 81718},
				expr: &anyMatcher{
					line: 2251, col: 9, offset: 81719,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2253, col: 1, offset: 81722},
			expr: &choiceExpr{
				pos: position{line: 2253, col: 8, offset: 81729},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2253, col: 8, offset: 81729},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2253, col: 18, offset: 81739},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralBlockAttribute1() (interface{}, error) {
	return types.NewLiteralBlockAttribute()
}

func (p *parser) callonLiteralBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onExampleBlockAttribute1() (interface{}, error) {
	return types.NewExampleBlockAttribute()
}

func (p *parser) callonExampleBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value)
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueSingleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted7()
}

func (c *current) onAttrValueSingleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1(stack["elements"])
}

func (c *current) onAttrValueDoubleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueDoubleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted7()
}

func (c *current) onAttrValueDoubleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1(stack["elements"])
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrBlockKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrBlockKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value)
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value)
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	if attributes == nil {
		return true, nil
	}
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrBlockKind]
		// if AttrKind is missing, then accept as a QuoteBlock
		return !ok || kind == types.Quote, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrBlockKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrBlockKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
