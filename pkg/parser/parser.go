// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1336},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1389},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1408},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1434},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1459},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1514},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1536},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1561},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1588},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1618},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1645},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1681},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1706},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1739},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1766},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1804},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1830},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1862},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1875},
			expr: &labeledExpr{
				pos:   position{line: 64, col: 47, offset: 1921},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 64, col: 54, offset: 1928},
					expr: &ruleRefExpr{
						pos:  position{line: 64, col: 55, offset: 1929},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 66, col: 1, offset: 1968},
			expr: &actionExpr{
				pos: position{line: 66, col: 38, offset: 2005},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 66, col: 38, offset: 2005},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 66, col: 38, offset: 2005},
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 39, offset: 2006},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2016},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 67, col: 12, offset: 2023},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 67, col: 12, offset: 2023},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2049},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2102},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2127},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2153},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2175},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2200},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2227},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2257},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2285},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2321},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2346},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2379},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2406},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2444},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2470},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 86, col: 1, offset: 2512},
			expr: &labeledExpr{
				pos:   position{line: 86, col: 23, offset: 2534},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 86, col: 30, offset: 2541},
					expr: &ruleRefExpr{
						pos:  position{line: 86, col: 31, offset: 2542},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 88, col: 1, offset: 2565},
			expr: &actionExpr{
				pos: position{line: 88, col: 22, offset: 2586},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 88, col: 22, offset: 2586},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 88, col: 22, offset: 2586},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 23, offset: 2587},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2597},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 89, col: 12, offset: 2604},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 89, col: 12, offset: 2604},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 24, offset: 2616},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 96, col: 1, offset: 2769},
			expr: &ruleRefExpr{
				pos:  position{line: 96, col: 16, offset: 2784},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 98, col: 1, offset: 2804},
			expr: &actionExpr{
				pos: position{line: 98, col: 20, offset: 2823},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 98, col: 20, offset: 2823},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 98, col: 20, offset: 2823},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 41, offset: 2844},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 98, col: 49, offset: 2852},
								expr: &ruleRefExpr{
									pos:  position{line: 98, col: 50, offset: 2853},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 75, offset: 2878},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 102, col: 1, offset: 2962},
			expr: &seqExpr{
				pos: position{line: 102, col: 26, offset: 2987},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 102, col: 26, offset: 2987},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 102, col: 32, offset: 2993},
						expr: &ruleRefExpr{
							pos:  position{line: 102, col: 32, offset: 2993},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 39, offset: 3000},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 104, col: 1, offset: 3007},
			expr: &actionExpr{
				pos: position{line: 104, col: 27, offset: 3033},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 104, col: 27, offset: 3033},
					expr: &oneOrMoreExpr{
						pos: position{line: 104, col: 28, offset: 3034},
						expr: &seqExpr{
							pos: position{line: 104, col: 29, offset: 3035},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 104, col: 29, offset: 3035},
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 30, offset: 3036},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 104, col: 51, offset: 3057,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 111, col: 1, offset: 3230},
			expr: &actionExpr{
				pos: position{line: 111, col: 19, offset: 3248},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 111, col: 19, offset: 3248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 111, col: 19, offset: 3248},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 111, col: 23, offset: 3252},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 23, offset: 3252},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 30, offset: 3259},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 37, offset: 3266},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 52, offset: 3281},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 56, offset: 3285},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 56, offset: 3285},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 74, offset: 3303},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3316},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3317},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 112, col: 10, offset: 3317},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3337},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3361},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 18, offset: 3370},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 18, offset: 3370},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 9, offset: 3398},
							expr: &choiceExpr{
								pos: position{line: 114, col: 10, offset: 3399},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 114, col: 10, offset: 3399},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 30, offset: 3419},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 9, offset: 3443},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 115, col: 19, offset: 3453},
								expr: &ruleRefExpr{
									pos:  position{line: 115, col: 19, offset: 3453},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 119, col: 1, offset: 3558},
			expr: &choiceExpr{
				pos: position{line: 119, col: 20, offset: 3577},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 119, col: 20, offset: 3577},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 48, offset: 3605},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 121, col: 1, offset: 3637},
			expr: &actionExpr{
				pos: position{line: 121, col: 30, offset: 3666},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 30, offset: 3666},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 30, offset: 3666},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 30, offset: 3666},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 121, col: 37, offset: 3673},
							expr: &litMatcher{
								pos:        position{line: 121, col: 38, offset: 3674},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 42, offset: 3678},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 121, col: 51, offset: 3687},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 51, offset: 3687},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 68, offset: 3704},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 125, col: 1, offset: 3778},
			expr: &actionExpr{
				pos: position{line: 125, col: 33, offset: 3810},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 125, col: 33, offset: 3810},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 33, offset: 3810},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 33, offset: 3810},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 125, col: 40, offset: 3817},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 51, offset: 3828},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 59, offset: 3836},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 75, offset: 3852},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 129, col: 1, offset: 3935},
			expr: &actionExpr{
				pos: position{line: 129, col: 19, offset: 3953},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 129, col: 19, offset: 3953},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 19, offset: 3953},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 19, offset: 3953},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 26, offset: 3960},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 36, offset: 3970},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 56, offset: 3990},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 129, col: 62, offset: 3996},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 63, offset: 3997},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 85, offset: 4019},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 85, offset: 4019},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 129, col: 92, offset: 4026},
							expr: &litMatcher{
								pos:        position{line: 129, col: 92, offset: 4026},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 97, offset: 4031},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 97, offset: 4031},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 134, col: 1, offset: 4181},
			expr: &actionExpr{
				pos: position{line: 134, col: 23, offset: 4203},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 134, col: 23, offset: 4203},
					expr: &charClassMatcher{
						pos:        position{line: 134, col: 23, offset: 4203},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 138, col: 1, offset: 4254},
			expr: &actionExpr{
				pos: position{line: 138, col: 24, offset: 4277},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 138, col: 24, offset: 4277},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 24, offset: 4277},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 28, offset: 4281},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 138, col: 35, offset: 4288},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 138, col: 36, offset: 4289},
									expr: &charClassMatcher{
										pos:        position{line: 138, col: 36, offset: 4289},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 4, offset: 4338},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 146, col: 1, offset: 4505},
			expr: &actionExpr{
				pos: position{line: 146, col: 21, offset: 4525},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 146, col: 21, offset: 4525},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 146, col: 21, offset: 4525},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 21, offset: 4525},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 146, col: 28, offset: 4532},
							expr: &litMatcher{
								pos:        position{line: 146, col: 29, offset: 4533},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 33, offset: 4537},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 147, col: 9, offset: 4557},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 147, col: 10, offset: 4558},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 147, col: 10, offset: 4558},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 10, offset: 4558},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 21, offset: 4569},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 45, offset: 4593},
													expr: &litMatcher{
														pos:        position{line: 147, col: 45, offset: 4593},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 50, offset: 4598},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 58, offset: 4606},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 59, offset: 4607},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 82, offset: 4630},
													expr: &litMatcher{
														pos:        position{line: 147, col: 82, offset: 4630},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 87, offset: 4635},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 97, offset: 4645},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 98, offset: 4646},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 149, col: 15, offset: 4765},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 149, col: 15, offset: 4765},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 149, col: 15, offset: 4765},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 149, col: 24, offset: 4774},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 149, col: 46, offset: 4796},
													expr: &litMatcher{
														pos:        position{line: 149, col: 46, offset: 4796},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 149, col: 51, offset: 4801},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 149, col: 61, offset: 4811},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 62, offset: 4812},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 13, offset: 4923},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 156, col: 1, offset: 5058},
			expr: &choiceExpr{
				pos: position{line: 156, col: 27, offset: 5084},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 27, offset: 5084},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 156, col: 27, offset: 5084},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 156, col: 27, offset: 5084},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 32, offset: 5089},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 39, offset: 5096},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 39, offset: 5096},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 5146},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 158, col: 5, offset: 5146},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 158, col: 5, offset: 5146},
									expr: &litMatcher{
										pos:        position{line: 158, col: 5, offset: 5146},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 158, col: 11, offset: 5152},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 158, col: 18, offset: 5159},
									expr: &charClassMatcher{
										pos:        position{line: 158, col: 18, offset: 5159},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 158, col: 29, offset: 5170},
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 29, offset: 5170},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 158, col: 36, offset: 5177},
									expr: &litMatcher{
										pos:        position{line: 158, col: 37, offset: 5178},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 162, col: 1, offset: 5222},
			expr: &actionExpr{
				pos: position{line: 162, col: 25, offset: 5246},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 25, offset: 5246},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 25, offset: 5246},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 166, col: 1, offset: 5296},
			expr: &actionExpr{
				pos: position{line: 166, col: 27, offset: 5322},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 166, col: 27, offset: 5322},
					expr: &charClassMatcher{
						pos:        position{line: 166, col: 27, offset: 5322},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 173, col: 1, offset: 5482},
			expr: &actionExpr{
				pos: position{line: 173, col: 25, offset: 5506},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 173, col: 25, offset: 5506},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 25, offset: 5506},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 29, offset: 5510},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 35, offset: 5516},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 50, offset: 5531},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 9, offset: 5545},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 174, col: 15, offset: 5551},
								expr: &actionExpr{
									pos: position{line: 174, col: 16, offset: 5552},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 174, col: 17, offset: 5553},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 174, col: 17, offset: 5553},
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 17, offset: 5553},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 174, col: 24, offset: 5560},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 31, offset: 5567},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 13, offset: 5643},
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 13, offset: 5643},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 20, offset: 5650},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 183, col: 1, offset: 5897},
			expr: &actionExpr{
				pos: position{line: 183, col: 18, offset: 5914},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 183, col: 18, offset: 5914},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 183, col: 18, offset: 5914},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 28, offset: 5924},
							expr: &charClassMatcher{
								pos:        position{line: 183, col: 29, offset: 5925},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 187, col: 1, offset: 5977},
			expr: &actionExpr{
				pos: position{line: 187, col: 30, offset: 6006},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 187, col: 30, offset: 6006},
					expr: &charClassMatcher{
						pos:        position{line: 187, col: 30, offset: 6006},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 191, col: 1, offset: 6055},
			expr: &choiceExpr{
				pos: position{line: 191, col: 19, offset: 6073},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 191, col: 19, offset: 6073},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 191, col: 19, offset: 6073},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 19, offset: 6073},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 24, offset: 6078},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 30, offset: 6084},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 45, offset: 6099},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 49, offset: 6103},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 49, offset: 6103},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 56, offset: 6110},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 6172},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 6172},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 5, offset: 6172},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 9, offset: 6176},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 15, offset: 6182},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 30, offset: 6197},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 35, offset: 6202},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 35, offset: 6202},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 42, offset: 6209},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 197, col: 1, offset: 6272},
			expr: &actionExpr{
				pos: position{line: 197, col: 26, offset: 6297},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 197, col: 26, offset: 6297},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 197, col: 26, offset: 6297},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 197, col: 30, offset: 6301},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 36, offset: 6307},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 197, col: 51, offset: 6322},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 201, col: 1, offset: 6392},
			expr: &actionExpr{
				pos: position{line: 201, col: 15, offset: 6406},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 201, col: 15, offset: 6406},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 15, offset: 6406},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 201, col: 21, offset: 6412},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 22, offset: 6413},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 201, col: 41, offset: 6432},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 41, offset: 6432},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 205, col: 1, offset: 6506},
			expr: &actionExpr{
				pos: position{line: 205, col: 21, offset: 6526},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 205, col: 21, offset: 6526},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 205, col: 21, offset: 6526},
							expr: &choiceExpr{
								pos: position{line: 205, col: 23, offset: 6528},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 205, col: 23, offset: 6528},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 29, offset: 6534},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 35, offset: 6540},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 5, offset: 6617},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 206, col: 11, offset: 6623},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 206, col: 11, offset: 6623},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6645},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6670},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6708},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6737},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6766},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6794},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6822},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6860},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6897},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 220, col: 1, offset: 7085},
			expr: &choiceExpr{
				pos: position{line: 220, col: 24, offset: 7108},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 220, col: 24, offset: 7108},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 220, col: 42, offset: 7126},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 222, col: 1, offset: 7145},
			expr: &actionExpr{
				pos: position{line: 222, col: 14, offset: 7158},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 222, col: 14, offset: 7158},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 222, col: 14, offset: 7158},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 19, offset: 7163},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 23, offset: 7167},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 222, col: 27, offset: 7171},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 222, col: 32, offset: 7176},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 32, offset: 7176},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 39, offset: 7183},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 226, col: 1, offset: 7239},
			expr: &actionExpr{
				pos: position{line: 226, col: 20, offset: 7258},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 226, col: 20, offset: 7258},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 226, col: 20, offset: 7258},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 25, offset: 7263},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 29, offset: 7267},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 226, col: 33, offset: 7271},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 226, col: 38, offset: 7276},
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 38, offset: 7276},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 232, col: 1, offset: 7559},
			expr: &actionExpr{
				pos: position{line: 232, col: 17, offset: 7575},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 232, col: 17, offset: 7575},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 17, offset: 7575},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 21, offset: 7579},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 28, offset: 7586},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 49, offset: 7607},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 236, col: 1, offset: 7669},
			expr: &actionExpr{
				pos: position{line: 236, col: 24, offset: 7692},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 236, col: 24, offset: 7692},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 236, col: 24, offset: 7692},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 236, col: 32, offset: 7700},
							expr: &charClassMatcher{
								pos:        position{line: 236, col: 32, offset: 7700},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 242, col: 1, offset: 7959},
			expr: &actionExpr{
				pos: position{line: 242, col: 31, offset: 7989},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 242, col: 31, offset: 7989},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 31, offset: 7989},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 35, offset: 7993},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 242, col: 42, offset: 8000},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 242, col: 42, offset: 8000},
										expr: &ruleRefExpr{
											pos:  position{line: 242, col: 42, offset: 8000},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 242, col: 57, offset: 8015},
										expr: &ruleRefExpr{
											pos:  position{line: 242, col: 57, offset: 8015},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 242, col: 69, offset: 8027},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 242, col: 73, offset: 8031},
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 73, offset: 8031},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 80, offset: 8038},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 246, col: 1, offset: 8096},
			expr: &choiceExpr{
				pos: position{line: 246, col: 15, offset: 8110},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 246, col: 15, offset: 8110},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 31, offset: 8126},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 46, offset: 8141},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 250, col: 1, offset: 8373},
			expr: &actionExpr{
				pos: position{line: 250, col: 18, offset: 8390},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 250, col: 18, offset: 8390},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 250, col: 18, offset: 8390},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 250, col: 22, offset: 8394},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 250, col: 29, offset: 8401},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 250, col: 29, offset: 8401},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 29, offset: 8401},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 250, col: 45, offset: 8417},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 45, offset: 8417},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 250, col: 60, offset: 8432},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 60, offset: 8432},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 250, col: 82, offset: 8454},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 82, offset: 8454},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 250, col: 104, offset: 8476},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 104, offset: 8476},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 250, col: 116, offset: 8488},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 250, col: 120, offset: 8492},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 254, col: 1, offset: 8550},
			expr: &actionExpr{
				pos: position{line: 254, col: 19, offset: 8568},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 254, col: 19, offset: 8568},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 254, col: 25, offset: 8574},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 258, col: 1, offset: 8648},
			expr: &actionExpr{
				pos: position{line: 258, col: 25, offset: 8672},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 258, col: 25, offset: 8672},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 258, col: 25, offset: 8672},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 29, offset: 8676},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 35, offset: 8682},
								name: "PositionalValue",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 262, col: 1, offset: 8776},
			expr: &actionExpr{
				pos: position{line: 262, col: 25, offset: 8800},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 262, col: 25, offset: 8800},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 25, offset: 8800},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&labeledExpr{
							pos:   position{line: 262, col: 29, offset: 8804},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 35, offset: 8810},
								name: "PositionalValue",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 266, col: 1, offset: 8904},
			expr: &actionExpr{
				pos: position{line: 266, col: 21, offset: 8924},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 266, col: 21, offset: 8924},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 21, offset: 8924},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 33, offset: 8936},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 33, offset: 8936},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 40, offset: 8943},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 270, col: 1, offset: 8999},
			expr: &actionExpr{
				pos: position{line: 270, col: 30, offset: 9028},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 270, col: 30, offset: 9028},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 30, offset: 9028},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 39, offset: 9037},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 39, offset: 9037},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 46, offset: 9044},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 275, col: 1, offset: 9190},
			expr: &actionExpr{
				pos: position{line: 275, col: 30, offset: 9219},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 275, col: 30, offset: 9219},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 30, offset: 9219},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 34, offset: 9223},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 37, offset: 9226},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 53, offset: 9242},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 275, col: 57, offset: 9246},
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 57, offset: 9246},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 64, offset: 9253},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 280, col: 1, offset: 9413},
			expr: &actionExpr{
				pos: position{line: 280, col: 21, offset: 9433},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 280, col: 21, offset: 9433},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 280, col: 21, offset: 9433},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 281, col: 5, offset: 9449},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 14, offset: 9458},
								expr: &actionExpr{
									pos: position{line: 281, col: 15, offset: 9459},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 281, col: 15, offset: 9459},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 281, col: 15, offset: 9459},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 281, col: 19, offset: 9463},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 281, col: 24, offset: 9468},
													expr: &ruleRefExpr{
														pos:  position{line: 281, col: 25, offset: 9469},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 282, col: 5, offset: 9525},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 282, col: 12, offset: 9532},
								expr: &actionExpr{
									pos: position{line: 282, col: 13, offset: 9533},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 282, col: 13, offset: 9533},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 282, col: 13, offset: 9533},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 282, col: 17, offset: 9537},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 282, col: 22, offset: 9542},
													expr: &ruleRefExpr{
														pos:  position{line: 282, col: 23, offset: 9543},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 5, offset: 9591},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 9, offset: 9595},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 9, offset: 9595},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 16, offset: 9602},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 288, col: 1, offset: 9758},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 9776},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 288, col: 19, offset: 9776},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 288, col: 19, offset: 9776},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 23, offset: 9780},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 288, col: 34, offset: 9791},
								expr: &ruleRefExpr{
									pos:  position{line: 288, col: 35, offset: 9792},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 288, col: 54, offset: 9811},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 288, col: 58, offset: 9815},
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 58, offset: 9815},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 65, offset: 9822},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 292, col: 1, offset: 9898},
			expr: &choiceExpr{
				pos: position{line: 292, col: 21, offset: 9918},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 292, col: 21, offset: 9918},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 49, offset: 9946},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 294, col: 1, offset: 9978},
			expr: &actionExpr{
				pos: position{line: 294, col: 30, offset: 10007},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 294, col: 30, offset: 10007},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 294, col: 30, offset: 10007},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 35, offset: 10012},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 294, col: 49, offset: 10026},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 294, col: 53, offset: 10030},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 294, col: 59, offset: 10036},
								expr: &ruleRefExpr{
									pos:  position{line: 294, col: 60, offset: 10037},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 294, col: 77, offset: 10054},
							expr: &litMatcher{
								pos:        position{line: 294, col: 77, offset: 10054},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 82, offset: 10059},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 82, offset: 10059},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 298, col: 1, offset: 10162},
			expr: &actionExpr{
				pos: position{line: 298, col: 33, offset: 10194},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 298, col: 33, offset: 10194},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 298, col: 33, offset: 10194},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 38, offset: 10199},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 298, col: 52, offset: 10213},
							expr: &litMatcher{
								pos:        position{line: 298, col: 52, offset: 10213},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 57, offset: 10218},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 57, offset: 10218},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 302, col: 1, offset: 10310},
			expr: &actionExpr{
				pos: position{line: 302, col: 17, offset: 10326},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 302, col: 17, offset: 10326},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 302, col: 17, offset: 10326},
							expr: &litMatcher{
								pos:        position{line: 302, col: 18, offset: 10327},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 302, col: 26, offset: 10335},
							expr: &litMatcher{
								pos:        position{line: 302, col: 27, offset: 10336},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 302, col: 35, offset: 10344},
							expr: &litMatcher{
								pos:        position{line: 302, col: 36, offset: 10345},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 302, col: 46, offset: 10355},
							expr: &oneOrMoreExpr{
								pos: position{line: 302, col: 48, offset: 10357},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 48, offset: 10357},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 56, offset: 10365},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 302, col: 61, offset: 10370},
								expr: &charClassMatcher{
									pos:        position{line: 302, col: 61, offset: 10370},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 302, col: 75, offset: 10384},
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 75, offset: 10384},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 306, col: 1, offset: 10431},
			expr: &actionExpr{
				pos: position{line: 306, col: 19, offset: 10449},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 306, col: 19, offset: 10449},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 306, col: 26, offset: 10456},
						expr: &charClassMatcher{
							pos:        position{line: 306, col: 26, offset: 10456},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 310, col: 1, offset: 10511},
			expr: &actionExpr{
				pos: position{line: 310, col: 29, offset: 10539},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 310, col: 29, offset: 10539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 310, col: 29, offset: 10539},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 310, col: 36, offset: 10546},
								expr: &charClassMatcher{
									pos:        position{line: 310, col: 36, offset: 10546},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 310, col: 50, offset: 10560},
							expr: &litMatcher{
								pos:        position{line: 310, col: 51, offset: 10561},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 314, col: 1, offset: 10731},
			expr: &actionExpr{
				pos: position{line: 314, col: 20, offset: 10750},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 314, col: 20, offset: 10750},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 20, offset: 10750},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 29, offset: 10759},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 29, offset: 10759},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 314, col: 36, offset: 10766},
							expr: &litMatcher{
								pos:        position{line: 314, col: 36, offset: 10766},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 41, offset: 10771},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 314, col: 48, offset: 10778},
								expr: &ruleRefExpr{
									pos:  position{line: 314, col: 49, offset: 10779},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 314, col: 66, offset: 10796},
							expr: &litMatcher{
								pos:        position{line: 314, col: 66, offset: 10796},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 71, offset: 10801},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 314, col: 77, offset: 10807},
								expr: &ruleRefExpr{
									pos:  position{line: 314, col: 78, offset: 10808},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 95, offset: 10825},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 99, offset: 10829},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 99, offset: 10829},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 106, offset: 10836},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 318, col: 1, offset: 10909},
			expr: &actionExpr{
				pos: position{line: 318, col: 20, offset: 10928},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 318, col: 20, offset: 10928},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 318, col: 20, offset: 10928},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 29, offset: 10937},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 29, offset: 10937},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 318, col: 36, offset: 10944},
							expr: &litMatcher{
								pos:        position{line: 318, col: 36, offset: 10944},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 41, offset: 10949},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 48, offset: 10956},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 49, offset: 10957},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 318, col: 66, offset: 10974},
							expr: &litMatcher{
								pos:        position{line: 318, col: 66, offset: 10974},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 71, offset: 10979},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 77, offset: 10985},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 78, offset: 10986},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 318, col: 95, offset: 11003},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 99, offset: 11007},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 99, offset: 11007},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 106, offset: 11014},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 322, col: 1, offset: 11105},
			expr: &actionExpr{
				pos: position{line: 322, col: 19, offset: 11123},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 322, col: 20, offset: 11124},
					expr: &charClassMatcher{
						pos:        position{line: 322, col: 20, offset: 11124},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 326, col: 1, offset: 11177},
			expr: &actionExpr{
				pos: position{line: 326, col: 21, offset: 11197},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 326, col: 21, offset: 11197},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 326, col: 21, offset: 11197},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 25, offset: 11201},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 326, col: 31, offset: 11207},
								expr: &ruleRefExpr{
									pos:  position{line: 326, col: 32, offset: 11208},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 326, col: 51, offset: 11227},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 330, col: 1, offset: 11303},
			expr: &actionExpr{
				pos: position{line: 330, col: 20, offset: 11322},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 330, col: 20, offset: 11322},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 20, offset: 11322},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 24, offset: 11326},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 330, col: 31, offset: 11333},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 330, col: 31, offset: 11333},
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 31, offset: 11333},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 330, col: 51, offset: 11353},
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 51, offset: 11353},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 330, col: 66, offset: 11368},
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 66, offset: 11368},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 330, col: 78, offset: 11380},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 334, col: 1, offset: 11438},
			expr: &actionExpr{
				pos: position{line: 334, col: 23, offset: 11460},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 334, col: 23, offset: 11460},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 334, col: 28, offset: 11465},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 338, col: 1, offset: 11537},
			expr: &actionExpr{
				pos: position{line: 338, col: 25, offset: 11561},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 338, col: 25, offset: 11561},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 25, offset: 11561},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 338, col: 36, offset: 11572},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 37, offset: 11573},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 338, col: 56, offset: 11592},
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 56, offset: 11592},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 67, offset: 11603},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 342, col: 1, offset: 11715},
			expr: &choiceExpr{
				pos: position{line: 342, col: 18, offset: 11732},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 342, col: 18, offset: 11732},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 36, offset: 11750},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 58, offset: 11772},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 344, col: 1, offset: 11793},
			expr: &actionExpr{
				pos: position{line: 344, col: 24, offset: 11816},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 344, col: 24, offset: 11816},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 24, offset: 11816},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 28, offset: 11820},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 35, offset: 11827},
								name: "ShortHandValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 348, col: 1, offset: 11902},
			expr: &actionExpr{
				pos: position{line: 348, col: 20, offset: 11921},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 348, col: 20, offset: 11921},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 20, offset: 11921},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 24, offset: 11925},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 27, offset: 11928},
								name: "ShortHandValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 352, col: 1, offset: 11995},
			expr: &actionExpr{
				pos: position{line: 352, col: 22, offset: 12016},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 352, col: 22, offset: 12016},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 22, offset: 12016},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 26, offset: 12020},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 31, offset: 12025},
								name: "ShortHandValue",
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 357, col: 1, offset: 12141},
			expr: &ruleRefExpr{
				pos:  position{line: 357, col: 20, offset: 12160},
				name: "ShortHandValue",
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 359, col: 1, offset: 12178},
			expr: &choiceExpr{
				pos: position{line: 359, col: 19, offset: 12196},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 359, col: 19, offset: 12196},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 359, col: 41, offset: 12218},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 359, col: 65, offset: 12242},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 363, col: 1, offset: 12444},
			expr: &actionExpr{
				pos: position{line: 363, col: 24, offset: 12467},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 363, col: 24, offset: 12467},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 363, col: 24, offset: 12467},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 363, col: 43, offset: 12486},
							expr: &charClassMatcher{
								pos:        position{line: 363, col: 43, offset: 12486},
								val:        "[^,\\r\\n\"'.#%=\\]]",
								chars:      []rune{',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 367, col: 1, offset: 12544},
			expr: &actionExpr{
				pos: position{line: 367, col: 14, offset: 12557},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 367, col: 14, offset: 12557},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 367, col: 14, offset: 12557},
							expr: &seqExpr{
								pos: position{line: 367, col: 15, offset: 12558},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 367, col: 15, offset: 12558},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 367, col: 19, offset: 12562},
										expr: &ruleRefExpr{
											pos:  position{line: 367, col: 19, offset: 12562},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 28, offset: 12571},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 32, offset: 12575},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 367, col: 45, offset: 12588},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 45, offset: 12588},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 367, col: 52, offset: 12595},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 367, col: 56, offset: 12599},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 56, offset: 12599},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 63, offset: 12606},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 69, offset: 12612},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 367, col: 84, offset: 12627},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 84, offset: 12627},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 372, col: 1, offset: 12822},
			expr: &actionExpr{
				pos: position{line: 372, col: 17, offset: 12838},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 372, col: 17, offset: 12838},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 372, col: 17, offset: 12838},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 372, col: 26, offset: 12847},
							expr: &charClassMatcher{
								pos:        position{line: 372, col: 26, offset: 12847},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 376, col: 1, offset: 12899},
			expr: &choiceExpr{
				pos: position{line: 376, col: 19, offset: 12917},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 376, col: 19, offset: 12917},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 35, offset: 12933},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 59, offset: 12957},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 83, offset: 12981},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 378, col: 1, offset: 12999},
			expr: &actionExpr{
				pos: position{line: 378, col: 19, offset: 13017},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 378, col: 19, offset: 13017},
					expr: &charClassMatcher{
						pos:        position{line: 378, col: 19, offset: 13017},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 382, col: 1, offset: 13074},
			expr: &actionExpr{
				pos: position{line: 382, col: 26, offset: 13099},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 382, col: 26, offset: 13099},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 382, col: 26, offset: 13099},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 382, col: 30, offset: 13103},
							expr: &charClassMatcher{
								pos:        position{line: 382, col: 30, offset: 13103},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 382, col: 40, offset: 13113},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 386, col: 1, offset: 13174},
			expr: &actionExpr{
				pos: position{line: 386, col: 26, offset: 13199},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 386, col: 26, offset: 13199},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 386, col: 26, offset: 13199},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 386, col: 31, offset: 13204},
							expr: &charClassMatcher{
								pos:        position{line: 386, col: 31, offset: 13204},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 386, col: 41, offset: 13214},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 392, col: 1, offset: 13474},
			expr: &actionExpr{
				pos: position{line: 392, col: 18, offset: 13491},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 392, col: 18, offset: 13491},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 400, col: 1, offset: 13681},
			expr: &choiceExpr{
				pos: position{line: 400, col: 17, offset: 13697},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 400, col: 17, offset: 13697},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 400, col: 38, offset: 13718},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 402, col: 1, offset: 13740},
			expr: &actionExpr{
				pos: position{line: 402, col: 23, offset: 13762},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 402, col: 23, offset: 13762},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 402, col: 23, offset: 13762},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 46, offset: 13785},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 55, offset: 13794},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 82, offset: 13821},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 406, col: 1, offset: 13929},
			expr: &actionExpr{
				pos: position{line: 406, col: 31, offset: 13959},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 406, col: 31, offset: 13959},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 406, col: 41, offset: 13969},
						expr: &ruleRefExpr{
							pos:  position{line: 406, col: 41, offset: 13969},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 410, col: 1, offset: 14051},
			expr: &seqExpr{
				pos: position{line: 410, col: 27, offset: 14077},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 410, col: 27, offset: 14077},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 410, col: 32, offset: 14082},
						expr: &charClassMatcher{
							pos:        position{line: 410, col: 33, offset: 14083},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 412, col: 1, offset: 14096},
			expr: &litMatcher{
				pos:        position{line: 412, col: 25, offset: 14120},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 415, col: 1, offset: 14211},
			expr: &actionExpr{
				pos: position{line: 415, col: 30, offset: 14240},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 415, col: 30, offset: 14240},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 416, col: 9, offset: 14259},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 416, col: 9, offset: 14259},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 416, col: 9, offset: 14259},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 416, col: 19, offset: 14269},
										expr: &ruleRefExpr{
											pos:  position{line: 416, col: 20, offset: 14270},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 417, col: 11, offset: 14327},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 417, col: 11, offset: 14327},
										expr: &ruleRefExpr{
											pos:  position{line: 417, col: 11, offset: 14327},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 417, col: 18, offset: 14334},
										expr: &ruleRefExpr{
											pos:  position{line: 417, col: 19, offset: 14335},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 418, col: 11, offset: 14367},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 418, col: 11, offset: 14367},
										expr: &litMatcher{
											pos:        position{line: 418, col: 12, offset: 14368},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 418, col: 16, offset: 14372},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 419, col: 11, offset: 14421},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 420, col: 11, offset: 14443},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 421, col: 11, offset: 14466},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 422, col: 11, offset: 14492},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 423, col: 11, offset: 14521},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 424, col: 11, offset: 14537},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 425, col: 11, offset: 14570},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 426, col: 11, offset: 14590},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 427, col: 11, offset: 14612},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 428, col: 11, offset: 14634},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 429, col: 11, offset: 14659},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 430, col: 11, offset: 14686},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 430, col: 11, offset: 14686},
										expr: &litMatcher{
											pos:        position{line: 430, col: 12, offset: 14687},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 430, col: 17, offset: 14692},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 431, col: 11, offset: 14717},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 11, offset: 14747},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 433, col: 11, offset: 14776},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 437, col: 1, offset: 14846},
			expr: &choiceExpr{
				pos: position{line: 437, col: 41, offset: 14886},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 437, col: 41, offset: 14886},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 437, col: 55, offset: 14900},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 437, col: 55, offset: 14900},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 437, col: 55, offset: 14900},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 437, col: 59, offset: 14904},
									expr: &litMatcher{
										pos:        position{line: 437, col: 60, offset: 14905},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 441, col: 1, offset: 14968},
			expr: &actionExpr{
				pos: position{line: 441, col: 23, offset: 14990},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 441, col: 23, offset: 14990},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 441, col: 23, offset: 14990},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 46, offset: 15013},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 55, offset: 15022},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 441, col: 82, offset: 15049},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 445, col: 1, offset: 15157},
			expr: &actionExpr{
				pos: position{line: 445, col: 31, offset: 15187},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 445, col: 31, offset: 15187},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 445, col: 41, offset: 15197},
						expr: &ruleRefExpr{
							pos:  position{line: 445, col: 41, offset: 15197},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 450, col: 1, offset: 15362},
			expr: &actionExpr{
				pos: position{line: 450, col: 30, offset: 15391},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 450, col: 30, offset: 15391},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 451, col: 9, offset: 15410},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 451, col: 9, offset: 15410},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 451, col: 9, offset: 15410},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 451, col: 19, offset: 15420},
										expr: &ruleRefExpr{
											pos:  position{line: 451, col: 20, offset: 15421},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 452, col: 11, offset: 15478},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 452, col: 11, offset: 15478},
										expr: &ruleRefExpr{
											pos:  position{line: 452, col: 11, offset: 15478},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 452, col: 18, offset: 15485},
										expr: &ruleRefExpr{
											pos:  position{line: 452, col: 19, offset: 15486},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 453, col: 11, offset: 15518},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 454, col: 11, offset: 15536},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 455, col: 11, offset: 15558},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 456, col: 11, offset: 15581},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 457, col: 11, offset: 15607},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 458, col: 11, offset: 15636},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 459, col: 11, offset: 15652},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 460, col: 11, offset: 15685},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 461, col: 11, offset: 15705},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 462, col: 11, offset: 15727},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 463, col: 11, offset: 15749},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 464, col: 11, offset: 15774},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 465, col: 11, offset: 15801},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 465, col: 11, offset: 15801},
										expr: &litMatcher{
											pos:        position{line: 465, col: 12, offset: 15802},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 465, col: 18, offset: 15808},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 466, col: 11, offset: 15833},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 467, col: 11, offset: 15863},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 468, col: 11, offset: 15892},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 472, col: 1, offset: 15970},
			expr: &seqExpr{
				pos: position{line: 472, col: 27, offset: 15996},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 472, col: 27, offset: 15996},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 472, col: 33, offset: 16002},
						expr: &charClassMatcher{
							pos:        position{line: 472, col: 34, offset: 16003},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 474, col: 1, offset: 16016},
			expr: &litMatcher{
				pos:        position{line: 474, col: 25, offset: 16040},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 476, col: 1, offset: 16049},
			expr: &actionExpr{
				pos: position{line: 476, col: 41, offset: 16089},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 476, col: 42, offset: 16090},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 476, col: 42, offset: 16090},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 476, col: 56, offset: 16104},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 476, col: 56, offset: 16104},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 476, col: 60, offset: 16108},
									expr: &litMatcher{
										pos:        position{line: 476, col: 61, offset: 16109},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 483, col: 1, offset: 16281},
			expr: &actionExpr{
				pos: position{line: 483, col: 12, offset: 16292},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 483, col: 12, offset: 16292},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 483, col: 12, offset: 16292},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 483, col: 23, offset: 16303},
								expr: &ruleRefExpr{
									pos:  position{line: 483, col: 24, offset: 16304},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 484, col: 5, offset: 16322},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 484, col: 12, offset: 16329},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 484, col: 12, offset: 16329},
									expr: &litMatcher{
										pos:        position{line: 484, col: 13, offset: 16330},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 488, col: 5, offset: 16425},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 492, col: 5, offset: 16581},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 5, offset: 16581},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 492, col: 12, offset: 16588},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 19, offset: 16595},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 492, col: 34, offset: 16610},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 492, col: 38, offset: 16614},
								expr: &ruleRefExpr{
									pos:  position{line: 492, col: 38, offset: 16614},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 56, offset: 16632},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 496, col: 1, offset: 16742},
			expr: &actionExpr{
				pos: position{line: 496, col: 18, offset: 16759},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 496, col: 18, offset: 16759},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 496, col: 27, offset: 16768},
						expr: &seqExpr{
							pos: position{line: 496, col: 28, offset: 16769},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 496, col: 28, offset: 16769},
									expr: &ruleRefExpr{
										pos:  position{line: 496, col: 29, offset: 16770},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 496, col: 37, offset: 16778},
									expr: &ruleRefExpr{
										pos:  position{line: 496, col: 38, offset: 16779},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 496, col: 54, offset: 16795},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 500, col: 1, offset: 16920},
			expr: &actionExpr{
				pos: position{line: 500, col: 17, offset: 16936},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 500, col: 17, offset: 16936},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 500, col: 26, offset: 16945},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 500, col: 26, offset: 16945},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 16961},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 502, col: 11, offset: 17007},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 11, offset: 17007},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 503, col: 11, offset: 17026},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 504, col: 11, offset: 17052},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 505, col: 11, offset: 17081},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 17103},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 507, col: 11, offset: 17126},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 508, col: 11, offset: 17142},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 509, col: 11, offset: 17168},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 510, col: 11, offset: 17192},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 511, col: 11, offset: 17214},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 512, col: 11, offset: 17232},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 513, col: 11, offset: 17265},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 514, col: 11, offset: 17294},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 521, col: 1, offset: 17452},
			expr: &seqExpr{
				pos: position{line: 521, col: 31, offset: 17482},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 521, col: 31, offset: 17482},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 521, col: 41, offset: 17492},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 526, col: 1, offset: 17608},
			expr: &actionExpr{
				pos: position{line: 526, col: 19, offset: 17626},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 526, col: 19, offset: 17626},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 526, col: 19, offset: 17626},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 25, offset: 17632},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 526, col: 40, offset: 17647},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 526, col: 45, offset: 17652},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 52, offset: 17659},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 68, offset: 17675},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 75, offset: 17682},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 530, col: 1, offset: 17801},
			expr: &actionExpr{
				pos: position{line: 530, col: 20, offset: 17820},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 530, col: 20, offset: 17820},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 530, col: 20, offset: 17820},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 26, offset: 17826},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 530, col: 41, offset: 17841},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 45, offset: 17845},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 52, offset: 17852},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 68, offset: 17868},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 75, offset: 17875},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 534, col: 1, offset: 17995},
			expr: &actionExpr{
				pos: position{line: 534, col: 18, offset: 18012},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 534, col: 19, offset: 18013},
					expr: &charClassMatcher{
						pos:        position{line: 534, col: 19, offset: 18013},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 538, col: 1, offset: 18066},
			expr: &actionExpr{
				pos: position{line: 538, col: 19, offset: 18084},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 538, col: 19, offset: 18084},
					expr: &charClassMatcher{
						pos:        position{line: 538, col: 19, offset: 18084},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 542, col: 1, offset: 18136},
			expr: &actionExpr{
				pos: position{line: 542, col: 24, offset: 18159},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 542, col: 24, offset: 18159},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 542, col: 24, offset: 18159},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 542, col: 28, offset: 18163},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 542, col: 34, offset: 18169},
								expr: &ruleRefExpr{
									pos:  position{line: 542, col: 35, offset: 18170},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 542, col: 54, offset: 18189},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 549, col: 1, offset: 18378},
			expr: &actionExpr{
				pos: position{line: 549, col: 18, offset: 18395},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 549, col: 18, offset: 18395},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 549, col: 18, offset: 18395},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 549, col: 24, offset: 18401},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 549, col: 24, offset: 18401},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 549, col: 24, offset: 18401},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 549, col: 36, offset: 18413},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 549, col: 42, offset: 18419},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 549, col: 56, offset: 18433},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 549, col: 74, offset: 18451},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 551, col: 8, offset: 18600},
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 8, offset: 18600},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 551, col: 15, offset: 18607},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 555, col: 1, offset: 18663},
			expr: &actionExpr{
				pos: position{line: 555, col: 26, offset: 18688},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 555, col: 26, offset: 18688},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 555, col: 26, offset: 18688},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 555, col: 30, offset: 18692},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 555, col: 36, offset: 18698},
								expr: &choiceExpr{
									pos: position{line: 555, col: 37, offset: 18699},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 555, col: 37, offset: 18699},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 555, col: 59, offset: 18721},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 555, col: 80, offset: 18742},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 555, col: 99, offset: 18761},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 559, col: 1, offset: 18837},
			expr: &actionExpr{
				pos: position{line: 559, col: 24, offset: 18860},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 559, col: 24, offset: 18860},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 559, col: 24, offset: 18860},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 33, offset: 18869},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 40, offset: 18876},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 559, col: 66, offset: 18902},
							expr: &litMatcher{
								pos:        position{line: 559, col: 66, offset: 18902},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 563, col: 1, offset: 18965},
			expr: &actionExpr{
				pos: position{line: 563, col: 29, offset: 18993},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 563, col: 29, offset: 18993},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 563, col: 29, offset: 18993},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 563, col: 36, offset: 19000},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 563, col: 36, offset: 19000},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 564, col: 11, offset: 19118},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 565, col: 11, offset: 19155},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 566, col: 11, offset: 19182},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 567, col: 11, offset: 19215},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 568, col: 11, offset: 19248},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 569, col: 11, offset: 19276},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 569, col: 31, offset: 19296},
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 31, offset: 19296},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 569, col: 39, offset: 19304},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 569, col: 39, offset: 19304},
									expr: &litMatcher{
										pos:        position{line: 569, col: 40, offset: 19305},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 569, col: 46, offset: 19311},
									expr: &litMatcher{
										pos:        position{line: 569, col: 47, offset: 19312},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 573, col: 1, offset: 19348},
			expr: &actionExpr{
				pos: position{line: 573, col: 23, offset: 19370},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 573, col: 23, offset: 19370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 573, col: 23, offset: 19370},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 573, col: 30, offset: 19377},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 573, col: 30, offset: 19377},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 573, col: 47, offset: 19394},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 574, col: 5, offset: 19417},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 574, col: 12, offset: 19424},
								expr: &actionExpr{
									pos: position{line: 574, col: 13, offset: 19425},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 574, col: 13, offset: 19425},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 574, col: 13, offset: 19425},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 574, col: 17, offset: 19429},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 574, col: 24, offset: 19436},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 574, col: 24, offset: 19436},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 574, col: 41, offset: 19453},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 580, col: 1, offset: 19597},
			expr: &actionExpr{
				pos: position{line: 580, col: 29, offset: 19625},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 580, col: 29, offset: 19625},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 580, col: 29, offset: 19625},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 580, col: 34, offset: 19630},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 580, col: 41, offset: 19637},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 580, col: 41, offset: 19637},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 580, col: 58, offset: 19654},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 5, offset: 19677},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 581, col: 12, offset: 19684},
								expr: &actionExpr{
									pos: position{line: 581, col: 13, offset: 19685},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 581, col: 13, offset: 19685},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 581, col: 13, offset: 19685},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 581, col: 17, offset: 19689},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 581, col: 24, offset: 19696},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 581, col: 24, offset: 19696},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 581, col: 41, offset: 19713},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 583, col: 9, offset: 19768},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 587, col: 1, offset: 19862},
			expr: &actionExpr{
				pos: position{line: 587, col: 19, offset: 19880},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 587, col: 19, offset: 19880},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 587, col: 19, offset: 19880},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 26, offset: 19887},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 587, col: 34, offset: 19895},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 587, col: 39, offset: 19900},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 44, offset: 19905},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 591, col: 1, offset: 19997},
			expr: &actionExpr{
				pos: position{line: 591, col: 25, offset: 20021},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 591, col: 25, offset: 20021},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 591, col: 25, offset: 20021},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 30, offset: 20026},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 37, offset: 20033},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 591, col: 45, offset: 20041},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 50, offset: 20046},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 55, offset: 20051},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 591, col: 63, offset: 20059},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 595, col: 1, offset: 20148},
			expr: &actionExpr{
				pos: position{line: 595, col: 20, offset: 20167},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 595, col: 20, offset: 20167},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 595, col: 32, offset: 20179},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 599, col: 1, offset: 20278},
			expr: &actionExpr{
				pos: position{line: 599, col: 26, offset: 20303},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 599, col: 26, offset: 20303},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 599, col: 26, offset: 20303},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 31, offset: 20308},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 43, offset: 20320},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 599, col: 51, offset: 20328},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 603, col: 1, offset: 20424},
			expr: &actionExpr{
				pos: position{line: 603, col: 23, offset: 20446},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 603, col: 23, offset: 20446},
					expr: &charClassMatcher{
						pos:        position{line: 603, col: 23, offset: 20446},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 607, col: 1, offset: 20495},
			expr: &actionExpr{
				pos: position{line: 607, col: 23, offset: 20517},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 607, col: 23, offset: 20517},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 607, col: 24, offset: 20518},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 607, col: 24, offset: 20518},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 607, col: 34, offset: 20528},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 607, col: 42, offset: 20536},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 48, offset: 20542},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 607, col: 73, offset: 20567},
							expr: &litMatcher{
								pos:        position{line: 607, col: 73, offset: 20567},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 611, col: 1, offset: 20720},
			expr: &actionExpr{
				pos: position{line: 611, col: 28, offset: 20747},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 611, col: 28, offset: 20747},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 611, col: 28, offset: 20747},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 35, offset: 20754},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 611, col: 54, offset: 20773},
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 54, offset: 20773},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 611, col: 62, offset: 20781},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 611, col: 62, offset: 20781},
									expr: &litMatcher{
										pos:        position{line: 611, col: 63, offset: 20782},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 611, col: 69, offset: 20788},
									expr: &litMatcher{
										pos:        position{line: 611, col: 70, offset: 20789},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 615, col: 1, offset: 20825},
			expr: &actionExpr{
				pos: position{line: 615, col: 22, offset: 20846},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 615, col: 22, offset: 20846},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 615, col: 22, offset: 20846},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 29, offset: 20853},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 20868},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 616, col: 12, offset: 20875},
								expr: &actionExpr{
									pos: position{line: 616, col: 13, offset: 20876},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 616, col: 13, offset: 20876},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 616, col: 13, offset: 20876},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 616, col: 17, offset: 20880},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 616, col: 24, offset: 20887},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 622, col: 1, offset: 21024},
			expr: &choiceExpr{
				pos: position{line: 622, col: 13, offset: 21036},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 622, col: 13, offset: 21036},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 622, col: 13, offset: 21036},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 622, col: 18, offset: 21041},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 622, col: 18, offset: 21041},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 622, col: 30, offset: 21053},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 624, col: 5, offset: 21123},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 624, col: 5, offset: 21123},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 624, col: 5, offset: 21123},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 624, col: 9, offset: 21127},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 624, col: 14, offset: 21132},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 624, col: 14, offset: 21132},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 624, col: 26, offset: 21144},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 628, col: 1, offset: 21216},
			expr: &actionExpr{
				pos: position{line: 628, col: 16, offset: 21231},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 628, col: 16, offset: 21231},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 628, col: 16, offset: 21231},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 628, col: 23, offset: 21238},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 628, col: 23, offset: 21238},
									expr: &litMatcher{
										pos:        position{line: 628, col: 24, offset: 21239},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 631, col: 5, offset: 21296},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 639, col: 1, offset: 21546},
			expr: &zeroOrMoreExpr{
				pos: position{line: 639, col: 24, offset: 21569},
				expr: &choiceExpr{
					pos: position{line: 639, col: 25, offset: 21570},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 639, col: 25, offset: 21570},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 41, offset: 21586},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 641, col: 1, offset: 21608},
			expr: &actionExpr{
				pos: position{line: 641, col: 21, offset: 21628},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 641, col: 21, offset: 21628},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 641, col: 21, offset: 21628},
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 22, offset: 21629},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 641, col: 26, offset: 21633},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 641, col: 35, offset: 21642},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 641, col: 35, offset: 21642},
									expr: &charClassMatcher{
										pos:        position{line: 641, col: 35, offset: 21642},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 643, col: 12, offset: 21706},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 650, col: 1, offset: 21912},
			expr: &actionExpr{
				pos: position{line: 650, col: 21, offset: 21932},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 650, col: 21, offset: 21932},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 21, offset: 21932},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 650, col: 29, offset: 21940},
								expr: &choiceExpr{
									pos: position{line: 650, col: 30, offset: 21941},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 650, col: 30, offset: 21941},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 650, col: 53, offset: 21964},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 650, col: 74, offset: 21985},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 650, col: 74, offset: 21985,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 650, col: 107, offset: 22018},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 654, col: 1, offset: 22093},
			expr: &actionExpr{
				pos: position{line: 654, col: 25, offset: 22117},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 654, col: 25, offset: 22117},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 654, col: 25, offset: 22117},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 654, col: 33, offset: 22125},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 654, col: 38, offset: 22130},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 654, col: 38, offset: 22130},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 654, col: 78, offset: 22170},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 658, col: 1, offset: 22239},
			expr: &actionExpr{
				pos: position{line: 658, col: 23, offset: 22261},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 658, col: 23, offset: 22261},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 658, col: 23, offset: 22261},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 658, col: 31, offset: 22269},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 658, col: 36, offset: 22274},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 658, col: 36, offset: 22274},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 658, col: 76, offset: 22314},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 665, col: 1, offset: 22485},
			expr: &choiceExpr{
				pos: position{line: 665, col: 18, offset: 22502},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 665, col: 18, offset: 22502},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 665, col: 18, offset: 22502},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 27, offset: 22511},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 667, col: 9, offset: 22570},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 667, col: 9, offset: 22570},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 667, col: 15, offset: 22576},
								expr: &ruleRefExpr{
									pos:  position{line: 667, col: 16, offset: 22577},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 671, col: 1, offset: 22673},
			expr: &actionExpr{
				pos: position{line: 671, col: 22, offset: 22694},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 671, col: 22, offset: 22694},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 671, col: 22, offset: 22694},
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 23, offset: 22695},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 672, col: 5, offset: 22704},
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 6, offset: 22705},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 673, col: 5, offset: 22721},
							expr: &ruleRefExpr{
								pos:  position{line: 673, col: 6, offset: 22722},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 674, col: 5, offset: 22745},
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 6, offset: 22746},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 675, col: 5, offset: 22773},
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 6, offset: 22774},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 676, col: 5, offset: 22803},
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 6, offset: 22804},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 677, col: 5, offset: 22831},
							expr: &ruleRefExpr{
								pos:  position{line: 677, col: 6, offset: 22832},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 678, col: 5, offset: 22858},
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 6, offset: 22859},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 679, col: 5, offset: 22881},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 6, offset: 22882},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 680, col: 5, offset: 22902},
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 6, offset: 22903},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 681, col: 5, offset: 22931},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 681, col: 11, offset: 22937},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 681, col: 11, offset: 22937},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 681, col: 20, offset: 22946},
										expr: &ruleRefExpr{
											pos:  position{line: 681, col: 21, offset: 22947},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 683, col: 12, offset: 23048},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 687, col: 1, offset: 23091},
			expr: &seqExpr{
				pos: position{line: 687, col: 25, offset: 23115},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 687, col: 25, offset: 23115},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 687, col: 29, offset: 23119},
						expr: &ruleRefExpr{
							pos:  position{line: 687, col: 29, offset: 23119},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 687, col: 36, offset: 23126},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 689, col: 1, offset: 23200},
			expr: &actionExpr{
				pos: position{line: 689, col: 29, offset: 23228},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 689, col: 29, offset: 23228},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 689, col: 29, offset: 23228},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 689, col: 50, offset: 23249},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 58, offset: 23257},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 693, col: 1, offset: 23367},
			expr: &actionExpr{
				pos: position{line: 693, col: 29, offset: 23395},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 693, col: 29, offset: 23395},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 693, col: 29, offset: 23395},
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 30, offset: 23396},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 694, col: 5, offset: 23406},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 694, col: 14, offset: 23415},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 694, col: 14, offset: 23415},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 695, col: 11, offset: 23441},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 696, col: 11, offset: 23466},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 697, col: 11, offset: 23521},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 698, col: 11, offset: 23543},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 699, col: 11, offset: 23568},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 700, col: 11, offset: 23596},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 701, col: 11, offset: 23626},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 11, offset: 23693},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 704, col: 11, offset: 23745},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 705, col: 11, offset: 23770},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 706, col: 11, offset: 23803},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 707, col: 11, offset: 23830},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 708, col: 11, offset: 23868},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 709, col: 11, offset: 23894},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 716, col: 1, offset: 24064},
			expr: &actionExpr{
				pos: position{line: 716, col: 20, offset: 24083},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 716, col: 20, offset: 24083},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 716, col: 20, offset: 24083},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 716, col: 31, offset: 24094},
								expr: &ruleRefExpr{
									pos:  position{line: 716, col: 32, offset: 24095},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 716, col: 45, offset: 24108},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 53, offset: 24116},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 716, col: 76, offset: 24139},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 85, offset: 24148},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 720, col: 1, offset: 24292},
			expr: &actionExpr{
				pos: position{line: 721, col: 5, offset: 24323},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 721, col: 5, offset: 24323},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 721, col: 5, offset: 24323},
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 5, offset: 24323},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 721, col: 12, offset: 24330},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 723, col: 9, offset: 24395},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 723, col: 9, offset: 24395},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 723, col: 9, offset: 24395},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 723, col: 9, offset: 24395},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 723, col: 16, offset: 24402},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 723, col: 16, offset: 24402},
															expr: &litMatcher{
																pos:        position{line: 723, col: 17, offset: 24403},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 727, col: 9, offset: 24507},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 746, col: 11, offset: 25243},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 746, col: 11, offset: 25243},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 746, col: 11, offset: 25243},
													expr: &charClassMatcher{
														pos:        position{line: 746, col: 12, offset: 25244},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 746, col: 20, offset: 25252},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 748, col: 13, offset: 25365},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 748, col: 13, offset: 25365},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 748, col: 14, offset: 25366},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 748, col: 21, offset: 25373},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 750, col: 13, offset: 25489},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 750, col: 13, offset: 25489},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 750, col: 14, offset: 25490},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 750, col: 21, offset: 25497},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 752, col: 13, offset: 25613},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 752, col: 13, offset: 25613},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 752, col: 13, offset: 25613},
													expr: &charClassMatcher{
														pos:        position{line: 752, col: 14, offset: 25614},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 752, col: 22, offset: 25622},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 754, col: 13, offset: 25738},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 754, col: 13, offset: 25738},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 754, col: 13, offset: 25738},
													expr: &charClassMatcher{
														pos:        position{line: 754, col: 14, offset: 25739},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 754, col: 22, offset: 25747},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 756, col: 12, offset: 25862},
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 12, offset: 25862},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 760, col: 1, offset: 25901},
			expr: &actionExpr{
				pos: position{line: 760, col: 27, offset: 25927},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 760, col: 27, offset: 25927},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 760, col: 37, offset: 25937},
						expr: &ruleRefExpr{
							pos:  position{line: 760, col: 37, offset: 25937},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 767, col: 1, offset: 26144},
			expr: &actionExpr{
				pos: position{line: 767, col: 22, offset: 26165},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 767, col: 22, offset: 26165},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 767, col: 22, offset: 26165},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 767, col: 28, offset: 26171},
								expr: &ruleRefExpr{
									pos:  position{line: 767, col: 29, offset: 26172},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 42, offset: 26185},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 50, offset: 26193},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 75, offset: 26218},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 767, col: 86, offset: 26229},
								expr: &ruleRefExpr{
									pos:  position{line: 767, col: 87, offset: 26230},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 117, offset: 26260},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 126, offset: 26269},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 771, col: 1, offset: 26426},
			expr: &actionExpr{
				pos: position{line: 772, col: 5, offset: 26459},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 772, col: 5, offset: 26459},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 772, col: 5, offset: 26459},
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 5, offset: 26459},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 772, col: 12, offset: 26466},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 772, col: 20, offset: 26474},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 774, col: 9, offset: 26533},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 774, col: 9, offset: 26533},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 774, col: 9, offset: 26533},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 774, col: 16, offset: 26540},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 774, col: 16, offset: 26540},
															expr: &litMatcher{
																pos:        position{line: 774, col: 17, offset: 26541},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 778, col: 9, offset: 26645},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 795, col: 14, offset: 27369},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 795, col: 21, offset: 27376},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 795, col: 22, offset: 27377},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 797, col: 13, offset: 27465},
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 13, offset: 27465},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 801, col: 1, offset: 27505},
			expr: &actionExpr{
				pos: position{line: 801, col: 32, offset: 27536},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 801, col: 32, offset: 27536},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 801, col: 32, offset: 27536},
							expr: &litMatcher{
								pos:        position{line: 801, col: 33, offset: 27537},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 37, offset: 27541},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 802, col: 7, offset: 27556},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 802, col: 7, offset: 27556},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 802, col: 7, offset: 27556},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 803, col: 7, offset: 27602},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 803, col: 7, offset: 27602},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 804, col: 7, offset: 27646},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 804, col: 7, offset: 27646},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 805, col: 7, offset: 27689},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 7, offset: 27689},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 809, col: 1, offset: 27735},
			expr: &actionExpr{
				pos: position{line: 809, col: 29, offset: 27763},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 809, col: 29, offset: 27763},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 809, col: 39, offset: 27773},
						expr: &ruleRefExpr{
							pos:  position{line: 809, col: 39, offset: 27773},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 816, col: 1, offset: 28096},
			expr: &actionExpr{
				pos: position{line: 816, col: 20, offset: 28115},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 816, col: 20, offset: 28115},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 816, col: 20, offset: 28115},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 816, col: 26, offset: 28121},
								expr: &ruleRefExpr{
									pos:  position{line: 816, col: 27, offset: 28122},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 40, offset: 28135},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 816, col: 46, offset: 28141},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 75, offset: 28170},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 816, col: 86, offset: 28181},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 112, offset: 28207},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 816, col: 124, offset: 28219},
								expr: &ruleRefExpr{
									pos:  position{line: 816, col: 125, offset: 28220},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 820, col: 1, offset: 28365},
			expr: &seqExpr{
				pos: position{line: 820, col: 26, offset: 28390},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 820, col: 26, offset: 28390},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 820, col: 54, offset: 28418},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 822, col: 1, offset: 28446},
			expr: &choiceExpr{
				pos: position{line: 822, col: 33, offset: 28478},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 822, col: 33, offset: 28478},
						expr: &charClassMatcher{
							pos:        position{line: 822, col: 33, offset: 28478},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 822, col: 45, offset: 28490},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 822, col: 45, offset: 28490},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 822, col: 49, offset: 28494},
								expr: &litMatcher{
									pos:        position{line: 822, col: 50, offset: 28495},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 823, col: 1, offset: 28500},
			expr: &actionExpr{
				pos: position{line: 823, col: 32, offset: 28531},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 823, col: 32, offset: 28531},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 823, col: 42, offset: 28541},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 823, col: 42, offset: 28541},
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 42, offset: 28541},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 829, col: 1, offset: 28702},
			expr: &actionExpr{
				pos: position{line: 829, col: 24, offset: 28725},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 829, col: 24, offset: 28725},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 829, col: 33, offset: 28734},
						expr: &seqExpr{
							pos: position{line: 829, col: 34, offset: 28735},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 829, col: 34, offset: 28735},
									expr: &ruleRefExpr{
										pos:  position{line: 829, col: 35, offset: 28736},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 829, col: 43, offset: 28744},
									expr: &litMatcher{
										pos:        position{line: 829, col: 44, offset: 28745},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 829, col: 49, offset: 28750},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 833, col: 1, offset: 28881},
			expr: &actionExpr{
				pos: position{line: 833, col: 31, offset: 28911},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 833, col: 31, offset: 28911},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 833, col: 40, offset: 28920},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 833, col: 40, offset: 28920},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 834, col: 11, offset: 28936},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 835, col: 11, offset: 28986},
								expr: &ruleRefExpr{
									pos:  position{line: 835, col: 11, offset: 28986},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 836, col: 11, offset: 29005},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 837, col: 11, offset: 29031},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 838, col: 11, offset: 29061},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 839, col: 11, offset: 29082},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 840, col: 11, offset: 29111},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 841, col: 11, offset: 29133},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 842, col: 11, offset: 29157},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 843, col: 11, offset: 29173},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 844, col: 11, offset: 29199},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 845, col: 11, offset: 29223},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 846, col: 11, offset: 29245},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 847, col: 11, offset: 29263},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 848, col: 11, offset: 29296},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 849, col: 11, offset: 29325},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 853, col: 1, offset: 29368},
			expr: &actionExpr{
				pos: position{line: 854, col: 5, offset: 29402},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 854, col: 5, offset: 29402},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 854, col: 5, offset: 29402},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 854, col: 16, offset: 29413},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 854, col: 16, offset: 29413},
									expr: &litMatcher{
										pos:        position{line: 854, col: 17, offset: 29414},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 857, col: 5, offset: 29475},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 861, col: 6, offset: 29655},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 861, col: 6, offset: 29655},
									expr: &choiceExpr{
										pos: position{line: 861, col: 7, offset: 29656},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 861, col: 7, offset: 29656},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 861, col: 15, offset: 29664},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 861, col: 27, offset: 29676},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 865, col: 1, offset: 29720},
			expr: &actionExpr{
				pos: position{line: 865, col: 31, offset: 29750},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 865, col: 31, offset: 29750},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 865, col: 40, offset: 29759},
						expr: &ruleRefExpr{
							pos:  position{line: 865, col: 41, offset: 29760},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 872, col: 1, offset: 29958},
			expr: &choiceExpr{
				pos: position{line: 872, col: 19, offset: 29976},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 872, col: 19, offset: 29976},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 872, col: 19, offset: 29976},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 9, offset: 30024},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 874, col: 9, offset: 30024},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 876, col: 9, offset: 30074},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 876, col: 9, offset: 30074},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 878, col: 9, offset: 30134},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 878, col: 9, offset: 30134},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 9, offset: 30190},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 880, col: 9, offset: 30190},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 889, col: 1, offset: 30506},
			expr: &choiceExpr{
				pos: position{line: 891, col: 5, offset: 30555},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 891, col: 5, offset: 30555},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 891, col: 5, offset: 30555},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 891, col: 5, offset: 30555},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 891, col: 16, offset: 30566},
										expr: &ruleRefExpr{
											pos:  position{line: 891, col: 17, offset: 30567},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 891, col: 30, offset: 30580},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 891, col: 33, offset: 30583},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 891, col: 49, offset: 30599},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 891, col: 54, offset: 30604},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 891, col: 60, offset: 30610},
										expr: &ruleRefExpr{
											pos:  position{line: 891, col: 61, offset: 30611},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 895, col: 5, offset: 30796},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 895, col: 5, offset: 30796},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 895, col: 5, offset: 30796},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 895, col: 16, offset: 30807},
										expr: &ruleRefExpr{
											pos:  position{line: 895, col: 17, offset: 30808},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 895, col: 30, offset: 30821},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 895, col: 35, offset: 30826},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 895, col: 44, offset: 30835},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 899, col: 5, offset: 31034},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 899, col: 5, offset: 31034},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 899, col: 5, offset: 31034},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 899, col: 16, offset: 31045},
										expr: &ruleRefExpr{
											pos:  position{line: 899, col: 17, offset: 31046},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 899, col: 30, offset: 31059},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 906, col: 7, offset: 31345},
									expr: &ruleRefExpr{
										pos:  position{line: 906, col: 8, offset: 31346},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 906, col: 23, offset: 31361},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 906, col: 32, offset: 31370},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 910, col: 5, offset: 31571},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 910, col: 5, offset: 31571},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 910, col: 5, offset: 31571},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 910, col: 16, offset: 31582},
										expr: &ruleRefExpr{
											pos:  position{line: 910, col: 17, offset: 31583},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 910, col: 30, offset: 31596},
									expr: &ruleRefExpr{
										pos:  position{line: 910, col: 31, offset: 31597},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 910, col: 46, offset: 31612},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 910, col: 52, offset: 31618},
										expr: &ruleRefExpr{
											pos:  position{line: 910, col: 53, offset: 31619},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 914, col: 1, offset: 31719},
			expr: &oneOrMoreExpr{
				pos: position{line: 914, col: 38, offset: 31756},
				expr: &actionExpr{
					pos: position{line: 914, col: 39, offset: 31757},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 914, col: 39, offset: 31757},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 914, col: 39, offset: 31757},
								expr: &ruleRefExpr{
									pos:  position{line: 914, col: 40, offset: 31758},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 914, col: 50, offset: 31768},
								expr: &litMatcher{
									pos:        position{line: 914, col: 50, offset: 31768},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 914, col: 56, offset: 31774},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 914, col: 65, offset: 31783},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 918, col: 1, offset: 31928},
			expr: &actionExpr{
				pos: position{line: 918, col: 34, offset: 31961},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 918, col: 34, offset: 31961},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 918, col: 34, offset: 31961},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 918, col: 40, offset: 31967},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 918, col: 48, offset: 31975},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 918, col: 49, offset: 31976},
									expr: &charClassMatcher{
										pos:        position{line: 918, col: 49, offset: 31976},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 920, col: 8, offset: 32028},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 924, col: 1, offset: 32064},
			expr: &oneOrMoreExpr{
				pos: position{line: 924, col: 36, offset: 32099},
				expr: &actionExpr{
					pos: position{line: 924, col: 37, offset: 32100},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 924, col: 37, offset: 32100},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 924, col: 37, offset: 32100},
								expr: &ruleRefExpr{
									pos:  position{line: 924, col: 38, offset: 32101},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 924, col: 48, offset: 32111},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 924, col: 57, offset: 32120},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 929, col: 1, offset: 32338},
			expr: &actionExpr{
				pos: position{line: 929, col: 20, offset: 32357},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 929, col: 20, offset: 32357},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 929, col: 20, offset: 32357},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 929, col: 31, offset: 32368},
								expr: &ruleRefExpr{
									pos:  position{line: 929, col: 32, offset: 32369},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 930, col: 5, offset: 32388},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 938, col: 5, offset: 32682},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 938, col: 16, offset: 32693},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 939, col: 5, offset: 32717},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 939, col: 16, offset: 32728},
								expr: &ruleRefExpr{
									pos:  position{line: 939, col: 17, offset: 32729},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 943, col: 1, offset: 32867},
			expr: &actionExpr{
				pos: position{line: 944, col: 5, offset: 32895},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 944, col: 5, offset: 32895},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 944, col: 5, offset: 32895},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 944, col: 15, offset: 32905},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 944, col: 15, offset: 32905},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 944, col: 20, offset: 32910},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 20, offset: 32910},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 944, col: 36, offset: 32926},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 948, col: 1, offset: 33001},
			expr: &actionExpr{
				pos: position{line: 948, col: 23, offset: 33023},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 948, col: 23, offset: 33023},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 948, col: 33, offset: 33033},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 953, col: 1, offset: 33158},
			expr: &choiceExpr{
				pos: position{line: 955, col: 5, offset: 33216},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 955, col: 5, offset: 33216},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 955, col: 5, offset: 33216},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 955, col: 5, offset: 33216},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 955, col: 16, offset: 33227},
										expr: &ruleRefExpr{
											pos:  position{line: 955, col: 17, offset: 33228},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 955, col: 30, offset: 33241},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 955, col: 33, offset: 33244},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 955, col: 49, offset: 33260},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 955, col: 54, offset: 33265},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 955, col: 61, offset: 33272},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 33476},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 959, col: 5, offset: 33476},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 959, col: 5, offset: 33476},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 959, col: 16, offset: 33487},
										expr: &ruleRefExpr{
											pos:  position{line: 959, col: 17, offset: 33488},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 959, col: 30, offset: 33501},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 37, offset: 33508},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 963, col: 1, offset: 33613},
			expr: &actionExpr{
				pos: position{line: 963, col: 28, offset: 33640},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 963, col: 28, offset: 33640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 963, col: 28, offset: 33640},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 963, col: 39, offset: 33651},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 963, col: 59, offset: 33671},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 963, col: 70, offset: 33682},
								expr: &seqExpr{
									pos: position{line: 963, col: 71, offset: 33683},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 963, col: 71, offset: 33683},
											expr: &ruleRefExpr{
												pos:  position{line: 963, col: 72, offset: 33684},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 963, col: 93, offset: 33705},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 967, col: 1, offset: 33815},
			expr: &choiceExpr{
				pos: position{line: 969, col: 5, offset: 33869},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 33869},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 969, col: 5, offset: 33869},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 969, col: 5, offset: 33869},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 969, col: 16, offset: 33880},
										expr: &ruleRefExpr{
											pos:  position{line: 969, col: 17, offset: 33881},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 970, col: 5, offset: 33899},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 977, col: 5, offset: 34111},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 977, col: 8, offset: 34114},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 977, col: 24, offset: 34130},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 977, col: 29, offset: 34135},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 977, col: 35, offset: 34141},
										expr: &ruleRefExpr{
											pos:  position{line: 977, col: 36, offset: 34142},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 34338},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 981, col: 5, offset: 34338},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 981, col: 5, offset: 34338},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 981, col: 16, offset: 34349},
										expr: &ruleRefExpr{
											pos:  position{line: 981, col: 17, offset: 34350},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 982, col: 5, offset: 34368},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 989, col: 5, offset: 34580},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 989, col: 11, offset: 34586},
										expr: &ruleRefExpr{
											pos:  position{line: 989, col: 12, offset: 34587},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 993, col: 1, offset: 34692},
			expr: &actionExpr{
				pos: position{line: 993, col: 19, offset: 34710},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 993, col: 19, offset: 34710},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 993, col: 19, offset: 34710},
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 20, offset: 34711},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 994, col: 5, offset: 34726},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 994, col: 15, offset: 34736},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 994, col: 15, offset: 34736},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 994, col: 15, offset: 34736},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 994, col: 24, offset: 34745},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 996, col: 9, offset: 34839},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 996, col: 9, offset: 34839},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 996, col: 9, offset: 34839},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 996, col: 18, offset: 34848},
														expr: &ruleRefExpr{
															pos:  position{line: 996, col: 19, offset: 34849},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 996, col: 35, offset: 34865},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1002, col: 1, offset: 34988},
			expr: &actionExpr{
				pos: position{line: 1003, col: 5, offset: 35012},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1003, col: 5, offset: 35012},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1003, col: 14, offset: 35021},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1003, col: 14, offset: 35021},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1004, col: 11, offset: 35073},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1005, col: 11, offset: 35119},
								expr: &ruleRefExpr{
									pos:  position{line: 1005, col: 11, offset: 35119},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1006, col: 11, offset: 35138},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1006, col: 11, offset: 35138},
										expr: &ruleRefExpr{
											pos:  position{line: 1006, col: 12, offset: 35139},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1007, col: 13, offset: 35158},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1007, col: 13, offset: 35158},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1008, col: 15, offset: 35186},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1009, col: 15, offset: 35212},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1010, col: 15, offset: 35234},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1011, col: 15, offset: 35260},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1012, col: 15, offset: 35288},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1013, col: 15, offset: 35309},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1014, col: 15, offset: 35343},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1015, col: 15, offset: 35374},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1016, col: 15, offset: 35405},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1017, col: 15, offset: 35437},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1018, col: 15, offset: 35475},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1019, col: 15, offset: 35506},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1020, col: 15, offset: 35540},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1021, col: 15, offset: 35565},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1022, col: 15, offset: 35598},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1029, col: 1, offset: 35828},
			expr: &actionExpr{
				pos: position{line: 1029, col: 14, offset: 35841},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1029, col: 14, offset: 35841},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1029, col: 14, offset: 35841},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1029, col: 20, offset: 35847},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1029, col: 24, offset: 35851},
							expr: &ruleRefExpr{
								pos:  position{line: 1029, col: 24, offset: 35851},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1029, col: 31, offset: 35858},
							expr: &ruleRefExpr{
								pos:  position{line: 1029, col: 32, offset: 35859},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1036, col: 1, offset: 36150},
			expr: &choiceExpr{
				pos: position{line: 1036, col: 15, offset: 36164},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1036, col: 15, offset: 36164},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 41, offset: 36190},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 65, offset: 36214},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1038, col: 1, offset: 36235},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 32, offset: 36266},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1038, col: 32, offset: 36266},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1038, col: 32, offset: 36266},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1038, col: 36, offset: 36270},
								expr: &litMatcher{
									pos:        position{line: 1038, col: 37, offset: 36271},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1038, col: 43, offset: 36277},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1038, col: 43, offset: 36277},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1038, col: 47, offset: 36281},
								expr: &litMatcher{
									pos:        position{line: 1038, col: 48, offset: 36282},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1038, col: 54, offset: 36288},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1038, col: 54, offset: 36288},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1038, col: 58, offset: 36292},
								expr: &litMatcher{
									pos:        position{line: 1038, col: 59, offset: 36293},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1038, col: 65, offset: 36299},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1038, col: 65, offset: 36299},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1038, col: 69, offset: 36303},
								expr: &litMatcher{
									pos:        position{line: 1038, col: 70, offset: 36304},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1040, col: 1, offset: 36311},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 34, offset: 36344},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1040, col: 34, offset: 36344},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1040, col: 41, offset: 36351},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1040, col: 48, offset: 36358},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1040, col: 55, offset: 36365},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1040, col: 62, offset: 36372},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1040, col: 68, offset: 36378},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1042, col: 1, offset: 36385},
			expr: &actionExpr{
				pos: position{line: 1042, col: 26, offset: 36410},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1042, col: 26, offset: 36410},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1042, col: 32, offset: 36416},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1042, col: 32, offset: 36416},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1043, col: 15, offset: 36452},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1044, col: 15, offset: 36489},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1045, col: 15, offset: 36526},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1046, col: 15, offset: 36567},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1047, col: 15, offset: 36597},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1048, col: 15, offset: 36629},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1052, col: 1, offset: 36787},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 28, offset: 36814},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 28, offset: 36814},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 15, offset: 36849},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1054, col: 15, offset: 36886},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1055, col: 15, offset: 36923},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1057, col: 1, offset: 36951},
			expr: &choiceExpr{
				pos: position{line: 1057, col: 22, offset: 36972},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1057, col: 22, offset: 36972},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 15, offset: 37004},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 15, offset: 37037},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 15, offset: 37070},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 15, offset: 37107},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 15, offset: 37144},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1064, col: 1, offset: 37170},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 33, offset: 37202},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1064, col: 33, offset: 37202},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1064, col: 39, offset: 37208},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1064, col: 39, offset: 37208},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1068, col: 1, offset: 37345},
			expr: &actionExpr{
				pos: position{line: 1068, col: 25, offset: 37369},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1068, col: 25, offset: 37369},
					expr: &litMatcher{
						pos:        position{line: 1068, col: 25, offset: 37369},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1072, col: 1, offset: 37414},
			expr: &actionExpr{
				pos: position{line: 1072, col: 25, offset: 37438},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1072, col: 25, offset: 37438},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1072, col: 25, offset: 37438},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1072, col: 30, offset: 37443},
							expr: &litMatcher{
								pos:        position{line: 1072, col: 30, offset: 37443},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1080, col: 1, offset: 37548},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 13, offset: 37560},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1080, col: 13, offset: 37560},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 35, offset: 37582},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1082, col: 1, offset: 37651},
			expr: &actionExpr{
				pos: position{line: 1082, col: 24, offset: 37674},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 24, offset: 37674},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1082, col: 24, offset: 37674},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1082, col: 30, offset: 37680},
								expr: &ruleRefExpr{
									pos:  position{line: 1082, col: 31, offset: 37681},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1082, col: 49, offset: 37699},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 54, offset: 37704},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1082, col: 64, offset: 37714},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1082, col: 93, offset: 37743},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1086, col: 1, offset: 37834},
			expr: &seqExpr{
				pos: position{line: 1086, col: 32, offset: 37865},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1086, col: 32, offset: 37865},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1086, col: 59, offset: 37892},
						expr: &seqExpr{
							pos: position{line: 1086, col: 60, offset: 37893},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1086, col: 60, offset: 37893},
									expr: &litMatcher{
										pos:        position{line: 1086, col: 62, offset: 37895},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1086, col: 69, offset: 37902},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1086, col: 69, offset: 37902},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1086, col: 77, offset: 37910},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1088, col: 1, offset: 37977},
			expr: &choiceExpr{
				pos: position{line: 1088, col: 31, offset: 38007},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1088, col: 31, offset: 38007},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1089, col: 11, offset: 38023},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1089, col: 11, offset: 38023},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1089, col: 19, offset: 38031},
								expr: &ruleRefExpr{
									pos:  position{line: 1089, col: 20, offset: 38032},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 38051},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 38082},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 38106},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 38128},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 38150},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 38175},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 11, offset: 38200},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 11, offset: 38227},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 11, offset: 38245},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 11, offset: 38267},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 11, offset: 38290},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 11, offset: 38306},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 11, offset: 38335},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1103, col: 11, offset: 38368},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 11, offset: 38397},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1107, col: 1, offset: 38439},
			expr: &choiceExpr{
				pos: position{line: 1108, col: 5, offset: 38484},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1108, col: 5, offset: 38484},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1109, col: 7, offset: 38582},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1109, col: 7, offset: 38582},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1109, col: 7, offset: 38582},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 12, offset: 38587},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1113, col: 1, offset: 38754},
			expr: &choiceExpr{
				pos: position{line: 1113, col: 24, offset: 38777},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1113, col: 24, offset: 38777},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1113, col: 24, offset: 38777},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1113, col: 24, offset: 38777},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1113, col: 30, offset: 38783},
										expr: &ruleRefExpr{
											pos:  position{line: 1113, col: 31, offset: 38784},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1113, col: 51, offset: 38804},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1113, col: 51, offset: 38804},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1113, col: 55, offset: 38808},
											expr: &litMatcher{
												pos:        position{line: 1113, col: 56, offset: 38809},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 61, offset: 38814},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 71, offset: 38824},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1113, col: 100, offset: 38853},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1113, col: 104, offset: 38857},
									expr: &notExpr{
										pos: position{line: 1113, col: 106, offset: 38859},
										expr: &ruleRefExpr{
											pos:  position{line: 1113, col: 107, offset: 38860},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 39056},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1115, col: 5, offset: 39056},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1115, col: 5, offset: 39056},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1115, col: 11, offset: 39062},
										expr: &ruleRefExpr{
											pos:  position{line: 1115, col: 12, offset: 39063},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1115, col: 30, offset: 39081},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1115, col: 34, offset: 39085},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1115, col: 44, offset: 39095},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1115, col: 44, offset: 39095},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1115, col: 48, offset: 39099},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1115, col: 77, offset: 39128},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1119, col: 1, offset: 39338},
			expr: &seqExpr{
				pos: position{line: 1119, col: 32, offset: 39369},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1119, col: 32, offset: 39369},
						expr: &ruleRefExpr{
							pos:  position{line: 1119, col: 33, offset: 39370},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1119, col: 39, offset: 39376},
						expr: &ruleRefExpr{
							pos:  position{line: 1119, col: 39, offset: 39376},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1121, col: 1, offset: 39407},
			expr: &choiceExpr{
				pos: position{line: 1121, col: 31, offset: 39437},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1121, col: 31, offset: 39437},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1122, col: 11, offset: 39453},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1122, col: 11, offset: 39453},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1122, col: 19, offset: 39461},
								expr: &ruleRefExpr{
									pos:  position{line: 1122, col: 20, offset: 39462},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 11, offset: 39481},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1124, col: 11, offset: 39512},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1125, col: 11, offset: 39536},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1125, col: 11, offset: 39536},
								expr: &ruleRefExpr{
									pos:  position{line: 1125, col: 11, offset: 39536},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1125, col: 18, offset: 39543},
								expr: &seqExpr{
									pos: position{line: 1125, col: 19, offset: 39544},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1125, col: 19, offset: 39544},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1125, col: 23, offset: 39548},
											expr: &litMatcher{
												pos:        position{line: 1125, col: 24, offset: 39549},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 11, offset: 39566},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 11, offset: 39588},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 11, offset: 39610},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 11, offset: 39635},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1130, col: 11, offset: 39660},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 11, offset: 39687},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 11, offset: 39705},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 11, offset: 39727},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 11, offset: 39751},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 11, offset: 39769},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1136, col: 11, offset: 39798},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 11, offset: 39831},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1138, col: 11, offset: 39860},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1140, col: 1, offset: 39900},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 5, offset: 39945},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1141, col: 5, offset: 39945},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1142, col: 7, offset: 40043},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1142, col: 7, offset: 40043},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 7, offset: 40043},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 11, offset: 40047},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1146, col: 1, offset: 40214},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 5, offset: 40239},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1147, col: 5, offset: 40239},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1147, col: 5, offset: 40239},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1147, col: 5, offset: 40239},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1147, col: 18, offset: 40252},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1147, col: 40, offset: 40274},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1147, col: 45, offset: 40279},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1147, col: 55, offset: 40289},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1147, col: 84, offset: 40318},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1149, col: 9, offset: 40477},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1149, col: 9, offset: 40477},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1149, col: 9, offset: 40477},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 22, offset: 40490},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 44, offset: 40512},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1149, col: 49, offset: 40517},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 59, offset: 40527},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 88, offset: 40556},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1152, col: 9, offset: 40759},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1152, col: 9, offset: 40759},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1152, col: 9, offset: 40759},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 22, offset: 40772},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1152, col: 44, offset: 40794},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1152, col: 48, offset: 40798},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 58, offset: 40808},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1152, col: 87, offset: 40837},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1160, col: 1, offset: 41053},
			expr: &choiceExpr{
				pos: position{line: 1160, col: 15, offset: 41067},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1160, col: 15, offset: 41067},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 39, offset: 41091},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1162, col: 1, offset: 41116},
			expr: &actionExpr{
				pos: position{line: 1162, col: 26, offset: 41141},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 26, offset: 41141},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1162, col: 26, offset: 41141},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1162, col: 32, offset: 41147},
								expr: &ruleRefExpr{
									pos:  position{line: 1162, col: 33, offset: 41148},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1162, col: 51, offset: 41166},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1162, col: 56, offset: 41171},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1162, col: 66, offset: 41181},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1162, col: 97, offset: 41212},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1166, col: 1, offset: 41350},
			expr: &seqExpr{
				pos: position{line: 1166, col: 34, offset: 41383},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1166, col: 34, offset: 41383},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1166, col: 63, offset: 41412},
						expr: &seqExpr{
							pos: position{line: 1166, col: 64, offset: 41413},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1166, col: 64, offset: 41413},
									expr: &litMatcher{
										pos:        position{line: 1166, col: 66, offset: 41415},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1166, col: 73, offset: 41422},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1166, col: 73, offset: 41422},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1166, col: 81, offset: 41430},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1168, col: 1, offset: 41499},
			expr: &choiceExpr{
				pos: position{line: 1168, col: 33, offset: 41531},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1168, col: 33, offset: 41531},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1169, col: 11, offset: 41547},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1169, col: 11, offset: 41547},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1169, col: 19, offset: 41555},
								expr: &ruleRefExpr{
									pos:  position{line: 1169, col: 20, offset: 41556},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 11, offset: 41575},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 11, offset: 41608},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 11, offset: 41632},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 11, offset: 41652},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 11, offset: 41674},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 11, offset: 41699},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 11, offset: 41724},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 11, offset: 41751},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 11, offset: 41769},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 11, offset: 41791},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 11, offset: 41815},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 11, offset: 41832},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1182, col: 11, offset: 41861},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 11, offset: 41890},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1185, col: 1, offset: 41932},
			expr: &choiceExpr{
				pos: position{line: 1186, col: 5, offset: 41979},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1186, col: 5, offset: 41979},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1187, col: 7, offset: 42079},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1187, col: 7, offset: 42079},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1187, col: 7, offset: 42079},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1187, col: 12, offset: 42084},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1191, col: 1, offset: 42253},
			expr: &choiceExpr{
				pos: position{line: 1191, col: 26, offset: 42278},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1191, col: 26, offset: 42278},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1191, col: 26, offset: 42278},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1191, col: 26, offset: 42278},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1191, col: 32, offset: 42284},
										expr: &ruleRefExpr{
											pos:  position{line: 1191, col: 33, offset: 42285},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1191, col: 52, offset: 42304},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1191, col: 52, offset: 42304},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1191, col: 56, offset: 42308},
											expr: &litMatcher{
												pos:        position{line: 1191, col: 57, offset: 42309},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1191, col: 62, offset: 42314},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1191, col: 72, offset: 42324},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1191, col: 103, offset: 42355},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1193, col: 5, offset: 42547},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1193, col: 5, offset: 42547},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1193, col: 5, offset: 42547},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1193, col: 11, offset: 42553},
										expr: &ruleRefExpr{
											pos:  position{line: 1193, col: 12, offset: 42554},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 30, offset: 42572},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1193, col: 34, offset: 42576},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1193, col: 44, offset: 42586},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1193, col: 44, offset: 42586},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1193, col: 48, offset: 42590},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 79, offset: 42621},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1197, col: 1, offset: 42835},
			expr: &seqExpr{
				pos: position{line: 1197, col: 34, offset: 42868},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1197, col: 34, offset: 42868},
						expr: &ruleRefExpr{
							pos:  position{line: 1197, col: 35, offset: 42869},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1197, col: 41, offset: 42875},
						expr: &ruleRefExpr{
							pos:  position{line: 1197, col: 41, offset: 42875},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1199, col: 1, offset: 42908},
			expr: &choiceExpr{
				pos: position{line: 1199, col: 33, offset: 42940},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1199, col: 33, offset: 42940},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1200, col: 11, offset: 42956},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1200, col: 11, offset: 42956},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1200, col: 19, offset: 42964},
								expr: &ruleRefExpr{
									pos:  position{line: 1200, col: 20, offset: 42965},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 11, offset: 42984},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 11, offset: 43017},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1203, col: 11, offset: 43041},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1203, col: 11, offset: 43041},
								expr: &ruleRefExpr{
									pos:  position{line: 1203, col: 11, offset: 43041},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1203, col: 18, offset: 43048},
								expr: &seqExpr{
									pos: position{line: 1203, col: 19, offset: 43049},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1203, col: 19, offset: 43049},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1203, col: 23, offset: 43053},
											expr: &litMatcher{
												pos:        position{line: 1203, col: 24, offset: 43054},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 43071},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 43091},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 11, offset: 43113},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 43138},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 43163},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 43190},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 43208},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 43230},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 43254},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 43272},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 43302},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 11, offset: 43335},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 11, offset: 43364},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1218, col: 1, offset: 43406},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 5, offset: 43453},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1219, col: 5, offset: 43453},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1220, col: 7, offset: 43553},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1220, col: 7, offset: 43553},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1220, col: 7, offset: 43553},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1220, col: 11, offset: 43557},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1224, col: 1, offset: 43727},
			expr: &choiceExpr{
				pos: position{line: 1225, col: 5, offset: 43754},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1225, col: 5, offset: 43754},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1225, col: 5, offset: 43754},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1225, col: 5, offset: 43754},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 18, offset: 43767},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1225, col: 40, offset: 43789},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1225, col: 45, offset: 43794},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 55, offset: 43804},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1225, col: 86, offset: 43835},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1227, col: 9, offset: 43994},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1227, col: 9, offset: 43994},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1227, col: 9, offset: 43994},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 22, offset: 44007},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1227, col: 44, offset: 44029},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 49, offset: 44034},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 59, offset: 44044},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1227, col: 90, offset: 44075},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1230, col: 9, offset: 44278},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1230, col: 9, offset: 44278},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1230, col: 9, offset: 44278},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1230, col: 22, offset: 44291},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1230, col: 44, offset: 44313},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1230, col: 48, offset: 44317},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1230, col: 58, offset: 44327},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1230, col: 89, offset: 44358},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1237, col: 1, offset: 44575},
			expr: &choiceExpr{
				pos: position{line: 1237, col: 18, offset: 44592},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1237, col: 18, offset: 44592},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 45, offset: 44619},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1239, col: 1, offset: 44647},
			expr: &actionExpr{
				pos: position{line: 1239, col: 29, offset: 44675},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1239, col: 29, offset: 44675},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1239, col: 29, offset: 44675},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1239, col: 35, offset: 44681},
								expr: &ruleRefExpr{
									pos:  position{line: 1239, col: 36, offset: 44682},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1239, col: 54, offset: 44700},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1239, col: 59, offset: 44705},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1239, col: 69, offset: 44715},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1239, col: 103, offset: 44749},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1243, col: 1, offset: 44890},
			expr: &seqExpr{
				pos: position{line: 1243, col: 37, offset: 44926},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1243, col: 37, offset: 44926},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1243, col: 69, offset: 44958},
						expr: &seqExpr{
							pos: position{line: 1243, col: 70, offset: 44959},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1243, col: 70, offset: 44959},
									expr: &litMatcher{
										pos:        position{line: 1243, col: 72, offset: 44961},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1243, col: 79, offset: 44968},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1243, col: 79, offset: 44968},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1243, col: 87, offset: 44976},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1245, col: 1, offset: 45047},
			expr: &choiceExpr{
				pos: position{line: 1245, col: 36, offset: 45082},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1245, col: 36, offset: 45082},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1246, col: 11, offset: 45098},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1246, col: 11, offset: 45098},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1246, col: 19, offset: 45106},
								expr: &ruleRefExpr{
									pos:  position{line: 1246, col: 20, offset: 45107},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 11, offset: 45126},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 11, offset: 45144},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 11, offset: 45180},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 45204},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 11, offset: 45224},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 45246},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 45268},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 45293},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 45320},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 45342},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 11, offset: 45365},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 11, offset: 45381},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 11, offset: 45411},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 11, offset: 45440},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1262, col: 1, offset: 45485},
			expr: &choiceExpr{
				pos: position{line: 1263, col: 5, offset: 45535},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1263, col: 5, offset: 45535},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1264, col: 7, offset: 45638},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1264, col: 7, offset: 45638},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1264, col: 7, offset: 45638},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1264, col: 12, offset: 45643},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1268, col: 1, offset: 45815},
			expr: &choiceExpr{
				pos: position{line: 1268, col: 29, offset: 45843},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1268, col: 29, offset: 45843},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1268, col: 29, offset: 45843},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1268, col: 29, offset: 45843},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1268, col: 35, offset: 45849},
										expr: &ruleRefExpr{
											pos:  position{line: 1268, col: 36, offset: 45850},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1268, col: 55, offset: 45869},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1268, col: 55, offset: 45869},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1268, col: 59, offset: 45873},
											expr: &litMatcher{
												pos:        position{line: 1268, col: 60, offset: 45874},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1268, col: 65, offset: 45879},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1268, col: 75, offset: 45889},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1268, col: 109, offset: 45923},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1270, col: 5, offset: 46118},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1270, col: 5, offset: 46118},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1270, col: 5, offset: 46118},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1270, col: 11, offset: 46124},
										expr: &ruleRefExpr{
											pos:  position{line: 1270, col: 12, offset: 46125},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1270, col: 30, offset: 46143},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1270, col: 34, offset: 46147},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1270, col: 44, offset: 46157},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1270, col: 44, offset: 46157},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1270, col: 48, offset: 46161},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1270, col: 82, offset: 46195},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1274, col: 1, offset: 46413},
			expr: &seqExpr{
				pos: position{line: 1274, col: 37, offset: 46449},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1274, col: 37, offset: 46449},
						expr: &ruleRefExpr{
							pos:  position{line: 1274, col: 38, offset: 46450},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1274, col: 44, offset: 46456},
						expr: &ruleRefExpr{
							pos:  position{line: 1274, col: 44, offset: 46456},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1276, col: 1, offset: 46492},
			expr: &choiceExpr{
				pos: position{line: 1276, col: 37, offset: 46528},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1276, col: 37, offset: 46528},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1277, col: 11, offset: 46544},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1277, col: 11, offset: 46544},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1277, col: 19, offset: 46552},
								expr: &ruleRefExpr{
									pos:  position{line: 1277, col: 20, offset: 46553},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1278, col: 11, offset: 46572},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1279, col: 11, offset: 46608},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1280, col: 11, offset: 46632},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1280, col: 11, offset: 46632},
								expr: &ruleRefExpr{
									pos:  position{line: 1280, col: 11, offset: 46632},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1280, col: 18, offset: 46639},
								expr: &seqExpr{
									pos: position{line: 1280, col: 19, offset: 46640},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1280, col: 19, offset: 46640},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1280, col: 23, offset: 46644},
											expr: &litMatcher{
												pos:        position{line: 1280, col: 24, offset: 46645},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 11, offset: 46774},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 11, offset: 46794},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 11, offset: 46816},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 11, offset: 46838},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1285, col: 11, offset: 46863},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1286, col: 11, offset: 46890},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1286, col: 11, offset: 46890},
								expr: &litMatcher{
									pos:        position{line: 1286, col: 12, offset: 46891},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1286, col: 16, offset: 46895},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 11, offset: 46913},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 11, offset: 46935},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 11, offset: 46959},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 11, offset: 46976},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 11, offset: 47006},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 47039},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 47068},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1295, col: 1, offset: 47113},
			expr: &choiceExpr{
				pos: position{line: 1296, col: 5, offset: 47163},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1296, col: 5, offset: 47163},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1297, col: 7, offset: 47266},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1297, col: 7, offset: 47266},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1297, col: 7, offset: 47266},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1297, col: 11, offset: 47270},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1301, col: 1, offset: 47443},
			expr: &choiceExpr{
				pos: position{line: 1302, col: 5, offset: 47473},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 47473},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1302, col: 5, offset: 47473},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1302, col: 5, offset: 47473},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1302, col: 18, offset: 47486},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 40, offset: 47508},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1302, col: 45, offset: 47513},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1302, col: 55, offset: 47523},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 89, offset: 47557},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1304, col: 9, offset: 47716},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1304, col: 9, offset: 47716},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1304, col: 9, offset: 47716},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1304, col: 22, offset: 47729},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1304, col: 44, offset: 47751},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1304, col: 49, offset: 47756},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1304, col: 59, offset: 47766},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1304, col: 93, offset: 47800},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1307, col: 9, offset: 48003},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1307, col: 9, offset: 48003},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1307, col: 9, offset: 48003},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1307, col: 22, offset: 48016},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1307, col: 44, offset: 48038},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1307, col: 48, offset: 48042},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1307, col: 58, offset: 48052},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1307, col: 92, offset: 48086},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1315, col: 1, offset: 48302},
			expr: &choiceExpr{
				pos: position{line: 1315, col: 15, offset: 48316},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1315, col: 15, offset: 48316},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 39, offset: 48340},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1317, col: 1, offset: 48365},
			expr: &actionExpr{
				pos: position{line: 1317, col: 26, offset: 48390},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1317, col: 26, offset: 48390},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1317, col: 26, offset: 48390},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1317, col: 32, offset: 48396},
								expr: &ruleRefExpr{
									pos:  position{line: 1317, col: 33, offset: 48397},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1317, col: 51, offset: 48415},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 56, offset: 48420},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1317, col: 66, offset: 48430},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1317, col: 97, offset: 48461},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1321, col: 1, offset: 48599},
			expr: &seqExpr{
				pos: position{line: 1321, col: 34, offset: 48632},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1321, col: 34, offset: 48632},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1321, col: 63, offset: 48661},
						expr: &seqExpr{
							pos: position{line: 1321, col: 64, offset: 48662},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1321, col: 64, offset: 48662},
									expr: &litMatcher{
										pos:        position{line: 1321, col: 66, offset: 48664},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1321, col: 73, offset: 48671},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1321, col: 73, offset: 48671},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1321, col: 81, offset: 48679},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1323, col: 1, offset: 48748},
			expr: &choiceExpr{
				pos: position{line: 1323, col: 33, offset: 48780},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1323, col: 33, offset: 48780},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 48796},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1325, col: 11, offset: 48829},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1325, col: 11, offset: 48829},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1325, col: 19, offset: 48837},
								expr: &ruleRefExpr{
									pos:  position{line: 1325, col: 20, offset: 48838},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 48857},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 48881},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 11, offset: 48901},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 11, offset: 48923},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 48948},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 11, offset: 48973},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 11, offset: 49000},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 11, offset: 49018},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 11, offset: 49040},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 11, offset: 49063},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 11, offset: 49079},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 11, offset: 49108},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 49137},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1340, col: 1, offset: 49179},
			expr: &choiceExpr{
				pos: position{line: 1341, col: 5, offset: 49226},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1341, col: 5, offset: 49226},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1342, col: 7, offset: 49326},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1342, col: 7, offset: 49326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1342, col: 7, offset: 49326},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1342, col: 12, offset: 49331},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1346, col: 1, offset: 49500},
			expr: &choiceExpr{
				pos: position{line: 1346, col: 26, offset: 49525},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1346, col: 26, offset: 49525},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1346, col: 26, offset: 49525},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1346, col: 26, offset: 49525},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1346, col: 32, offset: 49531},
										expr: &ruleRefExpr{
											pos:  position{line: 1346, col: 33, offset: 49532},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1346, col: 52, offset: 49551},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1346, col: 52, offset: 49551},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1346, col: 56, offset: 49555},
											expr: &litMatcher{
												pos:        position{line: 1346, col: 57, offset: 49556},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1346, col: 62, offset: 49561},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1346, col: 72, offset: 49571},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1346, col: 103, offset: 49602},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1348, col: 5, offset: 49794},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1348, col: 5, offset: 49794},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1348, col: 5, offset: 49794},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1348, col: 11, offset: 49800},
										expr: &ruleRefExpr{
											pos:  position{line: 1348, col: 12, offset: 49801},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1348, col: 30, offset: 49819},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1348, col: 34, offset: 49823},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1348, col: 44, offset: 49833},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1348, col: 44, offset: 49833},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1348, col: 48, offset: 49837},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1348, col: 79, offset: 49868},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1352, col: 1, offset: 50081},
			expr: &seqExpr{
				pos: position{line: 1352, col: 34, offset: 50114},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1352, col: 34, offset: 50114},
						expr: &ruleRefExpr{
							pos:  position{line: 1352, col: 35, offset: 50115},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1352, col: 41, offset: 50121},
						expr: &ruleRefExpr{
							pos:  position{line: 1352, col: 41, offset: 50121},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1354, col: 1, offset: 50154},
			expr: &choiceExpr{
				pos: position{line: 1354, col: 33, offset: 50186},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1354, col: 33, offset: 50186},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 11, offset: 50202},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1356, col: 11, offset: 50235},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1356, col: 11, offset: 50235},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1356, col: 19, offset: 50243},
								expr: &ruleRefExpr{
									pos:  position{line: 1356, col: 20, offset: 50244},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 11, offset: 50263},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1358, col: 11, offset: 50287},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1358, col: 11, offset: 50287},
								expr: &ruleRefExpr{
									pos:  position{line: 1358, col: 11, offset: 50287},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1358, col: 18, offset: 50294},
								expr: &seqExpr{
									pos: position{line: 1358, col: 19, offset: 50295},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1358, col: 19, offset: 50295},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1358, col: 23, offset: 50299},
											expr: &litMatcher{
												pos:        position{line: 1358, col: 24, offset: 50300},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1359, col: 11, offset: 50317},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 11, offset: 50337},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 11, offset: 50359},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1362, col: 11, offset: 50384},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 11, offset: 50409},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 11, offset: 50436},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 11, offset: 50454},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 50476},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 11, offset: 50499},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 50515},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 50544},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 50577},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 50606},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1373, col: 1, offset: 50648},
			expr: &choiceExpr{
				pos: position{line: 1374, col: 5, offset: 50695},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1374, col: 5, offset: 50695},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1375, col: 7, offset: 50793},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1375, col: 7, offset: 50793},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1375, col: 7, offset: 50793},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1375, col: 11, offset: 50797},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1379, col: 1, offset: 50964},
			expr: &choiceExpr{
				pos: position{line: 1380, col: 5, offset: 50990},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1380, col: 5, offset: 50990},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1380, col: 5, offset: 50990},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1380, col: 5, offset: 50990},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1380, col: 18, offset: 51003},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 40, offset: 51025},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1380, col: 45, offset: 51030},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1380, col: 55, offset: 51040},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 86, offset: 51071},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1382, col: 9, offset: 51230},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1382, col: 9, offset: 51230},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1382, col: 9, offset: 51230},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1382, col: 22, offset: 51243},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1382, col: 44, offset: 51265},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1382, col: 49, offset: 51270},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1382, col: 59, offset: 51280},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1382, col: 90, offset: 51311},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1385, col: 9, offset: 51514},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1385, col: 9, offset: 51514},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1385, col: 9, offset: 51514},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1385, col: 22, offset: 51527},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1385, col: 44, offset: 51549},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1385, col: 48, offset: 51553},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1385, col: 58, offset: 51563},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1385, col: 89, offset: 51594},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1390, col: 1, offset: 51749},
			expr: &actionExpr{
				pos: position{line: 1390, col: 18, offset: 51766},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1390, col: 18, offset: 51766},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1390, col: 18, offset: 51766},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1390, col: 24, offset: 51772},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 25, offset: 51773},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1390, col: 43, offset: 51791},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 47, offset: 51795},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 56, offset: 51804},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1390, col: 78, offset: 51826},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1394, col: 1, offset: 51926},
			expr: &choiceExpr{
				pos: position{line: 1394, col: 25, offset: 51950},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1394, col: 25, offset: 51950},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 38, offset: 51963},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1396, col: 1, offset: 51984},
			expr: &actionExpr{
				pos: position{line: 1396, col: 21, offset: 52004},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1396, col: 21, offset: 52004},
					expr: &charClassMatcher{
						pos:        position{line: 1396, col: 21, offset: 52004},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1400, col: 1, offset: 52085},
			expr: &actionExpr{
				pos: position{line: 1400, col: 25, offset: 52109},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 25, offset: 52109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1400, col: 25, offset: 52109},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 38, offset: 52122},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1400, col: 60, offset: 52144},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 64, offset: 52148},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 73, offset: 52157},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1400, col: 95, offset: 52179},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1404, col: 1, offset: 52312},
			expr: &actionExpr{
				pos: position{line: 1404, col: 20, offset: 52331},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1404, col: 20, offset: 52331},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1404, col: 20, offset: 52331},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1404, col: 26, offset: 52337},
								expr: &ruleRefExpr{
									pos:  position{line: 1404, col: 27, offset: 52338},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1404, col: 45, offset: 52356},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1404, col: 49, offset: 52360},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1404, col: 58, offset: 52369},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1404, col: 82, offset: 52393},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1408, col: 1, offset: 52495},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 27, offset: 52521},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1408, col: 27, offset: 52521},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 40, offset: 52534},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1410, col: 1, offset: 52557},
			expr: &actionExpr{
				pos: position{line: 1410, col: 23, offset: 52579},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1410, col: 23, offset: 52579},
					expr: &charClassMatcher{
						pos:        position{line: 1410, col: 23, offset: 52579},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1414, col: 1, offset: 52660},
			expr: &actionExpr{
				pos: position{line: 1414, col: 27, offset: 52686},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1414, col: 27, offset: 52686},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1414, col: 27, offset: 52686},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1414, col: 40, offset: 52699},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1414, col: 62, offset: 52721},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1414, col: 66, offset: 52725},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1414, col: 75, offset: 52734},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1414, col: 99, offset: 52758},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1421, col: 1, offset: 53007},
			expr: &choiceExpr{
				pos: position{line: 1421, col: 22, offset: 53028},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1421, col: 22, offset: 53028},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1421, col: 46, offset: 53052},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1421, col: 70, offset: 53076},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1423, col: 1, offset: 53096},
			expr: &litMatcher{
				pos:        position{line: 1423, col: 32, offset: 53127},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1425, col: 1, offset: 53134},
			expr: &actionExpr{
				pos: position{line: 1425, col: 26, offset: 53159},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1425, col: 26, offset: 53159},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1425, col: 26, offset: 53159},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1425, col: 54, offset: 53187},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1425, col: 63, offset: 53196},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1425, col: 93, offset: 53226},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1425, col: 121, offset: 53254},
							expr: &ruleRefExpr{
								pos:  position{line: 1425, col: 122, offset: 53255},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1429, col: 1, offset: 53364},
			expr: &choiceExpr{
				pos: position{line: 1429, col: 33, offset: 53396},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1429, col: 34, offset: 53397},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1429, col: 34, offset: 53397},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1429, col: 35, offset: 53398},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1429, col: 35, offset: 53398},
											expr: &ruleRefExpr{
												pos:  position{line: 1429, col: 36, offset: 53399},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1429, col: 64, offset: 53427},
											expr: &ruleRefExpr{
												pos:  position{line: 1429, col: 65, offset: 53428},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1429, col: 71, offset: 53434},
											expr: &ruleRefExpr{
												pos:  position{line: 1429, col: 72, offset: 53435},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1429, col: 80, offset: 53443,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1429, col: 83, offset: 53446},
									expr: &seqExpr{
										pos: position{line: 1429, col: 84, offset: 53447},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1429, col: 84, offset: 53447},
												expr: &seqExpr{
													pos: position{line: 1429, col: 86, offset: 53449},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1429, col: 86, offset: 53449},
															expr: &ruleRefExpr{
																pos:  position{line: 1429, col: 86, offset: 53449},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1429, col: 93, offset: 53456},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1429, col: 122, offset: 53485},
												expr: &ruleRefExpr{
													pos:  position{line: 1429, col: 123, offset: 53486},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1429, col: 151, offset: 53514},
												expr: &ruleRefExpr{
													pos:  position{line: 1429, col: 152, offset: 53515},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1429, col: 160, offset: 53523,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1431, col: 7, offset: 53667},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1431, col: 8, offset: 53668},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1431, col: 8, offset: 53668},
									expr: &ruleRefExpr{
										pos:  position{line: 1431, col: 9, offset: 53669},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1431, col: 15, offset: 53675},
									expr: &ruleRefExpr{
										pos:  position{line: 1431, col: 16, offset: 53676},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1431, col: 24, offset: 53684},
									expr: &ruleRefExpr{
										pos:  position{line: 1431, col: 25, offset: 53685},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1431, col: 53, offset: 53713,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1435, col: 1, offset: 53799},
			expr: &litMatcher{
				pos:        position{line: 1435, col: 32, offset: 53830},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1437, col: 1, offset: 53839},
			expr: &actionExpr{
				pos: position{line: 1437, col: 26, offset: 53864},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1437, col: 26, offset: 53864},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1437, col: 26, offset: 53864},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1437, col: 54, offset: 53892},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1437, col: 63, offset: 53901},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1437, col: 93, offset: 53931},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1437, col: 121, offset: 53959},
							expr: &ruleRefExpr{
								pos:  position{line: 1437, col: 122, offset: 53960},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1441, col: 1, offset: 54069},
			expr: &choiceExpr{
				pos: position{line: 1441, col: 33, offset: 54101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1441, col: 34, offset: 54102},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1441, col: 34, offset: 54102},
							expr: &seqExpr{
								pos: position{line: 1441, col: 35, offset: 54103},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1441, col: 35, offset: 54103},
										expr: &ruleRefExpr{
											pos:  position{line: 1441, col: 36, offset: 54104},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1441, col: 64, offset: 54132,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1443, col: 7, offset: 54299},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1443, col: 7, offset: 54299},
							expr: &seqExpr{
								pos: position{line: 1443, col: 8, offset: 54300},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1443, col: 8, offset: 54300},
										expr: &ruleRefExpr{
											pos:  position{line: 1443, col: 9, offset: 54301},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1443, col: 15, offset: 54307},
										expr: &ruleRefExpr{
											pos:  position{line: 1443, col: 16, offset: 54308},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1443, col: 24, offset: 54316},
										expr: &ruleRefExpr{
											pos:  position{line: 1443, col: 25, offset: 54317},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1443, col: 53, offset: 54345,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1447, col: 1, offset: 54432},
			expr: &choiceExpr{
				pos: position{line: 1447, col: 21, offset: 54452},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1447, col: 21, offset: 54452},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1447, col: 21, offset: 54452},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1447, col: 21, offset: 54452},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1447, col: 30, offset: 54461},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1447, col: 38, offset: 54469},
										expr: &ruleRefExpr{
											pos:  position{line: 1447, col: 39, offset: 54470},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1447, col: 67, offset: 54498},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1449, col: 5, offset: 54596},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1449, col: 5, offset: 54596},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1449, col: 5, offset: 54596},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1449, col: 15, offset: 54606},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1449, col: 23, offset: 54614},
										expr: &choiceExpr{
											pos: position{line: 1449, col: 24, offset: 54615},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1449, col: 24, offset: 54615},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1449, col: 37, offset: 54628},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1449, col: 65, offset: 54656},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1453, col: 1, offset: 54756},
			expr: &actionExpr{
				pos: position{line: 1453, col: 30, offset: 54785},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1453, col: 30, offset: 54785},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1460, col: 1, offset: 54965},
			expr: &choiceExpr{
				pos: position{line: 1460, col: 19, offset: 54983},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1460, col: 19, offset: 54983},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 44, offset: 55008},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1462, col: 1, offset: 55035},
			expr: &choiceExpr{
				pos: position{line: 1462, col: 27, offset: 55061},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1462, col: 27, offset: 55061},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1462, col: 27, offset: 55061},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1462, col: 27, offset: 55061},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1462, col: 32, offset: 55066},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1462, col: 36, offset: 55070},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1462, col: 40, offset: 55074},
									expr: &ruleRefExpr{
										pos:  position{line: 1462, col: 40, offset: 55074},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1462, col: 47, offset: 55081},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1462, col: 51, offset: 55085},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1462, col: 58, offset: 55092},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1462, col: 79, offset: 55113},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1464, col: 5, offset: 55198},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1464, col: 5, offset: 55198},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1464, col: 5, offset: 55198},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1464, col: 10, offset: 55203},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1464, col: 14, offset: 55207},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1464, col: 18, offset: 55211},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1468, col: 1, offset: 55287},
			expr: &actionExpr{
				pos: position{line: 1468, col: 27, offset: 55313},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1468, col: 27, offset: 55313},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1468, col: 27, offset: 55313},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1468, col: 35, offset: 55321},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1468, col: 40, offset: 55326},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1468, col: 54, offset: 55340},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1468, col: 72, offset: 55358},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1472, col: 1, offset: 55485},
			expr: &ruleRefExpr{
				pos:  position{line: 1472, col: 24, offset: 55508},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1477, col: 1, offset: 55635},
			expr: &choiceExpr{
				pos: position{line: 1477, col: 9, offset: 55643},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1477, col: 9, offset: 55643},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 24, offset: 55658},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1480, col: 1, offset: 55742},
			expr: &actionExpr{
				pos: position{line: 1480, col: 17, offset: 55758},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1480, col: 17, offset: 55758},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1480, col: 17, offset: 55758},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1480, col: 25, offset: 55766},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1480, col: 30, offset: 55771},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1480, col: 40, offset: 55781},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1480, col: 58, offset: 55799},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1484, col: 1, offset: 55914},
			expr: &actionExpr{
				pos: position{line: 1484, col: 17, offset: 55930},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1484, col: 17, offset: 55930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1484, col: 17, offset: 55930},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1484, col: 22, offset: 55935},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1484, col: 42, offset: 55955},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1484, col: 59, offset: 55972},
								expr: &ruleRefExpr{
									pos:  position{line: 1484, col: 60, offset: 55973},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1488, col: 1, offset: 56070},
			expr: &actionExpr{
				pos: position{line: 1488, col: 19, offset: 56088},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1488, col: 19, offset: 56088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1488, col: 19, offset: 56088},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1488, col: 23, offset: 56092},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1488, col: 33, offset: 56102},
								expr: &ruleRefExpr{
									pos:  position{line: 1488, col: 34, offset: 56103},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1489, col: 5, offset: 56136},
							expr: &ruleRefExpr{
								pos:  position{line: 1489, col: 5, offset: 56136},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1489, col: 12, offset: 56143},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1489, col: 23, offset: 56154},
								expr: &ruleRefExpr{
									pos:  position{line: 1489, col: 24, offset: 56155},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1489, col: 43, offset: 56174},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1493, col: 1, offset: 56295},
			expr: &actionExpr{
				pos: position{line: 1493, col: 30, offset: 56324},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1493, col: 30, offset: 56324},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1495, col: 5, offset: 56377},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1495, col: 6, offset: 56378},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1495, col: 6, offset: 56378},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1495, col: 6, offset: 56378},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1495, col: 11, offset: 56383},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1495, col: 20, offset: 56392},
												expr: &choiceExpr{
													pos: position{line: 1495, col: 21, offset: 56393},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1495, col: 21, offset: 56393},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1495, col: 36, offset: 56408},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1495, col: 49, offset: 56421},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1495, col: 71, offset: 56443},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1495, col: 76, offset: 56448},
											expr: &notExpr{
												pos: position{line: 1495, col: 78, offset: 56450},
												expr: &litMatcher{
													pos:        position{line: 1495, col: 79, offset: 56451},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1495, col: 84, offset: 56456},
											expr: &litMatcher{
												pos:        position{line: 1495, col: 84, offset: 56456},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1499, col: 6, offset: 56587},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1499, col: 6, offset: 56587},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1499, col: 6, offset: 56587},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1499, col: 15, offset: 56596},
												expr: &choiceExpr{
													pos: position{line: 1499, col: 16, offset: 56597},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1499, col: 16, offset: 56597},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1499, col: 31, offset: 56612},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1499, col: 44, offset: 56625},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1499, col: 68, offset: 56649},
											expr: &notExpr{
												pos: position{line: 1499, col: 70, offset: 56651},
												expr: &litMatcher{
													pos:        position{line: 1499, col: 71, offset: 56652},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1499, col: 76, offset: 56657},
											expr: &litMatcher{
												pos:        position{line: 1499, col: 76, offset: 56657},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1505, col: 1, offset: 56777},
			expr: &actionExpr{
				pos: position{line: 1505, col: 18, offset: 56794},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1505, col: 18, offset: 56794},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1509, col: 1, offset: 56884},
			expr: &actionExpr{
				pos: position{line: 1509, col: 24, offset: 56907},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1509, col: 24, offset: 56907},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1513, col: 1, offset: 57004},
			expr: &actionExpr{
				pos: position{line: 1513, col: 26, offset: 57029},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1513, col: 26, offset: 57029},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1518, col: 1, offset: 57190},
			expr: &actionExpr{
				pos: position{line: 1519, col: 5, offset: 57210},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1519, col: 5, offset: 57210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1519, col: 5, offset: 57210},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1519, col: 14, offset: 57219},
								expr: &choiceExpr{
									pos: position{line: 1519, col: 15, offset: 57220},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1519, col: 15, offset: 57220},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1520, col: 11, offset: 57236},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1521, col: 11, offset: 57254},
											expr: &ruleRefExpr{
												pos:  position{line: 1521, col: 11, offset: 57254},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1522, col: 11, offset: 57273},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1523, col: 11, offset: 57298},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1524, col: 11, offset: 57321},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1525, col: 11, offset: 57350},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1526, col: 11, offset: 57369},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1526, col: 21, offset: 57379},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1530, col: 1, offset: 57453},
			expr: &choiceExpr{
				pos: position{line: 1530, col: 17, offset: 57469},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1530, col: 17, offset: 57469},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1530, col: 40, offset: 57492},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1533, col: 1, offset: 57623},
			expr: &actionExpr{
				pos: position{line: 1533, col: 25, offset: 57647},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1533, col: 25, offset: 57647},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1533, col: 25, offset: 57647},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 33, offset: 57655},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1533, col: 38, offset: 57660},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1533, col: 38, offset: 57660},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1533, col: 57, offset: 57679},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 79, offset: 57701},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 97, offset: 57719},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1537, col: 1, offset: 57834},
			expr: &actionExpr{
				pos: position{line: 1537, col: 25, offset: 57858},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 25, offset: 57858},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1537, col: 25, offset: 57858},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 30, offset: 57863},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 48, offset: 57881},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1537, col: 65, offset: 57898},
								expr: &ruleRefExpr{
									pos:  position{line: 1537, col: 66, offset: 57899},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1544, col: 1, offset: 58101},
			expr: &actionExpr{
				pos: position{line: 1544, col: 15, offset: 58115},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1544, col: 15, offset: 58115},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1544, col: 15, offset: 58115},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1544, col: 26, offset: 58126},
								expr: &ruleRefExpr{
									pos:  position{line: 1544, col: 27, offset: 58127},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1544, col: 40, offset: 58140},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 50, offset: 58150},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 56, offset: 58156},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 66, offset: 58166},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 84, offset: 58184},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1544, col: 101, offset: 58201},
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 101, offset: 58201},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1544, col: 108, offset: 58208},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1548, col: 1, offset: 58324},
			expr: &actionExpr{
				pos: position{line: 1548, col: 16, offset: 58339},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1548, col: 16, offset: 58339},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1548, col: 16, offset: 58339},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1548, col: 25, offset: 58348},
							expr: &litMatcher{
								pos:        position{line: 1548, col: 26, offset: 58349},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 30, offset: 58353},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1548, col: 36, offset: 58359},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 46, offset: 58369},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1548, col: 64, offset: 58387},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1552, col: 1, offset: 58505},
			expr: &actionExpr{
				pos: position{line: 1552, col: 20, offset: 58524},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 20, offset: 58524},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1552, col: 20, offset: 58524},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 24, offset: 58528},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1552, col: 28, offset: 58532},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 29, offset: 58533},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1552, col: 56, offset: 58560},
							expr: &litMatcher{
								pos:        position{line: 1552, col: 56, offset: 58560},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 61, offset: 58565},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1552, col: 67, offset: 58571},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 68, offset: 58572},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1552, col: 95, offset: 58599},
							expr: &litMatcher{
								pos:        position{line: 1552, col: 95, offset: 58599},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 100, offset: 58604},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1552, col: 107, offset: 58611},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 108, offset: 58612},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1552, col: 135, offset: 58639},
							expr: &litMatcher{
								pos:        position{line: 1552, col: 135, offset: 58639},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1552, col: 140, offset: 58644},
							expr: &ruleRefExpr{
								pos:  position{line: 1552, col: 140, offset: 58644},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 147, offset: 58651},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1552, col: 158, offset: 58662},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 159, offset: 58663},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1552, col: 178, offset: 58682},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1559, col: 1, offset: 58974},
			expr: &actionExpr{
				pos: position{line: 1559, col: 15, offset: 58988},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1559, col: 15, offset: 58988},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1559, col: 15, offset: 58988},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1559, col: 23, offset: 58996},
							label: "iconClass",
							expr: &actionExpr{
								pos: position{line: 1559, col: 34, offset: 59007},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1559, col: 34, offset: 59007},
									expr: &charClassMatcher{
										pos:        position{line: 1559, col: 34, offset: 59007},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1559, col: 78, offset: 59051},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1559, col: 96, offset: 59069},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1563, col: 1, offset: 59176},
			expr: &actionExpr{
				pos: position{line: 1563, col: 19, offset: 59194},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1563, col: 19, offset: 59194},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1563, col: 19, offset: 59194},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1563, col: 23, offset: 59198},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1563, col: 28, offset: 59203},
								expr: &ruleRefExpr{
									pos:  position{line: 1563, col: 29, offset: 59204},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1563, col: 56, offset: 59231},
							expr: &litMatcher{
								pos:        position{line: 1563, col: 56, offset: 59231},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1563, col: 61, offset: 59236},
							expr: &ruleRefExpr{
								pos:  position{line: 1563, col: 61, offset: 59236},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1563, col: 68, offset: 59243},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1563, col: 75, offset: 59250},
								expr: &ruleRefExpr{
									pos:  position{line: 1563, col: 76, offset: 59251},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1563, col: 95, offset: 59270},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1570, col: 1, offset: 59548},
			expr: &choiceExpr{
				pos: position{line: 1570, col: 19, offset: 59566},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1570, col: 19, offset: 59566},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1570, col: 19, offset: 59566},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1570, col: 19, offset: 59566},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1570, col: 32, offset: 59579},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1570, col: 41, offset: 59588},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1570, col: 58, offset: 59605},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1572, col: 5, offset: 59675},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1572, col: 5, offset: 59675},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1572, col: 5, offset: 59675},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1572, col: 17, offset: 59687},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1572, col: 22, offset: 59692},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1572, col: 35, offset: 59705},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1572, col: 39, offset: 59709},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1572, col: 47, offset: 59717},
										expr: &ruleRefExpr{
											pos:  position{line: 1572, col: 48, offset: 59718},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1572, col: 66, offset: 59736},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1576, col: 1, offset: 59801},
			expr: &ruleRefExpr{
				pos:  position{line: 1576, col: 16, offset: 59816},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1578, col: 1, offset: 59829},
			expr: &actionExpr{
				pos: position{line: 1578, col: 20, offset: 59848},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1578, col: 20, offset: 59848},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1578, col: 29, offset: 59857},
						expr: &seqExpr{
							pos: position{line: 1578, col: 30, offset: 59858},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1578, col: 30, offset: 59858},
									expr: &litMatcher{
										pos:        position{line: 1578, col: 31, offset: 59859},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1578, col: 35, offset: 59863},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1585, col: 1, offset: 60194},
			expr: &actionExpr{
				pos: position{line: 1585, col: 19, offset: 60212},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1585, col: 19, offset: 60212},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1585, col: 19, offset: 60212},
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 20, offset: 60213},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1586, col: 5, offset: 60302},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1586, col: 12, offset: 60309},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1586, col: 12, offset: 60309},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1587, col: 11, offset: 60333},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1588, col: 11, offset: 60358},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1589, col: 11, offset: 60383},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1590, col: 11, offset: 60406},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1591, col: 11, offset: 60429},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1592, col: 11, offset: 60453},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1593, col: 11, offset: 60482},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1594, col: 11, offset: 60510},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1595, col: 11, offset: 60527},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1599, col: 1, offset: 60572},
			expr: &choiceExpr{
				pos: position{line: 1599, col: 19, offset: 60590},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1599, col: 19, offset: 60590},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1599, col: 19, offset: 60590},
								expr: &ruleRefExpr{
									pos:  position{line: 1599, col: 21, offset: 60592},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1599, col: 31, offset: 60602},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1600, col: 19, offset: 60674},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1601, col: 19, offset: 60715},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1602, col: 19, offset: 60757},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1603, col: 19, offset: 60799},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1604, col: 19, offset: 60841},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1605, col: 19, offset: 60880},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1606, col: 19, offset: 60921},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1608, col: 1, offset: 60950},
			expr: &choiceExpr{
				pos: position{line: 1608, col: 20, offset: 60969},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1608, col: 20, offset: 60969},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1608, col: 36, offset: 60985},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1610, col: 1, offset: 61001},
			expr: &actionExpr{
				pos: position{line: 1610, col: 17, offset: 61017},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1610, col: 17, offset: 61017},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1610, col: 17, offset: 61017},
							expr: &ruleRefExpr{
								pos:  position{line: 1610, col: 18, offset: 61018},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1610, col: 22, offset: 61022},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1610, col: 31, offset: 61031},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1610, col: 52, offset: 61052},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1610, col: 61, offset: 61061},
								expr: &ruleRefExpr{
									pos:  position{line: 1610, col: 62, offset: 61062},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1610, col: 73, offset: 61073},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1614, col: 1, offset: 61147},
			expr: &actionExpr{
				pos: position{line: 1614, col: 24, offset: 61170},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1614, col: 24, offset: 61170},
					expr: &seqExpr{
						pos: position{line: 1614, col: 25, offset: 61171},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1614, col: 25, offset: 61171},
								expr: &ruleRefExpr{
									pos:  position{line: 1614, col: 26, offset: 61172},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1614, col: 36, offset: 61182},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1614, col: 36, offset: 61182},
										expr: &ruleRefExpr{
											pos:  position{line: 1614, col: 36, offset: 61182},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1614, col: 45, offset: 61191},
										expr: &charClassMatcher{
											pos:        position{line: 1614, col: 45, offset: 61191},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1618, col: 1, offset: 61245},
			expr: &oneOrMoreExpr{
				pos: position{line: 1618, col: 13, offset: 61257},
				expr: &ruleRefExpr{
					pos:  position{line: 1618, col: 13, offset: 61257},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1620, col: 1, offset: 61269},
			expr: &actionExpr{
				pos: position{line: 1620, col: 12, offset: 61280},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1620, col: 12, offset: 61280},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1620, col: 12, offset: 61280},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1620, col: 16, offset: 61284},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1620, col: 21, offset: 61289},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1620, col: 21, offset: 61289},
									expr: &charClassMatcher{
										pos:        position{line: 1620, col: 21, offset: 61289},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1620, col: 69, offset: 61337},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1620, col: 73, offset: 61341},
							expr: &ruleRefExpr{
								pos:  position{line: 1620, col: 73, offset: 61341},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1620, col: 80, offset: 61348},
							expr: &choiceExpr{
								pos: position{line: 1620, col: 82, offset: 61350},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1620, col: 82, offset: 61350},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1620, col: 88, offset: 61356},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1624, col: 1, offset: 61413},
			expr: &actionExpr{
				pos: position{line: 1624, col: 20, offset: 61432},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1624, col: 20, offset: 61432},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1624, col: 20, offset: 61432},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1624, col: 25, offset: 61437},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1624, col: 48, offset: 61460},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1624, col: 61, offset: 61473},
								expr: &ruleRefExpr{
									pos:  position{line: 1624, col: 61, offset: 61473},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1628, col: 1, offset: 61574},
			expr: &actionExpr{
				pos: position{line: 1628, col: 26, offset: 61599},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1628, col: 26, offset: 61599},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1628, col: 26, offset: 61599},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1628, col: 30, offset: 61603},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1628, col: 35, offset: 61608},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1628, col: 35, offset: 61608},
									expr: &charClassMatcher{
										pos:        position{line: 1628, col: 35, offset: 61608},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1628, col: 83, offset: 61656},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1628, col: 87, offset: 61660},
							expr: &ruleRefExpr{
								pos:  position{line: 1628, col: 87, offset: 61660},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1635, col: 1, offset: 61894},
			expr: &seqExpr{
				pos: position{line: 1635, col: 25, offset: 61918},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1635, col: 25, offset: 61918},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1635, col: 31, offset: 61924},
						expr: &ruleRefExpr{
							pos:  position{line: 1635, col: 31, offset: 61924},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1635, col: 38, offset: 61931},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1637, col: 1, offset: 61993},
			expr: &seqExpr{
				pos: position{line: 1637, col: 30, offset: 62022},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1637, col: 30, offset: 62022},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1637, col: 36, offset: 62028},
						expr: &ruleRefExpr{
							pos:  position{line: 1637, col: 36, offset: 62028},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1637, col: 43, offset: 62035},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1639, col: 1, offset: 62042},
			expr: &choiceExpr{
				pos: position{line: 1639, col: 28, offset: 62069},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1639, col: 29, offset: 62070},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1639, col: 29, offset: 62070},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1639, col: 35, offset: 62076},
								expr: &ruleRefExpr{
									pos:  position{line: 1639, col: 35, offset: 62076},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1639, col: 42, offset: 62083},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1639, col: 49, offset: 62090},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1641, col: 1, offset: 62097},
			expr: &actionExpr{
				pos: position{line: 1641, col: 16, offset: 62112},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1641, col: 16, offset: 62112},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1641, col: 16, offset: 62112},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1641, col: 27, offset: 62123},
								expr: &ruleRefExpr{
									pos:  position{line: 1641, col: 28, offset: 62124},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1641, col: 41, offset: 62137},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1641, col: 67, offset: 62163},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1641, col: 76, offset: 62172},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1641, col: 104, offset: 62200},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1645, col: 1, offset: 62319},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1645, col: 31, offset: 62349},
				expr: &actionExpr{
					pos: position{line: 1645, col: 32, offset: 62350},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1645, col: 32, offset: 62350},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1645, col: 32, offset: 62350},
								expr: &ruleRefExpr{
									pos:  position{line: 1645, col: 33, offset: 62351},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1645, col: 57, offset: 62375},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1645, col: 66, offset: 62384},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1652, col: 1, offset: 62728},
			expr: &seqExpr{
				pos: position{line: 1652, col: 26, offset: 62753},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1652, col: 26, offset: 62753},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1652, col: 33, offset: 62760},
						expr: &ruleRefExpr{
							pos:  position{line: 1652, col: 33, offset: 62760},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1652, col: 40, offset: 62767},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1654, col: 1, offset: 62774},
			expr: &seqExpr{
				pos: position{line: 1654, col: 31, offset: 62804},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1654, col: 31, offset: 62804},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1654, col: 38, offset: 62811},
						expr: &ruleRefExpr{
							pos:  position{line: 1654, col: 38, offset: 62811},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1654, col: 45, offset: 62818},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1656, col: 1, offset: 62825},
			expr: &choiceExpr{
				pos: position{line: 1656, col: 29, offset: 62853},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1656, col: 30, offset: 62854},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1656, col: 30, offset: 62854},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1656, col: 37, offset: 62861},
								expr: &ruleRefExpr{
									pos:  position{line: 1656, col: 37, offset: 62861},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1656, col: 44, offset: 62868},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1656, col: 51, offset: 62875},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1658, col: 1, offset: 62882},
			expr: &actionExpr{
				pos: position{line: 1658, col: 17, offset: 62898},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1658, col: 17, offset: 62898},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1658, col: 17, offset: 62898},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1658, col: 28, offset: 62909},
								expr: &ruleRefExpr{
									pos:  position{line: 1658, col: 29, offset: 62910},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1658, col: 42, offset: 62923},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1658, col: 69, offset: 62950},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1658, col: 78, offset: 62959},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1658, col: 107, offset: 62988},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1662, col: 1, offset: 63109},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1662, col: 32, offset: 63140},
				expr: &actionExpr{
					pos: position{line: 1662, col: 33, offset: 63141},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1662, col: 33, offset: 63141},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1662, col: 33, offset: 63141},
								expr: &ruleRefExpr{
									pos:  position{line: 1662, col: 34, offset: 63142},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1662, col: 59, offset: 63167},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1662, col: 68, offset: 63176},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1669, col: 1, offset: 63520},
			expr: &seqExpr{
				pos: position{line: 1669, col: 26, offset: 63545},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1669, col: 26, offset: 63545},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1669, col: 33, offset: 63552},
						expr: &ruleRefExpr{
							pos:  position{line: 1669, col: 33, offset: 63552},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1669, col: 40, offset: 63559},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1671, col: 1, offset: 63566},
			expr: &seqExpr{
				pos: position{line: 1671, col: 31, offset: 63596},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1671, col: 31, offset: 63596},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1671, col: 38, offset: 63603},
						expr: &ruleRefExpr{
							pos:  position{line: 1671, col: 38, offset: 63603},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1671, col: 45, offset: 63610},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1673, col: 1, offset: 63617},
			expr: &choiceExpr{
				pos: position{line: 1673, col: 29, offset: 63645},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1673, col: 30, offset: 63646},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1673, col: 30, offset: 63646},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1673, col: 37, offset: 63653},
								expr: &ruleRefExpr{
									pos:  position{line: 1673, col: 37, offset: 63653},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1673, col: 44, offset: 63660},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1673, col: 51, offset: 63667},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1675, col: 1, offset: 63674},
			expr: &actionExpr{
				pos: position{line: 1675, col: 17, offset: 63690},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1675, col: 17, offset: 63690},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1675, col: 17, offset: 63690},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1675, col: 28, offset: 63701},
								expr: &ruleRefExpr{
									pos:  position{line: 1675, col: 29, offset: 63702},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1675, col: 42, offset: 63715},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1675, col: 69, offset: 63742},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1675, col: 78, offset: 63751},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1675, col: 107, offset: 63780},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1679, col: 1, offset: 63901},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1679, col: 32, offset: 63932},
				expr: &actionExpr{
					pos: position{line: 1679, col: 33, offset: 63933},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1679, col: 33, offset: 63933},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1679, col: 33, offset: 63933},
								expr: &ruleRefExpr{
									pos:  position{line: 1679, col: 34, offset: 63934},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1679, col: 59, offset: 63959},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1679, col: 68, offset: 63968},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1686, col: 1, offset: 64310},
			expr: &seqExpr{
				pos: position{line: 1686, col: 24, offset: 64333},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1686, col: 24, offset: 64333},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1686, col: 31, offset: 64340},
						expr: &ruleRefExpr{
							pos:  position{line: 1686, col: 31, offset: 64340},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1686, col: 38, offset: 64347},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1688, col: 1, offset: 64379},
			expr: &seqExpr{
				pos: position{line: 1688, col: 29, offset: 64407},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1688, col: 29, offset: 64407},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1688, col: 36, offset: 64414},
						expr: &ruleRefExpr{
							pos:  position{line: 1688, col: 36, offset: 64414},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1688, col: 43, offset: 64421},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1690, col: 1, offset: 64453},
			expr: &choiceExpr{
				pos: position{line: 1690, col: 27, offset: 64479},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1690, col: 28, offset: 64480},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1690, col: 28, offset: 64480},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1690, col: 35, offset: 64487},
								expr: &ruleRefExpr{
									pos:  position{line: 1690, col: 35, offset: 64487},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1690, col: 42, offset: 64494},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1690, col: 49, offset: 64501},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1692, col: 1, offset: 64533},
			expr: &actionExpr{
				pos: position{line: 1692, col: 15, offset: 64547},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1692, col: 15, offset: 64547},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1692, col: 15, offset: 64547},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1692, col: 26, offset: 64558},
								expr: &ruleRefExpr{
									pos:  position{line: 1692, col: 27, offset: 64559},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1692, col: 40, offset: 64572},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1692, col: 65, offset: 64597},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1692, col: 74, offset: 64606},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1692, col: 101, offset: 64633},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1696, col: 1, offset: 64750},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1696, col: 30, offset: 64779},
				expr: &actionExpr{
					pos: position{line: 1696, col: 31, offset: 64780},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1696, col: 31, offset: 64780},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1696, col: 31, offset: 64780},
								expr: &ruleRefExpr{
									pos:  position{line: 1696, col: 32, offset: 64781},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1696, col: 55, offset: 64804},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1696, col: 64, offset: 64813},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1705, col: 1, offset: 65206},
			expr: &actionExpr{
				pos: position{line: 1705, col: 15, offset: 65220},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1705, col: 15, offset: 65220},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1705, col: 15, offset: 65220},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1705, col: 27, offset: 65232},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1706, col: 5, offset: 65250},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1710, col: 5, offset: 65449},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1710, col: 30, offset: 65474},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1710, col: 39, offset: 65483},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1710, col: 66, offset: 65510},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1714, col: 1, offset: 65635},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1714, col: 30, offset: 65664},
				expr: &actionExpr{
					pos: position{line: 1714, col: 31, offset: 65665},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1714, col: 31, offset: 65665},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1714, col: 31, offset: 65665},
								expr: &ruleRefExpr{
									pos:  position{line: 1714, col: 32, offset: 65666},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1714, col: 55, offset: 65689},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1714, col: 64, offset: 65698},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1721, col: 1, offset: 66042},
			expr: &seqExpr{
				pos: position{line: 1721, col: 26, offset: 66067},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1721, col: 26, offset: 66067},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1721, col: 33, offset: 66074},
						expr: &ruleRefExpr{
							pos:  position{line: 1721, col: 33, offset: 66074},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1721, col: 40, offset: 66081},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1723, col: 1, offset: 66088},
			expr: &seqExpr{
				pos: position{line: 1723, col: 31, offset: 66118},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1723, col: 31, offset: 66118},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1723, col: 38, offset: 66125},
						expr: &ruleRefExpr{
							pos:  position{line: 1723, col: 38, offset: 66125},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1723, col: 45, offset: 66132},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1725, col: 1, offset: 66139},
			expr: &choiceExpr{
				pos: position{line: 1725, col: 29, offset: 66167},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1725, col: 30, offset: 66168},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1725, col: 30, offset: 66168},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1725, col: 37, offset: 66175},
								expr: &ruleRefExpr{
									pos:  position{line: 1725, col: 37, offset: 66175},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1725, col: 44, offset: 66182},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1725, col: 51, offset: 66189},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1727, col: 1, offset: 66196},
			expr: &actionExpr{
				pos: position{line: 1727, col: 17, offset: 66212},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1727, col: 17, offset: 66212},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1727, col: 17, offset: 66212},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1727, col: 28, offset: 66223},
								expr: &ruleRefExpr{
									pos:  position{line: 1727, col: 29, offset: 66224},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1727, col: 42, offset: 66237},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1727, col: 69, offset: 66264},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1727, col: 78, offset: 66273},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1727, col: 107, offset: 66302},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1731, col: 1, offset: 66423},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1731, col: 32, offset: 66454},
				expr: &actionExpr{
					pos: position{line: 1731, col: 33, offset: 66455},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1731, col: 33, offset: 66455},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1731, col: 33, offset: 66455},
								expr: &ruleRefExpr{
									pos:  position{line: 1731, col: 34, offset: 66456},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1731, col: 59, offset: 66481},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1731, col: 68, offset: 66490},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1738, col: 1, offset: 66838},
			expr: &seqExpr{
				pos: position{line: 1738, col: 30, offset: 66867},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1738, col: 30, offset: 66867},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1738, col: 37, offset: 66874},
						expr: &ruleRefExpr{
							pos:  position{line: 1738, col: 37, offset: 66874},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1738, col: 44, offset: 66881},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1740, col: 1, offset: 66888},
			expr: &seqExpr{
				pos: position{line: 1740, col: 35, offset: 66922},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1740, col: 35, offset: 66922},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1740, col: 42, offset: 66929},
						expr: &ruleRefExpr{
							pos:  position{line: 1740, col: 42, offset: 66929},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1740, col: 49, offset: 66936},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1742, col: 1, offset: 66943},
			expr: &choiceExpr{
				pos: position{line: 1742, col: 33, offset: 66975},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1742, col: 34, offset: 66976},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1742, col: 34, offset: 66976},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1742, col: 41, offset: 66983},
								expr: &ruleRefExpr{
									pos:  position{line: 1742, col: 41, offset: 66983},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1742, col: 48, offset: 66990},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1742, col: 55, offset: 66997},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1744, col: 1, offset: 67004},
			expr: &actionExpr{
				pos: position{line: 1744, col: 21, offset: 67024},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1744, col: 21, offset: 67024},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1744, col: 21, offset: 67024},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1744, col: 32, offset: 67035},
								expr: &ruleRefExpr{
									pos:  position{line: 1744, col: 33, offset: 67036},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1744, col: 46, offset: 67049},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1744, col: 77, offset: 67080},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1744, col: 86, offset: 67089},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1744, col: 119, offset: 67122},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1748, col: 1, offset: 67251},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1748, col: 36, offset: 67286},
				expr: &actionExpr{
					pos: position{line: 1748, col: 37, offset: 67287},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1748, col: 37, offset: 67287},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1748, col: 37, offset: 67287},
								expr: &ruleRefExpr{
									pos:  position{line: 1748, col: 38, offset: 67288},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1748, col: 67, offset: 67317},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1748, col: 76, offset: 67326},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1753, col: 1, offset: 67490},
			expr: &actionExpr{
				pos: position{line: 1753, col: 18, offset: 67507},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1753, col: 18, offset: 67507},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1753, col: 19, offset: 67508},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1753, col: 19, offset: 67508},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1753, col: 27, offset: 67516},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1753, col: 37, offset: 67526},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1753, col: 45, offset: 67534},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1753, col: 55, offset: 67544},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1753, col: 63, offset: 67552},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1753, col: 72, offset: 67561},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1761, col: 1, offset: 67819},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1761, col: 23, offset: 67841},
				expr: &ruleRefExpr{
					pos:  position{line: 1761, col: 23, offset: 67841},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1763, col: 1, offset: 67864},
			expr: &actionExpr{
				pos: position{line: 1764, col: 5, offset: 67892},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1764, col: 5, offset: 67892},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1764, col: 5, offset: 67892},
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 6, offset: 67893},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1764, col: 10, offset: 67897},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1764, col: 19, offset: 67906},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1764, col: 19, offset: 67906},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1765, col: 15, offset: 67932},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1766, col: 15, offset: 67961},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1767, col: 15, offset: 67987},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1768, col: 15, offset: 68016},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1769, col: 15, offset: 68048},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1770, col: 15, offset: 68082},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1771, col: 15, offset: 68114},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1772, col: 15, offset: 68154},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1773, col: 15, offset: 68184},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1774, col: 15, offset: 68213},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1775, col: 15, offset: 68250},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1776, col: 15, offset: 68281},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1777, col: 15, offset: 68323},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1781, col: 1, offset: 68376},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1781, col: 22, offset: 68397},
				expr: &ruleRefExpr{
					pos:  position{line: 1781, col: 22, offset: 68397},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1783, col: 1, offset: 68419},
			expr: &actionExpr{
				pos: position{line: 1783, col: 22, offset: 68440},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1783, col: 22, offset: 68440},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1783, col: 22, offset: 68440},
							expr: &ruleRefExpr{
								pos:  position{line: 1783, col: 23, offset: 68441},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1783, col: 27, offset: 68445},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1783, col: 36, offset: 68454},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1783, col: 36, offset: 68454},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1783, col: 48, offset: 68466},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1787, col: 1, offset: 68520},
			expr: &actionExpr{
				pos: position{line: 1787, col: 24, offset: 68543},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1787, col: 24, offset: 68543},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1787, col: 30, offset: 68549},
						expr: &ruleRefExpr{
							pos:  position{line: 1787, col: 31, offset: 68550},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1791, col: 1, offset: 68644},
			expr: &actionExpr{
				pos: position{line: 1791, col: 28, offset: 68671},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1791, col: 28, offset: 68671},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1791, col: 28, offset: 68671},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1791, col: 37, offset: 68680},
								expr: &ruleRefExpr{
									pos:  position{line: 1791, col: 38, offset: 68681},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1791, col: 54, offset: 68697},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1798, col: 1, offset: 68946},
			expr: &actionExpr{
				pos: position{line: 1798, col: 10, offset: 68955},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1798, col: 10, offset: 68955},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1798, col: 10, offset: 68955},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1798, col: 21, offset: 68966},
								expr: &ruleRefExpr{
									pos:  position{line: 1798, col: 22, offset: 68967},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1798, col: 35, offset: 68980},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1799, col: 5, offset: 69000},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1799, col: 12, offset: 69007},
								expr: &ruleRefExpr{
									pos:  position{line: 1799, col: 13, offset: 69008},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1800, col: 5, offset: 69031},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1800, col: 11, offset: 69037},
								expr: &ruleRefExpr{
									pos:  position{line: 1800, col: 12, offset: 69038},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1801, col: 6, offset: 69056},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1801, col: 6, offset: 69056},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1801, col: 23, offset: 69073},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1805, col: 1, offset: 69192},
			expr: &seqExpr{
				pos: position{line: 1805, col: 23, offset: 69214},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1805, col: 23, offset: 69214},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1805, col: 27, offset: 69218},
						expr: &ruleRefExpr{
							pos:  position{line: 1805, col: 27, offset: 69218},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1807, col: 1, offset: 69228},
			expr: &seqExpr{
				pos: position{line: 1807, col: 19, offset: 69246},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1807, col: 19, offset: 69246},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1807, col: 26, offset: 69253},
						expr: &ruleRefExpr{
							pos:  position{line: 1807, col: 26, offset: 69253},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1807, col: 33, offset: 69260},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1810, col: 1, offset: 69331},
			expr: &actionExpr{
				pos: position{line: 1810, col: 20, offset: 69350},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1810, col: 20, offset: 69350},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1810, col: 20, offset: 69350},
							expr: &ruleRefExpr{
								pos:  position{line: 1810, col: 21, offset: 69351},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1810, col: 36, offset: 69366},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1810, col: 42, offset: 69372},
								expr: &ruleRefExpr{
									pos:  position{line: 1810, col: 43, offset: 69373},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1810, col: 55, offset: 69385},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1810, col: 59, offset: 69389},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1814, col: 1, offset: 69461},
			expr: &actionExpr{
				pos: position{line: 1814, col: 14, offset: 69474},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1814, col: 14, offset: 69474},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1814, col: 14, offset: 69474},
							expr: &ruleRefExpr{
								pos:  position{line: 1814, col: 15, offset: 69475},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1814, col: 30, offset: 69490},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1814, col: 36, offset: 69496},
								expr: &ruleRefExpr{
									pos:  position{line: 1814, col: 37, offset: 69497},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1814, col: 49, offset: 69509},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1814, col: 53, offset: 69513},
							expr: &ruleRefExpr{
								pos:  position{line: 1814, col: 53, offset: 69513},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1818, col: 1, offset: 69586},
			expr: &actionExpr{
				pos: position{line: 1818, col: 14, offset: 69599},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1818, col: 14, offset: 69599},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1818, col: 14, offset: 69599},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1818, col: 33, offset: 69618},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1818, col: 42, offset: 69627},
								expr: &seqExpr{
									pos: position{line: 1818, col: 43, offset: 69628},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1818, col: 43, offset: 69628},
											expr: &ruleRefExpr{
												pos:  position{line: 1818, col: 44, offset: 69629},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1818, col: 63, offset: 69648},
											expr: &ruleRefExpr{
												pos:  position{line: 1818, col: 64, offset: 69649},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1818, col: 68, offset: 69653},
											expr: &ruleRefExpr{
												pos:  position{line: 1818, col: 68, offset: 69653},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1818, col: 75, offset: 69660},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1818, col: 89, offset: 69674},
											expr: &ruleRefExpr{
												pos:  position{line: 1818, col: 89, offset: 69674},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1825, col: 1, offset: 69930},
			expr: &seqExpr{
				pos: position{line: 1825, col: 26, offset: 69955},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1825, col: 26, offset: 69955},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1825, col: 33, offset: 69962},
						expr: &ruleRefExpr{
							pos:  position{line: 1825, col: 33, offset: 69962},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1825, col: 40, offset: 69969},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1827, col: 1, offset: 69976},
			expr: &seqExpr{
				pos: position{line: 1827, col: 31, offset: 70006},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1827, col: 31, offset: 70006},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1827, col: 38, offset: 70013},
						expr: &ruleRefExpr{
							pos:  position{line: 1827, col: 38, offset: 70013},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1827, col: 45, offset: 70020},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1829, col: 1, offset: 70027},
			expr: &choiceExpr{
				pos: position{line: 1829, col: 29, offset: 70055},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1829, col: 30, offset: 70056},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1829, col: 30, offset: 70056},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1829, col: 37, offset: 70063},
								expr: &ruleRefExpr{
									pos:  position{line: 1829, col: 37, offset: 70063},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1829, col: 44, offset: 70070},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 51, offset: 70077},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1831, col: 1, offset: 70084},
			expr: &actionExpr{
				pos: position{line: 1831, col: 17, offset: 70100},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1831, col: 17, offset: 70100},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1831, col: 17, offset: 70100},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1831, col: 44, offset: 70127},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1831, col: 53, offset: 70136},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1831, col: 83, offset: 70166},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1835, col: 1, offset: 70280},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1835, col: 32, offset: 70311},
				expr: &actionExpr{
					pos: position{line: 1835, col: 33, offset: 70312},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1835, col: 33, offset: 70312},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1835, col: 33, offset: 70312},
								expr: &ruleRefExpr{
									pos:  position{line: 1835, col: 34, offset: 70313},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1835, col: 59, offset: 70338},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1835, col: 68, offset: 70347},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1839, col: 1, offset: 70492},
			expr: &actionExpr{
				pos: position{line: 1839, col: 22, offset: 70513},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1839, col: 22, offset: 70513},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1839, col: 22, offset: 70513},
							expr: &ruleRefExpr{
								pos:  position{line: 1839, col: 23, offset: 70514},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1839, col: 45, offset: 70536},
							expr: &ruleRefExpr{
								pos:  position{line: 1839, col: 45, offset: 70536},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1839, col: 52, offset: 70543},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1839, col: 57, offset: 70548},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1839, col: 66, offset: 70557},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1839, col: 92, offset: 70583},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1843, col: 1, offset: 70652},
			expr: &actionExpr{
				pos: position{line: 1843, col: 29, offset: 70680},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1843, col: 29, offset: 70680},
					expr: &charClassMatcher{
						pos:        position{line: 1843, col: 29, offset: 70680},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1851, col: 1, offset: 71001},
			expr: &choiceExpr{
				pos: position{line: 1851, col: 17, offset: 71017},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1851, col: 17, offset: 71017},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1851, col: 49, offset: 71049},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1851, col: 78, offset: 71078},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1853, col: 1, offset: 71116},
			expr: &litMatcher{
				pos:        position{line: 1853, col: 26, offset: 71141},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1856, col: 1, offset: 71216},
			expr: &actionExpr{
				pos: position{line: 1856, col: 31, offset: 71246},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1856, col: 31, offset: 71246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1856, col: 31, offset: 71246},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1856, col: 42, offset: 71257},
								expr: &ruleRefExpr{
									pos:  position{line: 1856, col: 43, offset: 71258},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1856, col: 56, offset: 71271},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1856, col: 63, offset: 71278},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1861, col: 1, offset: 71513},
			expr: &actionExpr{
				pos: position{line: 1862, col: 5, offset: 71554},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1862, col: 5, offset: 71554},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1862, col: 5, offset: 71554},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1862, col: 16, offset: 71565},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1862, col: 16, offset: 71565},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1862, col: 16, offset: 71565},
											expr: &ruleRefExpr{
												pos:  position{line: 1862, col: 16, offset: 71565},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1862, col: 23, offset: 71572},
											expr: &charClassMatcher{
												pos:        position{line: 1862, col: 23, offset: 71572},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1864, col: 8, offset: 71627},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1865, col: 5, offset: 71691},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1865, col: 16, offset: 71702},
								expr: &actionExpr{
									pos: position{line: 1866, col: 9, offset: 71713},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1866, col: 9, offset: 71713},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1866, col: 9, offset: 71713},
												expr: &ruleRefExpr{
													pos:  position{line: 1866, col: 10, offset: 71714},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1867, col: 9, offset: 71734},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1867, col: 20, offset: 71745},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1867, col: 20, offset: 71745},
														expr: &charClassMatcher{
															pos:        position{line: 1867, col: 20, offset: 71745},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1869, col: 12, offset: 71808},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1876, col: 1, offset: 72045},
			expr: &actionExpr{
				pos: position{line: 1876, col: 39, offset: 72083},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1876, col: 39, offset: 72083},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1876, col: 39, offset: 72083},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1876, col: 50, offset: 72094},
								expr: &ruleRefExpr{
									pos:  position{line: 1876, col: 51, offset: 72095},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1877, col: 9, offset: 72117},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1877, col: 31, offset: 72139},
							expr: &ruleRefExpr{
								pos:  position{line: 1877, col: 31, offset: 72139},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1877, col: 38, offset: 72146},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1877, col: 46, offset: 72154},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1877, col: 53, offset: 72161},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1877, col: 95, offset: 72203},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1877, col: 96, offset: 72204},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1877, col: 96, offset: 72204},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1877, col: 118, offset: 72226},
											expr: &ruleRefExpr{
												pos:  position{line: 1877, col: 118, offset: 72226},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1877, col: 125, offset: 72233},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1877, col: 132, offset: 72240},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1882, col: 1, offset: 72404},
			expr: &actionExpr{
				pos: position{line: 1882, col: 44, offset: 72447},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1882, col: 44, offset: 72447},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1882, col: 50, offset: 72453},
						expr: &ruleRefExpr{
							pos:  position{line: 1882, col: 51, offset: 72454},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1886, col: 1, offset: 72542},
			expr: &actionExpr{
				pos: position{line: 1887, col: 5, offset: 72598},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1887, col: 5, offset: 72598},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1887, col: 5, offset: 72598},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1887, col: 11, offset: 72604},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1887, col: 11, offset: 72604},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1887, col: 11, offset: 72604},
											expr: &ruleRefExpr{
												pos:  position{line: 1887, col: 12, offset: 72605},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1887, col: 34, offset: 72627},
											expr: &charClassMatcher{
												pos:        position{line: 1887, col: 34, offset: 72627},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1889, col: 8, offset: 72682},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1894, col: 1, offset: 72813},
			expr: &actionExpr{
				pos: position{line: 1895, col: 5, offset: 72852},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1895, col: 5, offset: 72852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1895, col: 5, offset: 72852},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1895, col: 16, offset: 72863},
								expr: &ruleRefExpr{
									pos:  position{line: 1895, col: 17, offset: 72864},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1896, col: 5, offset: 72882},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1903, col: 5, offset: 73096},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1903, col: 12, offset: 73103},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1907, col: 1, offset: 73257},
			expr: &actionExpr{
				pos: position{line: 1907, col: 16, offset: 73272},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1907, col: 16, offset: 73272},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1912, col: 1, offset: 73360},
			expr: &actionExpr{
				pos: position{line: 1912, col: 39, offset: 73398},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1912, col: 39, offset: 73398},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1912, col: 45, offset: 73404},
						expr: &ruleRefExpr{
							pos:  position{line: 1912, col: 46, offset: 73405},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1916, col: 1, offset: 73489},
			expr: &actionExpr{
				pos: position{line: 1916, col: 38, offset: 73526},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1916, col: 38, offset: 73526},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1916, col: 38, offset: 73526},
							expr: &ruleRefExpr{
								pos:  position{line: 1916, col: 39, offset: 73527},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1916, col: 49, offset: 73537},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1916, col: 58, offset: 73546},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1916, col: 58, offset: 73546},
									expr: &charClassMatcher{
										pos:        position{line: 1916, col: 58, offset: 73546},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1918, col: 4, offset: 73593},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1925, col: 1, offset: 73786},
			expr: &actionExpr{
				pos: position{line: 1925, col: 14, offset: 73799},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1925, col: 14, offset: 73799},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1925, col: 14, offset: 73799},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1925, col: 19, offset: 73804},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1925, col: 25, offset: 73810},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1925, col: 43, offset: 73828},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1929, col: 1, offset: 73897},
			expr: &actionExpr{
				pos: position{line: 1929, col: 21, offset: 73917},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1929, col: 21, offset: 73917},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1929, col: 30, offset: 73926},
						expr: &choiceExpr{
							pos: position{line: 1929, col: 31, offset: 73927},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1929, col: 31, offset: 73927},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1929, col: 38, offset: 73934},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1929, col: 53, offset: 73949},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1929, col: 66, offset: 73962},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1929, col: 74, offset: 73970},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 1929, col: 75, offset: 73971},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1929, col: 75, offset: 73971},
												expr: &litMatcher{
													pos:        position{line: 1929, col: 76, offset: 73972},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1929, col: 81, offset: 73977,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1935, col: 1, offset: 74089},
			expr: &actionExpr{
				pos: position{line: 1935, col: 23, offset: 74111},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1935, col: 23, offset: 74111},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1935, col: 23, offset: 74111},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1935, col: 29, offset: 74117},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1935, col: 36, offset: 74124},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1936, col: 5, offset: 74157},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1936, col: 11, offset: 74163},
								expr: &actionExpr{
									pos: position{line: 1936, col: 12, offset: 74164},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1936, col: 12, offset: 74164},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1936, col: 12, offset: 74164},
												expr: &ruleRefExpr{
													pos:  position{line: 1936, col: 12, offset: 74164},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1936, col: 19, offset: 74171},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1936, col: 23, offset: 74175},
												expr: &ruleRefExpr{
													pos:  position{line: 1936, col: 23, offset: 74175},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1936, col: 30, offset: 74182},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1936, col: 39, offset: 74191},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1937, col: 5, offset: 74250},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1937, col: 11, offset: 74256},
								expr: &actionExpr{
									pos: position{line: 1937, col: 12, offset: 74257},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1937, col: 12, offset: 74257},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1937, col: 12, offset: 74257},
												expr: &ruleRefExpr{
													pos:  position{line: 1937, col: 12, offset: 74257},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1937, col: 19, offset: 74264},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1937, col: 23, offset: 74268},
												expr: &ruleRefExpr{
													pos:  position{line: 1937, col: 23, offset: 74268},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1937, col: 30, offset: 74275},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1937, col: 39, offset: 74284},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1938, col: 5, offset: 74343},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1942, col: 1, offset: 74426},
			expr: &actionExpr{
				pos: position{line: 1942, col: 30, offset: 74455},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1942, col: 30, offset: 74455},
					expr: &choiceExpr{
						pos: position{line: 1942, col: 31, offset: 74456},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1942, col: 31, offset: 74456},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1942, col: 42, offset: 74467},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1949, col: 1, offset: 74623},
			expr: &actionExpr{
				pos: position{line: 1949, col: 14, offset: 74636},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1949, col: 14, offset: 74636},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1949, col: 14, offset: 74636},
							expr: &ruleRefExpr{
								pos:  position{line: 1949, col: 15, offset: 74637},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1949, col: 19, offset: 74641},
							expr: &ruleRefExpr{
								pos:  position{line: 1949, col: 19, offset: 74641},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1949, col: 26, offset: 74648},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1957, col: 1, offset: 74801},
			expr: &choiceExpr{
				pos: position{line: 1957, col: 11, offset: 74811},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1957, col: 11, offset: 74811},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1957, col: 24, offset: 74824},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1957, col: 36, offset: 74836},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1957, col: 48, offset: 74848},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1957, col: 61, offset: 74861},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1959, col: 1, offset: 74873},
			expr: &actionExpr{
				pos: position{line: 1959, col: 15, offset: 74887},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1959, col: 15, offset: 74887},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1962, col: 1, offset: 74943},
			expr: &actionExpr{
				pos: position{line: 1962, col: 14, offset: 74956},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1962, col: 14, offset: 74956},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1965, col: 1, offset: 75013},
			expr: &actionExpr{
				pos: position{line: 1965, col: 14, offset: 75026},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1965, col: 14, offset: 75026},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1968, col: 1, offset: 75084},
			expr: &actionExpr{
				pos: position{line: 1968, col: 15, offset: 75098},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1968, col: 15, offset: 75098},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1971, col: 1, offset: 75155},
			expr: &actionExpr{
				pos: position{line: 1971, col: 13, offset: 75167},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1971, col: 13, offset: 75167},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1979, col: 1, offset: 75450},
			expr: &actionExpr{
				pos: position{line: 1979, col: 22, offset: 75471},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1979, col: 22, offset: 75471},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1979, col: 22, offset: 75471},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1979, col: 31, offset: 75480},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1979, col: 35, offset: 75484},
							expr: &charClassMatcher{
								pos:        position{line: 1979, col: 36, offset: 75485},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1986, col: 1, offset: 75672},
			expr: &charClassMatcher{
				pos:        position{line: 1986, col: 13, offset: 75684},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1988, col: 1, offset: 75696},
			expr: &choiceExpr{
				pos: position{line: 1988, col: 16, offset: 75711},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1988, col: 16, offset: 75711},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1988, col: 22, offset: 75717},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1988, col: 28, offset: 75723},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1988, col: 34, offset: 75729},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1988, col: 40, offset: 75735},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1988, col: 46, offset: 75741},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1990, col: 1, offset: 75749},
			expr: &actionExpr{
				pos: position{line: 1990, col: 14, offset: 75762},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1990, col: 14, offset: 75762},
					expr: &charClassMatcher{
						pos:        position{line: 1990, col: 14, offset: 75762},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1994, col: 1, offset: 75812},
			expr: &choiceExpr{
				pos: position{line: 1998, col: 5, offset: 76143},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1998, col: 5, offset: 76143},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1998, col: 5, offset: 76143},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1998, col: 5, offset: 76143},
									expr: &charClassMatcher{
										pos:        position{line: 1998, col: 5, offset: 76143},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1998, col: 15, offset: 76153},
									expr: &choiceExpr{
										pos: position{line: 1998, col: 17, offset: 76155},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1998, col: 17, offset: 76155},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1998, col: 30, offset: 76168},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2000, col: 9, offset: 76240},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2000, col: 9, offset: 76240},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2000, col: 9, offset: 76240},
									expr: &charClassMatcher{
										pos:        position{line: 2000, col: 9, offset: 76240},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2000, col: 19, offset: 76250},
									expr: &seqExpr{
										pos: position{line: 2000, col: 20, offset: 76251},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2000, col: 20, offset: 76251},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2000, col: 27, offset: 76258},
												expr: &charClassMatcher{
													pos:        position{line: 2000, col: 27, offset: 76258},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2004, col: 1, offset: 76338},
			expr: &choiceExpr{
				pos: position{line: 2005, col: 5, offset: 76420},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2005, col: 5, offset: 76420},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2005, col: 5, offset: 76420},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2005, col: 5, offset: 76420},
									expr: &charClassMatcher{
										pos:        position{line: 2005, col: 5, offset: 76420},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2005, col: 19, offset: 76434},
									expr: &choiceExpr{
										pos: position{line: 2005, col: 21, offset: 76436},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2005, col: 21, offset: 76436},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2005, col: 31, offset: 76446},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2007, col: 9, offset: 76517},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2010, col: 1, offset: 76620},
			expr: &actionExpr{
				pos: position{line: 2010, col: 12, offset: 76631},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2010, col: 12, offset: 76631},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2014, col: 1, offset: 76700},
			expr: &actionExpr{
				pos: position{line: 2014, col: 17, offset: 76716},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2014, col: 17, offset: 76716},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2014, col: 22, offset: 76721},
						expr: &choiceExpr{
							pos: position{line: 2014, col: 23, offset: 76722},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2014, col: 23, offset: 76722},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2014, col: 34, offset: 76733},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2018, col: 1, offset: 76821},
			expr: &actionExpr{
				pos: position{line: 2018, col: 25, offset: 76845},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2018, col: 25, offset: 76845},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2018, col: 30, offset: 76850},
						expr: &charClassMatcher{
							pos:        position{line: 2018, col: 31, offset: 76851},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2022, col: 1, offset: 76927},
			expr: &actionExpr{
				pos: position{line: 2022, col: 13, offset: 76939},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2022, col: 13, offset: 76939},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2022, col: 13, offset: 76939},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2022, col: 20, offset: 76946},
								expr: &ruleRefExpr{
									pos:  position{line: 2022, col: 21, offset: 76947},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2022, col: 34, offset: 76960},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2022, col: 39, offset: 76965},
								expr: &choiceExpr{
									pos: position{line: 2022, col: 40, offset: 76966},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2022, col: 40, offset: 76966},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2022, col: 51, offset: 76977},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2026, col: 1, offset: 77069},
			expr: &actionExpr{
				pos: position{line: 2026, col: 23, offset: 77091},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2026, col: 23, offset: 77091},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2026, col: 23, offset: 77091},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2026, col: 31, offset: 77099},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2026, col: 43, offset: 77111},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2026, col: 48, offset: 77116},
								expr: &choiceExpr{
									pos: position{line: 2026, col: 49, offset: 77117},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2026, col: 49, offset: 77117},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2026, col: 60, offset: 77128},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2030, col: 1, offset: 77220},
			expr: &oneOrMoreExpr{
				pos: position{line: 2030, col: 13, offset: 77232},
				expr: &charClassMatcher{
					pos:        position{line: 2030, col: 14, offset: 77233},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2032, col: 1, offset: 77369},
			expr: &actionExpr{
				pos: position{line: 2032, col: 21, offset: 77389},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2032, col: 21, offset: 77389},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2032, col: 21, offset: 77389},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2032, col: 29, offset: 77397},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2032, col: 41, offset: 77409},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2032, col: 47, offset: 77415},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2037, col: 1, offset: 77668},
			expr: &oneOrMoreExpr{
				pos: position{line: 2037, col: 22, offset: 77689},
				expr: &charClassMatcher{
					pos:        position{line: 2037, col: 23, offset: 77690},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2039, col: 1, offset: 77824},
			expr: &actionExpr{
				pos: position{line: 2039, col: 9, offset: 77832},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2039, col: 9, offset: 77832},
					expr: &charClassMatcher{
						pos:        position{line: 2039, col: 9, offset: 77832},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2043, col: 1, offset: 77884},
			expr: &choiceExpr{
				pos: position{line: 2043, col: 15, offset: 77898},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2043, col: 15, offset: 77898},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2043, col: 27, offset: 77910},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2043, col: 40, offset: 77923},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2043, col: 51, offset: 77934},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2043, col: 62, offset: 77945},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2045, col: 1, offset: 77958},
			expr: &actionExpr{
				pos: position{line: 2045, col: 7, offset: 77964},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2045, col: 7, offset: 77964},
					expr: &charClassMatcher{
						pos:        position{line: 2045, col: 7, offset: 77964},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2049, col: 1, offset: 78093},
			expr: &actionExpr{
				pos: position{line: 2049, col: 10, offset: 78102},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2049, col: 10, offset: 78102},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2053, col: 1, offset: 78148},
			expr: &actionExpr{
				pos: position{line: 2053, col: 11, offset: 78158},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2053, col: 11, offset: 78158},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2053, col: 11, offset: 78158},
							expr: &litMatcher{
								pos:        position{line: 2053, col: 11, offset: 78158},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2053, col: 16, offset: 78163},
							expr: &ruleRefExpr{
								pos:  position{line: 2053, col: 16, offset: 78163},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2057, col: 1, offset: 78219},
			expr: &choiceExpr{
				pos: position{line: 2057, col: 10, offset: 78228},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2057, col: 10, offset: 78228},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2057, col: 16, offset: 78234},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2057, col: 16, offset: 78234},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2061, col: 1, offset: 78279},
			expr: &choiceExpr{
				pos: position{line: 2061, col: 12, offset: 78290},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2061, col: 12, offset: 78290},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2061, col: 21, offset: 78299},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2061, col: 28, offset: 78306},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2063, col: 1, offset: 78314},
			expr: &notExpr{
				pos: position{line: 2063, col: 8, offset: 78321},
				expr: &anyMatcher{
					line: 2063, col: 9, offset: 78322,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2065, col: 1, offset: 78327},
			expr: &choiceExpr{
				pos: position{line: 2065, col: 8, offset: 78334},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2065, col: 8, offset: 78334},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2065, col: 18, offset: 78344},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {

	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr("positional-2", value.(string))
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr("positional-3", value.(string))
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {

	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {

	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {

	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(iconClass, inlineAttributes interface{}) (interface{}, error) {

	return types.NewIcon(iconClass.(string), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["iconClass"], stack["inlineAttributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {

	return types.NewIconAttributes(size, others.([]interface{}))
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onThematicBreak1() (interface{}, error) {

	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {

	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {

	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {

	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {

	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {

	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {

	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
