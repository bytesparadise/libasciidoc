// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &choiceExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 65, col: 9, offset: 1935},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 2000},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 2021},
						name: "SimpleRawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 2050},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2102},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 70, col: 11, offset: 2120},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 71, col: 11, offset: 2145},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 11, offset: 2173},
						name: "Table",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 11, offset: 2189},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 11, offset: 2213},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 75, col: 11, offset: 2239},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 76, col: 11, offset: 2268},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 77, col: 11, offset: 2294},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 11, offset: 2329},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 11, offset: 2353},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 11, offset: 2385},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 11, offset: 2411},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 11, offset: 2448},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 83, col: 11, offset: 2473},
						name: "RawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 84, col: 11, offset: 2496},
						name: "StandaloneAttributes",
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 89, col: 1, offset: 2626},
			expr: &ruleRefExpr{
				pos:  position{line: 89, col: 16, offset: 2641},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 91, col: 1, offset: 2659},
			expr: &actionExpr{
				pos: position{line: 91, col: 20, offset: 2678},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 91, col: 20, offset: 2678},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 91, col: 20, offset: 2678},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 41, offset: 2699},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 91, col: 49, offset: 2707},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 50, offset: 2708},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 75, offset: 2733},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 95, col: 1, offset: 2813},
			expr: &seqExpr{
				pos: position{line: 95, col: 26, offset: 2838},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 95, col: 26, offset: 2838},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 95, col: 32, offset: 2844},
						expr: &ruleRefExpr{
							pos:  position{line: 95, col: 32, offset: 2844},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 39, offset: 2851},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 97, col: 1, offset: 2856},
			expr: &actionExpr{
				pos: position{line: 97, col: 27, offset: 2882},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 97, col: 27, offset: 2882},
					expr: &oneOrMoreExpr{
						pos: position{line: 97, col: 28, offset: 2883},
						expr: &seqExpr{
							pos: position{line: 97, col: 29, offset: 2884},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 97, col: 29, offset: 2884},
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 30, offset: 2885},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 97, col: 51, offset: 2906,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 104, col: 1, offset: 3072},
			expr: &actionExpr{
				pos: position{line: 104, col: 19, offset: 3090},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 104, col: 19, offset: 3090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 104, col: 19, offset: 3090},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 104, col: 23, offset: 3094},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 23, offset: 3094},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 30, offset: 3101},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 37, offset: 3108},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 52, offset: 3123},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 56, offset: 3127},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 56, offset: 3127},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 74, offset: 3145},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 9, offset: 3157},
							expr: &choiceExpr{
								pos: position{line: 105, col: 10, offset: 3158},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 105, col: 10, offset: 3158},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 105, col: 10, offset: 3158},
												expr: &ruleRefExpr{
													pos:  position{line: 105, col: 10, offset: 3158},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 105, col: 17, offset: 3165},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 105, col: 37, offset: 3185},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 9, offset: 3208},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 18, offset: 3217},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 18, offset: 3217},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 107, col: 9, offset: 3244},
							expr: &choiceExpr{
								pos: position{line: 107, col: 10, offset: 3245},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 107, col: 10, offset: 3245},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 107, col: 10, offset: 3245},
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 10, offset: 3245},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 17, offset: 3252},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 107, col: 37, offset: 3272},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 9, offset: 3295},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 19, offset: 3305},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 19, offset: 3305},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 112, col: 1, offset: 3406},
			expr: &choiceExpr{
				pos: position{line: 112, col: 20, offset: 3425},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 112, col: 20, offset: 3425},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 48, offset: 3453},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 114, col: 1, offset: 3483},
			expr: &actionExpr{
				pos: position{line: 114, col: 30, offset: 3512},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 114, col: 30, offset: 3512},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 30, offset: 3512},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 30, offset: 3512},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 37, offset: 3519},
							expr: &litMatcher{
								pos:        position{line: 114, col: 38, offset: 3520},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 42, offset: 3524},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 114, col: 51, offset: 3533},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 51, offset: 3533},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 68, offset: 3550},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 118, col: 1, offset: 3620},
			expr: &actionExpr{
				pos: position{line: 118, col: 33, offset: 3652},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 118, col: 33, offset: 3652},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 33, offset: 3652},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 33, offset: 3652},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 118, col: 40, offset: 3659},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 118, col: 51, offset: 3670},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 59, offset: 3678},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 75, offset: 3694},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 122, col: 1, offset: 3773},
			expr: &actionExpr{
				pos: position{line: 122, col: 19, offset: 3791},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 122, col: 19, offset: 3791},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 19, offset: 3791},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 19, offset: 3791},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 26, offset: 3798},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 36, offset: 3808},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 56, offset: 3828},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 122, col: 62, offset: 3834},
								expr: &ruleRefExpr{
									pos:  position{line: 122, col: 63, offset: 3835},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 85, offset: 3857},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 85, offset: 3857},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 122, col: 92, offset: 3864},
							expr: &litMatcher{
								pos:        position{line: 122, col: 92, offset: 3864},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 97, offset: 3869},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 97, offset: 3869},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 127, col: 1, offset: 4014},
			expr: &actionExpr{
				pos: position{line: 127, col: 23, offset: 4036},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 127, col: 23, offset: 4036},
					expr: &charClassMatcher{
						pos:        position{line: 127, col: 23, offset: 4036},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 131, col: 1, offset: 4083},
			expr: &actionExpr{
				pos: position{line: 131, col: 24, offset: 4106},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 131, col: 24, offset: 4106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 131, col: 24, offset: 4106},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 131, col: 28, offset: 4110},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 131, col: 35, offset: 4117},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 131, col: 36, offset: 4118},
									expr: &charClassMatcher{
										pos:        position{line: 131, col: 36, offset: 4118},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 4, offset: 4165},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 139, col: 1, offset: 4326},
			expr: &actionExpr{
				pos: position{line: 139, col: 21, offset: 4346},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 139, col: 21, offset: 4346},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 139, col: 21, offset: 4346},
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 21, offset: 4346},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 139, col: 28, offset: 4353},
							expr: &litMatcher{
								pos:        position{line: 139, col: 29, offset: 4354},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 139, col: 33, offset: 4358},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 140, col: 9, offset: 4377},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 140, col: 10, offset: 4378},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 140, col: 10, offset: 4378},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 140, col: 10, offset: 4378},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 21, offset: 4389},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 45, offset: 4413},
													expr: &litMatcher{
														pos:        position{line: 140, col: 45, offset: 4413},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 50, offset: 4418},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 58, offset: 4426},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 59, offset: 4427},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 82, offset: 4450},
													expr: &litMatcher{
														pos:        position{line: 140, col: 82, offset: 4450},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 87, offset: 4455},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 97, offset: 4465},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 98, offset: 4466},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 142, col: 15, offset: 4583},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 142, col: 15, offset: 4583},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 142, col: 15, offset: 4583},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 142, col: 24, offset: 4592},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 142, col: 46, offset: 4614},
													expr: &litMatcher{
														pos:        position{line: 142, col: 46, offset: 4614},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 142, col: 51, offset: 4619},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 142, col: 61, offset: 4629},
														expr: &ruleRefExpr{
															pos:  position{line: 142, col: 62, offset: 4630},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 13, offset: 4739},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 149, col: 1, offset: 4869},
			expr: &choiceExpr{
				pos: position{line: 149, col: 27, offset: 4895},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 149, col: 27, offset: 4895},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 149, col: 27, offset: 4895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 149, col: 27, offset: 4895},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 32, offset: 4900},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 39, offset: 4907},
									expr: &charClassMatcher{
										pos:        position{line: 149, col: 39, offset: 4907},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 4955},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 151, col: 5, offset: 4955},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 151, col: 5, offset: 4955},
									expr: &litMatcher{
										pos:        position{line: 151, col: 5, offset: 4955},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 151, col: 11, offset: 4961},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 151, col: 18, offset: 4968},
									expr: &charClassMatcher{
										pos:        position{line: 151, col: 18, offset: 4968},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 151, col: 29, offset: 4979},
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 29, offset: 4979},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 151, col: 36, offset: 4986},
									expr: &litMatcher{
										pos:        position{line: 151, col: 37, offset: 4987},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 155, col: 1, offset: 5027},
			expr: &actionExpr{
				pos: position{line: 155, col: 25, offset: 5051},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 155, col: 25, offset: 5051},
					expr: &charClassMatcher{
						pos:        position{line: 155, col: 25, offset: 5051},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 159, col: 1, offset: 5097},
			expr: &actionExpr{
				pos: position{line: 159, col: 27, offset: 5123},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 159, col: 27, offset: 5123},
					expr: &charClassMatcher{
						pos:        position{line: 159, col: 27, offset: 5123},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 166, col: 1, offset: 5276},
			expr: &actionExpr{
				pos: position{line: 166, col: 25, offset: 5300},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 166, col: 25, offset: 5300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 166, col: 25, offset: 5300},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 29, offset: 5304},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 35, offset: 5310},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 166, col: 50, offset: 5325},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 9, offset: 5338},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 167, col: 15, offset: 5344},
								expr: &actionExpr{
									pos: position{line: 167, col: 16, offset: 5345},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 167, col: 17, offset: 5346},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 167, col: 17, offset: 5346},
												expr: &ruleRefExpr{
													pos:  position{line: 167, col: 17, offset: 5346},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 167, col: 24, offset: 5353},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 167, col: 31, offset: 5360},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 169, col: 13, offset: 5434},
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 13, offset: 5434},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 169, col: 20, offset: 5441},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 176, col: 1, offset: 5681},
			expr: &actionExpr{
				pos: position{line: 176, col: 18, offset: 5698},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 176, col: 18, offset: 5698},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 176, col: 18, offset: 5698},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 28, offset: 5708},
							expr: &charClassMatcher{
								pos:        position{line: 176, col: 29, offset: 5709},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 180, col: 1, offset: 5757},
			expr: &actionExpr{
				pos: position{line: 180, col: 30, offset: 5786},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 180, col: 30, offset: 5786},
					expr: &charClassMatcher{
						pos:        position{line: 180, col: 30, offset: 5786},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 184, col: 1, offset: 5831},
			expr: &choiceExpr{
				pos: position{line: 184, col: 19, offset: 5849},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 184, col: 19, offset: 5849},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 184, col: 19, offset: 5849},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 184, col: 19, offset: 5849},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 184, col: 24, offset: 5854},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 30, offset: 5860},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 184, col: 45, offset: 5875},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 184, col: 49, offset: 5879},
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 49, offset: 5879},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 184, col: 56, offset: 5886},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5946},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 186, col: 5, offset: 5946},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 9, offset: 5950},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 15, offset: 5956},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 186, col: 30, offset: 5971},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 186, col: 35, offset: 5976},
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 35, offset: 5976},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 42, offset: 5983},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 190, col: 1, offset: 6042},
			expr: &choiceExpr{
				pos: position{line: 190, col: 26, offset: 6067},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 190, col: 26, offset: 6067},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 190, col: 39, offset: 6080},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 192, col: 1, offset: 6089},
			expr: &actionExpr{
				pos: position{line: 192, col: 12, offset: 6100},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 192, col: 12, offset: 6100},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 192, col: 12, offset: 6100},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 16, offset: 6104},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 21, offset: 6109},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 192, col: 35, offset: 6123},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 196, col: 1, offset: 6189},
			expr: &choiceExpr{
				pos: position{line: 196, col: 15, offset: 6203},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 196, col: 15, offset: 6203},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 29, offset: 6217},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 43, offset: 6231},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 61, offset: 6249},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 80, offset: 6268},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 98, offset: 6286},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 198, col: 1, offset: 6304},
			expr: &actionExpr{
				pos: position{line: 198, col: 16, offset: 6319},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 198, col: 16, offset: 6319},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 198, col: 16, offset: 6319},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 198, col: 28, offset: 6331},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 33, offset: 6336},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 198, col: 47, offset: 6350},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 202, col: 1, offset: 6426},
			expr: &actionExpr{
				pos: position{line: 202, col: 16, offset: 6441},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 202, col: 16, offset: 6441},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 202, col: 16, offset: 6441},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 29, offset: 6454},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 34, offset: 6459},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 202, col: 48, offset: 6473},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 206, col: 1, offset: 6548},
			expr: &actionExpr{
				pos: position{line: 206, col: 20, offset: 6567},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 206, col: 20, offset: 6567},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 206, col: 20, offset: 6567},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 32, offset: 6579},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 37, offset: 6584},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 51, offset: 6598},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 55, offset: 6602},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 206, col: 61, offset: 6608},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 70, offset: 6617},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 210, col: 1, offset: 6695},
			expr: &actionExpr{
				pos: position{line: 210, col: 21, offset: 6715},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 210, col: 21, offset: 6715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 210, col: 21, offset: 6715},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 34, offset: 6728},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 39, offset: 6733},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 53, offset: 6747},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 57, offset: 6751},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 210, col: 63, offset: 6757},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 72, offset: 6766},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 214, col: 1, offset: 6843},
			expr: &actionExpr{
				pos: position{line: 214, col: 20, offset: 6862},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 214, col: 20, offset: 6862},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 214, col: 20, offset: 6862},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 32, offset: 6874},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 37, offset: 6879},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 214, col: 51, offset: 6893},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 55, offset: 6897},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 214, col: 60, offset: 6902},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 214, col: 60, offset: 6902},
									expr: &charClassMatcher{
										pos:        position{line: 214, col: 60, offset: 6902},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 214, col: 108, offset: 6950},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 218, col: 1, offset: 7032},
			expr: &actionExpr{
				pos: position{line: 218, col: 21, offset: 7052},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 218, col: 21, offset: 7052},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 218, col: 21, offset: 7052},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 34, offset: 7065},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 39, offset: 7070},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 53, offset: 7084},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 57, offset: 7088},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 218, col: 62, offset: 7093},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 218, col: 62, offset: 7093},
									expr: &charClassMatcher{
										pos:        position{line: 218, col: 62, offset: 7093},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 110, offset: 7141},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 222, col: 1, offset: 7222},
			expr: &actionExpr{
				pos: position{line: 222, col: 15, offset: 7236},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 222, col: 15, offset: 7236},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 222, col: 15, offset: 7236},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 222, col: 21, offset: 7242},
								expr: &ruleRefExpr{
									pos:  position{line: 222, col: 22, offset: 7243},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 222, col: 41, offset: 7262},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 41, offset: 7262},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 226, col: 1, offset: 7332},
			expr: &actionExpr{
				pos: position{line: 226, col: 21, offset: 7352},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 226, col: 21, offset: 7352},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 226, col: 21, offset: 7352},
							expr: &choiceExpr{
								pos: position{line: 226, col: 23, offset: 7354},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 226, col: 23, offset: 7354},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 226, col: 29, offset: 7360},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 7437},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 227, col: 11, offset: 7443},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 227, col: 11, offset: 7443},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 228, col: 9, offset: 7464},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 229, col: 9, offset: 7488},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 230, col: 9, offset: 7525},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 231, col: 9, offset: 7553},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 232, col: 9, offset: 7581},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 233, col: 9, offset: 7608},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7635},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7672},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7708},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 240, col: 1, offset: 7811},
			expr: &actionExpr{
				pos: position{line: 240, col: 14, offset: 7824},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 240, col: 14, offset: 7824},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 240, col: 14, offset: 7824},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 240, col: 19, offset: 7829},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 23, offset: 7833},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 240, col: 27, offset: 7837},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 240, col: 32, offset: 7842},
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 32, offset: 7842},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 240, col: 39, offset: 7849},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 244, col: 1, offset: 7892},
			expr: &actionExpr{
				pos: position{line: 244, col: 20, offset: 7911},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 244, col: 20, offset: 7911},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 20, offset: 7911},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 25, offset: 7916},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 29, offset: 7920},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 33, offset: 7924},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 38, offset: 7929},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 38, offset: 7929},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 250, col: 1, offset: 8206},
			expr: &actionExpr{
				pos: position{line: 250, col: 17, offset: 8222},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 250, col: 17, offset: 8222},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 250, col: 17, offset: 8222},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 250, col: 21, offset: 8226},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 250, col: 28, offset: 8233},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 250, col: 49, offset: 8254},
							expr: &ruleRefExpr{
								pos:  position{line: 250, col: 49, offset: 8254},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 250, col: 56, offset: 8261},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 254, col: 1, offset: 8319},
			expr: &actionExpr{
				pos: position{line: 254, col: 24, offset: 8342},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 254, col: 24, offset: 8342},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 254, col: 24, offset: 8342},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 254, col: 32, offset: 8350},
							expr: &charClassMatcher{
								pos:        position{line: 254, col: 32, offset: 8350},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 260, col: 1, offset: 8604},
			expr: &actionExpr{
				pos: position{line: 260, col: 31, offset: 8634},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 260, col: 31, offset: 8634},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 31, offset: 8634},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 35, offset: 8638},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 260, col: 42, offset: 8645},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 260, col: 42, offset: 8645},
										expr: &ruleRefExpr{
											pos:  position{line: 260, col: 42, offset: 8645},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 260, col: 57, offset: 8660},
										expr: &ruleRefExpr{
											pos:  position{line: 260, col: 57, offset: 8660},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 260, col: 69, offset: 8672},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 73, offset: 8676},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 73, offset: 8676},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 80, offset: 8683},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 264, col: 1, offset: 8737},
			expr: &choiceExpr{
				pos: position{line: 264, col: 15, offset: 8751},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 264, col: 15, offset: 8751},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 31, offset: 8767},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 46, offset: 8782},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 268, col: 1, offset: 9010},
			expr: &actionExpr{
				pos: position{line: 268, col: 18, offset: 9027},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 268, col: 18, offset: 9027},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 268, col: 18, offset: 9027},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 22, offset: 9031},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 268, col: 29, offset: 9038},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 268, col: 29, offset: 9038},
										expr: &ruleRefExpr{
											pos:  position{line: 268, col: 29, offset: 9038},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 268, col: 45, offset: 9054},
										expr: &ruleRefExpr{
											pos:  position{line: 268, col: 45, offset: 9054},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 268, col: 60, offset: 9069},
										expr: &ruleRefExpr{
											pos:  position{line: 268, col: 60, offset: 9069},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 268, col: 82, offset: 9091},
										expr: &ruleRefExpr{
											pos:  position{line: 268, col: 82, offset: 9091},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 268, col: 104, offset: 9113},
										expr: &ruleRefExpr{
											pos:  position{line: 268, col: 104, offset: 9113},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 268, col: 116, offset: 9125},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 120, offset: 9129},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 272, col: 1, offset: 9183},
			expr: &actionExpr{
				pos: position{line: 272, col: 19, offset: 9201},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 272, col: 19, offset: 9201},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 272, col: 25, offset: 9207},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 276, col: 1, offset: 9268},
			expr: &actionExpr{
				pos: position{line: 276, col: 25, offset: 9292},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 276, col: 25, offset: 9292},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 276, col: 25, offset: 9292},
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 25, offset: 9292},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 32, offset: 9299},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 276, col: 36, offset: 9303},
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 36, offset: 9303},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 276, col: 43, offset: 9310},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 276, col: 49, offset: 9316},
								expr: &ruleRefExpr{
									pos:  position{line: 276, col: 49, offset: 9316},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 283, col: 1, offset: 9457},
			expr: &actionExpr{
				pos: position{line: 283, col: 25, offset: 9481},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 283, col: 25, offset: 9481},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 25, offset: 9481},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 25, offset: 9481},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 32, offset: 9488},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 36, offset: 9492},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 36, offset: 9492},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 43, offset: 9499},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 49, offset: 9505},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 49, offset: 9505},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 290, col: 1, offset: 9646},
			expr: &actionExpr{
				pos: position{line: 290, col: 21, offset: 9666},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 290, col: 21, offset: 9666},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 290, col: 21, offset: 9666},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 33, offset: 9678},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 33, offset: 9678},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 40, offset: 9685},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 294, col: 1, offset: 9737},
			expr: &actionExpr{
				pos: position{line: 294, col: 30, offset: 9766},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 294, col: 30, offset: 9766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 294, col: 30, offset: 9766},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 39, offset: 9775},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 39, offset: 9775},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 294, col: 46, offset: 9782},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 299, col: 1, offset: 9923},
			expr: &actionExpr{
				pos: position{line: 299, col: 30, offset: 9952},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 299, col: 30, offset: 9952},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 30, offset: 9952},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 34, offset: 9956},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 37, offset: 9959},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 299, col: 53, offset: 9975},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 57, offset: 9979},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 57, offset: 9979},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 64, offset: 9986},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 304, col: 1, offset: 10141},
			expr: &actionExpr{
				pos: position{line: 304, col: 21, offset: 10161},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 304, col: 21, offset: 10161},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 304, col: 21, offset: 10161},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 305, col: 5, offset: 10176},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 14, offset: 10185},
								expr: &actionExpr{
									pos: position{line: 305, col: 15, offset: 10186},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 305, col: 15, offset: 10186},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 305, col: 15, offset: 10186},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 305, col: 19, offset: 10190},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 305, col: 24, offset: 10195},
													expr: &ruleRefExpr{
														pos:  position{line: 305, col: 25, offset: 10196},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 5, offset: 10251},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 306, col: 12, offset: 10258},
								expr: &actionExpr{
									pos: position{line: 306, col: 13, offset: 10259},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 306, col: 13, offset: 10259},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 306, col: 13, offset: 10259},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 306, col: 17, offset: 10263},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 306, col: 22, offset: 10268},
													expr: &ruleRefExpr{
														pos:  position{line: 306, col: 23, offset: 10269},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 307, col: 5, offset: 10316},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 9, offset: 10320},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 9, offset: 10320},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 16, offset: 10327},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 312, col: 1, offset: 10478},
			expr: &actionExpr{
				pos: position{line: 312, col: 19, offset: 10496},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 312, col: 19, offset: 10496},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 312, col: 19, offset: 10496},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 23, offset: 10500},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 312, col: 34, offset: 10511},
								expr: &ruleRefExpr{
									pos:  position{line: 312, col: 35, offset: 10512},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 312, col: 54, offset: 10531},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 312, col: 58, offset: 10535},
							expr: &ruleRefExpr{
								pos:  position{line: 312, col: 58, offset: 10535},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 312, col: 65, offset: 10542},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 316, col: 1, offset: 10614},
			expr: &choiceExpr{
				pos: position{line: 316, col: 21, offset: 10634},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 316, col: 21, offset: 10634},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 49, offset: 10662},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 318, col: 1, offset: 10692},
			expr: &actionExpr{
				pos: position{line: 318, col: 30, offset: 10721},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 318, col: 30, offset: 10721},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 318, col: 30, offset: 10721},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 35, offset: 10726},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 318, col: 49, offset: 10740},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 53, offset: 10744},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 59, offset: 10750},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 60, offset: 10751},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 318, col: 77, offset: 10768},
							expr: &litMatcher{
								pos:        position{line: 318, col: 77, offset: 10768},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 82, offset: 10773},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 82, offset: 10773},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 322, col: 1, offset: 10872},
			expr: &actionExpr{
				pos: position{line: 322, col: 33, offset: 10904},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 322, col: 33, offset: 10904},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 322, col: 33, offset: 10904},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 38, offset: 10909},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 322, col: 52, offset: 10923},
							expr: &litMatcher{
								pos:        position{line: 322, col: 52, offset: 10923},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 322, col: 57, offset: 10928},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 57, offset: 10928},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 326, col: 1, offset: 11016},
			expr: &actionExpr{
				pos: position{line: 326, col: 17, offset: 11032},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 326, col: 17, offset: 11032},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 326, col: 17, offset: 11032},
							expr: &litMatcher{
								pos:        position{line: 326, col: 18, offset: 11033},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 326, col: 26, offset: 11041},
							expr: &litMatcher{
								pos:        position{line: 326, col: 27, offset: 11042},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 326, col: 35, offset: 11050},
							expr: &litMatcher{
								pos:        position{line: 326, col: 36, offset: 11051},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 326, col: 46, offset: 11061},
							expr: &oneOrMoreExpr{
								pos: position{line: 326, col: 48, offset: 11063},
								expr: &ruleRefExpr{
									pos:  position{line: 326, col: 48, offset: 11063},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 326, col: 56, offset: 11071},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 326, col: 61, offset: 11076},
								expr: &charClassMatcher{
									pos:        position{line: 326, col: 61, offset: 11076},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 326, col: 75, offset: 11090},
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 75, offset: 11090},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 330, col: 1, offset: 11133},
			expr: &actionExpr{
				pos: position{line: 330, col: 19, offset: 11151},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 330, col: 19, offset: 11151},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 330, col: 26, offset: 11158},
						expr: &charClassMatcher{
							pos:        position{line: 330, col: 26, offset: 11158},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 334, col: 1, offset: 11209},
			expr: &actionExpr{
				pos: position{line: 334, col: 29, offset: 11237},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 334, col: 29, offset: 11237},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 334, col: 29, offset: 11237},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 334, col: 36, offset: 11244},
								expr: &charClassMatcher{
									pos:        position{line: 334, col: 36, offset: 11244},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 334, col: 50, offset: 11258},
							expr: &litMatcher{
								pos:        position{line: 334, col: 51, offset: 11259},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 338, col: 1, offset: 11425},
			expr: &actionExpr{
				pos: position{line: 338, col: 20, offset: 11444},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 338, col: 20, offset: 11444},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 338, col: 20, offset: 11444},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 338, col: 29, offset: 11453},
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 29, offset: 11453},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 338, col: 36, offset: 11460},
							expr: &litMatcher{
								pos:        position{line: 338, col: 36, offset: 11460},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 41, offset: 11465},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 338, col: 48, offset: 11472},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 49, offset: 11473},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 338, col: 66, offset: 11490},
							expr: &litMatcher{
								pos:        position{line: 338, col: 66, offset: 11490},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 71, offset: 11495},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 338, col: 77, offset: 11501},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 78, offset: 11502},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 95, offset: 11519},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 338, col: 99, offset: 11523},
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 99, offset: 11523},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 106, offset: 11530},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 342, col: 1, offset: 11599},
			expr: &actionExpr{
				pos: position{line: 342, col: 20, offset: 11618},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 342, col: 20, offset: 11618},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 342, col: 20, offset: 11618},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 29, offset: 11627},
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 29, offset: 11627},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 342, col: 36, offset: 11634},
							expr: &litMatcher{
								pos:        position{line: 342, col: 36, offset: 11634},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 41, offset: 11639},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 342, col: 48, offset: 11646},
								expr: &ruleRefExpr{
									pos:  position{line: 342, col: 49, offset: 11647},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 342, col: 66, offset: 11664},
							expr: &litMatcher{
								pos:        position{line: 342, col: 66, offset: 11664},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 71, offset: 11669},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 342, col: 77, offset: 11675},
								expr: &ruleRefExpr{
									pos:  position{line: 342, col: 78, offset: 11676},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 342, col: 95, offset: 11693},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 99, offset: 11697},
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 99, offset: 11697},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 106, offset: 11704},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 346, col: 1, offset: 11791},
			expr: &actionExpr{
				pos: position{line: 346, col: 19, offset: 11809},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 346, col: 20, offset: 11810},
					expr: &charClassMatcher{
						pos:        position{line: 346, col: 20, offset: 11810},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 350, col: 1, offset: 11859},
			expr: &actionExpr{
				pos: position{line: 350, col: 20, offset: 11878},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 350, col: 20, offset: 11878},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 20, offset: 11878},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 24, offset: 11882},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 350, col: 31, offset: 11889},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 350, col: 31, offset: 11889},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 31, offset: 11889},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 350, col: 51, offset: 11909},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 51, offset: 11909},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 350, col: 66, offset: 11924},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 66, offset: 11924},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 350, col: 78, offset: 11936},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 354, col: 1, offset: 11990},
			expr: &actionExpr{
				pos: position{line: 354, col: 23, offset: 12012},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 354, col: 23, offset: 12012},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 354, col: 28, offset: 12017},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 358, col: 1, offset: 12076},
			expr: &actionExpr{
				pos: position{line: 358, col: 25, offset: 12100},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 358, col: 25, offset: 12100},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 358, col: 25, offset: 12100},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 358, col: 36, offset: 12111},
								expr: &ruleRefExpr{
									pos:  position{line: 358, col: 37, offset: 12112},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 358, col: 56, offset: 12131},
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 56, offset: 12131},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 362, col: 1, offset: 12246},
			expr: &choiceExpr{
				pos: position{line: 362, col: 18, offset: 12263},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 362, col: 18, offset: 12263},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 362, col: 36, offset: 12281},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 362, col: 58, offset: 12303},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 364, col: 1, offset: 12322},
			expr: &actionExpr{
				pos: position{line: 364, col: 24, offset: 12345},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 364, col: 24, offset: 12345},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 364, col: 24, offset: 12345},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 364, col: 28, offset: 12349},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 35, offset: 12356},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 364, col: 50, offset: 12371},
							expr: &charClassMatcher{
								pos:        position{line: 364, col: 51, offset: 12372},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 368, col: 1, offset: 12432},
			expr: &actionExpr{
				pos: position{line: 368, col: 20, offset: 12451},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 368, col: 20, offset: 12451},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 368, col: 20, offset: 12451},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 368, col: 24, offset: 12455},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 27, offset: 12458},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 368, col: 42, offset: 12473},
							expr: &charClassMatcher{
								pos:        position{line: 368, col: 43, offset: 12474},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 372, col: 1, offset: 12526},
			expr: &actionExpr{
				pos: position{line: 372, col: 22, offset: 12547},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 372, col: 22, offset: 12547},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 22, offset: 12547},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 26, offset: 12551},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 31, offset: 12556},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 372, col: 46, offset: 12571},
							expr: &charClassMatcher{
								pos:        position{line: 372, col: 47, offset: 12572},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 377, col: 1, offset: 12672},
			expr: &actionExpr{
				pos: position{line: 377, col: 20, offset: 12691},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 377, col: 20, offset: 12691},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 377, col: 20, offset: 12691},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 26, offset: 12697},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 377, col: 41, offset: 12712},
							expr: &charClassMatcher{
								pos:        position{line: 377, col: 42, offset: 12713},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 381, col: 1, offset: 12749},
			expr: &choiceExpr{
				pos: position{line: 381, col: 14, offset: 12762},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 381, col: 14, offset: 12762},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 381, col: 26, offset: 12774},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 381, col: 38, offset: 12786},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 381, col: 50, offset: 12798},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 383, col: 1, offset: 12812},
			expr: &actionExpr{
				pos: position{line: 383, col: 15, offset: 12826},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 383, col: 15, offset: 12826},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 383, col: 21, offset: 12832},
						expr: &ruleRefExpr{
							pos:  position{line: 383, col: 21, offset: 12832},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 387, col: 1, offset: 12897},
			expr: &actionExpr{
				pos: position{line: 387, col: 18, offset: 12914},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 387, col: 18, offset: 12914},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 387, col: 18, offset: 12914},
							expr: &litMatcher{
								pos:        position{line: 387, col: 18, offset: 12914},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 387, col: 23, offset: 12919},
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 23, offset: 12919},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 387, col: 30, offset: 12926},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 32, offset: 12928},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 387, col: 45, offset: 12941},
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 45, offset: 12941},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 387, col: 52, offset: 12948},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 56, offset: 12952},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 387, col: 59, offset: 12955},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 387, col: 59, offset: 12955},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 387, col: 71, offset: 12967},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 387, col: 83, offset: 12979},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 392, col: 1, offset: 13168},
			expr: &actionExpr{
				pos: position{line: 392, col: 14, offset: 13181},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 392, col: 14, offset: 13181},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 392, col: 14, offset: 13181},
							expr: &charClassMatcher{
								pos:        position{line: 392, col: 14, offset: 13181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 392, col: 21, offset: 13188},
							expr: &charClassMatcher{
								pos:        position{line: 392, col: 22, offset: 13189},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 398, col: 1, offset: 13325},
			expr: &actionExpr{
				pos: position{line: 398, col: 14, offset: 13338},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 398, col: 14, offset: 13338},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 398, col: 14, offset: 13338},
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 14, offset: 13338},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 398, col: 21, offset: 13345},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 398, col: 25, offset: 13349},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 29, offset: 13353},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 398, col: 41, offset: 13365},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 398, col: 45, offset: 13369},
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 45, offset: 13369},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 398, col: 52, offset: 13376},
							expr: &charClassMatcher{
								pos:        position{line: 398, col: 53, offset: 13377},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 400, col: 1, offset: 13404},
			expr: &actionExpr{
				pos: position{line: 400, col: 16, offset: 13419},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 400, col: 16, offset: 13419},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 400, col: 20, offset: 13423},
						expr: &choiceExpr{
							pos: position{line: 400, col: 22, offset: 13425},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 400, col: 22, offset: 13425},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 400, col: 37, offset: 13440},
									expr: &charClassMatcher{
										pos:        position{line: 400, col: 37, offset: 13440},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 400, col: 51, offset: 13454},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 402, col: 1, offset: 13494},
			expr: &actionExpr{
				pos: position{line: 402, col: 17, offset: 13510},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 402, col: 17, offset: 13510},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 405, col: 1, offset: 13570},
			expr: &actionExpr{
				pos: position{line: 405, col: 14, offset: 13583},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 405, col: 14, offset: 13583},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 14, offset: 13583},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 14, offset: 13583},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 21, offset: 13590},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 405, col: 25, offset: 13594},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 29, offset: 13598},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 41, offset: 13610},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 45, offset: 13614},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 45, offset: 13614},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 407, col: 1, offset: 13642},
			expr: &actionExpr{
				pos: position{line: 407, col: 16, offset: 13657},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 16, offset: 13657},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 407, col: 20, offset: 13661},
						expr: &choiceExpr{
							pos: position{line: 407, col: 22, offset: 13663},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 407, col: 22, offset: 13663},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 407, col: 37, offset: 13678},
									expr: &charClassMatcher{
										pos:        position{line: 407, col: 37, offset: 13678},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 407, col: 51, offset: 13692},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 409, col: 1, offset: 13732},
			expr: &actionExpr{
				pos: position{line: 409, col: 17, offset: 13748},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 409, col: 17, offset: 13748},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 412, col: 1, offset: 13839},
			expr: &actionExpr{
				pos: position{line: 412, col: 17, offset: 13855},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 412, col: 17, offset: 13855},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 17, offset: 13855},
							expr: &charClassMatcher{
								pos:        position{line: 412, col: 17, offset: 13855},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 412, col: 30, offset: 13868},
							expr: &charClassMatcher{
								pos:        position{line: 412, col: 31, offset: 13869},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 415, col: 1, offset: 13980},
			expr: &actionExpr{
				pos: position{line: 415, col: 19, offset: 13998},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 415, col: 19, offset: 13998},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 415, col: 19, offset: 13998},
							expr: &charClassMatcher{
								pos:        position{line: 415, col: 19, offset: 13998},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 415, col: 31, offset: 14010},
							expr: &charClassMatcher{
								pos:        position{line: 415, col: 32, offset: 14011},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 417, col: 1, offset: 14068},
			expr: &choiceExpr{
				pos: position{line: 417, col: 19, offset: 14086},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 417, col: 19, offset: 14086},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 417, col: 41, offset: 14108},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 417, col: 65, offset: 14132},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 421, col: 1, offset: 14330},
			expr: &actionExpr{
				pos: position{line: 421, col: 24, offset: 14353},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 421, col: 24, offset: 14353},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 421, col: 24, offset: 14353},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 421, col: 31, offset: 14360},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 421, col: 31, offset: 14360},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 424, col: 5, offset: 14446},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 424, col: 13, offset: 14454},
								expr: &choiceExpr{
									pos: position{line: 424, col: 14, offset: 14455},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 424, col: 14, offset: 14455},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 425, col: 12, offset: 14486},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 425, col: 12, offset: 14486},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 425, col: 34, offset: 14508},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 425, col: 34, offset: 14508},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 425, col: 34, offset: 14508},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 425, col: 39, offset: 14513},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 432, col: 1, offset: 14696},
			expr: &actionExpr{
				pos: position{line: 432, col: 13, offset: 14708},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 432, col: 13, offset: 14708},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 432, col: 13, offset: 14708},
							expr: &seqExpr{
								pos: position{line: 432, col: 15, offset: 14710},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 432, col: 15, offset: 14710},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 432, col: 19, offset: 14714},
										expr: &ruleRefExpr{
											pos:  position{line: 432, col: 19, offset: 14714},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 29, offset: 14724},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 33, offset: 14728},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 432, col: 46, offset: 14741},
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 46, offset: 14741},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 432, col: 53, offset: 14748},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 432, col: 57, offset: 14752},
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 57, offset: 14752},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 64, offset: 14759},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 70, offset: 14765},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 432, col: 85, offset: 14780},
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 85, offset: 14780},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 437, col: 1, offset: 14961},
			expr: &actionExpr{
				pos: position{line: 437, col: 17, offset: 14977},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 437, col: 17, offset: 14977},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 437, col: 17, offset: 14977},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 437, col: 26, offset: 14986},
							expr: &charClassMatcher{
								pos:        position{line: 437, col: 26, offset: 14986},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 441, col: 1, offset: 15034},
			expr: &choiceExpr{
				pos: position{line: 441, col: 19, offset: 15052},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 441, col: 19, offset: 15052},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 441, col: 35, offset: 15068},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 441, col: 59, offset: 15092},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 441, col: 83, offset: 15116},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 443, col: 1, offset: 15132},
			expr: &actionExpr{
				pos: position{line: 443, col: 19, offset: 15150},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 443, col: 19, offset: 15150},
					expr: &charClassMatcher{
						pos:        position{line: 443, col: 19, offset: 15150},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 447, col: 1, offset: 15203},
			expr: &actionExpr{
				pos: position{line: 447, col: 26, offset: 15228},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 447, col: 26, offset: 15228},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 447, col: 26, offset: 15228},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 447, col: 30, offset: 15232},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 447, col: 39, offset: 15241},
								expr: &choiceExpr{
									pos: position{line: 448, col: 5, offset: 15247},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 448, col: 6, offset: 15248},
											run: (*parser).callonAttrValueSingleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 448, col: 6, offset: 15248},
												expr: &charClassMatcher{
													pos:        position{line: 448, col: 6, offset: 15248},
													val:        "[^'\\r\\n\\uFFFD]",
													chars:      []rune{'\'', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 450, col: 10, offset: 15330},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 450, col: 31, offset: 15351},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 454, col: 1, offset: 15393},
			expr: &actionExpr{
				pos: position{line: 454, col: 26, offset: 15418},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 454, col: 26, offset: 15418},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 454, col: 26, offset: 15418},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 454, col: 31, offset: 15423},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 454, col: 40, offset: 15432},
								expr: &choiceExpr{
									pos: position{line: 455, col: 5, offset: 15438},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 455, col: 6, offset: 15439},
											run: (*parser).callonAttrValueDoubleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 455, col: 6, offset: 15439},
												expr: &charClassMatcher{
													pos:        position{line: 455, col: 6, offset: 15439},
													val:        "[^\"\\r\\n\\uFFFD]",
													chars:      []rune{'"', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 457, col: 10, offset: 15521},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 31, offset: 15542},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 463, col: 1, offset: 15782},
			expr: &actionExpr{
				pos: position{line: 463, col: 18, offset: 15799},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 463, col: 18, offset: 15799},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 470, col: 1, offset: 15934},
			expr: &actionExpr{
				pos: position{line: 470, col: 12, offset: 15945},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 470, col: 12, offset: 15945},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 470, col: 12, offset: 15945},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 470, col: 23, offset: 15956},
								expr: &ruleRefExpr{
									pos:  position{line: 470, col: 24, offset: 15957},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 471, col: 5, offset: 15974},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 471, col: 12, offset: 15981},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 471, col: 12, offset: 15981},
									expr: &litMatcher{
										pos:        position{line: 471, col: 13, offset: 15982},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 475, col: 5, offset: 16073},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 479, col: 5, offset: 16225},
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 5, offset: 16225},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 479, col: 12, offset: 16232},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 19, offset: 16239},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 479, col: 34, offset: 16254},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 479, col: 38, offset: 16258},
								expr: &ruleRefExpr{
									pos:  position{line: 479, col: 38, offset: 16258},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 479, col: 56, offset: 16276},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 483, col: 1, offset: 16382},
			expr: &actionExpr{
				pos: position{line: 483, col: 18, offset: 16399},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 483, col: 18, offset: 16399},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 483, col: 27, offset: 16408},
						expr: &seqExpr{
							pos: position{line: 483, col: 28, offset: 16409},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 483, col: 28, offset: 16409},
									expr: &ruleRefExpr{
										pos:  position{line: 483, col: 29, offset: 16410},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 483, col: 37, offset: 16418},
									expr: &ruleRefExpr{
										pos:  position{line: 483, col: 38, offset: 16419},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 483, col: 54, offset: 16435},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 487, col: 1, offset: 16556},
			expr: &actionExpr{
				pos: position{line: 487, col: 17, offset: 16572},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 487, col: 17, offset: 16572},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 487, col: 26, offset: 16581},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 487, col: 26, offset: 16581},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 488, col: 11, offset: 16596},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 489, col: 11, offset: 16641},
								expr: &ruleRefExpr{
									pos:  position{line: 489, col: 11, offset: 16641},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 490, col: 11, offset: 16659},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 491, col: 11, offset: 16688},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 498, col: 1, offset: 16839},
			expr: &seqExpr{
				pos: position{line: 498, col: 31, offset: 16869},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 498, col: 31, offset: 16869},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 498, col: 41, offset: 16879},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 503, col: 1, offset: 16990},
			expr: &actionExpr{
				pos: position{line: 503, col: 19, offset: 17008},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 503, col: 19, offset: 17008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 19, offset: 17008},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 25, offset: 17014},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 503, col: 40, offset: 17029},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 503, col: 45, offset: 17034},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 52, offset: 17041},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 68, offset: 17057},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 75, offset: 17064},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 507, col: 1, offset: 17179},
			expr: &actionExpr{
				pos: position{line: 507, col: 20, offset: 17198},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 507, col: 20, offset: 17198},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 507, col: 20, offset: 17198},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 26, offset: 17204},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 507, col: 41, offset: 17219},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 507, col: 45, offset: 17223},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 52, offset: 17230},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 507, col: 68, offset: 17246},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 75, offset: 17253},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 511, col: 1, offset: 17369},
			expr: &actionExpr{
				pos: position{line: 511, col: 18, offset: 17386},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 511, col: 18, offset: 17386},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 511, col: 18, offset: 17386},
							expr: &litMatcher{
								pos:        position{line: 511, col: 19, offset: 17387},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 511, col: 30, offset: 17398},
							expr: &charClassMatcher{
								pos:        position{line: 511, col: 30, offset: 17398},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 515, col: 1, offset: 17447},
			expr: &actionExpr{
				pos: position{line: 515, col: 19, offset: 17465},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 515, col: 19, offset: 17465},
					expr: &charClassMatcher{
						pos:        position{line: 515, col: 19, offset: 17465},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 519, col: 1, offset: 17513},
			expr: &actionExpr{
				pos: position{line: 519, col: 24, offset: 17536},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 519, col: 24, offset: 17536},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 519, col: 24, offset: 17536},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 519, col: 28, offset: 17540},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 519, col: 34, offset: 17546},
								expr: &ruleRefExpr{
									pos:  position{line: 519, col: 35, offset: 17547},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 519, col: 54, offset: 17566},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 526, col: 1, offset: 17748},
			expr: &actionExpr{
				pos: position{line: 526, col: 18, offset: 17765},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 526, col: 18, offset: 17765},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 526, col: 18, offset: 17765},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 526, col: 24, offset: 17771},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 526, col: 24, offset: 17771},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 526, col: 24, offset: 17771},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 526, col: 36, offset: 17783},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 526, col: 42, offset: 17789},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 526, col: 56, offset: 17803},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 526, col: 74, offset: 17821},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 528, col: 8, offset: 17968},
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 8, offset: 17968},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 15, offset: 17975},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 532, col: 1, offset: 18027},
			expr: &actionExpr{
				pos: position{line: 532, col: 26, offset: 18052},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 532, col: 26, offset: 18052},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 532, col: 26, offset: 18052},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 532, col: 30, offset: 18056},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 532, col: 36, offset: 18062},
								expr: &choiceExpr{
									pos: position{line: 532, col: 37, offset: 18063},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 532, col: 37, offset: 18063},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 532, col: 59, offset: 18085},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 532, col: 80, offset: 18106},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 532, col: 99, offset: 18125},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 536, col: 1, offset: 18197},
			expr: &actionExpr{
				pos: position{line: 536, col: 24, offset: 18220},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 536, col: 24, offset: 18220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 536, col: 24, offset: 18220},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 536, col: 33, offset: 18229},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 40, offset: 18236},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 536, col: 66, offset: 18262},
							expr: &litMatcher{
								pos:        position{line: 536, col: 66, offset: 18262},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 540, col: 1, offset: 18321},
			expr: &actionExpr{
				pos: position{line: 540, col: 29, offset: 18349},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 540, col: 29, offset: 18349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 540, col: 29, offset: 18349},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 540, col: 36, offset: 18356},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 540, col: 36, offset: 18356},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 541, col: 11, offset: 18473},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 542, col: 11, offset: 18509},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 543, col: 11, offset: 18535},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 544, col: 11, offset: 18567},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 545, col: 11, offset: 18599},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 546, col: 11, offset: 18626},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 546, col: 31, offset: 18646},
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 31, offset: 18646},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 546, col: 39, offset: 18654},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 546, col: 39, offset: 18654},
									expr: &litMatcher{
										pos:        position{line: 546, col: 40, offset: 18655},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 546, col: 46, offset: 18661},
									expr: &litMatcher{
										pos:        position{line: 546, col: 47, offset: 18662},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 550, col: 1, offset: 18694},
			expr: &actionExpr{
				pos: position{line: 550, col: 23, offset: 18716},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 550, col: 23, offset: 18716},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 550, col: 23, offset: 18716},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 550, col: 30, offset: 18723},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 550, col: 30, offset: 18723},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 550, col: 47, offset: 18740},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 5, offset: 18762},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 551, col: 12, offset: 18769},
								expr: &actionExpr{
									pos: position{line: 551, col: 13, offset: 18770},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 551, col: 13, offset: 18770},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 551, col: 13, offset: 18770},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 551, col: 17, offset: 18774},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 551, col: 24, offset: 18781},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 551, col: 24, offset: 18781},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 551, col: 41, offset: 18798},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 557, col: 1, offset: 18936},
			expr: &actionExpr{
				pos: position{line: 557, col: 29, offset: 18964},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 557, col: 29, offset: 18964},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 557, col: 29, offset: 18964},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 557, col: 34, offset: 18969},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 557, col: 41, offset: 18976},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 557, col: 41, offset: 18976},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 557, col: 58, offset: 18993},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 19015},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 558, col: 12, offset: 19022},
								expr: &actionExpr{
									pos: position{line: 558, col: 13, offset: 19023},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 558, col: 13, offset: 19023},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 558, col: 13, offset: 19023},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 558, col: 17, offset: 19027},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 558, col: 24, offset: 19034},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 558, col: 24, offset: 19034},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 558, col: 41, offset: 19051},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 560, col: 9, offset: 19104},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 564, col: 1, offset: 19194},
			expr: &actionExpr{
				pos: position{line: 564, col: 19, offset: 19212},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 564, col: 19, offset: 19212},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 564, col: 19, offset: 19212},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 26, offset: 19219},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 564, col: 34, offset: 19227},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 564, col: 39, offset: 19232},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 44, offset: 19237},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 568, col: 1, offset: 19325},
			expr: &actionExpr{
				pos: position{line: 568, col: 25, offset: 19349},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 568, col: 25, offset: 19349},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 568, col: 25, offset: 19349},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 30, offset: 19354},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 37, offset: 19361},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 568, col: 45, offset: 19369},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 50, offset: 19374},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 55, offset: 19379},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 568, col: 63, offset: 19387},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 572, col: 1, offset: 19472},
			expr: &actionExpr{
				pos: position{line: 572, col: 20, offset: 19491},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 572, col: 20, offset: 19491},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 572, col: 32, offset: 19503},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 576, col: 1, offset: 19598},
			expr: &actionExpr{
				pos: position{line: 576, col: 26, offset: 19623},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 576, col: 26, offset: 19623},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 576, col: 26, offset: 19623},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 576, col: 31, offset: 19628},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 43, offset: 19640},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 576, col: 51, offset: 19648},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 580, col: 1, offset: 19740},
			expr: &actionExpr{
				pos: position{line: 580, col: 23, offset: 19762},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 580, col: 23, offset: 19762},
					expr: &charClassMatcher{
						pos:        position{line: 580, col: 23, offset: 19762},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 584, col: 1, offset: 19807},
			expr: &actionExpr{
				pos: position{line: 584, col: 23, offset: 19829},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 584, col: 23, offset: 19829},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 584, col: 24, offset: 19830},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 584, col: 24, offset: 19830},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 584, col: 34, offset: 19840},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 584, col: 42, offset: 19848},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 48, offset: 19854},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 584, col: 73, offset: 19879},
							expr: &litMatcher{
								pos:        position{line: 584, col: 73, offset: 19879},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 588, col: 1, offset: 20028},
			expr: &actionExpr{
				pos: position{line: 588, col: 28, offset: 20055},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 588, col: 28, offset: 20055},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 588, col: 28, offset: 20055},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 35, offset: 20062},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 588, col: 54, offset: 20081},
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 54, offset: 20081},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 588, col: 62, offset: 20089},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 588, col: 62, offset: 20089},
									expr: &litMatcher{
										pos:        position{line: 588, col: 63, offset: 20090},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 588, col: 69, offset: 20096},
									expr: &litMatcher{
										pos:        position{line: 588, col: 70, offset: 20097},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 592, col: 1, offset: 20129},
			expr: &actionExpr{
				pos: position{line: 592, col: 22, offset: 20150},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 592, col: 22, offset: 20150},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 592, col: 22, offset: 20150},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 29, offset: 20157},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 5, offset: 20171},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 593, col: 12, offset: 20178},
								expr: &actionExpr{
									pos: position{line: 593, col: 13, offset: 20179},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 593, col: 13, offset: 20179},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 593, col: 13, offset: 20179},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 593, col: 17, offset: 20183},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 593, col: 24, offset: 20190},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 599, col: 1, offset: 20321},
			expr: &choiceExpr{
				pos: position{line: 599, col: 13, offset: 20333},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 599, col: 13, offset: 20333},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 599, col: 13, offset: 20333},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 599, col: 18, offset: 20338},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 599, col: 18, offset: 20338},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 599, col: 30, offset: 20350},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 601, col: 5, offset: 20418},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 601, col: 5, offset: 20418},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 601, col: 5, offset: 20418},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 601, col: 9, offset: 20422},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 601, col: 14, offset: 20427},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 601, col: 14, offset: 20427},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 601, col: 26, offset: 20439},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 605, col: 1, offset: 20507},
			expr: &actionExpr{
				pos: position{line: 605, col: 16, offset: 20522},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 605, col: 16, offset: 20522},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 605, col: 16, offset: 20522},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 605, col: 23, offset: 20529},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 605, col: 23, offset: 20529},
									expr: &litMatcher{
										pos:        position{line: 605, col: 24, offset: 20530},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 608, col: 5, offset: 20584},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 618, col: 1, offset: 20878},
			expr: &actionExpr{
				pos: position{line: 618, col: 21, offset: 20898},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 618, col: 21, offset: 20898},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 618, col: 21, offset: 20898},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 618, col: 29, offset: 20906},
								expr: &choiceExpr{
									pos: position{line: 618, col: 30, offset: 20907},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 618, col: 30, offset: 20907},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 618, col: 53, offset: 20930},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 618, col: 74, offset: 20951},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 618, col: 74, offset: 20951,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 107, offset: 20984},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 622, col: 1, offset: 21055},
			expr: &actionExpr{
				pos: position{line: 622, col: 25, offset: 21079},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 622, col: 25, offset: 21079},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 622, col: 25, offset: 21079},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 622, col: 33, offset: 21087},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 622, col: 38, offset: 21092},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 622, col: 38, offset: 21092},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 622, col: 78, offset: 21132},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 626, col: 1, offset: 21197},
			expr: &actionExpr{
				pos: position{line: 626, col: 23, offset: 21219},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 626, col: 23, offset: 21219},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 626, col: 23, offset: 21219},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 626, col: 31, offset: 21227},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 626, col: 36, offset: 21232},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 626, col: 36, offset: 21232},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 626, col: 76, offset: 21272},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 633, col: 1, offset: 21436},
			expr: &choiceExpr{
				pos: position{line: 633, col: 18, offset: 21453},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 633, col: 18, offset: 21453},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 633, col: 18, offset: 21453},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 27, offset: 21462},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 635, col: 9, offset: 21519},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 635, col: 9, offset: 21519},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 635, col: 15, offset: 21525},
								expr: &ruleRefExpr{
									pos:  position{line: 635, col: 16, offset: 21526},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 639, col: 1, offset: 21618},
			expr: &actionExpr{
				pos: position{line: 639, col: 22, offset: 21639},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 639, col: 22, offset: 21639},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 639, col: 22, offset: 21639},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 23, offset: 21640},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 640, col: 5, offset: 21648},
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 6, offset: 21649},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 641, col: 5, offset: 21664},
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 6, offset: 21665},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 642, col: 5, offset: 21687},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 6, offset: 21688},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 643, col: 5, offset: 21714},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 6, offset: 21715},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 644, col: 5, offset: 21743},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 6, offset: 21744},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 645, col: 5, offset: 21770},
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 6, offset: 21771},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 646, col: 5, offset: 21796},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 6, offset: 21797},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 647, col: 5, offset: 21818},
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 6, offset: 21819},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 648, col: 5, offset: 21838},
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 6, offset: 21839},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 5, offset: 21866},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 649, col: 11, offset: 21872},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 649, col: 11, offset: 21872},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 649, col: 20, offset: 21881},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 21, offset: 21882},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 12, offset: 21981},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 655, col: 1, offset: 22020},
			expr: &seqExpr{
				pos: position{line: 655, col: 25, offset: 22044},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 655, col: 25, offset: 22044},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 655, col: 29, offset: 22048},
						expr: &ruleRefExpr{
							pos:  position{line: 655, col: 29, offset: 22048},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 655, col: 36, offset: 22055},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 657, col: 1, offset: 22127},
			expr: &actionExpr{
				pos: position{line: 657, col: 29, offset: 22155},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 657, col: 29, offset: 22155},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 657, col: 29, offset: 22155},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 657, col: 50, offset: 22176},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 58, offset: 22184},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 661, col: 1, offset: 22290},
			expr: &actionExpr{
				pos: position{line: 661, col: 29, offset: 22318},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 661, col: 29, offset: 22318},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 661, col: 29, offset: 22318},
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 30, offset: 22319},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 662, col: 5, offset: 22328},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 662, col: 14, offset: 22337},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 662, col: 14, offset: 22337},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 22362},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 22390},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 22406},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 22427},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 22451},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 22478},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 22507},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 22572},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 22623},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 22647},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 22679},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 22705},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 22742},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 22767},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 684, col: 1, offset: 22933},
			expr: &actionExpr{
				pos: position{line: 684, col: 20, offset: 22952},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 684, col: 20, offset: 22952},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 684, col: 20, offset: 22952},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 684, col: 26, offset: 22958},
								expr: &ruleRefExpr{
									pos:  position{line: 684, col: 27, offset: 22959},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 40, offset: 22972},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 48, offset: 22980},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 71, offset: 23003},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 80, offset: 23012},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 688, col: 1, offset: 23147},
			expr: &actionExpr{
				pos: position{line: 689, col: 5, offset: 23177},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 689, col: 5, offset: 23177},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 689, col: 5, offset: 23177},
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 5, offset: 23177},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 12, offset: 23184},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 691, col: 9, offset: 23247},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 691, col: 9, offset: 23247},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 691, col: 9, offset: 23247},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 691, col: 9, offset: 23247},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 691, col: 16, offset: 23254},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 691, col: 16, offset: 23254},
															expr: &litMatcher{
																pos:        position{line: 691, col: 17, offset: 23255},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 695, col: 9, offset: 23355},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 714, col: 11, offset: 24072},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 714, col: 11, offset: 24072},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 714, col: 11, offset: 24072},
													expr: &charClassMatcher{
														pos:        position{line: 714, col: 12, offset: 24073},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 714, col: 20, offset: 24081},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 716, col: 13, offset: 24192},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 716, col: 13, offset: 24192},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 716, col: 14, offset: 24193},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 716, col: 21, offset: 24200},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 718, col: 13, offset: 24314},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 718, col: 13, offset: 24314},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 718, col: 14, offset: 24315},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 718, col: 21, offset: 24322},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 720, col: 13, offset: 24436},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 720, col: 13, offset: 24436},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 720, col: 13, offset: 24436},
													expr: &charClassMatcher{
														pos:        position{line: 720, col: 14, offset: 24437},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 720, col: 22, offset: 24445},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 722, col: 13, offset: 24559},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 722, col: 13, offset: 24559},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 722, col: 13, offset: 24559},
													expr: &charClassMatcher{
														pos:        position{line: 722, col: 14, offset: 24560},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 722, col: 22, offset: 24568},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 724, col: 12, offset: 24681},
							expr: &ruleRefExpr{
								pos:  position{line: 724, col: 12, offset: 24681},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 728, col: 1, offset: 24716},
			expr: &actionExpr{
				pos: position{line: 728, col: 27, offset: 24742},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 728, col: 27, offset: 24742},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 728, col: 37, offset: 24752},
						expr: &ruleRefExpr{
							pos:  position{line: 728, col: 37, offset: 24752},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 735, col: 1, offset: 24952},
			expr: &actionExpr{
				pos: position{line: 735, col: 22, offset: 24973},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 735, col: 22, offset: 24973},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 735, col: 22, offset: 24973},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 735, col: 28, offset: 24979},
								expr: &ruleRefExpr{
									pos:  position{line: 735, col: 29, offset: 24980},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 735, col: 42, offset: 24993},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 50, offset: 25001},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 735, col: 75, offset: 25026},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 735, col: 86, offset: 25037},
								expr: &ruleRefExpr{
									pos:  position{line: 735, col: 87, offset: 25038},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 735, col: 117, offset: 25068},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 126, offset: 25077},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 739, col: 1, offset: 25230},
			expr: &actionExpr{
				pos: position{line: 740, col: 5, offset: 25262},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 740, col: 5, offset: 25262},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 740, col: 5, offset: 25262},
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 5, offset: 25262},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 740, col: 12, offset: 25269},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 740, col: 20, offset: 25277},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 742, col: 9, offset: 25334},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 742, col: 9, offset: 25334},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 742, col: 9, offset: 25334},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 742, col: 16, offset: 25341},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 742, col: 16, offset: 25341},
															expr: &litMatcher{
																pos:        position{line: 742, col: 17, offset: 25342},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 746, col: 9, offset: 25442},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 763, col: 14, offset: 26149},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 763, col: 21, offset: 26156},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 763, col: 22, offset: 26157},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 765, col: 13, offset: 26243},
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 13, offset: 26243},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 769, col: 1, offset: 26279},
			expr: &actionExpr{
				pos: position{line: 769, col: 32, offset: 26310},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 769, col: 32, offset: 26310},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 769, col: 32, offset: 26310},
							expr: &litMatcher{
								pos:        position{line: 769, col: 33, offset: 26311},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 37, offset: 26315},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 770, col: 7, offset: 26329},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 770, col: 7, offset: 26329},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 770, col: 7, offset: 26329},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 771, col: 7, offset: 26374},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 771, col: 7, offset: 26374},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 772, col: 7, offset: 26417},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 772, col: 7, offset: 26417},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 773, col: 7, offset: 26459},
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 7, offset: 26459},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 777, col: 1, offset: 26501},
			expr: &actionExpr{
				pos: position{line: 777, col: 29, offset: 26529},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 777, col: 29, offset: 26529},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 777, col: 39, offset: 26539},
						expr: &ruleRefExpr{
							pos:  position{line: 777, col: 39, offset: 26539},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 784, col: 1, offset: 26855},
			expr: &actionExpr{
				pos: position{line: 784, col: 20, offset: 26874},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 784, col: 20, offset: 26874},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 784, col: 20, offset: 26874},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 784, col: 26, offset: 26880},
								expr: &ruleRefExpr{
									pos:  position{line: 784, col: 27, offset: 26881},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 784, col: 40, offset: 26894},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 46, offset: 26900},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 784, col: 75, offset: 26929},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 86, offset: 26940},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 784, col: 112, offset: 26966},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 784, col: 124, offset: 26978},
								expr: &ruleRefExpr{
									pos:  position{line: 784, col: 125, offset: 26979},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 788, col: 1, offset: 27120},
			expr: &seqExpr{
				pos: position{line: 788, col: 26, offset: 27145},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 788, col: 26, offset: 27145},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 788, col: 54, offset: 27173},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 790, col: 1, offset: 27199},
			expr: &choiceExpr{
				pos: position{line: 790, col: 33, offset: 27231},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 790, col: 33, offset: 27231},
						expr: &charClassMatcher{
							pos:        position{line: 790, col: 33, offset: 27231},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 790, col: 45, offset: 27243},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 790, col: 45, offset: 27243},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 790, col: 49, offset: 27247},
								expr: &litMatcher{
									pos:        position{line: 790, col: 50, offset: 27248},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 791, col: 1, offset: 27252},
			expr: &actionExpr{
				pos: position{line: 791, col: 32, offset: 27283},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 791, col: 32, offset: 27283},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 791, col: 42, offset: 27293},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 791, col: 42, offset: 27293},
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 42, offset: 27293},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 797, col: 1, offset: 27448},
			expr: &actionExpr{
				pos: position{line: 797, col: 24, offset: 27471},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 797, col: 24, offset: 27471},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 797, col: 33, offset: 27480},
						expr: &seqExpr{
							pos: position{line: 797, col: 34, offset: 27481},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 797, col: 34, offset: 27481},
									expr: &ruleRefExpr{
										pos:  position{line: 797, col: 35, offset: 27482},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 797, col: 43, offset: 27490},
									expr: &litMatcher{
										pos:        position{line: 797, col: 44, offset: 27491},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 797, col: 49, offset: 27496},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 801, col: 1, offset: 27623},
			expr: &actionExpr{
				pos: position{line: 801, col: 31, offset: 27653},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 801, col: 31, offset: 27653},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 801, col: 40, offset: 27662},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 801, col: 40, offset: 27662},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 802, col: 11, offset: 27677},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 803, col: 11, offset: 27726},
								expr: &ruleRefExpr{
									pos:  position{line: 803, col: 11, offset: 27726},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 11, offset: 27744},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 805, col: 11, offset: 27769},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 806, col: 11, offset: 27798},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 807, col: 11, offset: 27818},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 808, col: 11, offset: 27907},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 809, col: 11, offset: 27928},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 810, col: 11, offset: 27951},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 811, col: 11, offset: 27966},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 812, col: 11, offset: 27991},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 813, col: 11, offset: 28014},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 814, col: 11, offset: 28035},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 815, col: 11, offset: 28062},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 816, col: 11, offset: 28079},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 28111},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 821, col: 1, offset: 28150},
			expr: &actionExpr{
				pos: position{line: 822, col: 5, offset: 28183},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 822, col: 5, offset: 28183},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 822, col: 5, offset: 28183},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 822, col: 16, offset: 28194},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 822, col: 16, offset: 28194},
									expr: &litMatcher{
										pos:        position{line: 822, col: 17, offset: 28195},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 825, col: 5, offset: 28253},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 829, col: 6, offset: 28429},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 829, col: 6, offset: 28429},
									expr: &choiceExpr{
										pos: position{line: 829, col: 7, offset: 28430},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 829, col: 7, offset: 28430},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 829, col: 15, offset: 28438},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 829, col: 27, offset: 28450},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 833, col: 1, offset: 28490},
			expr: &actionExpr{
				pos: position{line: 833, col: 31, offset: 28520},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 833, col: 31, offset: 28520},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 833, col: 40, offset: 28529},
						expr: &ruleRefExpr{
							pos:  position{line: 833, col: 41, offset: 28530},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 840, col: 1, offset: 28721},
			expr: &choiceExpr{
				pos: position{line: 840, col: 19, offset: 28739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 840, col: 19, offset: 28739},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 840, col: 19, offset: 28739},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 842, col: 5, offset: 28777},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 842, col: 5, offset: 28777},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 28817},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 844, col: 5, offset: 28817},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 846, col: 5, offset: 28867},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 846, col: 5, offset: 28867},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 848, col: 5, offset: 28913},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 848, col: 5, offset: 28913},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 859, col: 1, offset: 29225},
			expr: &choiceExpr{
				pos: position{line: 861, col: 5, offset: 29275},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 861, col: 5, offset: 29275},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 861, col: 5, offset: 29275},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 861, col: 5, offset: 29275},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 861, col: 16, offset: 29286},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 17, offset: 29287},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 861, col: 30, offset: 29300},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 861, col: 33, offset: 29303},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 861, col: 49, offset: 29319},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 861, col: 54, offset: 29324},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 861, col: 60, offset: 29330},
										expr: &choiceExpr{
											pos: position{line: 861, col: 61, offset: 29331},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 861, col: 61, offset: 29331},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 861, col: 81, offset: 29351},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 29586},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 29586},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 866, col: 5, offset: 29586},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 866, col: 16, offset: 29597},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 17, offset: 29598},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 866, col: 30, offset: 29611},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 866, col: 35, offset: 29616},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 44, offset: 29625},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 870, col: 5, offset: 29798},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 870, col: 5, offset: 29798},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 870, col: 5, offset: 29798},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 870, col: 16, offset: 29809},
										expr: &ruleRefExpr{
											pos:  position{line: 870, col: 17, offset: 29810},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 870, col: 30, offset: 29823},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 877, col: 7, offset: 30102},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 877, col: 15, offset: 30110},
										expr: &ruleRefExpr{
											pos:  position{line: 877, col: 16, offset: 30111},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 30277},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 30277},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 5, offset: 30277},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 881, col: 16, offset: 30288},
										expr: &ruleRefExpr{
											pos:  position{line: 881, col: 17, offset: 30289},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 881, col: 31, offset: 30303},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 881, col: 37, offset: 30309},
										expr: &choiceExpr{
											pos: position{line: 881, col: 38, offset: 30310},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 881, col: 38, offset: 30310},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 881, col: 58, offset: 30330},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 885, col: 1, offset: 30428},
			expr: &oneOrMoreExpr{
				pos: position{line: 885, col: 33, offset: 30460},
				expr: &actionExpr{
					pos: position{line: 885, col: 34, offset: 30461},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 885, col: 34, offset: 30461},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 885, col: 34, offset: 30461},
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 35, offset: 30462},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 885, col: 45, offset: 30472},
								expr: &litMatcher{
									pos:        position{line: 885, col: 45, offset: 30472},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 885, col: 51, offset: 30478},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 60, offset: 30487},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 889, col: 1, offset: 30528},
			expr: &actionExpr{
				pos: position{line: 889, col: 21, offset: 30548},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 889, col: 21, offset: 30548},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 889, col: 21, offset: 30548},
							expr: &ruleRefExpr{
								pos:  position{line: 889, col: 22, offset: 30549},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 890, col: 5, offset: 30569},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 14, offset: 30578},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 890, col: 39, offset: 30603},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 890, col: 43, offset: 30607},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 900, col: 1, offset: 30842},
			expr: &actionExpr{
				pos: position{line: 900, col: 28, offset: 30869},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 900, col: 28, offset: 30869},
					expr: &charClassMatcher{
						pos:        position{line: 900, col: 28, offset: 30869},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 905, col: 1, offset: 30986},
			expr: &actionExpr{
				pos: position{line: 905, col: 23, offset: 31008},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 905, col: 23, offset: 31008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 905, col: 23, offset: 31008},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 905, col: 34, offset: 31019},
								expr: &ruleRefExpr{
									pos:  position{line: 905, col: 35, offset: 31020},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 906, col: 5, offset: 31038},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 914, col: 5, offset: 31324},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 16, offset: 31335},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 915, col: 5, offset: 31361},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 915, col: 16, offset: 31372},
								expr: &choiceExpr{
									pos: position{line: 915, col: 17, offset: 31373},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 915, col: 17, offset: 31373},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 915, col: 37, offset: 31393},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 919, col: 1, offset: 31525},
			expr: &actionExpr{
				pos: position{line: 920, col: 5, offset: 31555},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 920, col: 5, offset: 31555},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 920, col: 5, offset: 31555},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 920, col: 14, offset: 31564},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 920, col: 14, offset: 31564},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 920, col: 14, offset: 31564},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 920, col: 23, offset: 31573},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 920, col: 28, offset: 31578},
											expr: &charClassMatcher{
												pos:        position{line: 920, col: 28, offset: 31578},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 920, col: 68, offset: 31618},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 931, col: 1, offset: 31870},
			expr: &choiceExpr{
				pos: position{line: 933, col: 5, offset: 31929},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 933, col: 5, offset: 31929},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 933, col: 5, offset: 31929},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 933, col: 5, offset: 31929},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 933, col: 16, offset: 31940},
										expr: &ruleRefExpr{
											pos:  position{line: 933, col: 17, offset: 31941},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 933, col: 30, offset: 31954},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 933, col: 33, offset: 31957},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 933, col: 49, offset: 31973},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 933, col: 54, offset: 31978},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 933, col: 61, offset: 31985},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 32188},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 32188},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 937, col: 5, offset: 32188},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 937, col: 16, offset: 32199},
										expr: &ruleRefExpr{
											pos:  position{line: 937, col: 17, offset: 32200},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 937, col: 30, offset: 32213},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 37, offset: 32220},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 941, col: 1, offset: 32324},
			expr: &actionExpr{
				pos: position{line: 941, col: 31, offset: 32354},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 941, col: 31, offset: 32354},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 941, col: 31, offset: 32354},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 941, col: 42, offset: 32365},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 941, col: 65, offset: 32388},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 941, col: 76, offset: 32399},
								expr: &actionExpr{
									pos: position{line: 941, col: 77, offset: 32400},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 941, col: 77, offset: 32400},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 941, col: 77, offset: 32400},
												expr: &ruleRefExpr{
													pos:  position{line: 941, col: 78, offset: 32401},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 941, col: 99, offset: 32422},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 941, col: 105, offset: 32428},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 941, col: 105, offset: 32428},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 941, col: 125, offset: 32448},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 949, col: 1, offset: 32690},
			expr: &actionExpr{
				pos: position{line: 949, col: 19, offset: 32708},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 949, col: 19, offset: 32708},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 949, col: 19, offset: 32708},
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 20, offset: 32709},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 950, col: 5, offset: 32723},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 950, col: 15, offset: 32733},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 950, col: 15, offset: 32733},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 950, col: 15, offset: 32733},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 950, col: 24, offset: 32742},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 952, col: 9, offset: 32834},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 952, col: 9, offset: 32834},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 952, col: 9, offset: 32834},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 952, col: 18, offset: 32843},
														expr: &ruleRefExpr{
															pos:  position{line: 952, col: 19, offset: 32844},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 952, col: 35, offset: 32860},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 958, col: 1, offset: 32977},
			expr: &actionExpr{
				pos: position{line: 959, col: 5, offset: 33000},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 959, col: 5, offset: 33000},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 959, col: 14, offset: 33009},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 959, col: 14, offset: 33009},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 960, col: 11, offset: 33070},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 961, col: 11, offset: 33115},
								expr: &ruleRefExpr{
									pos:  position{line: 961, col: 11, offset: 33115},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 962, col: 11, offset: 33133},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 962, col: 11, offset: 33133},
										expr: &ruleRefExpr{
											pos:  position{line: 962, col: 12, offset: 33134},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 963, col: 13, offset: 33152},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 963, col: 13, offset: 33152},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 964, col: 15, offset: 33179},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 965, col: 15, offset: 33204},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 966, col: 15, offset: 33229},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 967, col: 15, offset: 33256},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 968, col: 15, offset: 33276},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 969, col: 15, offset: 33369},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 970, col: 15, offset: 33399},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 971, col: 15, offset: 33467},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 972, col: 15, offset: 33498},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 973, col: 15, offset: 33519},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 974, col: 15, offset: 33550},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 975, col: 15, offset: 33587},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 15, offset: 33617},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 977, col: 15, offset: 33650},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 15, offset: 33674},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 33707},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 986, col: 1, offset: 33930},
			expr: &actionExpr{
				pos: position{line: 986, col: 14, offset: 33943},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 986, col: 14, offset: 33943},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 986, col: 14, offset: 33943},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 986, col: 20, offset: 33949},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 986, col: 24, offset: 33953},
							expr: &ruleRefExpr{
								pos:  position{line: 986, col: 24, offset: 33953},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 986, col: 31, offset: 33960},
							expr: &ruleRefExpr{
								pos:  position{line: 986, col: 32, offset: 33961},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 993, col: 1, offset: 34245},
			expr: &choiceExpr{
				pos: position{line: 993, col: 15, offset: 34259},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 993, col: 15, offset: 34259},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 41, offset: 34285},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 65, offset: 34309},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 995, col: 1, offset: 34328},
			expr: &choiceExpr{
				pos: position{line: 995, col: 32, offset: 34359},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 995, col: 32, offset: 34359},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 995, col: 32, offset: 34359},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 995, col: 36, offset: 34363},
								expr: &litMatcher{
									pos:        position{line: 995, col: 37, offset: 34364},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 995, col: 43, offset: 34370},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 995, col: 43, offset: 34370},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 995, col: 47, offset: 34374},
								expr: &litMatcher{
									pos:        position{line: 995, col: 48, offset: 34375},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 995, col: 54, offset: 34381},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 995, col: 54, offset: 34381},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 995, col: 58, offset: 34385},
								expr: &litMatcher{
									pos:        position{line: 995, col: 59, offset: 34386},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 995, col: 65, offset: 34392},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 995, col: 65, offset: 34392},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 995, col: 69, offset: 34396},
								expr: &litMatcher{
									pos:        position{line: 995, col: 70, offset: 34397},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 997, col: 1, offset: 34402},
			expr: &choiceExpr{
				pos: position{line: 997, col: 34, offset: 34435},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 997, col: 34, offset: 34435},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 997, col: 41, offset: 34442},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 997, col: 48, offset: 34449},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 997, col: 55, offset: 34456},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 997, col: 62, offset: 34463},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 997, col: 68, offset: 34469},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 999, col: 1, offset: 34474},
			expr: &actionExpr{
				pos: position{line: 999, col: 26, offset: 34499},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 999, col: 26, offset: 34499},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 999, col: 32, offset: 34505},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 999, col: 32, offset: 34505},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1000, col: 15, offset: 34540},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1001, col: 15, offset: 34576},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1002, col: 15, offset: 34612},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1003, col: 15, offset: 34652},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1004, col: 15, offset: 34681},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1005, col: 15, offset: 34712},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1009, col: 1, offset: 34866},
			expr: &choiceExpr{
				pos: position{line: 1009, col: 28, offset: 34893},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1009, col: 28, offset: 34893},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 15, offset: 34927},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1011, col: 15, offset: 34963},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 15, offset: 34999},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1014, col: 1, offset: 35025},
			expr: &choiceExpr{
				pos: position{line: 1014, col: 22, offset: 35046},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1014, col: 22, offset: 35046},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 15, offset: 35077},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 15, offset: 35109},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1017, col: 15, offset: 35141},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 15, offset: 35177},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 15, offset: 35213},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1021, col: 1, offset: 35237},
			expr: &choiceExpr{
				pos: position{line: 1021, col: 33, offset: 35269},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1021, col: 33, offset: 35269},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1021, col: 39, offset: 35275},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1021, col: 39, offset: 35275},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1025, col: 1, offset: 35408},
			expr: &actionExpr{
				pos: position{line: 1025, col: 25, offset: 35432},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1025, col: 25, offset: 35432},
					expr: &litMatcher{
						pos:        position{line: 1025, col: 25, offset: 35432},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1029, col: 1, offset: 35473},
			expr: &actionExpr{
				pos: position{line: 1029, col: 25, offset: 35497},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1029, col: 25, offset: 35497},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1029, col: 25, offset: 35497},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1029, col: 30, offset: 35502},
							expr: &litMatcher{
								pos:        position{line: 1029, col: 30, offset: 35502},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1037, col: 1, offset: 35599},
			expr: &choiceExpr{
				pos: position{line: 1037, col: 13, offset: 35611},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1037, col: 13, offset: 35611},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1037, col: 35, offset: 35633},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1039, col: 1, offset: 35700},
			expr: &actionExpr{
				pos: position{line: 1039, col: 24, offset: 35723},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 24, offset: 35723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1039, col: 24, offset: 35723},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1039, col: 30, offset: 35729},
								expr: &ruleRefExpr{
									pos:  position{line: 1039, col: 31, offset: 35730},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1039, col: 49, offset: 35748},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1039, col: 54, offset: 35753},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 64, offset: 35763},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1039, col: 93, offset: 35792},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1043, col: 1, offset: 35879},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1043, col: 32, offset: 35910},
				expr: &ruleRefExpr{
					pos:  position{line: 1043, col: 32, offset: 35910},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1045, col: 1, offset: 35941},
			expr: &actionExpr{
				pos: position{line: 1045, col: 31, offset: 35971},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1045, col: 31, offset: 35971},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1045, col: 31, offset: 35971},
							expr: &litMatcher{
								pos:        position{line: 1045, col: 33, offset: 35973},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1045, col: 39, offset: 35979},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1045, col: 48, offset: 35988},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1045, col: 48, offset: 35988},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1046, col: 11, offset: 36003},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1047, col: 11, offset: 36052},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1047, col: 11, offset: 36052},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1047, col: 19, offset: 36060},
												expr: &ruleRefExpr{
													pos:  position{line: 1047, col: 20, offset: 36061},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1048, col: 11, offset: 36079},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1049, col: 11, offset: 36109},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1050, col: 11, offset: 36132},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1051, col: 11, offset: 36153},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1052, col: 11, offset: 36174},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1053, col: 11, offset: 36198},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1054, col: 11, offset: 36222},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1055, col: 11, offset: 36248},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1056, col: 11, offset: 36277},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1060, col: 1, offset: 36344},
			expr: &choiceExpr{
				pos: position{line: 1061, col: 5, offset: 36388},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1061, col: 5, offset: 36388},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1062, col: 7, offset: 36485},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1062, col: 7, offset: 36485},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1062, col: 7, offset: 36485},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 12, offset: 36490},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1066, col: 1, offset: 36653},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 24, offset: 36676},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1066, col: 24, offset: 36676},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1066, col: 24, offset: 36676},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1066, col: 24, offset: 36676},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1066, col: 30, offset: 36682},
										expr: &ruleRefExpr{
											pos:  position{line: 1066, col: 31, offset: 36683},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1066, col: 51, offset: 36703},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1066, col: 51, offset: 36703},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1066, col: 55, offset: 36707},
											expr: &litMatcher{
												pos:        position{line: 1066, col: 56, offset: 36708},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 61, offset: 36713},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1066, col: 71, offset: 36723},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1066, col: 100, offset: 36752},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1066, col: 104, offset: 36756},
									expr: &notExpr{
										pos: position{line: 1066, col: 106, offset: 36758},
										expr: &ruleRefExpr{
											pos:  position{line: 1066, col: 107, offset: 36759},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 5, offset: 36953},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1068, col: 5, offset: 36953},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1068, col: 5, offset: 36953},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1068, col: 11, offset: 36959},
										expr: &ruleRefExpr{
											pos:  position{line: 1068, col: 12, offset: 36960},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1068, col: 30, offset: 36978},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1068, col: 34, offset: 36982},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1068, col: 44, offset: 36992},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1068, col: 44, offset: 36992},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1068, col: 48, offset: 36996},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1068, col: 77, offset: 37025},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1072, col: 1, offset: 37231},
			expr: &seqExpr{
				pos: position{line: 1072, col: 32, offset: 37262},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1072, col: 32, offset: 37262},
						expr: &ruleRefExpr{
							pos:  position{line: 1072, col: 33, offset: 37263},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1072, col: 39, offset: 37269},
						expr: &ruleRefExpr{
							pos:  position{line: 1072, col: 39, offset: 37269},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1074, col: 1, offset: 37298},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 31, offset: 37328},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1074, col: 31, offset: 37328},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1075, col: 11, offset: 37343},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1075, col: 11, offset: 37343},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1075, col: 19, offset: 37351},
								expr: &ruleRefExpr{
									pos:  position{line: 1075, col: 20, offset: 37352},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1076, col: 11, offset: 37370},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 11, offset: 37400},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1078, col: 11, offset: 37423},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1078, col: 11, offset: 37423},
								expr: &ruleRefExpr{
									pos:  position{line: 1078, col: 11, offset: 37423},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1078, col: 18, offset: 37430},
								expr: &seqExpr{
									pos: position{line: 1078, col: 19, offset: 37431},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1078, col: 19, offset: 37431},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1078, col: 23, offset: 37435},
											expr: &litMatcher{
												pos:        position{line: 1078, col: 24, offset: 37436},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 11, offset: 37452},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 11, offset: 37473},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 11, offset: 37494},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 11, offset: 37518},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1083, col: 11, offset: 37542},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 11, offset: 37568},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 11, offset: 37597},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1087, col: 1, offset: 37635},
			expr: &choiceExpr{
				pos: position{line: 1088, col: 5, offset: 37679},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1088, col: 5, offset: 37679},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1089, col: 7, offset: 37776},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1089, col: 7, offset: 37776},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1089, col: 7, offset: 37776},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1089, col: 11, offset: 37780},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1093, col: 1, offset: 37943},
			expr: &choiceExpr{
				pos: position{line: 1094, col: 5, offset: 37967},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 37967},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 37967},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1094, col: 5, offset: 37967},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 18, offset: 37980},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1094, col: 40, offset: 38002},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1094, col: 45, offset: 38007},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 55, offset: 38017},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1094, col: 84, offset: 38046},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1096, col: 9, offset: 38203},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1096, col: 9, offset: 38203},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1096, col: 9, offset: 38203},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1096, col: 22, offset: 38216},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1096, col: 44, offset: 38238},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1096, col: 49, offset: 38243},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1096, col: 59, offset: 38253},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1096, col: 88, offset: 38282},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1099, col: 9, offset: 38482},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1099, col: 9, offset: 38482},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1099, col: 9, offset: 38482},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 22, offset: 38495},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 44, offset: 38517},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1099, col: 48, offset: 38521},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 58, offset: 38531},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 87, offset: 38560},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1107, col: 1, offset: 38768},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 15, offset: 38782},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1107, col: 15, offset: 38782},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 39, offset: 38806},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1109, col: 1, offset: 38829},
			expr: &actionExpr{
				pos: position{line: 1109, col: 26, offset: 38854},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1109, col: 26, offset: 38854},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1109, col: 26, offset: 38854},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1109, col: 32, offset: 38860},
								expr: &ruleRefExpr{
									pos:  position{line: 1109, col: 33, offset: 38861},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1109, col: 51, offset: 38879},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1109, col: 56, offset: 38884},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1109, col: 66, offset: 38894},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1109, col: 97, offset: 38925},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1113, col: 1, offset: 39059},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1113, col: 34, offset: 39092},
				expr: &ruleRefExpr{
					pos:  position{line: 1113, col: 34, offset: 39092},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1115, col: 1, offset: 39124},
			expr: &actionExpr{
				pos: position{line: 1115, col: 33, offset: 39156},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1115, col: 33, offset: 39156},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1115, col: 33, offset: 39156},
							expr: &litMatcher{
								pos:        position{line: 1115, col: 35, offset: 39158},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1115, col: 41, offset: 39164},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1115, col: 50, offset: 39173},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1115, col: 50, offset: 39173},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1116, col: 11, offset: 39188},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1117, col: 11, offset: 39237},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1117, col: 11, offset: 39237},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1117, col: 19, offset: 39245},
												expr: &ruleRefExpr{
													pos:  position{line: 1117, col: 20, offset: 39246},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1118, col: 11, offset: 39264},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1119, col: 11, offset: 39296},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1120, col: 11, offset: 39319},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1121, col: 11, offset: 39338},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1122, col: 11, offset: 39359},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1123, col: 11, offset: 39383},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1124, col: 11, offset: 39407},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1125, col: 11, offset: 39433},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1126, col: 11, offset: 39462},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1130, col: 1, offset: 39531},
			expr: &choiceExpr{
				pos: position{line: 1131, col: 5, offset: 39577},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1131, col: 5, offset: 39577},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1132, col: 7, offset: 39676},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1132, col: 7, offset: 39676},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1132, col: 7, offset: 39676},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1132, col: 12, offset: 39681},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1136, col: 1, offset: 39846},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 26, offset: 39871},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1136, col: 26, offset: 39871},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1136, col: 26, offset: 39871},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1136, col: 26, offset: 39871},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1136, col: 32, offset: 39877},
										expr: &ruleRefExpr{
											pos:  position{line: 1136, col: 33, offset: 39878},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1136, col: 52, offset: 39897},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1136, col: 52, offset: 39897},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1136, col: 56, offset: 39901},
											expr: &litMatcher{
												pos:        position{line: 1136, col: 57, offset: 39902},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 62, offset: 39907},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 72, offset: 39917},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1136, col: 103, offset: 39948},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1138, col: 5, offset: 40138},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1138, col: 5, offset: 40138},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1138, col: 5, offset: 40138},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1138, col: 11, offset: 40144},
										expr: &ruleRefExpr{
											pos:  position{line: 1138, col: 12, offset: 40145},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1138, col: 30, offset: 40163},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1138, col: 34, offset: 40167},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1138, col: 44, offset: 40177},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1138, col: 44, offset: 40177},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1138, col: 48, offset: 40181},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1138, col: 79, offset: 40212},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1142, col: 1, offset: 40422},
			expr: &seqExpr{
				pos: position{line: 1142, col: 34, offset: 40455},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1142, col: 34, offset: 40455},
						expr: &ruleRefExpr{
							pos:  position{line: 1142, col: 35, offset: 40456},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1142, col: 41, offset: 40462},
						expr: &ruleRefExpr{
							pos:  position{line: 1142, col: 41, offset: 40462},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1144, col: 1, offset: 40493},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 33, offset: 40525},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1144, col: 33, offset: 40525},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1145, col: 11, offset: 40540},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1145, col: 11, offset: 40540},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1145, col: 19, offset: 40548},
								expr: &ruleRefExpr{
									pos:  position{line: 1145, col: 20, offset: 40549},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 11, offset: 40567},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 11, offset: 40599},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1148, col: 11, offset: 40622},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1148, col: 11, offset: 40622},
								expr: &ruleRefExpr{
									pos:  position{line: 1148, col: 11, offset: 40622},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1148, col: 18, offset: 40629},
								expr: &seqExpr{
									pos: position{line: 1148, col: 19, offset: 40630},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1148, col: 19, offset: 40630},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1148, col: 23, offset: 40634},
											expr: &litMatcher{
												pos:        position{line: 1148, col: 24, offset: 40635},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 11, offset: 40651},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 11, offset: 40670},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 11, offset: 40691},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 11, offset: 40715},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 11, offset: 40739},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 11, offset: 40765},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 11, offset: 40794},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1157, col: 1, offset: 40834},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 5, offset: 40880},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1158, col: 5, offset: 40880},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1159, col: 7, offset: 40979},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1159, col: 7, offset: 40979},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1159, col: 7, offset: 40979},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1159, col: 11, offset: 40983},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1163, col: 1, offset: 41149},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 5, offset: 41175},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1164, col: 5, offset: 41175},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1164, col: 5, offset: 41175},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1164, col: 5, offset: 41175},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 18, offset: 41188},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 40, offset: 41210},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 45, offset: 41215},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 55, offset: 41225},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 86, offset: 41256},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 9, offset: 41413},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1166, col: 9, offset: 41413},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1166, col: 9, offset: 41413},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 22, offset: 41426},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 44, offset: 41448},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 49, offset: 41453},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 59, offset: 41463},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 90, offset: 41494},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 9, offset: 41694},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1169, col: 9, offset: 41694},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1169, col: 9, offset: 41694},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 22, offset: 41707},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1169, col: 44, offset: 41729},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1169, col: 48, offset: 41733},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 58, offset: 41743},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1169, col: 89, offset: 41774},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1176, col: 1, offset: 41984},
			expr: &choiceExpr{
				pos: position{line: 1176, col: 18, offset: 42001},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1176, col: 18, offset: 42001},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 45, offset: 42028},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1178, col: 1, offset: 42054},
			expr: &actionExpr{
				pos: position{line: 1178, col: 29, offset: 42082},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1178, col: 29, offset: 42082},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1178, col: 29, offset: 42082},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1178, col: 35, offset: 42088},
								expr: &ruleRefExpr{
									pos:  position{line: 1178, col: 36, offset: 42089},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1178, col: 54, offset: 42107},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1178, col: 59, offset: 42112},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1178, col: 69, offset: 42122},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1178, col: 103, offset: 42156},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1182, col: 1, offset: 42293},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1182, col: 37, offset: 42329},
				expr: &ruleRefExpr{
					pos:  position{line: 1182, col: 37, offset: 42329},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1184, col: 1, offset: 42396},
			expr: &actionExpr{
				pos: position{line: 1184, col: 36, offset: 42431},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1184, col: 36, offset: 42431},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1184, col: 36, offset: 42431},
							expr: &litMatcher{
								pos:        position{line: 1184, col: 38, offset: 42433},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1184, col: 44, offset: 42439},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1184, col: 53, offset: 42448},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1184, col: 53, offset: 42448},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1185, col: 11, offset: 42463},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1186, col: 11, offset: 42512},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1186, col: 11, offset: 42512},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1186, col: 19, offset: 42520},
												expr: &ruleRefExpr{
													pos:  position{line: 1186, col: 20, offset: 42521},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1187, col: 11, offset: 42539},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1188, col: 11, offset: 42562},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1188, col: 11, offset: 42562},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 11, offset: 42746},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1193, col: 11, offset: 42781},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1194, col: 11, offset: 42800},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1195, col: 11, offset: 42821},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1196, col: 11, offset: 42842},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1197, col: 11, offset: 42866},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1198, col: 11, offset: 42892},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 11, offset: 42921},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1203, col: 1, offset: 42993},
			expr: &choiceExpr{
				pos: position{line: 1204, col: 5, offset: 43042},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1204, col: 5, offset: 43042},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1205, col: 7, offset: 43144},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1205, col: 7, offset: 43144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1205, col: 7, offset: 43144},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1205, col: 12, offset: 43149},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1209, col: 1, offset: 43317},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 29, offset: 43345},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1209, col: 29, offset: 43345},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1209, col: 29, offset: 43345},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1209, col: 29, offset: 43345},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1209, col: 35, offset: 43351},
										expr: &ruleRefExpr{
											pos:  position{line: 1209, col: 36, offset: 43352},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1209, col: 55, offset: 43371},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1209, col: 55, offset: 43371},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1209, col: 59, offset: 43375},
											expr: &litMatcher{
												pos:        position{line: 1209, col: 60, offset: 43376},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1209, col: 65, offset: 43381},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1209, col: 75, offset: 43391},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1209, col: 109, offset: 43425},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1211, col: 5, offset: 43618},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1211, col: 5, offset: 43618},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1211, col: 5, offset: 43618},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1211, col: 11, offset: 43624},
										expr: &ruleRefExpr{
											pos:  position{line: 1211, col: 12, offset: 43625},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1211, col: 30, offset: 43643},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1211, col: 34, offset: 43647},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1211, col: 44, offset: 43657},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1211, col: 44, offset: 43657},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1211, col: 48, offset: 43661},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1211, col: 82, offset: 43695},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1215, col: 1, offset: 43909},
			expr: &seqExpr{
				pos: position{line: 1215, col: 37, offset: 43945},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1215, col: 37, offset: 43945},
						expr: &ruleRefExpr{
							pos:  position{line: 1215, col: 38, offset: 43946},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1215, col: 44, offset: 43952},
						expr: &ruleRefExpr{
							pos:  position{line: 1215, col: 44, offset: 43952},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1217, col: 1, offset: 43986},
			expr: &choiceExpr{
				pos: position{line: 1217, col: 37, offset: 44022},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1217, col: 37, offset: 44022},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1218, col: 11, offset: 44037},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1218, col: 11, offset: 44037},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1218, col: 19, offset: 44045},
								expr: &ruleRefExpr{
									pos:  position{line: 1218, col: 20, offset: 44046},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 44064},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 44099},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1221, col: 11, offset: 44122},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1221, col: 11, offset: 44122},
								expr: &ruleRefExpr{
									pos:  position{line: 1221, col: 11, offset: 44122},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1221, col: 18, offset: 44129},
								expr: &seqExpr{
									pos: position{line: 1221, col: 19, offset: 44130},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1221, col: 19, offset: 44130},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1221, col: 23, offset: 44134},
											expr: &litMatcher{
												pos:        position{line: 1221, col: 24, offset: 44135},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 11, offset: 44263},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 11, offset: 44282},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 11, offset: 44303},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 11, offset: 44324},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 11, offset: 44348},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1227, col: 11, offset: 44374},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1227, col: 11, offset: 44374},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 44515},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 44544},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1234, col: 1, offset: 44587},
			expr: &choiceExpr{
				pos: position{line: 1235, col: 5, offset: 44636},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1235, col: 5, offset: 44636},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1236, col: 7, offset: 44738},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1236, col: 7, offset: 44738},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1236, col: 7, offset: 44738},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1236, col: 11, offset: 44742},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1240, col: 1, offset: 44911},
			expr: &choiceExpr{
				pos: position{line: 1241, col: 5, offset: 44940},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1241, col: 5, offset: 44940},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1241, col: 5, offset: 44940},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1241, col: 5, offset: 44940},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1241, col: 18, offset: 44953},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1241, col: 40, offset: 44975},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1241, col: 45, offset: 44980},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1241, col: 55, offset: 44990},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1241, col: 89, offset: 45024},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1243, col: 9, offset: 45181},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1243, col: 9, offset: 45181},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1243, col: 9, offset: 45181},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1243, col: 22, offset: 45194},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1243, col: 44, offset: 45216},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1243, col: 49, offset: 45221},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1243, col: 59, offset: 45231},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1243, col: 93, offset: 45265},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1246, col: 9, offset: 45465},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1246, col: 9, offset: 45465},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1246, col: 9, offset: 45465},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1246, col: 22, offset: 45478},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1246, col: 44, offset: 45500},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1246, col: 48, offset: 45504},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1246, col: 58, offset: 45514},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1246, col: 92, offset: 45548},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1254, col: 1, offset: 45873},
			expr: &choiceExpr{
				pos: position{line: 1254, col: 17, offset: 45889},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1254, col: 17, offset: 45889},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 38, offset: 45910},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1256, col: 1, offset: 45930},
			expr: &actionExpr{
				pos: position{line: 1256, col: 23, offset: 45952},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 23, offset: 45952},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1256, col: 23, offset: 45952},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1256, col: 46, offset: 45975},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1256, col: 55, offset: 45984},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1256, col: 82, offset: 46011},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1260, col: 1, offset: 46115},
			expr: &actionExpr{
				pos: position{line: 1260, col: 31, offset: 46145},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1260, col: 31, offset: 46145},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1260, col: 41, offset: 46155},
						expr: &ruleRefExpr{
							pos:  position{line: 1260, col: 41, offset: 46155},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1264, col: 1, offset: 46233},
			expr: &seqExpr{
				pos: position{line: 1264, col: 27, offset: 46259},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1264, col: 27, offset: 46259},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1264, col: 32, offset: 46264},
						expr: &charClassMatcher{
							pos:        position{line: 1264, col: 33, offset: 46265},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1266, col: 1, offset: 46276},
			expr: &litMatcher{
				pos:        position{line: 1266, col: 25, offset: 46300},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1269, col: 1, offset: 46388},
			expr: &actionExpr{
				pos: position{line: 1269, col: 30, offset: 46417},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1269, col: 30, offset: 46417},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1270, col: 9, offset: 46435},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1270, col: 9, offset: 46435},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1270, col: 9, offset: 46435},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1270, col: 19, offset: 46445},
										expr: &ruleRefExpr{
											pos:  position{line: 1270, col: 20, offset: 46446},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1271, col: 11, offset: 46502},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1271, col: 11, offset: 46502},
										expr: &ruleRefExpr{
											pos:  position{line: 1271, col: 11, offset: 46502},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1271, col: 18, offset: 46509},
										expr: &ruleRefExpr{
											pos:  position{line: 1271, col: 19, offset: 46510},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1272, col: 11, offset: 46541},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1272, col: 11, offset: 46541},
										expr: &litMatcher{
											pos:        position{line: 1272, col: 12, offset: 46542},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1272, col: 16, offset: 46546},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1273, col: 11, offset: 46594},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1274, col: 11, offset: 46613},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1275, col: 11, offset: 46634},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1276, col: 11, offset: 46655},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1277, col: 11, offset: 46679},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1278, col: 11, offset: 46705},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1278, col: 11, offset: 46705},
										expr: &litMatcher{
											pos:        position{line: 1278, col: 12, offset: 46706},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1278, col: 17, offset: 46711},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1279, col: 11, offset: 46735},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1280, col: 11, offset: 46764},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1284, col: 1, offset: 46830},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 41, offset: 46870},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1284, col: 41, offset: 46870},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1284, col: 55, offset: 46884},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1284, col: 55, offset: 46884},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1284, col: 55, offset: 46884},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1284, col: 59, offset: 46888},
									expr: &litMatcher{
										pos:        position{line: 1284, col: 60, offset: 46889},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1288, col: 1, offset: 46948},
			expr: &actionExpr{
				pos: position{line: 1288, col: 23, offset: 46970},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1288, col: 23, offset: 46970},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1288, col: 23, offset: 46970},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 46, offset: 46993},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1288, col: 55, offset: 47002},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1288, col: 82, offset: 47029},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1292, col: 1, offset: 47133},
			expr: &actionExpr{
				pos: position{line: 1292, col: 31, offset: 47163},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1292, col: 31, offset: 47163},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1292, col: 41, offset: 47173},
						expr: &ruleRefExpr{
							pos:  position{line: 1292, col: 41, offset: 47173},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1297, col: 1, offset: 47333},
			expr: &actionExpr{
				pos: position{line: 1297, col: 30, offset: 47362},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1297, col: 30, offset: 47362},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1298, col: 9, offset: 47380},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1298, col: 9, offset: 47380},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1298, col: 9, offset: 47380},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1298, col: 19, offset: 47390},
										expr: &ruleRefExpr{
											pos:  position{line: 1298, col: 20, offset: 47391},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1299, col: 11, offset: 47447},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1299, col: 11, offset: 47447},
										expr: &ruleRefExpr{
											pos:  position{line: 1299, col: 11, offset: 47447},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1299, col: 18, offset: 47454},
										expr: &ruleRefExpr{
											pos:  position{line: 1299, col: 19, offset: 47455},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1300, col: 11, offset: 47486},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1301, col: 11, offset: 47505},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1302, col: 11, offset: 47526},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1303, col: 11, offset: 47547},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1304, col: 11, offset: 47571},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1305, col: 11, offset: 47597},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1305, col: 11, offset: 47597},
										expr: &litMatcher{
											pos:        position{line: 1305, col: 12, offset: 47598},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1305, col: 18, offset: 47604},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1306, col: 10, offset: 47627},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1307, col: 11, offset: 47656},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1311, col: 1, offset: 47730},
			expr: &seqExpr{
				pos: position{line: 1311, col: 27, offset: 47756},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1311, col: 27, offset: 47756},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1311, col: 33, offset: 47762},
						expr: &charClassMatcher{
							pos:        position{line: 1311, col: 34, offset: 47763},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1313, col: 1, offset: 47774},
			expr: &litMatcher{
				pos:        position{line: 1313, col: 25, offset: 47798},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1315, col: 1, offset: 47805},
			expr: &actionExpr{
				pos: position{line: 1315, col: 41, offset: 47845},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1315, col: 42, offset: 47846},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1315, col: 42, offset: 47846},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1315, col: 56, offset: 47860},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1315, col: 56, offset: 47860},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1315, col: 60, offset: 47864},
									expr: &litMatcher{
										pos:        position{line: 1315, col: 61, offset: 47865},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1324, col: 1, offset: 47985},
			expr: &choiceExpr{
				pos: position{line: 1324, col: 15, offset: 47999},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1324, col: 15, offset: 47999},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 39, offset: 48023},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1326, col: 1, offset: 48046},
			expr: &actionExpr{
				pos: position{line: 1326, col: 26, offset: 48071},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1326, col: 26, offset: 48071},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1326, col: 26, offset: 48071},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1326, col: 32, offset: 48077},
								expr: &ruleRefExpr{
									pos:  position{line: 1326, col: 33, offset: 48078},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1326, col: 51, offset: 48096},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1326, col: 56, offset: 48101},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1326, col: 66, offset: 48111},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1326, col: 97, offset: 48142},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1330, col: 1, offset: 48276},
			expr: &seqExpr{
				pos: position{line: 1330, col: 34, offset: 48309},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1330, col: 34, offset: 48309},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1330, col: 63, offset: 48338},
						expr: &seqExpr{
							pos: position{line: 1330, col: 64, offset: 48339},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1330, col: 64, offset: 48339},
									expr: &litMatcher{
										pos:        position{line: 1330, col: 66, offset: 48341},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1330, col: 73, offset: 48348},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1330, col: 73, offset: 48348},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1330, col: 81, offset: 48356},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1332, col: 1, offset: 48423},
			expr: &choiceExpr{
				pos: position{line: 1332, col: 33, offset: 48455},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1332, col: 33, offset: 48455},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 11, offset: 48470},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1334, col: 11, offset: 48502},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1334, col: 11, offset: 48502},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1334, col: 19, offset: 48510},
								expr: &ruleRefExpr{
									pos:  position{line: 1334, col: 20, offset: 48511},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 11, offset: 48529},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 11, offset: 48552},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 11, offset: 48571},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 48592},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 11, offset: 48616},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 48640},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 48666},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 48695},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1344, col: 1, offset: 48735},
			expr: &choiceExpr{
				pos: position{line: 1345, col: 5, offset: 48781},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1345, col: 5, offset: 48781},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1346, col: 7, offset: 48880},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1346, col: 7, offset: 48880},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1346, col: 7, offset: 48880},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1346, col: 12, offset: 48885},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1350, col: 1, offset: 49050},
			expr: &choiceExpr{
				pos: position{line: 1350, col: 26, offset: 49075},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1350, col: 26, offset: 49075},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1350, col: 26, offset: 49075},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1350, col: 26, offset: 49075},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1350, col: 32, offset: 49081},
										expr: &ruleRefExpr{
											pos:  position{line: 1350, col: 33, offset: 49082},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1350, col: 52, offset: 49101},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1350, col: 52, offset: 49101},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1350, col: 56, offset: 49105},
											expr: &litMatcher{
												pos:        position{line: 1350, col: 57, offset: 49106},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1350, col: 62, offset: 49111},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1350, col: 72, offset: 49121},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1350, col: 103, offset: 49152},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1352, col: 5, offset: 49342},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1352, col: 5, offset: 49342},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1352, col: 5, offset: 49342},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1352, col: 11, offset: 49348},
										expr: &ruleRefExpr{
											pos:  position{line: 1352, col: 12, offset: 49349},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1352, col: 30, offset: 49367},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1352, col: 34, offset: 49371},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1352, col: 44, offset: 49381},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1352, col: 44, offset: 49381},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1352, col: 48, offset: 49385},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1352, col: 79, offset: 49416},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1356, col: 1, offset: 49625},
			expr: &seqExpr{
				pos: position{line: 1356, col: 34, offset: 49658},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1356, col: 34, offset: 49658},
						expr: &ruleRefExpr{
							pos:  position{line: 1356, col: 35, offset: 49659},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1356, col: 41, offset: 49665},
						expr: &ruleRefExpr{
							pos:  position{line: 1356, col: 41, offset: 49665},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1358, col: 1, offset: 49696},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 33, offset: 49728},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1358, col: 33, offset: 49728},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1359, col: 11, offset: 49743},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1360, col: 11, offset: 49775},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1360, col: 11, offset: 49775},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1360, col: 19, offset: 49783},
								expr: &ruleRefExpr{
									pos:  position{line: 1360, col: 20, offset: 49784},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 11, offset: 49802},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1362, col: 11, offset: 49825},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1362, col: 11, offset: 49825},
								expr: &ruleRefExpr{
									pos:  position{line: 1362, col: 11, offset: 49825},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1362, col: 18, offset: 49832},
								expr: &seqExpr{
									pos: position{line: 1362, col: 19, offset: 49833},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1362, col: 19, offset: 49833},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1362, col: 23, offset: 49837},
											expr: &litMatcher{
												pos:        position{line: 1362, col: 24, offset: 49838},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 11, offset: 49854},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 11, offset: 49873},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 11, offset: 49894},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 49918},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 11, offset: 49942},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 49968},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 49997},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1371, col: 1, offset: 50037},
			expr: &choiceExpr{
				pos: position{line: 1372, col: 5, offset: 50083},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1372, col: 5, offset: 50083},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1373, col: 7, offset: 50180},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1373, col: 7, offset: 50180},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1373, col: 7, offset: 50180},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1373, col: 11, offset: 50184},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1377, col: 1, offset: 50347},
			expr: &choiceExpr{
				pos: position{line: 1378, col: 5, offset: 50372},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1378, col: 5, offset: 50372},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1378, col: 5, offset: 50372},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1378, col: 5, offset: 50372},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1378, col: 18, offset: 50385},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1378, col: 40, offset: 50407},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1378, col: 45, offset: 50412},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1378, col: 55, offset: 50422},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1378, col: 86, offset: 50453},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1380, col: 9, offset: 50610},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1380, col: 9, offset: 50610},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1380, col: 9, offset: 50610},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1380, col: 22, offset: 50623},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 44, offset: 50645},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1380, col: 49, offset: 50650},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1380, col: 59, offset: 50660},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 90, offset: 50691},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1383, col: 9, offset: 50891},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1383, col: 9, offset: 50891},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1383, col: 9, offset: 50891},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1383, col: 22, offset: 50904},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1383, col: 44, offset: 50926},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1383, col: 48, offset: 50930},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1383, col: 58, offset: 50940},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1383, col: 89, offset: 50971},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1388, col: 1, offset: 51121},
			expr: &actionExpr{
				pos: position{line: 1388, col: 18, offset: 51138},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1388, col: 18, offset: 51138},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1388, col: 18, offset: 51138},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1388, col: 24, offset: 51144},
								expr: &ruleRefExpr{
									pos:  position{line: 1388, col: 25, offset: 51145},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1388, col: 43, offset: 51163},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1388, col: 47, offset: 51167},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1388, col: 56, offset: 51176},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1388, col: 78, offset: 51198},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1392, col: 1, offset: 51294},
			expr: &choiceExpr{
				pos: position{line: 1392, col: 25, offset: 51318},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1392, col: 25, offset: 51318},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1392, col: 38, offset: 51331},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1394, col: 1, offset: 51350},
			expr: &actionExpr{
				pos: position{line: 1394, col: 21, offset: 51370},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1394, col: 21, offset: 51370},
					expr: &charClassMatcher{
						pos:        position{line: 1394, col: 21, offset: 51370},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1398, col: 1, offset: 51447},
			expr: &actionExpr{
				pos: position{line: 1398, col: 25, offset: 51471},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 25, offset: 51471},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1398, col: 25, offset: 51471},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 38, offset: 51484},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1398, col: 60, offset: 51506},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 64, offset: 51510},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 73, offset: 51519},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1398, col: 95, offset: 51541},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1402, col: 1, offset: 51670},
			expr: &actionExpr{
				pos: position{line: 1402, col: 20, offset: 51689},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1402, col: 20, offset: 51689},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1402, col: 20, offset: 51689},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1402, col: 26, offset: 51695},
								expr: &ruleRefExpr{
									pos:  position{line: 1402, col: 27, offset: 51696},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1402, col: 45, offset: 51714},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1402, col: 49, offset: 51718},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1402, col: 58, offset: 51727},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1402, col: 82, offset: 51751},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1406, col: 1, offset: 51849},
			expr: &choiceExpr{
				pos: position{line: 1406, col: 27, offset: 51875},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1406, col: 27, offset: 51875},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 40, offset: 51888},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1408, col: 1, offset: 51909},
			expr: &actionExpr{
				pos: position{line: 1408, col: 23, offset: 51931},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1408, col: 23, offset: 51931},
					expr: &charClassMatcher{
						pos:        position{line: 1408, col: 23, offset: 51931},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1412, col: 1, offset: 52008},
			expr: &actionExpr{
				pos: position{line: 1412, col: 27, offset: 52034},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1412, col: 27, offset: 52034},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1412, col: 27, offset: 52034},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 40, offset: 52047},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1412, col: 62, offset: 52069},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1412, col: 66, offset: 52073},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 75, offset: 52082},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1412, col: 99, offset: 52106},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1419, col: 1, offset: 52348},
			expr: &choiceExpr{
				pos: position{line: 1419, col: 22, offset: 52369},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1419, col: 22, offset: 52369},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 46, offset: 52393},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 70, offset: 52417},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1421, col: 1, offset: 52435},
			expr: &litMatcher{
				pos:        position{line: 1421, col: 32, offset: 52466},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1423, col: 1, offset: 52471},
			expr: &actionExpr{
				pos: position{line: 1423, col: 26, offset: 52496},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 26, offset: 52496},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1423, col: 26, offset: 52496},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 54, offset: 52524},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 63, offset: 52533},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1423, col: 93, offset: 52563},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1423, col: 121, offset: 52591},
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 122, offset: 52592},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1427, col: 1, offset: 52697},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 33, offset: 52729},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1427, col: 34, offset: 52730},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1427, col: 34, offset: 52730},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1427, col: 35, offset: 52731},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1427, col: 35, offset: 52731},
											expr: &ruleRefExpr{
												pos:  position{line: 1427, col: 36, offset: 52732},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1427, col: 64, offset: 52760},
											expr: &ruleRefExpr{
												pos:  position{line: 1427, col: 65, offset: 52761},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1427, col: 71, offset: 52767},
											expr: &ruleRefExpr{
												pos:  position{line: 1427, col: 72, offset: 52768},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1427, col: 80, offset: 52776,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1427, col: 83, offset: 52779},
									expr: &seqExpr{
										pos: position{line: 1427, col: 84, offset: 52780},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1427, col: 84, offset: 52780},
												expr: &seqExpr{
													pos: position{line: 1427, col: 86, offset: 52782},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1427, col: 86, offset: 52782},
															expr: &ruleRefExpr{
																pos:  position{line: 1427, col: 86, offset: 52782},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1427, col: 93, offset: 52789},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1427, col: 122, offset: 52818},
												expr: &ruleRefExpr{
													pos:  position{line: 1427, col: 123, offset: 52819},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1427, col: 151, offset: 52847},
												expr: &ruleRefExpr{
													pos:  position{line: 1427, col: 152, offset: 52848},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1427, col: 160, offset: 52856,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 7, offset: 52998},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1429, col: 8, offset: 52999},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1429, col: 8, offset: 52999},
									expr: &ruleRefExpr{
										pos:  position{line: 1429, col: 9, offset: 53000},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1429, col: 15, offset: 53006},
									expr: &ruleRefExpr{
										pos:  position{line: 1429, col: 16, offset: 53007},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1429, col: 24, offset: 53015},
									expr: &ruleRefExpr{
										pos:  position{line: 1429, col: 25, offset: 53016},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1429, col: 53, offset: 53044,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1433, col: 1, offset: 53126},
			expr: &litMatcher{
				pos:        position{line: 1433, col: 32, offset: 53157},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1435, col: 1, offset: 53164},
			expr: &actionExpr{
				pos: position{line: 1435, col: 26, offset: 53189},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1435, col: 26, offset: 53189},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1435, col: 26, offset: 53189},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1435, col: 54, offset: 53217},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1435, col: 63, offset: 53226},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1435, col: 93, offset: 53256},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1435, col: 121, offset: 53284},
							expr: &ruleRefExpr{
								pos:  position{line: 1435, col: 122, offset: 53285},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1439, col: 1, offset: 53390},
			expr: &choiceExpr{
				pos: position{line: 1439, col: 33, offset: 53422},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1439, col: 34, offset: 53423},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1439, col: 34, offset: 53423},
							expr: &seqExpr{
								pos: position{line: 1439, col: 35, offset: 53424},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1439, col: 35, offset: 53424},
										expr: &ruleRefExpr{
											pos:  position{line: 1439, col: 36, offset: 53425},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1439, col: 64, offset: 53453,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1441, col: 7, offset: 53618},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1441, col: 7, offset: 53618},
							expr: &seqExpr{
								pos: position{line: 1441, col: 8, offset: 53619},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1441, col: 8, offset: 53619},
										expr: &ruleRefExpr{
											pos:  position{line: 1441, col: 9, offset: 53620},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1441, col: 15, offset: 53626},
										expr: &ruleRefExpr{
											pos:  position{line: 1441, col: 16, offset: 53627},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1441, col: 24, offset: 53635},
										expr: &ruleRefExpr{
											pos:  position{line: 1441, col: 25, offset: 53636},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1441, col: 53, offset: 53664,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1445, col: 1, offset: 53747},
			expr: &choiceExpr{
				pos: position{line: 1445, col: 21, offset: 53767},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1445, col: 21, offset: 53767},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1445, col: 21, offset: 53767},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1445, col: 21, offset: 53767},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1445, col: 30, offset: 53776},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1445, col: 38, offset: 53784},
										expr: &ruleRefExpr{
											pos:  position{line: 1445, col: 39, offset: 53785},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1445, col: 67, offset: 53813},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1447, col: 5, offset: 53909},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1447, col: 5, offset: 53909},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1447, col: 5, offset: 53909},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1447, col: 15, offset: 53919},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1447, col: 23, offset: 53927},
										expr: &choiceExpr{
											pos: position{line: 1447, col: 24, offset: 53928},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1447, col: 24, offset: 53928},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1447, col: 37, offset: 53941},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1447, col: 65, offset: 53969},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1451, col: 1, offset: 54065},
			expr: &actionExpr{
				pos: position{line: 1451, col: 30, offset: 54094},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1451, col: 30, offset: 54094},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1458, col: 1, offset: 54267},
			expr: &choiceExpr{
				pos: position{line: 1458, col: 19, offset: 54285},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1458, col: 19, offset: 54285},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1458, col: 44, offset: 54310},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1460, col: 1, offset: 54335},
			expr: &choiceExpr{
				pos: position{line: 1460, col: 27, offset: 54361},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1460, col: 27, offset: 54361},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1460, col: 27, offset: 54361},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1460, col: 27, offset: 54361},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1460, col: 32, offset: 54366},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1460, col: 36, offset: 54370},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1460, col: 40, offset: 54374},
									expr: &ruleRefExpr{
										pos:  position{line: 1460, col: 40, offset: 54374},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1460, col: 47, offset: 54381},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1460, col: 51, offset: 54385},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1460, col: 58, offset: 54392},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1460, col: 79, offset: 54413},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1462, col: 5, offset: 54496},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1462, col: 5, offset: 54496},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1462, col: 5, offset: 54496},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1462, col: 10, offset: 54501},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1462, col: 14, offset: 54505},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1462, col: 18, offset: 54509},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1466, col: 1, offset: 54581},
			expr: &actionExpr{
				pos: position{line: 1466, col: 27, offset: 54607},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1466, col: 27, offset: 54607},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1466, col: 27, offset: 54607},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1466, col: 35, offset: 54615},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1466, col: 40, offset: 54620},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1466, col: 54, offset: 54634},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1466, col: 72, offset: 54652},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1470, col: 1, offset: 54775},
			expr: &ruleRefExpr{
				pos:  position{line: 1470, col: 24, offset: 54798},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1475, col: 1, offset: 54920},
			expr: &choiceExpr{
				pos: position{line: 1475, col: 9, offset: 54928},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1475, col: 9, offset: 54928},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 24, offset: 54943},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1478, col: 1, offset: 55024},
			expr: &actionExpr{
				pos: position{line: 1478, col: 17, offset: 55040},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1478, col: 17, offset: 55040},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1478, col: 17, offset: 55040},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 25, offset: 55048},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 30, offset: 55053},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 40, offset: 55063},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 58, offset: 55081},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1482, col: 1, offset: 55192},
			expr: &actionExpr{
				pos: position{line: 1482, col: 17, offset: 55208},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1482, col: 17, offset: 55208},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1482, col: 17, offset: 55208},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1482, col: 22, offset: 55213},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1482, col: 42, offset: 55233},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1482, col: 59, offset: 55250},
								expr: &ruleRefExpr{
									pos:  position{line: 1482, col: 60, offset: 55251},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1486, col: 1, offset: 55344},
			expr: &actionExpr{
				pos: position{line: 1486, col: 19, offset: 55362},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1486, col: 19, offset: 55362},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1486, col: 19, offset: 55362},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1486, col: 23, offset: 55366},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1486, col: 33, offset: 55376},
								expr: &ruleRefExpr{
									pos:  position{line: 1486, col: 34, offset: 55377},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1487, col: 5, offset: 55409},
							expr: &ruleRefExpr{
								pos:  position{line: 1487, col: 5, offset: 55409},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1487, col: 12, offset: 55416},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1487, col: 23, offset: 55427},
								expr: &ruleRefExpr{
									pos:  position{line: 1487, col: 24, offset: 55428},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1487, col: 43, offset: 55447},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1491, col: 1, offset: 55564},
			expr: &actionExpr{
				pos: position{line: 1491, col: 30, offset: 55593},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1491, col: 30, offset: 55593},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1493, col: 5, offset: 55644},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1493, col: 6, offset: 55645},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1493, col: 6, offset: 55645},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1493, col: 6, offset: 55645},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1493, col: 11, offset: 55650},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1493, col: 20, offset: 55659},
												expr: &choiceExpr{
													pos: position{line: 1493, col: 21, offset: 55660},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1493, col: 21, offset: 55660},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1493, col: 36, offset: 55675},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1493, col: 49, offset: 55688},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1493, col: 70, offset: 55709},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1493, col: 92, offset: 55731},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1493, col: 97, offset: 55736},
											expr: &notExpr{
												pos: position{line: 1493, col: 99, offset: 55738},
												expr: &litMatcher{
													pos:        position{line: 1493, col: 100, offset: 55739},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1493, col: 105, offset: 55744},
											expr: &litMatcher{
												pos:        position{line: 1493, col: 105, offset: 55744},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1497, col: 6, offset: 55871},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1497, col: 6, offset: 55871},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1497, col: 6, offset: 55871},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1497, col: 15, offset: 55880},
												expr: &choiceExpr{
													pos: position{line: 1497, col: 16, offset: 55881},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1497, col: 16, offset: 55881},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1497, col: 31, offset: 55896},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1497, col: 44, offset: 55909},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1497, col: 65, offset: 55930},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1497, col: 89, offset: 55954},
											expr: &notExpr{
												pos: position{line: 1497, col: 91, offset: 55956},
												expr: &litMatcher{
													pos:        position{line: 1497, col: 92, offset: 55957},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1497, col: 97, offset: 55962},
											expr: &litMatcher{
												pos:        position{line: 1497, col: 97, offset: 55962},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1503, col: 1, offset: 56076},
			expr: &actionExpr{
				pos: position{line: 1503, col: 18, offset: 56093},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1503, col: 18, offset: 56093},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1507, col: 1, offset: 56179},
			expr: &actionExpr{
				pos: position{line: 1507, col: 24, offset: 56202},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1507, col: 24, offset: 56202},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1511, col: 1, offset: 56295},
			expr: &actionExpr{
				pos: position{line: 1511, col: 26, offset: 56320},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1511, col: 26, offset: 56320},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1515, col: 1, offset: 56406},
			expr: &choiceExpr{
				pos: position{line: 1515, col: 17, offset: 56422},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1515, col: 17, offset: 56422},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1515, col: 40, offset: 56445},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1518, col: 1, offset: 56573},
			expr: &actionExpr{
				pos: position{line: 1518, col: 25, offset: 56597},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 25, offset: 56597},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1518, col: 25, offset: 56597},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 33, offset: 56605},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1518, col: 38, offset: 56610},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1518, col: 38, offset: 56610},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1518, col: 57, offset: 56629},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 79, offset: 56651},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 97, offset: 56669},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1522, col: 1, offset: 56780},
			expr: &actionExpr{
				pos: position{line: 1522, col: 25, offset: 56804},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1522, col: 25, offset: 56804},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1522, col: 25, offset: 56804},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1522, col: 30, offset: 56809},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1522, col: 48, offset: 56827},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1522, col: 65, offset: 56844},
								expr: &ruleRefExpr{
									pos:  position{line: 1522, col: 66, offset: 56845},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1529, col: 1, offset: 57040},
			expr: &actionExpr{
				pos: position{line: 1529, col: 15, offset: 57054},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1529, col: 15, offset: 57054},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1529, col: 15, offset: 57054},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1529, col: 26, offset: 57065},
								expr: &ruleRefExpr{
									pos:  position{line: 1529, col: 27, offset: 57066},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1529, col: 45, offset: 57084},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 55, offset: 57094},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 61, offset: 57100},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 71, offset: 57110},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 84, offset: 57123},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1529, col: 102, offset: 57141},
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 102, offset: 57141},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1529, col: 109, offset: 57148},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1534, col: 1, offset: 57358},
			expr: &actionExpr{
				pos: position{line: 1534, col: 16, offset: 57373},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1534, col: 16, offset: 57373},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1534, col: 16, offset: 57373},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1534, col: 25, offset: 57382},
							expr: &litMatcher{
								pos:        position{line: 1534, col: 26, offset: 57383},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1534, col: 30, offset: 57387},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1534, col: 36, offset: 57393},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1534, col: 46, offset: 57403},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1534, col: 59, offset: 57416},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1538, col: 1, offset: 57554},
			expr: &actionExpr{
				pos: position{line: 1538, col: 21, offset: 57574},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1538, col: 21, offset: 57574},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1538, col: 21, offset: 57574},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1538, col: 25, offset: 57578},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1538, col: 29, offset: 57582},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1538, col: 44, offset: 57597},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1538, col: 46, offset: 57599},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1538, col: 57, offset: 57610},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1538, col: 59, offset: 57612},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1538, col: 71, offset: 57624},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1538, col: 74, offset: 57627},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1538, col: 85, offset: 57638},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1542, col: 1, offset: 57700},
			expr: &choiceExpr{
				pos: position{line: 1542, col: 20, offset: 57719},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1542, col: 20, offset: 57719},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1542, col: 36, offset: 57735},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1542, col: 51, offset: 57750},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1544, col: 1, offset: 57761},
			expr: &actionExpr{
				pos: position{line: 1544, col: 18, offset: 57778},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1544, col: 18, offset: 57778},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1544, col: 18, offset: 57778},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 22, offset: 57782},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1544, col: 29, offset: 57789},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1544, col: 29, offset: 57789},
										expr: &ruleRefExpr{
											pos:  position{line: 1544, col: 29, offset: 57789},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1544, col: 43, offset: 57803},
										expr: &ruleRefExpr{
											pos:  position{line: 1544, col: 43, offset: 57803},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1544, col: 58, offset: 57818},
										expr: &ruleRefExpr{
											pos:  position{line: 1544, col: 58, offset: 57818},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1544, col: 74, offset: 57834},
										expr: &ruleRefExpr{
											pos:  position{line: 1544, col: 74, offset: 57834},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1544, col: 91, offset: 57851},
										expr: &ruleRefExpr{
											pos:  position{line: 1544, col: 91, offset: 57851},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1544, col: 103, offset: 57863},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1544, col: 107, offset: 57867},
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 107, offset: 57867},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1544, col: 114, offset: 57874},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1548, col: 1, offset: 57928},
			expr: &actionExpr{
				pos: position{line: 1548, col: 19, offset: 57946},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1548, col: 19, offset: 57946},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1548, col: 25, offset: 57952},
						expr: &ruleRefExpr{
							pos:  position{line: 1548, col: 25, offset: 57952},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1552, col: 1, offset: 58031},
			expr: &actionExpr{
				pos: position{line: 1552, col: 15, offset: 58045},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 15, offset: 58045},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1552, col: 15, offset: 58045},
							expr: &litMatcher{
								pos:        position{line: 1552, col: 15, offset: 58045},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 20, offset: 58050},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1552, col: 26, offset: 58056},
								expr: &ruleRefExpr{
									pos:  position{line: 1552, col: 26, offset: 58056},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1556, col: 1, offset: 58132},
			expr: &actionExpr{
				pos: position{line: 1556, col: 16, offset: 58147},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1556, col: 16, offset: 58147},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1556, col: 16, offset: 58147},
							expr: &litMatcher{
								pos:        position{line: 1556, col: 16, offset: 58147},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1556, col: 21, offset: 58152},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1556, col: 27, offset: 58158},
								expr: &ruleRefExpr{
									pos:  position{line: 1556, col: 27, offset: 58158},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1560, col: 1, offset: 58240},
			expr: &actionExpr{
				pos: position{line: 1560, col: 17, offset: 58256},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1560, col: 17, offset: 58256},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1560, col: 17, offset: 58256},
							expr: &ruleRefExpr{
								pos:  position{line: 1560, col: 17, offset: 58256},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1560, col: 24, offset: 58263},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1560, col: 30, offset: 58269},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1560, col: 46, offset: 58285},
							expr: &ruleRefExpr{
								pos:  position{line: 1560, col: 46, offset: 58285},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1564, col: 1, offset: 58361},
			expr: &actionExpr{
				pos: position{line: 1564, col: 19, offset: 58379},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1564, col: 19, offset: 58379},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1564, col: 19, offset: 58379},
							expr: &ruleRefExpr{
								pos:  position{line: 1564, col: 19, offset: 58379},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1564, col: 26, offset: 58386},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1564, col: 30, offset: 58390},
							expr: &ruleRefExpr{
								pos:  position{line: 1564, col: 30, offset: 58390},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1564, col: 37, offset: 58397},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1564, col: 43, offset: 58403},
								expr: &ruleRefExpr{
									pos:  position{line: 1564, col: 43, offset: 58403},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1571, col: 1, offset: 58538},
			expr: &actionExpr{
				pos: position{line: 1571, col: 20, offset: 58557},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1571, col: 20, offset: 58557},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1571, col: 20, offset: 58557},
							expr: &ruleRefExpr{
								pos:  position{line: 1571, col: 20, offset: 58557},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1571, col: 27, offset: 58564},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1571, col: 31, offset: 58568},
							expr: &ruleRefExpr{
								pos:  position{line: 1571, col: 31, offset: 58568},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1571, col: 38, offset: 58575},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1571, col: 44, offset: 58581},
								expr: &ruleRefExpr{
									pos:  position{line: 1571, col: 44, offset: 58581},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1582, col: 1, offset: 58915},
			expr: &actionExpr{
				pos: position{line: 1582, col: 15, offset: 58929},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1582, col: 15, offset: 58929},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1582, col: 15, offset: 58929},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 23, offset: 58937},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1582, col: 29, offset: 58943},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1582, col: 29, offset: 58943},
									expr: &charClassMatcher{
										pos:        position{line: 1582, col: 29, offset: 58943},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 73, offset: 58987},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1582, col: 80, offset: 58994},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1586, col: 1, offset: 59076},
			expr: &actionExpr{
				pos: position{line: 1586, col: 14, offset: 59089},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1586, col: 14, offset: 59089},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1586, col: 14, offset: 59089},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1586, col: 18, offset: 59093},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1586, col: 23, offset: 59098},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1586, col: 32, offset: 59107},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1586, col: 35, offset: 59110},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1586, col: 46, offset: 59121},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1590, col: 1, offset: 59178},
			expr: &actionExpr{
				pos: position{line: 1590, col: 13, offset: 59190},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1590, col: 13, offset: 59190},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1590, col: 19, offset: 59196},
						expr: &ruleRefExpr{
							pos:  position{line: 1590, col: 19, offset: 59196},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1597, col: 1, offset: 59472},
			expr: &choiceExpr{
				pos: position{line: 1597, col: 19, offset: 59490},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1597, col: 19, offset: 59490},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1597, col: 19, offset: 59490},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1597, col: 19, offset: 59490},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1597, col: 32, offset: 59503},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1597, col: 41, offset: 59512},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1597, col: 58, offset: 59529},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1599, col: 5, offset: 59597},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1599, col: 5, offset: 59597},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1599, col: 5, offset: 59597},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1599, col: 17, offset: 59609},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1599, col: 22, offset: 59614},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1599, col: 35, offset: 59627},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1599, col: 39, offset: 59631},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1599, col: 47, offset: 59639},
										expr: &ruleRefExpr{
											pos:  position{line: 1599, col: 48, offset: 59640},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1599, col: 66, offset: 59658},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1603, col: 1, offset: 59719},
			expr: &ruleRefExpr{
				pos:  position{line: 1603, col: 16, offset: 59734},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1605, col: 1, offset: 59745},
			expr: &actionExpr{
				pos: position{line: 1605, col: 20, offset: 59764},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1605, col: 20, offset: 59764},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1605, col: 29, offset: 59773},
						expr: &seqExpr{
							pos: position{line: 1605, col: 30, offset: 59774},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1605, col: 30, offset: 59774},
									expr: &litMatcher{
										pos:        position{line: 1605, col: 31, offset: 59775},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1605, col: 35, offset: 59779},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1613, col: 1, offset: 60095},
			expr: &actionExpr{
				pos: position{line: 1613, col: 12, offset: 60106},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 12, offset: 60106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1613, col: 12, offset: 60106},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1613, col: 16, offset: 60110},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1613, col: 21, offset: 60115},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1613, col: 21, offset: 60115},
									expr: &charClassMatcher{
										pos:        position{line: 1613, col: 21, offset: 60115},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1613, col: 69, offset: 60163},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1613, col: 73, offset: 60167},
							expr: &ruleRefExpr{
								pos:  position{line: 1613, col: 73, offset: 60167},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1613, col: 80, offset: 60174},
							expr: &choiceExpr{
								pos: position{line: 1613, col: 82, offset: 60176},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1613, col: 82, offset: 60176},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1613, col: 88, offset: 60182},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1617, col: 1, offset: 60235},
			expr: &actionExpr{
				pos: position{line: 1617, col: 20, offset: 60254},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1617, col: 20, offset: 60254},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1617, col: 20, offset: 60254},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1617, col: 25, offset: 60259},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1617, col: 48, offset: 60282},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1617, col: 61, offset: 60295},
								expr: &ruleRefExpr{
									pos:  position{line: 1617, col: 61, offset: 60295},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1621, col: 1, offset: 60392},
			expr: &actionExpr{
				pos: position{line: 1621, col: 26, offset: 60417},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1621, col: 26, offset: 60417},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1621, col: 26, offset: 60417},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1621, col: 30, offset: 60421},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1621, col: 35, offset: 60426},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1621, col: 35, offset: 60426},
									expr: &charClassMatcher{
										pos:        position{line: 1621, col: 35, offset: 60426},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1621, col: 83, offset: 60474},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1621, col: 87, offset: 60478},
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 87, offset: 60478},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1630, col: 1, offset: 60725},
			expr: &actionExpr{
				pos: position{line: 1630, col: 18, offset: 60742},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1630, col: 18, offset: 60742},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1630, col: 19, offset: 60743},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1630, col: 19, offset: 60743},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1630, col: 27, offset: 60751},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1630, col: 37, offset: 60761},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1630, col: 45, offset: 60769},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1630, col: 55, offset: 60779},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1630, col: 63, offset: 60787},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1630, col: 72, offset: 60796},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1640, col: 1, offset: 61046},
			expr: &actionExpr{
				pos: position{line: 1640, col: 19, offset: 61064},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1640, col: 19, offset: 61064},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1640, col: 19, offset: 61064},
							expr: &ruleRefExpr{
								pos:  position{line: 1640, col: 20, offset: 61065},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1641, col: 5, offset: 61153},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1641, col: 12, offset: 61160},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1641, col: 12, offset: 61160},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1642, col: 11, offset: 61183},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1643, col: 11, offset: 61207},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1644, col: 11, offset: 61231},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1645, col: 11, offset: 61252},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1646, col: 11, offset: 61273},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1647, col: 11, offset: 61296},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1648, col: 11, offset: 61323},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1652, col: 1, offset: 61364},
			expr: &choiceExpr{
				pos: position{line: 1652, col: 19, offset: 61382},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1652, col: 19, offset: 61382},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1652, col: 19, offset: 61382},
								expr: &ruleRefExpr{
									pos:  position{line: 1652, col: 21, offset: 61384},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1652, col: 31, offset: 61394},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1653, col: 19, offset: 61465},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1654, col: 19, offset: 61505},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1655, col: 19, offset: 61546},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1656, col: 19, offset: 61587},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1657, col: 19, offset: 61628},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1658, col: 19, offset: 61666},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1659, col: 19, offset: 61706},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1664, col: 1, offset: 61929},
			expr: &actionExpr{
				pos: position{line: 1664, col: 17, offset: 61945},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1664, col: 17, offset: 61945},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1664, col: 17, offset: 61945},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1664, col: 28, offset: 61956},
								expr: &ruleRefExpr{
									pos:  position{line: 1664, col: 29, offset: 61957},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1664, col: 42, offset: 61970},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1664, col: 69, offset: 61997},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1664, col: 77, offset: 62005},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1664, col: 101, offset: 62029},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1668, col: 1, offset: 62128},
			expr: &seqExpr{
				pos: position{line: 1668, col: 26, offset: 62153},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1668, col: 26, offset: 62153},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1668, col: 33, offset: 62160},
						expr: &ruleRefExpr{
							pos:  position{line: 1668, col: 33, offset: 62160},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1668, col: 40, offset: 62167},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1670, col: 1, offset: 62172},
			expr: &seqExpr{
				pos: position{line: 1670, col: 31, offset: 62202},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1670, col: 31, offset: 62202},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1670, col: 38, offset: 62209},
						expr: &ruleRefExpr{
							pos:  position{line: 1670, col: 38, offset: 62209},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1670, col: 45, offset: 62216},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1672, col: 1, offset: 62221},
			expr: &choiceExpr{
				pos: position{line: 1672, col: 29, offset: 62249},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1672, col: 30, offset: 62250},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1672, col: 30, offset: 62250},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1672, col: 37, offset: 62257},
								expr: &ruleRefExpr{
									pos:  position{line: 1672, col: 37, offset: 62257},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1672, col: 44, offset: 62264},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1672, col: 51, offset: 62271},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1674, col: 1, offset: 62276},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1674, col: 27, offset: 62302},
				expr: &actionExpr{
					pos: position{line: 1675, col: 8, offset: 62311},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1675, col: 8, offset: 62311},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1675, col: 8, offset: 62311},
								expr: &ruleRefExpr{
									pos:  position{line: 1675, col: 9, offset: 62312},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1676, col: 8, offset: 62345},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1676, col: 17, offset: 62354},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1676, col: 17, offset: 62354},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1677, col: 15, offset: 62379},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1678, col: 15, offset: 62404},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1679, col: 15, offset: 62432},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1680, col: 15, offset: 62463},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1681, col: 15, offset: 62496},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1682, col: 15, offset: 62527},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1683, col: 15, offset: 62566},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1684, col: 15, offset: 62593},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1685, col: 15, offset: 62621},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1686, col: 15, offset: 62646},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1687, col: 15, offset: 62671},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1688, col: 15, offset: 62698},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1689, col: 15, offset: 62730},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1690, col: 15, offset: 62761},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1691, col: 15, offset: 62781},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1692, col: 15, offset: 62808},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1693, col: 15, offset: 62836},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1694, col: 15, offset: 62863},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1701, col: 1, offset: 63119},
			expr: &actionExpr{
				pos: position{line: 1701, col: 15, offset: 63133},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1701, col: 15, offset: 63133},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1701, col: 15, offset: 63133},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1701, col: 26, offset: 63144},
								expr: &ruleRefExpr{
									pos:  position{line: 1701, col: 27, offset: 63145},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1702, col: 5, offset: 63163},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1713, col: 5, offset: 63506},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1713, col: 30, offset: 63531},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1713, col: 39, offset: 63540},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1713, col: 61, offset: 63562},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1717, col: 1, offset: 63666},
			expr: &seqExpr{
				pos: position{line: 1717, col: 24, offset: 63689},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1717, col: 24, offset: 63689},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1717, col: 31, offset: 63696},
						expr: &ruleRefExpr{
							pos:  position{line: 1717, col: 31, offset: 63696},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1717, col: 38, offset: 63703},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1719, col: 1, offset: 63733},
			expr: &seqExpr{
				pos: position{line: 1719, col: 29, offset: 63761},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1719, col: 29, offset: 63761},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1719, col: 36, offset: 63768},
						expr: &ruleRefExpr{
							pos:  position{line: 1719, col: 36, offset: 63768},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1719, col: 43, offset: 63775},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1721, col: 1, offset: 63805},
			expr: &choiceExpr{
				pos: position{line: 1721, col: 27, offset: 63831},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1721, col: 28, offset: 63832},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1721, col: 28, offset: 63832},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1721, col: 35, offset: 63839},
								expr: &ruleRefExpr{
									pos:  position{line: 1721, col: 35, offset: 63839},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1721, col: 42, offset: 63846},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1721, col: 49, offset: 63853},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1723, col: 1, offset: 63883},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1723, col: 25, offset: 63907},
				expr: &actionExpr{
					pos: position{line: 1724, col: 8, offset: 63916},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1724, col: 8, offset: 63916},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1724, col: 8, offset: 63916},
								expr: &ruleRefExpr{
									pos:  position{line: 1724, col: 9, offset: 63917},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1725, col: 8, offset: 63948},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1725, col: 17, offset: 63957},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1725, col: 17, offset: 63957},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1726, col: 15, offset: 63982},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1727, col: 15, offset: 64007},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1728, col: 15, offset: 64035},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1729, col: 15, offset: 64066},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1730, col: 15, offset: 64099},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1731, col: 15, offset: 64130},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1732, col: 15, offset: 64169},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1733, col: 15, offset: 64196},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1734, col: 15, offset: 64224},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1735, col: 15, offset: 64249},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1736, col: 15, offset: 64276},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1737, col: 15, offset: 64303},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1738, col: 15, offset: 64335},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1739, col: 15, offset: 64366},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1740, col: 15, offset: 64386},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1741, col: 15, offset: 64413},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1742, col: 15, offset: 64441},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1743, col: 15, offset: 64468},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1750, col: 1, offset: 64726},
			expr: &actionExpr{
				pos: position{line: 1750, col: 17, offset: 64742},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1750, col: 17, offset: 64742},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1750, col: 17, offset: 64742},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1750, col: 28, offset: 64753},
								expr: &ruleRefExpr{
									pos:  position{line: 1750, col: 29, offset: 64754},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1750, col: 42, offset: 64767},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1750, col: 69, offset: 64794},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1750, col: 78, offset: 64803},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1750, col: 102, offset: 64827},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1754, col: 1, offset: 64927},
			expr: &seqExpr{
				pos: position{line: 1754, col: 26, offset: 64952},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1754, col: 26, offset: 64952},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1754, col: 33, offset: 64959},
						expr: &ruleRefExpr{
							pos:  position{line: 1754, col: 33, offset: 64959},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1754, col: 40, offset: 64966},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1756, col: 1, offset: 64971},
			expr: &seqExpr{
				pos: position{line: 1756, col: 31, offset: 65001},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1756, col: 31, offset: 65001},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1756, col: 38, offset: 65008},
						expr: &ruleRefExpr{
							pos:  position{line: 1756, col: 38, offset: 65008},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1756, col: 45, offset: 65015},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1758, col: 1, offset: 65020},
			expr: &choiceExpr{
				pos: position{line: 1758, col: 29, offset: 65048},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1758, col: 30, offset: 65049},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1758, col: 30, offset: 65049},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1758, col: 37, offset: 65056},
								expr: &ruleRefExpr{
									pos:  position{line: 1758, col: 37, offset: 65056},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1758, col: 44, offset: 65063},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1758, col: 51, offset: 65070},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1760, col: 1, offset: 65075},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1760, col: 27, offset: 65101},
				expr: &actionExpr{
					pos: position{line: 1761, col: 8, offset: 65110},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1761, col: 8, offset: 65110},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1761, col: 8, offset: 65110},
								expr: &ruleRefExpr{
									pos:  position{line: 1761, col: 9, offset: 65111},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1762, col: 8, offset: 65144},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1762, col: 17, offset: 65153},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1762, col: 17, offset: 65153},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1763, col: 15, offset: 65178},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1764, col: 15, offset: 65203},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1765, col: 15, offset: 65231},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1766, col: 15, offset: 65262},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1767, col: 15, offset: 65295},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1768, col: 15, offset: 65326},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1769, col: 15, offset: 65365},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1770, col: 15, offset: 65392},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1771, col: 15, offset: 65419},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1772, col: 15, offset: 65445},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1773, col: 15, offset: 65472},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1774, col: 15, offset: 65497},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1775, col: 15, offset: 65529},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1776, col: 15, offset: 65560},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1777, col: 15, offset: 65580},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1778, col: 15, offset: 65607},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1779, col: 15, offset: 65635},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1780, col: 15, offset: 65662},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1787, col: 1, offset: 65919},
			expr: &actionExpr{
				pos: position{line: 1787, col: 16, offset: 65934},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1787, col: 16, offset: 65934},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1787, col: 16, offset: 65934},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1787, col: 27, offset: 65945},
								expr: &ruleRefExpr{
									pos:  position{line: 1787, col: 28, offset: 65946},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1787, col: 41, offset: 65959},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1787, col: 67, offset: 65985},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1787, col: 76, offset: 65994},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1787, col: 99, offset: 66017},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1791, col: 1, offset: 66115},
			expr: &seqExpr{
				pos: position{line: 1791, col: 25, offset: 66139},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1791, col: 25, offset: 66139},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1791, col: 31, offset: 66145},
						expr: &ruleRefExpr{
							pos:  position{line: 1791, col: 31, offset: 66145},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1791, col: 38, offset: 66152},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1793, col: 1, offset: 66212},
			expr: &seqExpr{
				pos: position{line: 1793, col: 30, offset: 66241},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1793, col: 30, offset: 66241},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1793, col: 36, offset: 66247},
						expr: &ruleRefExpr{
							pos:  position{line: 1793, col: 36, offset: 66247},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1793, col: 43, offset: 66254},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1795, col: 1, offset: 66259},
			expr: &choiceExpr{
				pos: position{line: 1795, col: 28, offset: 66286},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1795, col: 29, offset: 66287},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1795, col: 29, offset: 66287},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1795, col: 35, offset: 66293},
								expr: &ruleRefExpr{
									pos:  position{line: 1795, col: 35, offset: 66293},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1795, col: 42, offset: 66300},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1795, col: 49, offset: 66307},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1797, col: 1, offset: 66312},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1797, col: 26, offset: 66337},
				expr: &actionExpr{
					pos: position{line: 1797, col: 27, offset: 66338},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1797, col: 27, offset: 66338},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1797, col: 27, offset: 66338},
								expr: &ruleRefExpr{
									pos:  position{line: 1797, col: 28, offset: 66339},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1797, col: 52, offset: 66363},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1797, col: 58, offset: 66369},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1804, col: 1, offset: 66603},
			expr: &actionExpr{
				pos: position{line: 1804, col: 17, offset: 66619},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1804, col: 17, offset: 66619},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1804, col: 17, offset: 66619},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1804, col: 28, offset: 66630},
								expr: &ruleRefExpr{
									pos:  position{line: 1804, col: 29, offset: 66631},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1804, col: 42, offset: 66644},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1804, col: 69, offset: 66671},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1804, col: 78, offset: 66680},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1804, col: 102, offset: 66704},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1808, col: 1, offset: 66804},
			expr: &seqExpr{
				pos: position{line: 1808, col: 26, offset: 66829},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1808, col: 26, offset: 66829},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1808, col: 33, offset: 66836},
						expr: &ruleRefExpr{
							pos:  position{line: 1808, col: 33, offset: 66836},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1808, col: 40, offset: 66843},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1810, col: 1, offset: 66848},
			expr: &seqExpr{
				pos: position{line: 1810, col: 31, offset: 66878},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1810, col: 31, offset: 66878},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1810, col: 38, offset: 66885},
						expr: &ruleRefExpr{
							pos:  position{line: 1810, col: 38, offset: 66885},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1810, col: 45, offset: 66892},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1812, col: 1, offset: 66897},
			expr: &choiceExpr{
				pos: position{line: 1812, col: 29, offset: 66925},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1812, col: 30, offset: 66926},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1812, col: 30, offset: 66926},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1812, col: 37, offset: 66933},
								expr: &ruleRefExpr{
									pos:  position{line: 1812, col: 37, offset: 66933},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1812, col: 44, offset: 66940},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1812, col: 51, offset: 66947},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1814, col: 1, offset: 66952},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1814, col: 27, offset: 66978},
				expr: &actionExpr{
					pos: position{line: 1814, col: 28, offset: 66979},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1814, col: 28, offset: 66979},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1814, col: 28, offset: 66979},
								expr: &ruleRefExpr{
									pos:  position{line: 1814, col: 29, offset: 66980},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1814, col: 54, offset: 67005},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1814, col: 60, offset: 67011},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1821, col: 1, offset: 67243},
			expr: &actionExpr{
				pos: position{line: 1821, col: 15, offset: 67257},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1821, col: 15, offset: 67257},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1821, col: 15, offset: 67257},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1821, col: 26, offset: 67268},
								expr: &ruleRefExpr{
									pos:  position{line: 1821, col: 27, offset: 67269},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1822, col: 5, offset: 67287},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1829, col: 5, offset: 67492},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1829, col: 30, offset: 67517},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1829, col: 39, offset: 67526},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1829, col: 61, offset: 67548},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1833, col: 1, offset: 67652},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1833, col: 25, offset: 67676},
				expr: &actionExpr{
					pos: position{line: 1833, col: 26, offset: 67677},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1833, col: 26, offset: 67677},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1833, col: 26, offset: 67677},
								expr: &ruleRefExpr{
									pos:  position{line: 1833, col: 27, offset: 67678},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1833, col: 50, offset: 67701},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1833, col: 56, offset: 67707},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1840, col: 1, offset: 67945},
			expr: &actionExpr{
				pos: position{line: 1840, col: 21, offset: 67965},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1840, col: 21, offset: 67965},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1840, col: 21, offset: 67965},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1840, col: 32, offset: 67976},
								expr: &ruleRefExpr{
									pos:  position{line: 1840, col: 33, offset: 67977},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1840, col: 46, offset: 67990},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1840, col: 77, offset: 68021},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1840, col: 86, offset: 68030},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1840, col: 114, offset: 68058},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1844, col: 1, offset: 68166},
			expr: &seqExpr{
				pos: position{line: 1844, col: 30, offset: 68195},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1844, col: 30, offset: 68195},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1844, col: 37, offset: 68202},
						expr: &ruleRefExpr{
							pos:  position{line: 1844, col: 37, offset: 68202},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1844, col: 44, offset: 68209},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1846, col: 1, offset: 68214},
			expr: &seqExpr{
				pos: position{line: 1846, col: 35, offset: 68248},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1846, col: 35, offset: 68248},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1846, col: 42, offset: 68255},
						expr: &ruleRefExpr{
							pos:  position{line: 1846, col: 42, offset: 68255},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1846, col: 49, offset: 68262},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1848, col: 1, offset: 68267},
			expr: &choiceExpr{
				pos: position{line: 1848, col: 33, offset: 68299},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1848, col: 34, offset: 68300},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1848, col: 34, offset: 68300},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1848, col: 41, offset: 68307},
								expr: &ruleRefExpr{
									pos:  position{line: 1848, col: 41, offset: 68307},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1848, col: 48, offset: 68314},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1848, col: 55, offset: 68321},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1850, col: 1, offset: 68326},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1850, col: 31, offset: 68356},
				expr: &actionExpr{
					pos: position{line: 1850, col: 32, offset: 68357},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1850, col: 32, offset: 68357},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1850, col: 32, offset: 68357},
								expr: &ruleRefExpr{
									pos:  position{line: 1850, col: 33, offset: 68358},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1850, col: 62, offset: 68387},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1850, col: 68, offset: 68393},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1857, col: 1, offset: 68627},
			expr: &seqExpr{
				pos: position{line: 1857, col: 26, offset: 68652},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1857, col: 26, offset: 68652},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1857, col: 33, offset: 68659},
						expr: &ruleRefExpr{
							pos:  position{line: 1857, col: 33, offset: 68659},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1857, col: 40, offset: 68666},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1859, col: 1, offset: 68671},
			expr: &seqExpr{
				pos: position{line: 1859, col: 31, offset: 68701},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1859, col: 31, offset: 68701},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1859, col: 38, offset: 68708},
						expr: &ruleRefExpr{
							pos:  position{line: 1859, col: 38, offset: 68708},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1859, col: 45, offset: 68715},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1861, col: 1, offset: 68720},
			expr: &choiceExpr{
				pos: position{line: 1861, col: 29, offset: 68748},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1861, col: 30, offset: 68749},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1861, col: 30, offset: 68749},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1861, col: 37, offset: 68756},
								expr: &ruleRefExpr{
									pos:  position{line: 1861, col: 37, offset: 68756},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1861, col: 44, offset: 68763},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1861, col: 51, offset: 68770},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1863, col: 1, offset: 68775},
			expr: &actionExpr{
				pos: position{line: 1863, col: 17, offset: 68791},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1863, col: 17, offset: 68791},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1863, col: 17, offset: 68791},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1863, col: 44, offset: 68818},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1863, col: 53, offset: 68827},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1863, col: 78, offset: 68852},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1867, col: 1, offset: 68945},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1867, col: 27, offset: 68971},
				expr: &actionExpr{
					pos: position{line: 1867, col: 28, offset: 68972},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1867, col: 28, offset: 68972},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1867, col: 28, offset: 68972},
								expr: &ruleRefExpr{
									pos:  position{line: 1867, col: 29, offset: 68973},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1867, col: 54, offset: 68998},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1867, col: 60, offset: 69004},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1871, col: 1, offset: 69042},
			expr: &actionExpr{
				pos: position{line: 1871, col: 22, offset: 69063},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1871, col: 22, offset: 69063},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1871, col: 22, offset: 69063},
							expr: &ruleRefExpr{
								pos:  position{line: 1871, col: 23, offset: 69064},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1871, col: 45, offset: 69086},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1871, col: 50, offset: 69091},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1871, col: 59, offset: 69100},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1871, col: 85, offset: 69126},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1875, col: 1, offset: 69191},
			expr: &actionExpr{
				pos: position{line: 1875, col: 29, offset: 69219},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1875, col: 29, offset: 69219},
					expr: &charClassMatcher{
						pos:        position{line: 1875, col: 29, offset: 69219},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1883, col: 1, offset: 69508},
			expr: &choiceExpr{
				pos: position{line: 1883, col: 17, offset: 69524},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1883, col: 17, offset: 69524},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1884, col: 19, offset: 69553},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1885, col: 19, offset: 69584},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1886, col: 19, offset: 69608},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1887, col: 19, offset: 69645},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1888, col: 19, offset: 69679},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1889, col: 19, offset: 69713},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1890, col: 19, offset: 69748},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1891, col: 19, offset: 69782},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1892, col: 19, offset: 69819},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1894, col: 1, offset: 69830},
			expr: &actionExpr{
				pos: position{line: 1894, col: 23, offset: 69852},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1894, col: 23, offset: 69852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1894, col: 23, offset: 69852},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1894, col: 32, offset: 69861},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1894, col: 37, offset: 69866},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1894, col: 37, offset: 69866},
									expr: &charClassMatcher{
										pos:        position{line: 1894, col: 37, offset: 69866},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1894, col: 76, offset: 69905},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1899, col: 1, offset: 70057},
			expr: &seqExpr{
				pos: position{line: 1900, col: 5, offset: 70087},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1900, col: 5, offset: 70087},
						expr: &choiceExpr{
							pos: position{line: 1900, col: 6, offset: 70088},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1900, col: 6, offset: 70088},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1901, col: 11, offset: 70117},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1902, col: 11, offset: 70178},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1903, col: 11, offset: 70207},
									expr: &ruleRefExpr{
										pos:  position{line: 1903, col: 11, offset: 70207},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1904, col: 11, offset: 70225},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1905, col: 11, offset: 70243},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1905, col: 21, offset: 70253},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1908, col: 1, offset: 70374},
			expr: &seqExpr{
				pos: position{line: 1909, col: 5, offset: 70403},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1909, col: 5, offset: 70403},
						expr: &choiceExpr{
							pos: position{line: 1909, col: 6, offset: 70404},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1909, col: 6, offset: 70404},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1910, col: 11, offset: 70465},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1911, col: 11, offset: 70492},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1912, col: 11, offset: 70521},
									expr: &ruleRefExpr{
										pos:  position{line: 1912, col: 11, offset: 70521},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 11, offset: 70538},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1914, col: 11, offset: 70556},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1914, col: 21, offset: 70566},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1917, col: 1, offset: 70620},
			expr: &seqExpr{
				pos: position{line: 1918, col: 5, offset: 70643},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1918, col: 5, offset: 70643},
						expr: &choiceExpr{
							pos: position{line: 1918, col: 6, offset: 70644},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1918, col: 6, offset: 70644},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1919, col: 11, offset: 70705},
									expr: &ruleRefExpr{
										pos:  position{line: 1919, col: 11, offset: 70705},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1920, col: 11, offset: 70723},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1921, col: 11, offset: 70745},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 11, offset: 70768},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1923, col: 11, offset: 70797},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1924, col: 11, offset: 70815},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1924, col: 21, offset: 70825},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1927, col: 1, offset: 70883},
			expr: &seqExpr{
				pos: position{line: 1928, col: 5, offset: 70905},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1928, col: 5, offset: 70905},
						expr: &choiceExpr{
							pos: position{line: 1928, col: 6, offset: 70906},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1928, col: 6, offset: 70906},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1929, col: 11, offset: 70967},
									expr: &ruleRefExpr{
										pos:  position{line: 1929, col: 11, offset: 70967},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1930, col: 11, offset: 70985},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1931, col: 11, offset: 71017},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1932, col: 11, offset: 71046},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1933, col: 11, offset: 71064},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1933, col: 21, offset: 71074},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1936, col: 1, offset: 71128},
			expr: &seqExpr{
				pos: position{line: 1937, col: 5, offset: 71152},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1937, col: 5, offset: 71152},
						expr: &choiceExpr{
							pos: position{line: 1937, col: 6, offset: 71153},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1937, col: 6, offset: 71153},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1938, col: 11, offset: 71214},
									expr: &ruleRefExpr{
										pos:  position{line: 1938, col: 11, offset: 71214},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1939, col: 11, offset: 71232},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1940, col: 11, offset: 71255},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1941, col: 11, offset: 71284},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1942, col: 11, offset: 71302},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1942, col: 21, offset: 71312},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1945, col: 1, offset: 71392},
			expr: &actionExpr{
				pos: position{line: 1945, col: 27, offset: 71418},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1945, col: 27, offset: 71418},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1945, col: 27, offset: 71418},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1945, col: 33, offset: 71424},
								expr: &ruleRefExpr{
									pos:  position{line: 1945, col: 34, offset: 71425},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1945, col: 54, offset: 71445},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1949, col: 1, offset: 71512},
			expr: &actionExpr{
				pos: position{line: 1950, col: 5, offset: 71538},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1950, col: 5, offset: 71538},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1950, col: 5, offset: 71538},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1950, col: 14, offset: 71547},
								expr: &choiceExpr{
									pos: position{line: 1950, col: 15, offset: 71548},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1950, col: 15, offset: 71548},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1951, col: 11, offset: 71609},
											expr: &ruleRefExpr{
												pos:  position{line: 1951, col: 11, offset: 71609},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1952, col: 11, offset: 71627},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1953, col: 11, offset: 71650},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1954, col: 11, offset: 71679},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1954, col: 21, offset: 71689},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1958, col: 1, offset: 71760},
			expr: &actionExpr{
				pos: position{line: 1958, col: 29, offset: 71788},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1958, col: 29, offset: 71788},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1958, col: 29, offset: 71788},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1958, col: 35, offset: 71794},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1958, col: 43, offset: 71802},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1958, col: 44, offset: 71803},
									expr: &charClassMatcher{
										pos:        position{line: 1958, col: 44, offset: 71803},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1960, col: 8, offset: 71853},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1965, col: 1, offset: 71940},
			expr: &seqExpr{
				pos: position{line: 1966, col: 5, offset: 71964},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1966, col: 5, offset: 71964},
						expr: &choiceExpr{
							pos: position{line: 1966, col: 6, offset: 71965},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1966, col: 6, offset: 71965},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1967, col: 11, offset: 72026},
									expr: &ruleRefExpr{
										pos:  position{line: 1967, col: 11, offset: 72026},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1968, col: 11, offset: 72044},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1969, col: 11, offset: 72062},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1970, col: 11, offset: 72091},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1971, col: 11, offset: 72109},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1971, col: 21, offset: 72119},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1975, col: 1, offset: 72267},
			expr: &seqExpr{
				pos: position{line: 1975, col: 24, offset: 72290},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1975, col: 24, offset: 72290},
						expr: &choiceExpr{
							pos: position{line: 1976, col: 5, offset: 72296},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1976, col: 5, offset: 72296},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1977, col: 7, offset: 72353},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1978, col: 7, offset: 72378},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1979, col: 7, offset: 72421},
									expr: &ruleRefExpr{
										pos:  position{line: 1979, col: 7, offset: 72421},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1980, col: 7, offset: 72435},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1981, col: 7, offset: 72449},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1981, col: 17, offset: 72459},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1984, col: 1, offset: 72516},
			expr: &seqExpr{
				pos: position{line: 1985, col: 5, offset: 72536},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1985, col: 5, offset: 72536},
						expr: &choiceExpr{
							pos: position{line: 1985, col: 6, offset: 72537},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1985, col: 6, offset: 72537},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1986, col: 11, offset: 72598},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1987, col: 11, offset: 72627},
									expr: &ruleRefExpr{
										pos:  position{line: 1987, col: 11, offset: 72627},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1988, col: 11, offset: 72644},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1989, col: 11, offset: 72662},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1990, col: 11, offset: 72680},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1990, col: 21, offset: 72690},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1993, col: 1, offset: 72742},
			expr: &seqExpr{
				pos: position{line: 1993, col: 13, offset: 72754},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1993, col: 13, offset: 72754},
						expr: &choiceExpr{
							pos: position{line: 1994, col: 5, offset: 72760},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1994, col: 5, offset: 72760},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1995, col: 8, offset: 72787},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1995, col: 8, offset: 72787},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1995, col: 8, offset: 72787},
												expr: &ruleRefExpr{
													pos:  position{line: 1995, col: 9, offset: 72788},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1995, col: 13, offset: 72792},
												expr: &charClassMatcher{
													pos:        position{line: 1995, col: 13, offset: 72792},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1995, col: 22, offset: 72801},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1997, col: 10, offset: 72906},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 2002, col: 1, offset: 73099},
			expr: &actionExpr{
				pos: position{line: 2002, col: 10, offset: 73108},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 2002, col: 10, offset: 73108},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2002, col: 10, offset: 73108},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 2002, col: 16, offset: 73114},
								expr: &zeroOrMoreExpr{
									pos: position{line: 2002, col: 17, offset: 73115},
									expr: &ruleRefExpr{
										pos:  position{line: 2002, col: 17, offset: 73115},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2002, col: 31, offset: 73129},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2003, col: 5, offset: 73148},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 2003, col: 12, offset: 73155},
								expr: &ruleRefExpr{
									pos:  position{line: 2003, col: 13, offset: 73156},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2004, col: 5, offset: 73178},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2004, col: 11, offset: 73184},
								expr: &ruleRefExpr{
									pos:  position{line: 2004, col: 12, offset: 73185},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2005, col: 6, offset: 73202},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2005, col: 6, offset: 73202},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 2005, col: 23, offset: 73219},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 2009, col: 1, offset: 73329},
			expr: &seqExpr{
				pos: position{line: 2009, col: 23, offset: 73351},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2009, col: 23, offset: 73351},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2009, col: 27, offset: 73355},
						expr: &ruleRefExpr{
							pos:  position{line: 2009, col: 27, offset: 73355},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 2011, col: 1, offset: 73363},
			expr: &seqExpr{
				pos: position{line: 2011, col: 19, offset: 73381},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2011, col: 19, offset: 73381},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2011, col: 26, offset: 73388},
						expr: &ruleRefExpr{
							pos:  position{line: 2011, col: 26, offset: 73388},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2011, col: 33, offset: 73395},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 2014, col: 1, offset: 73463},
			expr: &actionExpr{
				pos: position{line: 2014, col: 20, offset: 73482},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 2014, col: 20, offset: 73482},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2014, col: 20, offset: 73482},
							expr: &ruleRefExpr{
								pos:  position{line: 2014, col: 21, offset: 73483},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2014, col: 36, offset: 73498},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2014, col: 42, offset: 73504},
								expr: &ruleRefExpr{
									pos:  position{line: 2014, col: 43, offset: 73505},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2014, col: 55, offset: 73517},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 2014, col: 59, offset: 73521},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 2018, col: 1, offset: 73589},
			expr: &actionExpr{
				pos: position{line: 2018, col: 14, offset: 73602},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 2018, col: 14, offset: 73602},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2018, col: 14, offset: 73602},
							expr: &ruleRefExpr{
								pos:  position{line: 2018, col: 15, offset: 73603},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2018, col: 30, offset: 73618},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2018, col: 36, offset: 73624},
								expr: &ruleRefExpr{
									pos:  position{line: 2018, col: 37, offset: 73625},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2018, col: 49, offset: 73637},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2018, col: 53, offset: 73641},
							expr: &ruleRefExpr{
								pos:  position{line: 2018, col: 53, offset: 73641},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2022, col: 1, offset: 73710},
			expr: &actionExpr{
				pos: position{line: 2022, col: 14, offset: 73723},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2022, col: 14, offset: 73723},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2022, col: 14, offset: 73723},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 2022, col: 33, offset: 73742},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2022, col: 42, offset: 73751},
								expr: &seqExpr{
									pos: position{line: 2022, col: 43, offset: 73752},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2022, col: 43, offset: 73752},
											expr: &ruleRefExpr{
												pos:  position{line: 2022, col: 44, offset: 73753},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 2022, col: 63, offset: 73772},
											expr: &ruleRefExpr{
												pos:  position{line: 2022, col: 64, offset: 73773},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2022, col: 68, offset: 73777},
											expr: &ruleRefExpr{
												pos:  position{line: 2022, col: 68, offset: 73777},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2022, col: 75, offset: 73784},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2022, col: 89, offset: 73798},
											expr: &ruleRefExpr{
												pos:  position{line: 2022, col: 89, offset: 73798},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2029, col: 1, offset: 74124},
			expr: &choiceExpr{
				pos: position{line: 2029, col: 17, offset: 74140},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2029, col: 17, offset: 74140},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2029, col: 49, offset: 74172},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2029, col: 78, offset: 74201},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2031, col: 1, offset: 74237},
			expr: &litMatcher{
				pos:        position{line: 2031, col: 26, offset: 74262},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2034, col: 1, offset: 74334},
			expr: &actionExpr{
				pos: position{line: 2034, col: 31, offset: 74364},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2034, col: 31, offset: 74364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2034, col: 31, offset: 74364},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2034, col: 42, offset: 74375},
								expr: &ruleRefExpr{
									pos:  position{line: 2034, col: 43, offset: 74376},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2034, col: 56, offset: 74389},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2034, col: 63, offset: 74396},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2039, col: 1, offset: 74626},
			expr: &actionExpr{
				pos: position{line: 2040, col: 5, offset: 74666},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2040, col: 5, offset: 74666},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2040, col: 5, offset: 74666},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 2040, col: 16, offset: 74677},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2041, col: 5, offset: 74713},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2041, col: 16, offset: 74724},
								expr: &ruleRefExpr{
									pos:  position{line: 2041, col: 17, offset: 74725},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 2045, col: 1, offset: 74834},
			expr: &actionExpr{
				pos: position{line: 2045, col: 35, offset: 74868},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 2045, col: 35, offset: 74868},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2045, col: 35, offset: 74868},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2045, col: 41, offset: 74874},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 2045, col: 41, offset: 74874},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2045, col: 41, offset: 74874},
											expr: &ruleRefExpr{
												pos:  position{line: 2045, col: 41, offset: 74874},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2045, col: 48, offset: 74881},
											expr: &charClassMatcher{
												pos:        position{line: 2045, col: 48, offset: 74881},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2047, col: 8, offset: 74947},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2052, col: 1, offset: 75087},
			expr: &actionExpr{
				pos: position{line: 2052, col: 39, offset: 75125},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2052, col: 39, offset: 75125},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2052, col: 39, offset: 75125},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2052, col: 50, offset: 75136},
								expr: &ruleRefExpr{
									pos:  position{line: 2052, col: 51, offset: 75137},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2053, col: 9, offset: 75158},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2053, col: 31, offset: 75180},
							expr: &ruleRefExpr{
								pos:  position{line: 2053, col: 31, offset: 75180},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2053, col: 38, offset: 75187},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2053, col: 46, offset: 75195},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2053, col: 53, offset: 75202},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2053, col: 95, offset: 75244},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2053, col: 96, offset: 75245},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2053, col: 96, offset: 75245},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2053, col: 118, offset: 75267},
											expr: &ruleRefExpr{
												pos:  position{line: 2053, col: 118, offset: 75267},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2053, col: 125, offset: 75274},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2053, col: 132, offset: 75281},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2058, col: 1, offset: 75440},
			expr: &actionExpr{
				pos: position{line: 2058, col: 44, offset: 75483},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2058, col: 44, offset: 75483},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2058, col: 50, offset: 75489},
						expr: &ruleRefExpr{
							pos:  position{line: 2058, col: 51, offset: 75490},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2062, col: 1, offset: 75574},
			expr: &actionExpr{
				pos: position{line: 2063, col: 5, offset: 75629},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2063, col: 5, offset: 75629},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2063, col: 5, offset: 75629},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2063, col: 11, offset: 75635},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2063, col: 11, offset: 75635},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2063, col: 11, offset: 75635},
											expr: &ruleRefExpr{
												pos:  position{line: 2063, col: 12, offset: 75636},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2063, col: 34, offset: 75658},
											expr: &charClassMatcher{
												pos:        position{line: 2063, col: 34, offset: 75658},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2065, col: 8, offset: 75724},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2070, col: 1, offset: 75850},
			expr: &actionExpr{
				pos: position{line: 2071, col: 5, offset: 75888},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2071, col: 5, offset: 75888},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2071, col: 5, offset: 75888},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2071, col: 16, offset: 75899},
								expr: &ruleRefExpr{
									pos:  position{line: 2071, col: 17, offset: 75900},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2072, col: 5, offset: 75917},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2079, col: 5, offset: 76124},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2079, col: 11, offset: 76130},
								expr: &ruleRefExpr{
									pos:  position{line: 2079, col: 12, offset: 76131},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2083, col: 1, offset: 76268},
			expr: &actionExpr{
				pos: position{line: 2083, col: 16, offset: 76283},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2083, col: 16, offset: 76283},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2087, col: 1, offset: 76329},
			expr: &actionExpr{
				pos: position{line: 2087, col: 25, offset: 76353},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2087, col: 25, offset: 76353},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2087, col: 25, offset: 76353},
							expr: &ruleRefExpr{
								pos:  position{line: 2087, col: 26, offset: 76354},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2087, col: 36, offset: 76364},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2087, col: 45, offset: 76373},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2087, col: 45, offset: 76373},
									expr: &charClassMatcher{
										pos:        position{line: 2087, col: 45, offset: 76373},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2089, col: 4, offset: 76431},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2096, col: 1, offset: 76608},
			expr: &actionExpr{
				pos: position{line: 2096, col: 14, offset: 76621},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2096, col: 14, offset: 76621},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2096, col: 14, offset: 76621},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2096, col: 19, offset: 76626},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2096, col: 25, offset: 76632},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2096, col: 43, offset: 76650},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2100, col: 1, offset: 76715},
			expr: &actionExpr{
				pos: position{line: 2100, col: 21, offset: 76735},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2100, col: 21, offset: 76735},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2100, col: 30, offset: 76744},
						expr: &choiceExpr{
							pos: position{line: 2100, col: 31, offset: 76745},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2100, col: 31, offset: 76745},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2100, col: 38, offset: 76752},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2100, col: 53, offset: 76767},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2100, col: 66, offset: 76780},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2100, col: 74, offset: 76788},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2100, col: 93, offset: 76807},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2100, col: 114, offset: 76828},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2100, col: 115, offset: 76829},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2100, col: 115, offset: 76829},
												expr: &litMatcher{
													pos:        position{line: 2100, col: 116, offset: 76830},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2100, col: 121, offset: 76835,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2106, col: 1, offset: 76941},
			expr: &actionExpr{
				pos: position{line: 2106, col: 23, offset: 76963},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2106, col: 23, offset: 76963},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2106, col: 23, offset: 76963},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2106, col: 29, offset: 76969},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2106, col: 36, offset: 76976},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2107, col: 5, offset: 77008},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2107, col: 11, offset: 77014},
								expr: &actionExpr{
									pos: position{line: 2107, col: 12, offset: 77015},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2107, col: 12, offset: 77015},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2107, col: 12, offset: 77015},
												expr: &ruleRefExpr{
													pos:  position{line: 2107, col: 12, offset: 77015},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2107, col: 19, offset: 77022},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2107, col: 23, offset: 77026},
												expr: &ruleRefExpr{
													pos:  position{line: 2107, col: 23, offset: 77026},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2107, col: 30, offset: 77033},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2107, col: 39, offset: 77042},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2108, col: 5, offset: 77100},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2108, col: 11, offset: 77106},
								expr: &actionExpr{
									pos: position{line: 2108, col: 12, offset: 77107},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2108, col: 12, offset: 77107},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2108, col: 12, offset: 77107},
												expr: &ruleRefExpr{
													pos:  position{line: 2108, col: 12, offset: 77107},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2108, col: 19, offset: 77114},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2108, col: 23, offset: 77118},
												expr: &ruleRefExpr{
													pos:  position{line: 2108, col: 23, offset: 77118},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2108, col: 30, offset: 77125},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2108, col: 39, offset: 77134},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2109, col: 5, offset: 77192},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2113, col: 1, offset: 77271},
			expr: &actionExpr{
				pos: position{line: 2113, col: 30, offset: 77300},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2113, col: 30, offset: 77300},
					expr: &choiceExpr{
						pos: position{line: 2113, col: 31, offset: 77301},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2113, col: 31, offset: 77301},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2113, col: 42, offset: 77312},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2120, col: 1, offset: 77461},
			expr: &actionExpr{
				pos: position{line: 2120, col: 14, offset: 77474},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2120, col: 14, offset: 77474},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2120, col: 14, offset: 77474},
							expr: &ruleRefExpr{
								pos:  position{line: 2120, col: 15, offset: 77475},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2120, col: 19, offset: 77479},
							expr: &ruleRefExpr{
								pos:  position{line: 2120, col: 19, offset: 77479},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2120, col: 26, offset: 77486},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2128, col: 1, offset: 77631},
			expr: &choiceExpr{
				pos: position{line: 2128, col: 11, offset: 77641},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2128, col: 11, offset: 77641},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2128, col: 24, offset: 77654},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2128, col: 36, offset: 77666},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2128, col: 48, offset: 77678},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2128, col: 61, offset: 77691},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2128, col: 72, offset: 77702},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2130, col: 1, offset: 77721},
			expr: &actionExpr{
				pos: position{line: 2130, col: 15, offset: 77735},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2130, col: 15, offset: 77735},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2133, col: 1, offset: 77788},
			expr: &actionExpr{
				pos: position{line: 2133, col: 14, offset: 77801},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2133, col: 14, offset: 77801},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2136, col: 1, offset: 77855},
			expr: &actionExpr{
				pos: position{line: 2136, col: 14, offset: 77868},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2136, col: 14, offset: 77868},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2139, col: 1, offset: 77923},
			expr: &actionExpr{
				pos: position{line: 2139, col: 15, offset: 77937},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2139, col: 15, offset: 77937},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2142, col: 1, offset: 77991},
			expr: &actionExpr{
				pos: position{line: 2142, col: 13, offset: 78003},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2142, col: 13, offset: 78003},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2150, col: 1, offset: 78280},
			expr: &actionExpr{
				pos: position{line: 2150, col: 22, offset: 78301},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2150, col: 22, offset: 78301},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2150, col: 22, offset: 78301},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2150, col: 31, offset: 78310},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2150, col: 35, offset: 78314},
							expr: &charClassMatcher{
								pos:        position{line: 2150, col: 36, offset: 78315},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2159, col: 1, offset: 78677},
			expr: &choiceExpr{
				pos: position{line: 2159, col: 21, offset: 78697},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2159, col: 21, offset: 78697},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2159, col: 21, offset: 78697},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2162, col: 9, offset: 78860},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2162, col: 10, offset: 78861},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2162, col: 10, offset: 78861},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2162, col: 16, offset: 78867},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2162, col: 22, offset: 78873},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2169, col: 1, offset: 79051},
			expr: &charClassMatcher{
				pos:        position{line: 2169, col: 13, offset: 79063},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2171, col: 1, offset: 79073},
			expr: &choiceExpr{
				pos: position{line: 2171, col: 16, offset: 79088},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2171, col: 16, offset: 79088},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2171, col: 22, offset: 79094},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2171, col: 28, offset: 79100},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2171, col: 34, offset: 79106},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2171, col: 40, offset: 79112},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2171, col: 46, offset: 79118},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2173, col: 1, offset: 79124},
			expr: &actionExpr{
				pos: position{line: 2173, col: 14, offset: 79137},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2173, col: 14, offset: 79137},
					expr: &charClassMatcher{
						pos:        position{line: 2173, col: 14, offset: 79137},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2177, col: 1, offset: 79183},
			expr: &choiceExpr{
				pos: position{line: 2181, col: 5, offset: 79510},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2181, col: 5, offset: 79510},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2181, col: 5, offset: 79510},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2181, col: 5, offset: 79510},
									expr: &charClassMatcher{
										pos:        position{line: 2181, col: 5, offset: 79510},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2181, col: 15, offset: 79520},
									expr: &choiceExpr{
										pos: position{line: 2181, col: 17, offset: 79522},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2181, col: 17, offset: 79522},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2181, col: 30, offset: 79535},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2183, col: 9, offset: 79605},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2183, col: 9, offset: 79605},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2183, col: 9, offset: 79605},
									expr: &charClassMatcher{
										pos:        position{line: 2183, col: 9, offset: 79605},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2183, col: 19, offset: 79615},
									expr: &seqExpr{
										pos: position{line: 2183, col: 20, offset: 79616},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2183, col: 20, offset: 79616},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2183, col: 27, offset: 79623},
												expr: &charClassMatcher{
													pos:        position{line: 2183, col: 27, offset: 79623},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2187, col: 1, offset: 79699},
			expr: &choiceExpr{
				pos: position{line: 2188, col: 5, offset: 79780},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2188, col: 5, offset: 79780},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2188, col: 5, offset: 79780},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2188, col: 5, offset: 79780},
									expr: &charClassMatcher{
										pos:        position{line: 2188, col: 5, offset: 79780},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2188, col: 19, offset: 79794},
									expr: &choiceExpr{
										pos: position{line: 2188, col: 21, offset: 79796},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2188, col: 21, offset: 79796},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2188, col: 31, offset: 79806},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2190, col: 9, offset: 79875},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2193, col: 1, offset: 79975},
			expr: &actionExpr{
				pos: position{line: 2193, col: 12, offset: 79986},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2193, col: 12, offset: 79986},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2197, col: 1, offset: 80051},
			expr: &actionExpr{
				pos: position{line: 2197, col: 17, offset: 80067},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2197, col: 17, offset: 80067},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2197, col: 22, offset: 80072},
						expr: &choiceExpr{
							pos: position{line: 2197, col: 23, offset: 80073},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2197, col: 23, offset: 80073},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2197, col: 34, offset: 80084},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2201, col: 1, offset: 80165},
			expr: &actionExpr{
				pos: position{line: 2201, col: 25, offset: 80189},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2201, col: 25, offset: 80189},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2201, col: 30, offset: 80194},
						expr: &charClassMatcher{
							pos:        position{line: 2201, col: 31, offset: 80195},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2205, col: 1, offset: 80267},
			expr: &actionExpr{
				pos: position{line: 2205, col: 13, offset: 80279},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2205, col: 13, offset: 80279},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2205, col: 13, offset: 80279},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2205, col: 20, offset: 80286},
								expr: &ruleRefExpr{
									pos:  position{line: 2205, col: 21, offset: 80287},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2205, col: 34, offset: 80300},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2205, col: 39, offset: 80305},
								expr: &choiceExpr{
									pos: position{line: 2205, col: 40, offset: 80306},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2205, col: 40, offset: 80306},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2205, col: 52, offset: 80318},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2209, col: 1, offset: 80403},
			expr: &actionExpr{
				pos: position{line: 2209, col: 23, offset: 80425},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2209, col: 23, offset: 80425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2209, col: 23, offset: 80425},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2209, col: 31, offset: 80433},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2209, col: 43, offset: 80445},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2209, col: 48, offset: 80450},
								expr: &choiceExpr{
									pos: position{line: 2209, col: 49, offset: 80451},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2209, col: 49, offset: 80451},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2209, col: 60, offset: 80462},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2213, col: 1, offset: 80547},
			expr: &oneOrMoreExpr{
				pos: position{line: 2213, col: 13, offset: 80559},
				expr: &charClassMatcher{
					pos:        position{line: 2213, col: 14, offset: 80560},
					val:        "[^\\r\\n[\\]\\uFFFD ]",
					chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2215, col: 1, offset: 80628},
			expr: &actionExpr{
				pos: position{line: 2215, col: 21, offset: 80648},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2215, col: 21, offset: 80648},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2215, col: 21, offset: 80648},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2215, col: 29, offset: 80656},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2215, col: 41, offset: 80668},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2215, col: 47, offset: 80674},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2220, col: 1, offset: 80922},
			expr: &oneOrMoreExpr{
				pos: position{line: 2220, col: 22, offset: 80943},
				expr: &charClassMatcher{
					pos:        position{line: 2220, col: 23, offset: 80944},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2222, col: 1, offset: 81076},
			expr: &actionExpr{
				pos: position{line: 2222, col: 9, offset: 81084},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2222, col: 9, offset: 81084},
					expr: &charClassMatcher{
						pos:        position{line: 2222, col: 9, offset: 81084},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2226, col: 1, offset: 81132},
			expr: &choiceExpr{
				pos: position{line: 2226, col: 15, offset: 81146},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2226, col: 15, offset: 81146},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2226, col: 27, offset: 81158},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2226, col: 40, offset: 81171},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2226, col: 51, offset: 81182},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2226, col: 62, offset: 81193},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2228, col: 1, offset: 81204},
			expr: &actionExpr{
				pos: position{line: 2228, col: 7, offset: 81210},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2228, col: 7, offset: 81210},
					expr: &charClassMatcher{
						pos:        position{line: 2228, col: 7, offset: 81210},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2232, col: 1, offset: 81335},
			expr: &actionExpr{
				pos: position{line: 2232, col: 10, offset: 81344},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2232, col: 10, offset: 81344},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2236, col: 1, offset: 81386},
			expr: &actionExpr{
				pos: position{line: 2236, col: 11, offset: 81396},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2236, col: 11, offset: 81396},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2236, col: 11, offset: 81396},
							expr: &litMatcher{
								pos:        position{line: 2236, col: 11, offset: 81396},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2236, col: 16, offset: 81401},
							expr: &ruleRefExpr{
								pos:  position{line: 2236, col: 16, offset: 81401},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2240, col: 1, offset: 81453},
			expr: &choiceExpr{
				pos: position{line: 2240, col: 10, offset: 81462},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2240, col: 10, offset: 81462},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2240, col: 16, offset: 81468},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2240, col: 16, offset: 81468},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2244, col: 1, offset: 81509},
			expr: &choiceExpr{
				pos: position{line: 2244, col: 12, offset: 81520},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2244, col: 12, offset: 81520},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2244, col: 21, offset: 81529},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2244, col: 28, offset: 81536},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2246, col: 1, offset: 81542},
			expr: &notExpr{
				pos: position{line: 2246, col: 8, offset: 81549},
				expr: &anyMatcher{
					line: 2246, col: 9, offset: 81550,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2248, col: 1, offset: 81553},
			expr: &choiceExpr{
				pos: position{line: 2248, col: 8, offset: 81560},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2248, col: 8, offset: 81560},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2248, col: 18, offset: 81570},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value)
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueSingleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted7()
}

func (c *current) onAttrValueSingleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1(stack["elements"])
}

func (c *current) onAttrValueDoubleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueDoubleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted7()
}

func (c *current) onAttrValueDoubleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1(stack["elements"])
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value)
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value)
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	if attributes == nil {
		return true, nil
	}
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		// if AttrKind is missing, then accept as a QuoteBlock
		return !ok || kind == types.Quote, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
